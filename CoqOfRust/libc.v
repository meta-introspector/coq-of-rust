(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Module macros.
  
End macros.

Module fixed_width_ints.
  Ltac int8_t := exact i8.t.
  
  Ltac int16_t := exact i16.t.
  
  Ltac int32_t := exact i32.t.
  
  Ltac int64_t := exact i64.t.
  
  Ltac uint8_t := exact u8.t.
  
  Ltac uint16_t := exact u16.t.
  
  Ltac uint32_t := exact u32.t.
  
  Ltac uint64_t := exact u64.t.
End fixed_width_ints.

Module unix.
  Module linux_like.
    Module linux.
      Module gnu.
        Module b64.

          Ltac time_t := exact u32.t.
                     
          Module x86_64.
            
            Ltac suseconds_t := exact i64.t.
            Ltac c_char := exact u8.t.
            
          End x86_64.
        End b64.
      End gnu.
    End linux.
  End linux_like.

                                                   
  Ltac c_schar := exact i8.t.
  
  Ltac c_uchar := exact u8.t.
  
  Ltac c_short := exact i16.t.
  
  Ltac c_ushort := exact u16.t.
  
  Ltac c_int := exact i32.t.
  
  Ltac c_uint := exact u32.t.
  
  Ltac c_float := exact f32.t.
  
  Ltac c_double := exact f64.t.
  
  Ltac c_longlong := exact i64.t.
  
  Ltac c_ulonglong := exact u64.t.
  
  Ltac intmax_t := exact i64.t.
  
  Ltac uintmax_t := exact u64.t.
  
  Ltac size_t := exact usize.t.
  
  Ltac ptrdiff_t := exact isize.t.
  
  Ltac intptr_t := exact isize.t.
  
  Ltac uintptr_t := exact usize.t.
  
  Ltac ssize_t := exact isize.t.
  
  Ltac pid_t := exact i32.t.
  
  Ltac in_addr_t := exact u32.t.
  
  Ltac in_port_t := exact u16.t.
  
  Ltac sighandler_t := exact ltac:(libc.unix.size_t).
  
  Ltac cc_t := exact ltac:(libc.unix.c_uchar).
  
  Ltac uid_t := exact u32.t.
  
  Ltac gid_t := exact u32.t.
  
  Module DIR.
    Inductive t : Set :=
    .
  End DIR.
  
  Ltac locale_t := exact (mut_ref i64.t).
  (*i64.t.*)
  
  Module  group.
  Section group.
    Record t : Set := {
      gr_name : mut_ref ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.c_char);
      gr_passwd :
        mut_ref ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.c_char);
      gr_gid : ltac:(libc.unix.gid_t);
      gr_mem :
        mut_ref
          (mut_ref ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.c_char));
    }.
    
    Definition Get_gr_name :=
      Ref.map
        (fun α => Some α.(gr_name))
        (fun β α => Some (α <| gr_name := β |>)).
    Definition Get_gr_passwd :=
      Ref.map
        (fun α => Some α.(gr_passwd))
        (fun β α => Some (α <| gr_passwd := β |>)).
    Definition Get_gr_gid :=
      Ref.map
        (fun α => Some α.(gr_gid))
        (fun β α => Some (α <| gr_gid := β |>)).
    Definition Get_gr_mem :=
      Ref.map
        (fun α => Some α.(gr_mem))
        (fun β α => Some (α <| gr_mem := β |>)).
  End group.
  End group.
  
  Module  Impl_core_marker_Copy_for_libc_unix_group_t.
  Section Impl_core_marker_Copy_for_libc_unix_group_t.
    Definition Self : Set := libc.unix.group.t.
    
    Global Instance ℐ : core.marker.Copy.Trait Self := {
    }.
  End Impl_core_marker_Copy_for_libc_unix_group_t.
  End Impl_core_marker_Copy_for_libc_unix_group_t.
  
  Module  Impl_core_clone_Clone_for_libc_unix_group_t.
  Section Impl_core_clone_Clone_for_libc_unix_group_t.
    Definition Self : Set := libc.unix.group.t.
    
    (*
                fn clone(&self) -> $i { *self }
    *)
    Definition clone (self : ref Self) : M libc.unix.group.t :=
      let* self := M.alloc self in
      let* α0 : ref libc.unix.group.t := M.read self in
      M.read (deref α0).
    
    Global Instance AssociatedFunction_clone :
      Notations.DoubleColon Self "clone" := {
      Notations.double_colon := clone;
    }.
    
    Global Instance ℐ : core.clone.Clone.Required.Trait Self := {
      core.clone.Clone.clone := clone;
      core.clone.Clone.clone_from := Datatypes.None;
    }.
  End Impl_core_clone_Clone_for_libc_unix_group_t.
  End Impl_core_clone_Clone_for_libc_unix_group_t.
  
  Module  utimbuf.
  Section utimbuf.
    Record t : Set := {
      actime : ltac:(libc.unix.linux_like.linux.gnu.b64.time_t);
      modtime : ltac:(libc.unix.linux_like.linux.gnu.b64.time_t);
    }.
    
    Definition Get_actime :=
      Ref.map
        (fun α => Some α.(actime))
        (fun β α => Some (α <| actime := β |>)).
    Definition Get_modtime :=
      Ref.map
        (fun α => Some α.(modtime))
        (fun β α => Some (α <| modtime := β |>)).
  End utimbuf.
  End utimbuf.
  
  Module  Impl_core_marker_Copy_for_libc_unix_utimbuf_t.
  Section Impl_core_marker_Copy_for_libc_unix_utimbuf_t.
    Definition Self : Set := libc.unix.utimbuf.t.
    
    Global Instance ℐ : core.marker.Copy.Trait Self := {
    }.
  End Impl_core_marker_Copy_for_libc_unix_utimbuf_t.
  End Impl_core_marker_Copy_for_libc_unix_utimbuf_t.
  
  Module  Impl_core_clone_Clone_for_libc_unix_utimbuf_t.
  Section Impl_core_clone_Clone_for_libc_unix_utimbuf_t.
    Definition Self : Set := libc.unix.utimbuf.t.
    
    (*
                fn clone(&self) -> $i { *self }
    *)
    Definition clone (self : ref Self) : M libc.unix.utimbuf.t :=
      let* self := M.alloc self in
      let* α0 : ref libc.unix.utimbuf.t := M.read self in
      M.read (deref α0).
    
    Global Instance AssociatedFunction_clone :
      Notations.DoubleColon Self "clone" := {
      Notations.double_colon := clone;
    }.
    
    Global Instance ℐ : core.clone.Clone.Required.Trait Self := {
      core.clone.Clone.clone := clone;
      core.clone.Clone.clone_from := Datatypes.None;
    }.
  End Impl_core_clone_Clone_for_libc_unix_utimbuf_t.
  End Impl_core_clone_Clone_for_libc_unix_utimbuf_t.
  
  Module  timeval.
  Section timeval.
    Record t : Set := {
      tv_sec : ltac:(libc.unix.linux_like.linux.gnu.b64.time_t);
      tv_usec : ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.suseconds_t);
    }.
    
    Definition Get_tv_sec :=
      Ref.map
        (fun α => Some α.(tv_sec))
        (fun β α => Some (α <| tv_sec := β |>)).
    Definition Get_tv_usec :=
      Ref.map
        (fun α => Some α.(tv_usec))
        (fun β α => Some (α <| tv_usec := β |>)).
  End timeval.
  End timeval.
  
  Module  Impl_core_marker_Copy_for_libc_unix_timeval_t.
  Section Impl_core_marker_Copy_for_libc_unix_timeval_t.
    Definition Self : Set := libc.unix.timeval.t.
    
    Global Instance ℐ : core.marker.Copy.Trait Self := {
    }.
  End Impl_core_marker_Copy_for_libc_unix_timeval_t.
  End Impl_core_marker_Copy_for_libc_unix_timeval_t.
  
  Module  Impl_core_clone_Clone_for_libc_unix_timeval_t.
  Section Impl_core_clone_Clone_for_libc_unix_timeval_t.
    Definition Self : Set := libc.unix.timeval.t.
    
    (*
                fn clone(&self) -> $i { *self }
    *)
    Definition clone (self : ref Self) : M libc.unix.timeval.t :=
      let* self := M.alloc self in
      let* α0 : ref libc.unix.timeval.t := M.read self in
      M.read (deref α0).
    
    Global Instance AssociatedFunction_clone :
      Notations.DoubleColon Self "clone" := {
      Notations.double_colon := clone;
    }.
    
    Global Instance ℐ : core.clone.Clone.Required.Trait Self := {
      core.clone.Clone.clone := clone;
      core.clone.Clone.clone_from := Datatypes.None;
    }.
  End Impl_core_clone_Clone_for_libc_unix_timeval_t.
  End Impl_core_clone_Clone_for_libc_unix_timeval_t.
  
  Module  timespec.
  Section timespec.
    Record t : Set := {
      tv_sec : ltac:(libc.unix.linux_like.linux.gnu.b64.time_t);
      tv_nsec : ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_long);
    }.
    
    Definition Get_tv_sec :=
      Ref.map
        (fun α => Some α.(tv_sec))
        (fun β α => Some (α <| tv_sec := β |>)).
    Definition Get_tv_nsec :=
      Ref.map
        (fun α => Some α.(tv_nsec))
        (fun β α => Some (α <| tv_nsec := β |>)).
  End timespec.
  End timespec.
  
  Module  Impl_core_marker_Copy_for_libc_unix_timespec_t.
  Section Impl_core_marker_Copy_for_libc_unix_timespec_t.
    Definition Self : Set := libc.unix.timespec.t.
    
    Global Instance ℐ : core.marker.Copy.Trait Self := {
    }.
  End Impl_core_marker_Copy_for_libc_unix_timespec_t.
  End Impl_core_marker_Copy_for_libc_unix_timespec_t.
  
  Module  Impl_core_clone_Clone_for_libc_unix_timespec_t.
  Section Impl_core_clone_Clone_for_libc_unix_timespec_t.
    Definition Self : Set := libc.unix.timespec.t.
    
    (*
                fn clone(&self) -> $i { *self }
    *)
    Definition clone (self : ref Self) : M libc.unix.timespec.t :=
      let* self := M.alloc self in
      let* α0 : ref libc.unix.timespec.t := M.read self in
      M.read (deref α0).
    
    Global Instance AssociatedFunction_clone :
      Notations.DoubleColon Self "clone" := {
      Notations.double_colon := clone;
    }.
    
    Global Instance ℐ : core.clone.Clone.Required.Trait Self := {
      core.clone.Clone.clone := clone;
      core.clone.Clone.clone_from := Datatypes.None;
    }.
  End Impl_core_clone_Clone_for_libc_unix_timespec_t.
  End Impl_core_clone_Clone_for_libc_unix_timespec_t.
  
  Module  rlimit.
  Section rlimit.
    Record t : Set := {
      rlim_cur : ltac:(libc.unix.linux_like.linux.gnu.b64.rlim_t);
      rlim_max : ltac:(libc.unix.linux_like.linux.gnu.b64.rlim_t);
    }.
    
    Definition Get_rlim_cur :=
      Ref.map
        (fun α => Some α.(rlim_cur))
        (fun β α => Some (α <| rlim_cur := β |>)).
    Definition Get_rlim_max :=
      Ref.map
        (fun α => Some α.(rlim_max))
        (fun β α => Some (α <| rlim_max := β |>)).
  End rlimit.
  End rlimit.
  
  Module  Impl_core_marker_Copy_for_libc_unix_rlimit_t.
  Section Impl_core_marker_Copy_for_libc_unix_rlimit_t.
    Definition Self : Set := libc.unix.rlimit.t.
    
    Global Instance ℐ : core.marker.Copy.Trait Self := {
    }.
  End Impl_core_marker_Copy_for_libc_unix_rlimit_t.
  End Impl_core_marker_Copy_for_libc_unix_rlimit_t.
  
  Module  Impl_core_clone_Clone_for_libc_unix_rlimit_t.
  Section Impl_core_clone_Clone_for_libc_unix_rlimit_t.
    Definition Self : Set := libc.unix.rlimit.t.
    
    (*
                fn clone(&self) -> $i { *self }
    *)
    Definition clone (self : ref Self) : M libc.unix.rlimit.t :=
      let* self := M.alloc self in
      let* α0 : ref libc.unix.rlimit.t := M.read self in
      M.read (deref α0).
    
    Global Instance AssociatedFunction_clone :
      Notations.DoubleColon Self "clone" := {
      Notations.double_colon := clone;
    }.
    
    Global Instance ℐ : core.clone.Clone.Required.Trait Self := {
      core.clone.Clone.clone := clone;
      core.clone.Clone.clone_from := Datatypes.None;
    }.
  End Impl_core_clone_Clone_for_libc_unix_rlimit_t.
  End Impl_core_clone_Clone_for_libc_unix_rlimit_t.
  
  Module  rusage.
  Section rusage.
    Record t : Set := {
      ru_utime : libc.unix.timeval.t;
      ru_stime : libc.unix.timeval.t;
      ru_maxrss :
        ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_long);
      ru_ixrss :
        ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_long);
      ru_idrss :
        ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_long);
      ru_isrss :
        ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_long);
      ru_minflt :
        ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_long);
      ru_majflt :
        ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_long);
      ru_nswap :
        ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_long);
      ru_inblock :
        ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_long);
      ru_oublock :
        ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_long);
      ru_msgsnd :
        ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_long);
      ru_msgrcv :
        ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_long);
      ru_nsignals :
        ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_long);
      ru_nvcsw :
        ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_long);
      ru_nivcsw :
        ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_long);
    }.
    
    Definition Get_ru_utime :=
      Ref.map
        (fun α => Some α.(ru_utime))
        (fun β α => Some (α <| ru_utime := β |>)).
    Definition Get_ru_stime :=
      Ref.map
        (fun α => Some α.(ru_stime))
        (fun β α => Some (α <| ru_stime := β |>)).
    Definition Get_ru_maxrss :=
      Ref.map
        (fun α => Some α.(ru_maxrss))
        (fun β α => Some (α <| ru_maxrss := β |>)).
    Definition Get_ru_ixrss :=
      Ref.map
        (fun α => Some α.(ru_ixrss))
        (fun β α => Some (α <| ru_ixrss := β |>)).
    Definition Get_ru_idrss :=
      Ref.map
        (fun α => Some α.(ru_idrss))
        (fun β α => Some (α <| ru_idrss := β |>)).
    Definition Get_ru_isrss :=
      Ref.map
        (fun α => Some α.(ru_isrss))
        (fun β α => Some (α <| ru_isrss := β |>)).
    Definition Get_ru_minflt :=
      Ref.map
        (fun α => Some α.(ru_minflt))
        (fun β α => Some (α <| ru_minflt := β |>)).
    Definition Get_ru_majflt :=
      Ref.map
        (fun α => Some α.(ru_majflt))
        (fun β α => Some (α <| ru_majflt := β |>)).
    Definition Get_ru_nswap :=
      Ref.map
        (fun α => Some α.(ru_nswap))
        (fun β α => Some (α <| ru_nswap := β |>)).
    Definition Get_ru_inblock :=
      Ref.map
        (fun α => Some α.(ru_inblock))
        (fun β α => Some (α <| ru_inblock := β |>)).
    Definition Get_ru_oublock :=
      Ref.map
        (fun α => Some α.(ru_oublock))
        (fun β α => Some (α <| ru_oublock := β |>)).
    Definition Get_ru_msgsnd :=
      Ref.map
        (fun α => Some α.(ru_msgsnd))
        (fun β α => Some (α <| ru_msgsnd := β |>)).
    Definition Get_ru_msgrcv :=
      Ref.map
        (fun α => Some α.(ru_msgrcv))
        (fun β α => Some (α <| ru_msgrcv := β |>)).
    Definition Get_ru_nsignals :=
      Ref.map
        (fun α => Some α.(ru_nsignals))
        (fun β α => Some (α <| ru_nsignals := β |>)).
    Definition Get_ru_nvcsw :=
      Ref.map
        (fun α => Some α.(ru_nvcsw))
        (fun β α => Some (α <| ru_nvcsw := β |>)).
    Definition Get_ru_nivcsw :=
      Ref.map
        (fun α => Some α.(ru_nivcsw))
        (fun β α => Some (α <| ru_nivcsw := β |>)).
  End rusage.
  End rusage.
  
  Module  Impl_core_marker_Copy_for_libc_unix_rusage_t.
  Section Impl_core_marker_Copy_for_libc_unix_rusage_t.
    Definition Self : Set := libc.unix.rusage.t.
    
    Global Instance ℐ : core.marker.Copy.Trait Self := {
    }.
  End Impl_core_marker_Copy_for_libc_unix_rusage_t.
  End Impl_core_marker_Copy_for_libc_unix_rusage_t.
  
  Module  Impl_core_clone_Clone_for_libc_unix_rusage_t.
  Section Impl_core_clone_Clone_for_libc_unix_rusage_t.
    Definition Self : Set := libc.unix.rusage.t.
    
    (*
                fn clone(&self) -> $i { *self }
    *)
    Definition clone (self : ref Self) : M libc.unix.rusage.t :=
      let* self := M.alloc self in
      let* α0 : ref libc.unix.rusage.t := M.read self in
      M.read (deref α0).
    
    Global Instance AssociatedFunction_clone :
      Notations.DoubleColon Self "clone" := {
      Notations.double_colon := clone;
    }.
    
    Global Instance ℐ : core.clone.Clone.Required.Trait Self := {
      core.clone.Clone.clone := clone;
      core.clone.Clone.clone_from := Datatypes.None;
    }.
  End Impl_core_clone_Clone_for_libc_unix_rusage_t.
  End Impl_core_clone_Clone_for_libc_unix_rusage_t.
  
  Module  ipv6_mreq.
  Section ipv6_mreq.
    Record t : Set := {
      ipv6mr_multiaddr : libc.unix.align.in6_addr.t;
      ipv6mr_interface : ltac:(libc.unix.c_uint);
    }.
    
    Definition Get_ipv6mr_multiaddr :=
      Ref.map
        (fun α => Some α.(ipv6mr_multiaddr))
        (fun β α => Some (α <| ipv6mr_multiaddr := β |>)).
    Definition Get_ipv6mr_interface :=
      Ref.map
        (fun α => Some α.(ipv6mr_interface))
        (fun β α => Some (α <| ipv6mr_interface := β |>)).
  End ipv6_mreq.
  End ipv6_mreq.
  
  Module  Impl_core_marker_Copy_for_libc_unix_ipv6_mreq_t.
  Section Impl_core_marker_Copy_for_libc_unix_ipv6_mreq_t.
    Definition Self : Set := libc.unix.ipv6_mreq.t.
    
    Global Instance ℐ : core.marker.Copy.Trait Self := {
    }.
  End Impl_core_marker_Copy_for_libc_unix_ipv6_mreq_t.
  End Impl_core_marker_Copy_for_libc_unix_ipv6_mreq_t.
  
  Module  Impl_core_clone_Clone_for_libc_unix_ipv6_mreq_t.
  Section Impl_core_clone_Clone_for_libc_unix_ipv6_mreq_t.
    Definition Self : Set := libc.unix.ipv6_mreq.t.
    
    (*
                fn clone(&self) -> $i { *self }
    *)
    Definition clone (self : ref Self) : M libc.unix.ipv6_mreq.t :=
      let* self := M.alloc self in
      let* α0 : ref libc.unix.ipv6_mreq.t := M.read self in
      M.read (deref α0).
    
    Global Instance AssociatedFunction_clone :
      Notations.DoubleColon Self "clone" := {
      Notations.double_colon := clone;
    }.
    
    Global Instance ℐ : core.clone.Clone.Required.Trait Self := {
      core.clone.Clone.clone := clone;
      core.clone.Clone.clone_from := Datatypes.None;
    }.
  End Impl_core_clone_Clone_for_libc_unix_ipv6_mreq_t.
  End Impl_core_clone_Clone_for_libc_unix_ipv6_mreq_t.
  
  Module  hostent.
  Section hostent.
    Record t : Set := {
      h_name : mut_ref ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.c_char);
      h_aliases :
        mut_ref
          (mut_ref ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.c_char));
      h_addrtype : ltac:(libc.unix.c_int);
      h_length : ltac:(libc.unix.c_int);
      h_addr_list :
        mut_ref
          (mut_ref ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.c_char));
    }.
    
    Definition Get_h_name :=
      Ref.map
        (fun α => Some α.(h_name))
        (fun β α => Some (α <| h_name := β |>)).
    Definition Get_h_aliases :=
      Ref.map
        (fun α => Some α.(h_aliases))
        (fun β α => Some (α <| h_aliases := β |>)).
    Definition Get_h_addrtype :=
      Ref.map
        (fun α => Some α.(h_addrtype))
        (fun β α => Some (α <| h_addrtype := β |>)).
    Definition Get_h_length :=
      Ref.map
        (fun α => Some α.(h_length))
        (fun β α => Some (α <| h_length := β |>)).
    Definition Get_h_addr_list :=
      Ref.map
        (fun α => Some α.(h_addr_list))
        (fun β α => Some (α <| h_addr_list := β |>)).
  End hostent.
  End hostent.
  
  Module  Impl_core_marker_Copy_for_libc_unix_hostent_t.
  Section Impl_core_marker_Copy_for_libc_unix_hostent_t.
    Definition Self : Set := libc.unix.hostent.t.
    
    Global Instance ℐ : core.marker.Copy.Trait Self := {
    }.
  End Impl_core_marker_Copy_for_libc_unix_hostent_t.
  End Impl_core_marker_Copy_for_libc_unix_hostent_t.
  
  Module  Impl_core_clone_Clone_for_libc_unix_hostent_t.
  Section Impl_core_clone_Clone_for_libc_unix_hostent_t.
    Definition Self : Set := libc.unix.hostent.t.
    
    (*
                fn clone(&self) -> $i { *self }
    *)
    Definition clone (self : ref Self) : M libc.unix.hostent.t :=
      let* self := M.alloc self in
      let* α0 : ref libc.unix.hostent.t := M.read self in
      M.read (deref α0).
    
    Global Instance AssociatedFunction_clone :
      Notations.DoubleColon Self "clone" := {
      Notations.double_colon := clone;
    }.
    
    Global Instance ℐ : core.clone.Clone.Required.Trait Self := {
      core.clone.Clone.clone := clone;
      core.clone.Clone.clone_from := Datatypes.None;
    }.
  End Impl_core_clone_Clone_for_libc_unix_hostent_t.
  End Impl_core_clone_Clone_for_libc_unix_hostent_t.
  
  Module  iovec.
  Section iovec.
    Record t : Set := {
      iov_base : mut_ref core.ffi.c_void.t;
      iov_len : ltac:(libc.unix.size_t);
    }.
    
    Definition Get_iov_base :=
      Ref.map
        (fun α => Some α.(iov_base))
        (fun β α => Some (α <| iov_base := β |>)).
    Definition Get_iov_len :=
      Ref.map
        (fun α => Some α.(iov_len))
        (fun β α => Some (α <| iov_len := β |>)).
  End iovec.
  End iovec.
  
  Module  Impl_core_marker_Copy_for_libc_unix_iovec_t.
  Section Impl_core_marker_Copy_for_libc_unix_iovec_t.
    Definition Self : Set := libc.unix.iovec.t.
    
    Global Instance ℐ : core.marker.Copy.Trait Self := {
    }.
  End Impl_core_marker_Copy_for_libc_unix_iovec_t.
  End Impl_core_marker_Copy_for_libc_unix_iovec_t.
  
  Module  Impl_core_clone_Clone_for_libc_unix_iovec_t.
  Section Impl_core_clone_Clone_for_libc_unix_iovec_t.
    Definition Self : Set := libc.unix.iovec.t.
    
    (*
                fn clone(&self) -> $i { *self }
    *)
    Definition clone (self : ref Self) : M libc.unix.iovec.t :=
      let* self := M.alloc self in
      let* α0 : ref libc.unix.iovec.t := M.read self in
      M.read (deref α0).
    
    Global Instance AssociatedFunction_clone :
      Notations.DoubleColon Self "clone" := {
      Notations.double_colon := clone;
    }.
    
    Global Instance ℐ : core.clone.Clone.Required.Trait Self := {
      core.clone.Clone.clone := clone;
      core.clone.Clone.clone_from := Datatypes.None;
    }.
  End Impl_core_clone_Clone_for_libc_unix_iovec_t.
  End Impl_core_clone_Clone_for_libc_unix_iovec_t.
  
  Module  pollfd.
  Section pollfd.
    Record t : Set := {
      fd : ltac:(libc.unix.c_int);
      events : ltac:(libc.unix.c_short);
      revents : ltac:(libc.unix.c_short);
    }.
    
    Definition Get_fd :=
      Ref.map (fun α => Some α.(fd)) (fun β α => Some (α <| fd := β |>)).
    Definition Get_events :=
      Ref.map
        (fun α => Some α.(events))
        (fun β α => Some (α <| events := β |>)).
    Definition Get_revents :=
      Ref.map
        (fun α => Some α.(revents))
        (fun β α => Some (α <| revents := β |>)).
  End pollfd.
  End pollfd.
  
  Module  Impl_core_marker_Copy_for_libc_unix_pollfd_t.
  Section Impl_core_marker_Copy_for_libc_unix_pollfd_t.
    Definition Self : Set := libc.unix.pollfd.t.
    
    Global Instance ℐ : core.marker.Copy.Trait Self := {
    }.
  End Impl_core_marker_Copy_for_libc_unix_pollfd_t.
  End Impl_core_marker_Copy_for_libc_unix_pollfd_t.
  
  Module  Impl_core_clone_Clone_for_libc_unix_pollfd_t.
  Section Impl_core_clone_Clone_for_libc_unix_pollfd_t.
    Definition Self : Set := libc.unix.pollfd.t.
    
    (*
                fn clone(&self) -> $i { *self }
    *)
    Definition clone (self : ref Self) : M libc.unix.pollfd.t :=
      let* self := M.alloc self in
      let* α0 : ref libc.unix.pollfd.t := M.read self in
      M.read (deref α0).
    
    Global Instance AssociatedFunction_clone :
      Notations.DoubleColon Self "clone" := {
      Notations.double_colon := clone;
    }.
    
    Global Instance ℐ : core.clone.Clone.Required.Trait Self := {
      core.clone.Clone.clone := clone;
      core.clone.Clone.clone_from := Datatypes.None;
    }.
  End Impl_core_clone_Clone_for_libc_unix_pollfd_t.
  End Impl_core_clone_Clone_for_libc_unix_pollfd_t.
  
  Module  winsize.
  Section winsize.
    Record t : Set := {
      ws_row : ltac:(libc.unix.c_ushort);
      ws_col : ltac:(libc.unix.c_ushort);
      ws_xpixel : ltac:(libc.unix.c_ushort);
      ws_ypixel : ltac:(libc.unix.c_ushort);
    }.
    
    Definition Get_ws_row :=
      Ref.map
        (fun α => Some α.(ws_row))
        (fun β α => Some (α <| ws_row := β |>)).
    Definition Get_ws_col :=
      Ref.map
        (fun α => Some α.(ws_col))
        (fun β α => Some (α <| ws_col := β |>)).
    Definition Get_ws_xpixel :=
      Ref.map
        (fun α => Some α.(ws_xpixel))
        (fun β α => Some (α <| ws_xpixel := β |>)).
    Definition Get_ws_ypixel :=
      Ref.map
        (fun α => Some α.(ws_ypixel))
        (fun β α => Some (α <| ws_ypixel := β |>)).
  End winsize.
  End winsize.
  
  Module  Impl_core_marker_Copy_for_libc_unix_winsize_t.
  Section Impl_core_marker_Copy_for_libc_unix_winsize_t.
    Definition Self : Set := libc.unix.winsize.t.
    
    Global Instance ℐ : core.marker.Copy.Trait Self := {
    }.
  End Impl_core_marker_Copy_for_libc_unix_winsize_t.
  End Impl_core_marker_Copy_for_libc_unix_winsize_t.
  
  Module  Impl_core_clone_Clone_for_libc_unix_winsize_t.
  Section Impl_core_clone_Clone_for_libc_unix_winsize_t.
    Definition Self : Set := libc.unix.winsize.t.
    
    (*
                fn clone(&self) -> $i { *self }
    *)
    Definition clone (self : ref Self) : M libc.unix.winsize.t :=
      let* self := M.alloc self in
      let* α0 : ref libc.unix.winsize.t := M.read self in
      M.read (deref α0).
    
    Global Instance AssociatedFunction_clone :
      Notations.DoubleColon Self "clone" := {
      Notations.double_colon := clone;
    }.
    
    Global Instance ℐ : core.clone.Clone.Required.Trait Self := {
      core.clone.Clone.clone := clone;
      core.clone.Clone.clone_from := Datatypes.None;
    }.
  End Impl_core_clone_Clone_for_libc_unix_winsize_t.
  End Impl_core_clone_Clone_for_libc_unix_winsize_t.
  
  Module  linger.
  Section linger.
    Record t : Set := {
      l_onoff : ltac:(libc.unix.c_int);
      l_linger : ltac:(libc.unix.c_int);
    }.
    
    Definition Get_l_onoff :=
      Ref.map
        (fun α => Some α.(l_onoff))
        (fun β α => Some (α <| l_onoff := β |>)).
    Definition Get_l_linger :=
      Ref.map
        (fun α => Some α.(l_linger))
        (fun β α => Some (α <| l_linger := β |>)).
  End linger.
  End linger.
  
  Module  Impl_core_marker_Copy_for_libc_unix_linger_t.
  Section Impl_core_marker_Copy_for_libc_unix_linger_t.
    Definition Self : Set := libc.unix.linger.t.
    
    Global Instance ℐ : core.marker.Copy.Trait Self := {
    }.
  End Impl_core_marker_Copy_for_libc_unix_linger_t.
  End Impl_core_marker_Copy_for_libc_unix_linger_t.
  
  Module  Impl_core_clone_Clone_for_libc_unix_linger_t.
  Section Impl_core_clone_Clone_for_libc_unix_linger_t.
    Definition Self : Set := libc.unix.linger.t.
    
    (*
                fn clone(&self) -> $i { *self }
    *)
    Definition clone (self : ref Self) : M libc.unix.linger.t :=
      let* self := M.alloc self in
      let* α0 : ref libc.unix.linger.t := M.read self in
      M.read (deref α0).
    
    Global Instance AssociatedFunction_clone :
      Notations.DoubleColon Self "clone" := {
      Notations.double_colon := clone;
    }.
    
    Global Instance ℐ : core.clone.Clone.Required.Trait Self := {
      core.clone.Clone.clone := clone;
      core.clone.Clone.clone_from := Datatypes.None;
    }.
  End Impl_core_clone_Clone_for_libc_unix_linger_t.
  End Impl_core_clone_Clone_for_libc_unix_linger_t.
  
  Module  sigval.
  Section sigval.
    Record t : Set := {
      sival_ptr : mut_ref core.ffi.c_void.t;
    }.
    
    Definition Get_sival_ptr :=
      Ref.map
        (fun α => Some α.(sival_ptr))
        (fun β α => Some (α <| sival_ptr := β |>)).
  End sigval.
  End sigval.
  
  Module  Impl_core_marker_Copy_for_libc_unix_sigval_t.
  Section Impl_core_marker_Copy_for_libc_unix_sigval_t.
    Definition Self : Set := libc.unix.sigval.t.
    
    Global Instance ℐ : core.marker.Copy.Trait Self := {
    }.
  End Impl_core_marker_Copy_for_libc_unix_sigval_t.
  End Impl_core_marker_Copy_for_libc_unix_sigval_t.
  
  Module  Impl_core_clone_Clone_for_libc_unix_sigval_t.
  Section Impl_core_clone_Clone_for_libc_unix_sigval_t.
    Definition Self : Set := libc.unix.sigval.t.
    
    (*
                fn clone(&self) -> $i { *self }
    *)
    Definition clone (self : ref Self) : M libc.unix.sigval.t :=
      let* self := M.alloc self in
      let* α0 : ref libc.unix.sigval.t := M.read self in
      M.read (deref α0).
    
    Global Instance AssociatedFunction_clone :
      Notations.DoubleColon Self "clone" := {
      Notations.double_colon := clone;
    }.
    
    Global Instance ℐ : core.clone.Clone.Required.Trait Self := {
      core.clone.Clone.clone := clone;
      core.clone.Clone.clone_from := Datatypes.None;
    }.
  End Impl_core_clone_Clone_for_libc_unix_sigval_t.
  End Impl_core_clone_Clone_for_libc_unix_sigval_t.
  
  Module  itimerval.
  Section itimerval.
    Record t : Set := {
      it_interval : libc.unix.timeval.t;
      it_value : libc.unix.timeval.t;
    }.
    
    Definition Get_it_interval :=
      Ref.map
        (fun α => Some α.(it_interval))
        (fun β α => Some (α <| it_interval := β |>)).
    Definition Get_it_value :=
      Ref.map
        (fun α => Some α.(it_value))
        (fun β α => Some (α <| it_value := β |>)).
  End itimerval.
  End itimerval.
  
  Module  Impl_core_marker_Copy_for_libc_unix_itimerval_t.
  Section Impl_core_marker_Copy_for_libc_unix_itimerval_t.
    Definition Self : Set := libc.unix.itimerval.t.
    
    Global Instance ℐ : core.marker.Copy.Trait Self := {
    }.
  End Impl_core_marker_Copy_for_libc_unix_itimerval_t.
  End Impl_core_marker_Copy_for_libc_unix_itimerval_t.
  
  Module  Impl_core_clone_Clone_for_libc_unix_itimerval_t.
  Section Impl_core_clone_Clone_for_libc_unix_itimerval_t.
    Definition Self : Set := libc.unix.itimerval.t.
    
    (*
                fn clone(&self) -> $i { *self }
    *)
    Definition clone (self : ref Self) : M libc.unix.itimerval.t :=
      let* self := M.alloc self in
      let* α0 : ref libc.unix.itimerval.t := M.read self in
      M.read (deref α0).
    
    Global Instance AssociatedFunction_clone :
      Notations.DoubleColon Self "clone" := {
      Notations.double_colon := clone;
    }.
    
    Global Instance ℐ : core.clone.Clone.Required.Trait Self := {
      core.clone.Clone.clone := clone;
      core.clone.Clone.clone_from := Datatypes.None;
    }.
  End Impl_core_clone_Clone_for_libc_unix_itimerval_t.
  End Impl_core_clone_Clone_for_libc_unix_itimerval_t.
  
  Module  tms.
  Section tms.
    Record t : Set := {
      tms_utime : ltac:(libc.unix.linux_like.linux.gnu.b64.clock_t);
      tms_stime : ltac:(libc.unix.linux_like.linux.gnu.b64.clock_t);
      tms_cutime : ltac:(libc.unix.linux_like.linux.gnu.b64.clock_t);
      tms_cstime : ltac:(libc.unix.linux_like.linux.gnu.b64.clock_t);
    }.
    
    Definition Get_tms_utime :=
      Ref.map
        (fun α => Some α.(tms_utime))
        (fun β α => Some (α <| tms_utime := β |>)).
    Definition Get_tms_stime :=
      Ref.map
        (fun α => Some α.(tms_stime))
        (fun β α => Some (α <| tms_stime := β |>)).
    Definition Get_tms_cutime :=
      Ref.map
        (fun α => Some α.(tms_cutime))
        (fun β α => Some (α <| tms_cutime := β |>)).
    Definition Get_tms_cstime :=
      Ref.map
        (fun α => Some α.(tms_cstime))
        (fun β α => Some (α <| tms_cstime := β |>)).
  End tms.
  End tms.
  
  Module  Impl_core_marker_Copy_for_libc_unix_tms_t.
  Section Impl_core_marker_Copy_for_libc_unix_tms_t.
    Definition Self : Set := libc.unix.tms.t.
    
    Global Instance ℐ : core.marker.Copy.Trait Self := {
    }.
  End Impl_core_marker_Copy_for_libc_unix_tms_t.
  End Impl_core_marker_Copy_for_libc_unix_tms_t.
  
  Module  Impl_core_clone_Clone_for_libc_unix_tms_t.
  Section Impl_core_clone_Clone_for_libc_unix_tms_t.
    Definition Self : Set := libc.unix.tms.t.
    
    (*
                fn clone(&self) -> $i { *self }
    *)
    Definition clone (self : ref Self) : M libc.unix.tms.t :=
      let* self := M.alloc self in
      let* α0 : ref libc.unix.tms.t := M.read self in
      M.read (deref α0).
    
    Global Instance AssociatedFunction_clone :
      Notations.DoubleColon Self "clone" := {
      Notations.double_colon := clone;
    }.
    
    Global Instance ℐ : core.clone.Clone.Required.Trait Self := {
      core.clone.Clone.clone := clone;
      core.clone.Clone.clone_from := Datatypes.None;
    }.
  End Impl_core_clone_Clone_for_libc_unix_tms_t.
  End Impl_core_clone_Clone_for_libc_unix_tms_t.
  
  Module  servent.
  Section servent.
    Record t : Set := {
      s_name : mut_ref ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.c_char);
      s_aliases :
        mut_ref
          (mut_ref ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.c_char));
      s_port : ltac:(libc.unix.c_int);
      s_proto : mut_ref ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.c_char);
    }.
    
    Definition Get_s_name :=
      Ref.map
        (fun α => Some α.(s_name))
        (fun β α => Some (α <| s_name := β |>)).
    Definition Get_s_aliases :=
      Ref.map
        (fun α => Some α.(s_aliases))
        (fun β α => Some (α <| s_aliases := β |>)).
    Definition Get_s_port :=
      Ref.map
        (fun α => Some α.(s_port))
        (fun β α => Some (α <| s_port := β |>)).
    Definition Get_s_proto :=
      Ref.map
        (fun α => Some α.(s_proto))
        (fun β α => Some (α <| s_proto := β |>)).
  End servent.
  End servent.
  
  Module  Impl_core_marker_Copy_for_libc_unix_servent_t.
  Section Impl_core_marker_Copy_for_libc_unix_servent_t.
    Definition Self : Set := libc.unix.servent.t.
    
    Global Instance ℐ : core.marker.Copy.Trait Self := {
    }.
  End Impl_core_marker_Copy_for_libc_unix_servent_t.
  End Impl_core_marker_Copy_for_libc_unix_servent_t.
  
  Module  Impl_core_clone_Clone_for_libc_unix_servent_t.
  Section Impl_core_clone_Clone_for_libc_unix_servent_t.
    Definition Self : Set := libc.unix.servent.t.
    
    (*
                fn clone(&self) -> $i { *self }
    *)
    Definition clone (self : ref Self) : M libc.unix.servent.t :=
      let* self := M.alloc self in
      let* α0 : ref libc.unix.servent.t := M.read self in
      M.read (deref α0).
    
    Global Instance AssociatedFunction_clone :
      Notations.DoubleColon Self "clone" := {
      Notations.double_colon := clone;
    }.
    
    Global Instance ℐ : core.clone.Clone.Required.Trait Self := {
      core.clone.Clone.clone := clone;
      core.clone.Clone.clone_from := Datatypes.None;
    }.
  End Impl_core_clone_Clone_for_libc_unix_servent_t.
  End Impl_core_clone_Clone_for_libc_unix_servent_t.
  
  Module  protoent.
  Section protoent.
    Record t : Set := {
      p_name : mut_ref ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.c_char);
      p_aliases :
        mut_ref
          (mut_ref ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.c_char));
      p_proto : ltac:(libc.unix.c_int);
    }.
    
    Definition Get_p_name :=
      Ref.map
        (fun α => Some α.(p_name))
        (fun β α => Some (α <| p_name := β |>)).
    Definition Get_p_aliases :=
      Ref.map
        (fun α => Some α.(p_aliases))
        (fun β α => Some (α <| p_aliases := β |>)).
    Definition Get_p_proto :=
      Ref.map
        (fun α => Some α.(p_proto))
        (fun β α => Some (α <| p_proto := β |>)).
  End protoent.
  End protoent.
  
  Module  Impl_core_marker_Copy_for_libc_unix_protoent_t.
  Section Impl_core_marker_Copy_for_libc_unix_protoent_t.
    Definition Self : Set := libc.unix.protoent.t.
    
    Global Instance ℐ : core.marker.Copy.Trait Self := {
    }.
  End Impl_core_marker_Copy_for_libc_unix_protoent_t.
  End Impl_core_marker_Copy_for_libc_unix_protoent_t.
  
  Module  Impl_core_clone_Clone_for_libc_unix_protoent_t.
  Section Impl_core_clone_Clone_for_libc_unix_protoent_t.
    Definition Self : Set := libc.unix.protoent.t.
    
    (*
                fn clone(&self) -> $i { *self }
    *)
    Definition clone (self : ref Self) : M libc.unix.protoent.t :=
      let* self := M.alloc self in
      let* α0 : ref libc.unix.protoent.t := M.read self in
      M.read (deref α0).
    
    Global Instance AssociatedFunction_clone :
      Notations.DoubleColon Self "clone" := {
      Notations.double_colon := clone;
    }.
    
    Global Instance ℐ : core.clone.Clone.Required.Trait Self := {
      core.clone.Clone.clone := clone;
      core.clone.Clone.clone_from := Datatypes.None;
    }.
  End Impl_core_clone_Clone_for_libc_unix_protoent_t.
  End Impl_core_clone_Clone_for_libc_unix_protoent_t.
  
  Definition INT_MIN : M.Val ltac:(libc.unix.c_int) :=
    M.run (M.alloc ((Integer.of_Z (-2147483648)) : i32.t)).
  
  Definition INT_MAX : M.Val ltac:(libc.unix.c_int) :=
    M.run (M.alloc ((Integer.of_Z 2147483647) : i32.t)).
  
  Definition SIG_DFL : M.Val ltac:(libc.unix.sighandler_t) :=
    M.run
      (let* α0 : M.Val usize.t := M.alloc ((Integer.of_Z 0) : usize.t) in
      M.pure (use α0)).
  
  Definition SIG_IGN : M.Val ltac:(libc.unix.sighandler_t) :=
    M.run
      (let* α0 : M.Val usize.t := M.alloc ((Integer.of_Z 1) : usize.t) in
      M.pure (use α0)).
  
  Definition SIG_ERR : M.Val ltac:(libc.unix.sighandler_t) :=
    M.run
      (let* α0 : M.Val usize.t :=
        M.alloc (UnOp.not ((Integer.of_Z 0) : usize.t)) in
      M.pure (use α0)).
  
  Definition DT_UNKNOWN : M.Val u8.t :=
    M.run (M.alloc ((Integer.of_Z 0) : u8.t)).
  
  Definition DT_FIFO : M.Val u8.t := M.run (M.alloc ((Integer.of_Z 1) : u8.t)).
  
  Definition DT_CHR : M.Val u8.t := M.run (M.alloc ((Integer.of_Z 2) : u8.t)).
  
  Definition DT_DIR : M.Val u8.t := M.run (M.alloc ((Integer.of_Z 4) : u8.t)).
  
  Definition DT_BLK : M.Val u8.t := M.run (M.alloc ((Integer.of_Z 6) : u8.t)).
  
  Definition DT_REG : M.Val u8.t := M.run (M.alloc ((Integer.of_Z 8) : u8.t)).
  
  Definition DT_LNK : M.Val u8.t := M.run (M.alloc ((Integer.of_Z 10) : u8.t)).
  
  Definition DT_SOCK : M.Val u8.t := M.run (M.alloc ((Integer.of_Z 12) : u8.t)).
  
  Definition FD_CLOEXEC : M.Val ltac:(libc.unix.c_int) :=
    M.run (M.alloc ((Integer.of_Z 1) : i32.t)).
  
  Definition USRQUOTA : M.Val ltac:(libc.unix.c_int) :=
    M.run (M.alloc ((Integer.of_Z 0) : i32.t)).
  
  Definition GRPQUOTA : M.Val ltac:(libc.unix.c_int) :=
    M.run (M.alloc ((Integer.of_Z 1) : i32.t)).
  
  Definition SIGIOT : M.Val ltac:(libc.unix.c_int) :=
    M.run (M.alloc ((Integer.of_Z 6) : i32.t)).
  
  Definition S_ISUID : M.Val ltac:(libc.unix.linux_like.linux.mode_t) :=
    M.run (M.alloc ((Integer.of_Z 2048) : u32.t)).
  
  Definition S_ISGID : M.Val ltac:(libc.unix.linux_like.linux.mode_t) :=
    M.run (M.alloc ((Integer.of_Z 1024) : u32.t)).
  
  Definition S_ISVTX : M.Val ltac:(libc.unix.linux_like.linux.mode_t) :=
    M.run (M.alloc ((Integer.of_Z 512) : u32.t)).
  
  Definition IF_NAMESIZE : M.Val ltac:(libc.unix.size_t) :=
    M.run (M.alloc ((Integer.of_Z 16) : usize.t)).
  
  Definition IFNAMSIZ : M.Val ltac:(libc.unix.size_t) :=
    M.run (M.pure libc.unix.IF_NAMESIZE).
  
  Definition LOG_EMERG : M.Val ltac:(libc.unix.c_int) :=
    M.run (M.alloc ((Integer.of_Z 0) : i32.t)).
  
  Definition LOG_ALERT : M.Val ltac:(libc.unix.c_int) :=
    M.run (M.alloc ((Integer.of_Z 1) : i32.t)).
  
  Definition LOG_CRIT : M.Val ltac:(libc.unix.c_int) :=
    M.run (M.alloc ((Integer.of_Z 2) : i32.t)).
  
  Definition LOG_ERR : M.Val ltac:(libc.unix.c_int) :=
    M.run (M.alloc ((Integer.of_Z 3) : i32.t)).
  
  Definition LOG_WARNING : M.Val ltac:(libc.unix.c_int) :=
    M.run (M.alloc ((Integer.of_Z 4) : i32.t)).
  
  Definition LOG_NOTICE : M.Val ltac:(libc.unix.c_int) :=
    M.run (M.alloc ((Integer.of_Z 5) : i32.t)).
  
  Definition LOG_INFO : M.Val ltac:(libc.unix.c_int) :=
    M.run (M.alloc ((Integer.of_Z 6) : i32.t)).
  
  Definition LOG_DEBUG : M.Val ltac:(libc.unix.c_int) :=
    M.run (M.alloc ((Integer.of_Z 7) : i32.t)).
  
  Definition LOG_KERN : M.Val ltac:(libc.unix.c_int) :=
    M.run (M.alloc ((Integer.of_Z 0) : i32.t)).
  
  Definition LOG_USER : M.Val ltac:(libc.unix.c_int) :=
    M.run
      (let* α0 : i32.t :=
        BinOp.Panic.shl ((Integer.of_Z 1) : i32.t) ((Integer.of_Z 3) : i32.t) in
      M.alloc α0).
  
  Definition LOG_MAIL : M.Val ltac:(libc.unix.c_int) :=
    M.run
      (let* α0 : i32.t :=
        BinOp.Panic.shl ((Integer.of_Z 2) : i32.t) ((Integer.of_Z 3) : i32.t) in
      M.alloc α0).
  
  Definition LOG_DAEMON : M.Val ltac:(libc.unix.c_int) :=
    M.run
      (let* α0 : i32.t :=
        BinOp.Panic.shl ((Integer.of_Z 3) : i32.t) ((Integer.of_Z 3) : i32.t) in
      M.alloc α0).
  
  Definition LOG_AUTH : M.Val ltac:(libc.unix.c_int) :=
    M.run
      (let* α0 : i32.t :=
        BinOp.Panic.shl ((Integer.of_Z 4) : i32.t) ((Integer.of_Z 3) : i32.t) in
      M.alloc α0).
  
  Definition LOG_SYSLOG : M.Val ltac:(libc.unix.c_int) :=
    M.run
      (let* α0 : i32.t :=
        BinOp.Panic.shl ((Integer.of_Z 5) : i32.t) ((Integer.of_Z 3) : i32.t) in
      M.alloc α0).
  
  Definition LOG_LPR : M.Val ltac:(libc.unix.c_int) :=
    M.run
      (let* α0 : i32.t :=
        BinOp.Panic.shl ((Integer.of_Z 6) : i32.t) ((Integer.of_Z 3) : i32.t) in
      M.alloc α0).
  
  Definition LOG_NEWS : M.Val ltac:(libc.unix.c_int) :=
    M.run
      (let* α0 : i32.t :=
        BinOp.Panic.shl ((Integer.of_Z 7) : i32.t) ((Integer.of_Z 3) : i32.t) in
      M.alloc α0).
  
  Definition LOG_UUCP : M.Val ltac:(libc.unix.c_int) :=
    M.run
      (let* α0 : i32.t :=
        BinOp.Panic.shl ((Integer.of_Z 8) : i32.t) ((Integer.of_Z 3) : i32.t) in
      M.alloc α0).
  
  Definition LOG_LOCAL0 : M.Val ltac:(libc.unix.c_int) :=
    M.run
      (let* α0 : i32.t :=
        BinOp.Panic.shl
          ((Integer.of_Z 16) : i32.t)
          ((Integer.of_Z 3) : i32.t) in
      M.alloc α0).
  
  Definition LOG_LOCAL1 : M.Val ltac:(libc.unix.c_int) :=
    M.run
      (let* α0 : i32.t :=
        BinOp.Panic.shl
          ((Integer.of_Z 17) : i32.t)
          ((Integer.of_Z 3) : i32.t) in
      M.alloc α0).
  
  Definition LOG_LOCAL2 : M.Val ltac:(libc.unix.c_int) :=
    M.run
      (let* α0 : i32.t :=
        BinOp.Panic.shl
          ((Integer.of_Z 18) : i32.t)
          ((Integer.of_Z 3) : i32.t) in
      M.alloc α0).
  
  Definition LOG_LOCAL3 : M.Val ltac:(libc.unix.c_int) :=
    M.run
      (let* α0 : i32.t :=
        BinOp.Panic.shl
          ((Integer.of_Z 19) : i32.t)
          ((Integer.of_Z 3) : i32.t) in
      M.alloc α0).
  
  Definition LOG_LOCAL4 : M.Val ltac:(libc.unix.c_int) :=
    M.run
      (let* α0 : i32.t :=
        BinOp.Panic.shl
          ((Integer.of_Z 20) : i32.t)
          ((Integer.of_Z 3) : i32.t) in
      M.alloc α0).
  
  Definition LOG_LOCAL5 : M.Val ltac:(libc.unix.c_int) :=
    M.run
      (let* α0 : i32.t :=
        BinOp.Panic.shl
          ((Integer.of_Z 21) : i32.t)
          ((Integer.of_Z 3) : i32.t) in
      M.alloc α0).
  
  Definition LOG_LOCAL6 : M.Val ltac:(libc.unix.c_int) :=
    M.run
      (let* α0 : i32.t :=
        BinOp.Panic.shl
          ((Integer.of_Z 22) : i32.t)
          ((Integer.of_Z 3) : i32.t) in
      M.alloc α0).
  
  Definition LOG_LOCAL7 : M.Val ltac:(libc.unix.c_int) :=
    M.run
      (let* α0 : i32.t :=
        BinOp.Panic.shl
          ((Integer.of_Z 23) : i32.t)
          ((Integer.of_Z 3) : i32.t) in
      M.alloc α0).
  
  Definition LOG_PID : M.Val ltac:(libc.unix.c_int) :=
    M.run (M.alloc ((Integer.of_Z 1) : i32.t)).
  
  Definition LOG_CONS : M.Val ltac:(libc.unix.c_int) :=
    M.run (M.alloc ((Integer.of_Z 2) : i32.t)).
  
  Definition LOG_ODELAY : M.Val ltac:(libc.unix.c_int) :=
    M.run (M.alloc ((Integer.of_Z 4) : i32.t)).
  
  Definition LOG_NDELAY : M.Val ltac:(libc.unix.c_int) :=
    M.run (M.alloc ((Integer.of_Z 8) : i32.t)).
  
  Definition LOG_NOWAIT : M.Val ltac:(libc.unix.c_int) :=
    M.run (M.alloc ((Integer.of_Z 16) : i32.t)).
  
  Definition LOG_PRIMASK : M.Val ltac:(libc.unix.c_int) :=
    M.run (M.alloc ((Integer.of_Z 7) : i32.t)).
  
  Definition LOG_FACMASK : M.Val ltac:(libc.unix.c_int) :=
    M.run (M.alloc ((Integer.of_Z 1016) : i32.t)).
  
  Definition PRIO_MIN : M.Val ltac:(libc.unix.c_int) :=
    M.run (M.alloc ((Integer.of_Z (-20)) : i32.t)).
  
  Definition PRIO_MAX : M.Val ltac:(libc.unix.c_int) :=
    M.run (M.alloc ((Integer.of_Z 20) : i32.t)).
  
  Definition IPPROTO_ICMP : M.Val ltac:(libc.unix.c_int) :=
    M.run (M.alloc ((Integer.of_Z 1) : i32.t)).
  
  Definition IPPROTO_ICMPV6 : M.Val ltac:(libc.unix.c_int) :=
    M.run (M.alloc ((Integer.of_Z 58) : i32.t)).
  
  Definition IPPROTO_TCP : M.Val ltac:(libc.unix.c_int) :=
    M.run (M.alloc ((Integer.of_Z 6) : i32.t)).
  
  Definition IPPROTO_UDP : M.Val ltac:(libc.unix.c_int) :=
    M.run (M.alloc ((Integer.of_Z 17) : i32.t)).
  
  Definition IPPROTO_IP : M.Val ltac:(libc.unix.c_int) :=
    M.run (M.alloc ((Integer.of_Z 0) : i32.t)).
  
  Definition IPPROTO_IPV6 : M.Val ltac:(libc.unix.c_int) :=
    M.run (M.alloc ((Integer.of_Z 41) : i32.t)).
  
  Definition INADDR_LOOPBACK : M.Val ltac:(libc.unix.in_addr_t) :=
    M.run (M.alloc ((Integer.of_Z 2130706433) : u32.t)).
  
  Definition INADDR_ANY : M.Val ltac:(libc.unix.in_addr_t) :=
    M.run (M.alloc ((Integer.of_Z 0) : u32.t)).
  
  Definition INADDR_BROADCAST : M.Val ltac:(libc.unix.in_addr_t) :=
    M.run (M.alloc ((Integer.of_Z 4294967295) : u32.t)).
  
  Definition INADDR_NONE : M.Val ltac:(libc.unix.in_addr_t) :=
    M.run (M.alloc ((Integer.of_Z 4294967295) : u32.t)).
  
  Definition ARPOP_REQUEST : M.Val u16.t :=
    M.run (M.alloc ((Integer.of_Z 1) : u16.t)).
  
  Definition ARPOP_REPLY : M.Val u16.t :=
    M.run (M.alloc ((Integer.of_Z 2) : u16.t)).
  
  Definition ATF_COM : M.Val ltac:(libc.unix.c_int) :=
    M.run (M.alloc ((Integer.of_Z 2) : i32.t)).
  
  Definition ATF_PERM : M.Val ltac:(libc.unix.c_int) :=
    M.run (M.alloc ((Integer.of_Z 4) : i32.t)).
  
  Definition ATF_PUBL : M.Val ltac:(libc.unix.c_int) :=
    M.run (M.alloc ((Integer.of_Z 8) : i32.t)).
  
  Definition ATF_USETRAILERS : M.Val ltac:(libc.unix.c_int) :=
    M.run (M.alloc ((Integer.of_Z 16) : i32.t)).
  
  Module FILE.
    Inductive t : Set :=
    .
  End FILE.
  
  Module fpos_t.
    Inductive t : Set :=
    .
  End fpos_t.
  
  Error ForeignMod.
  
  Error ForeignMod.
  
  Error ForeignMod.
  
  Error ForeignMod.
  
  Error ForeignMod.
  
  Error ForeignMod.
  
  Error ForeignMod.
  
  Error ForeignMod.
  
  Module linux_like.
    Ltac sa_family_t := exact u16.t.
    
    Ltac speed_t := exact ltac:(libc.unix.c_uint).
    
    Ltac tcflag_t := exact ltac:(libc.unix.c_uint).
    
    Ltac clockid_t := exact ltac:(libc.unix.c_int).
    
    Ltac timer_t := exact (mut_ref core.ffi.c_void.t).
    
    Ltac key_t := exact ltac:(libc.unix.c_int).
    
    Ltac id_t := exact ltac:(libc.unix.c_uint).
    
    Module timezone.
      Inductive t : Set :=
      .
    End timezone.
    
    Module  in_addr.
    Section in_addr.
      Record t : Set := {
        s_addr : ltac:(libc.unix.in_addr_t);
      }.
      
      Definition Get_s_addr :=
        Ref.map
          (fun α => Some α.(s_addr))
          (fun β α => Some (α <| s_addr := β |>)).
    End in_addr.
    End in_addr.
    
    Module  Impl_core_marker_Copy_for_libc_unix_linux_like_in_addr_t.
    Section Impl_core_marker_Copy_for_libc_unix_linux_like_in_addr_t.
      Definition Self : Set := libc.unix.linux_like.in_addr.t.
      
      Global Instance ℐ : core.marker.Copy.Trait Self := {
      }.
    End Impl_core_marker_Copy_for_libc_unix_linux_like_in_addr_t.
    End Impl_core_marker_Copy_for_libc_unix_linux_like_in_addr_t.
    
    Module  Impl_core_clone_Clone_for_libc_unix_linux_like_in_addr_t.
    Section Impl_core_clone_Clone_for_libc_unix_linux_like_in_addr_t.
      Definition Self : Set := libc.unix.linux_like.in_addr.t.
      
      (*
                  fn clone(&self) -> $i { *self }
      *)
      Definition clone (self : ref Self) : M libc.unix.linux_like.in_addr.t :=
        let* self := M.alloc self in
        let* α0 : ref libc.unix.linux_like.in_addr.t := M.read self in
        M.read (deref α0).
      
      Global Instance AssociatedFunction_clone :
        Notations.DoubleColon Self "clone" := {
        Notations.double_colon := clone;
      }.
      
      Global Instance ℐ : core.clone.Clone.Required.Trait Self := {
        core.clone.Clone.clone := clone;
        core.clone.Clone.clone_from := Datatypes.None;
      }.
    End Impl_core_clone_Clone_for_libc_unix_linux_like_in_addr_t.
    End Impl_core_clone_Clone_for_libc_unix_linux_like_in_addr_t.
    
    Module  ip_mreq.
    Section ip_mreq.
      Record t : Set := {
        imr_multiaddr : libc.unix.linux_like.in_addr.t;
        imr_interface : libc.unix.linux_like.in_addr.t;
      }.
      
      Definition Get_imr_multiaddr :=
        Ref.map
          (fun α => Some α.(imr_multiaddr))
          (fun β α => Some (α <| imr_multiaddr := β |>)).
      Definition Get_imr_interface :=
        Ref.map
          (fun α => Some α.(imr_interface))
          (fun β α => Some (α <| imr_interface := β |>)).
    End ip_mreq.
    End ip_mreq.
    
    Module  Impl_core_marker_Copy_for_libc_unix_linux_like_ip_mreq_t.
    Section Impl_core_marker_Copy_for_libc_unix_linux_like_ip_mreq_t.
      Definition Self : Set := libc.unix.linux_like.ip_mreq.t.
      
      Global Instance ℐ : core.marker.Copy.Trait Self := {
      }.
    End Impl_core_marker_Copy_for_libc_unix_linux_like_ip_mreq_t.
    End Impl_core_marker_Copy_for_libc_unix_linux_like_ip_mreq_t.
    
    Module  Impl_core_clone_Clone_for_libc_unix_linux_like_ip_mreq_t.
    Section Impl_core_clone_Clone_for_libc_unix_linux_like_ip_mreq_t.
      Definition Self : Set := libc.unix.linux_like.ip_mreq.t.
      
      (*
                  fn clone(&self) -> $i { *self }
      *)
      Definition clone (self : ref Self) : M libc.unix.linux_like.ip_mreq.t :=
        let* self := M.alloc self in
        let* α0 : ref libc.unix.linux_like.ip_mreq.t := M.read self in
        M.read (deref α0).
      
      Global Instance AssociatedFunction_clone :
        Notations.DoubleColon Self "clone" := {
        Notations.double_colon := clone;
      }.
      
      Global Instance ℐ : core.clone.Clone.Required.Trait Self := {
        core.clone.Clone.clone := clone;
        core.clone.Clone.clone_from := Datatypes.None;
      }.
    End Impl_core_clone_Clone_for_libc_unix_linux_like_ip_mreq_t.
    End Impl_core_clone_Clone_for_libc_unix_linux_like_ip_mreq_t.
    
    Module  ip_mreqn.
    Section ip_mreqn.
      Record t : Set := {
        imr_multiaddr : libc.unix.linux_like.in_addr.t;
        imr_address : libc.unix.linux_like.in_addr.t;
        imr_ifindex : ltac:(libc.unix.c_int);
      }.
      
      Definition Get_imr_multiaddr :=
        Ref.map
          (fun α => Some α.(imr_multiaddr))
          (fun β α => Some (α <| imr_multiaddr := β |>)).
      Definition Get_imr_address :=
        Ref.map
          (fun α => Some α.(imr_address))
          (fun β α => Some (α <| imr_address := β |>)).
      Definition Get_imr_ifindex :=
        Ref.map
          (fun α => Some α.(imr_ifindex))
          (fun β α => Some (α <| imr_ifindex := β |>)).
    End ip_mreqn.
    End ip_mreqn.
    
    Module  Impl_core_marker_Copy_for_libc_unix_linux_like_ip_mreqn_t.
    Section Impl_core_marker_Copy_for_libc_unix_linux_like_ip_mreqn_t.
      Definition Self : Set := libc.unix.linux_like.ip_mreqn.t.
      
      Global Instance ℐ : core.marker.Copy.Trait Self := {
      }.
    End Impl_core_marker_Copy_for_libc_unix_linux_like_ip_mreqn_t.
    End Impl_core_marker_Copy_for_libc_unix_linux_like_ip_mreqn_t.
    
    Module  Impl_core_clone_Clone_for_libc_unix_linux_like_ip_mreqn_t.
    Section Impl_core_clone_Clone_for_libc_unix_linux_like_ip_mreqn_t.
      Definition Self : Set := libc.unix.linux_like.ip_mreqn.t.
      
      (*
                  fn clone(&self) -> $i { *self }
      *)
      Definition clone (self : ref Self) : M libc.unix.linux_like.ip_mreqn.t :=
        let* self := M.alloc self in
        let* α0 : ref libc.unix.linux_like.ip_mreqn.t := M.read self in
        M.read (deref α0).
      
      Global Instance AssociatedFunction_clone :
        Notations.DoubleColon Self "clone" := {
        Notations.double_colon := clone;
      }.
      
      Global Instance ℐ : core.clone.Clone.Required.Trait Self := {
        core.clone.Clone.clone := clone;
        core.clone.Clone.clone_from := Datatypes.None;
      }.
    End Impl_core_clone_Clone_for_libc_unix_linux_like_ip_mreqn_t.
    End Impl_core_clone_Clone_for_libc_unix_linux_like_ip_mreqn_t.
    
    Module  ip_mreq_source.
    Section ip_mreq_source.
      Record t : Set := {
        imr_multiaddr : libc.unix.linux_like.in_addr.t;
        imr_interface : libc.unix.linux_like.in_addr.t;
        imr_sourceaddr : libc.unix.linux_like.in_addr.t;
      }.
      
      Definition Get_imr_multiaddr :=
        Ref.map
          (fun α => Some α.(imr_multiaddr))
          (fun β α => Some (α <| imr_multiaddr := β |>)).
      Definition Get_imr_interface :=
        Ref.map
          (fun α => Some α.(imr_interface))
          (fun β α => Some (α <| imr_interface := β |>)).
      Definition Get_imr_sourceaddr :=
        Ref.map
          (fun α => Some α.(imr_sourceaddr))
          (fun β α => Some (α <| imr_sourceaddr := β |>)).
    End ip_mreq_source.
    End ip_mreq_source.
    
    Module  Impl_core_marker_Copy_for_libc_unix_linux_like_ip_mreq_source_t.
    Section Impl_core_marker_Copy_for_libc_unix_linux_like_ip_mreq_source_t.
      Definition Self : Set := libc.unix.linux_like.ip_mreq_source.t.
      
      Global Instance ℐ : core.marker.Copy.Trait Self := {
      }.
    End Impl_core_marker_Copy_for_libc_unix_linux_like_ip_mreq_source_t.
    End Impl_core_marker_Copy_for_libc_unix_linux_like_ip_mreq_source_t.
    
    Module  Impl_core_clone_Clone_for_libc_unix_linux_like_ip_mreq_source_t.
    Section Impl_core_clone_Clone_for_libc_unix_linux_like_ip_mreq_source_t.
      Definition Self : Set := libc.unix.linux_like.ip_mreq_source.t.
      
      (*
                  fn clone(&self) -> $i { *self }
      *)
      Definition clone
          (self : ref Self)
          : M libc.unix.linux_like.ip_mreq_source.t :=
        let* self := M.alloc self in
        let* α0 : ref libc.unix.linux_like.ip_mreq_source.t := M.read self in
        M.read (deref α0).
      
      Global Instance AssociatedFunction_clone :
        Notations.DoubleColon Self "clone" := {
        Notations.double_colon := clone;
      }.
      
      Global Instance ℐ : core.clone.Clone.Required.Trait Self := {
        core.clone.Clone.clone := clone;
        core.clone.Clone.clone_from := Datatypes.None;
      }.
    End Impl_core_clone_Clone_for_libc_unix_linux_like_ip_mreq_source_t.
    End Impl_core_clone_Clone_for_libc_unix_linux_like_ip_mreq_source_t.
    
    Module  sockaddr.
    Section sockaddr.
      Record t : Set := {
        sa_family : ltac:(libc.unix.linux_like.sa_family_t);
        sa_data : array ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.c_char);
      }.
      
      Definition Get_sa_family :=
        Ref.map
          (fun α => Some α.(sa_family))
          (fun β α => Some (α <| sa_family := β |>)).
      Definition Get_sa_data :=
        Ref.map
          (fun α => Some α.(sa_data))
          (fun β α => Some (α <| sa_data := β |>)).
    End sockaddr.
    End sockaddr.
    
    Module  Impl_core_marker_Copy_for_libc_unix_linux_like_sockaddr_t.
    Section Impl_core_marker_Copy_for_libc_unix_linux_like_sockaddr_t.
      Definition Self : Set := libc.unix.linux_like.sockaddr.t.
      
      Global Instance ℐ : core.marker.Copy.Trait Self := {
      }.
    End Impl_core_marker_Copy_for_libc_unix_linux_like_sockaddr_t.
    End Impl_core_marker_Copy_for_libc_unix_linux_like_sockaddr_t.
    
    Module  Impl_core_clone_Clone_for_libc_unix_linux_like_sockaddr_t.
    Section Impl_core_clone_Clone_for_libc_unix_linux_like_sockaddr_t.
      Definition Self : Set := libc.unix.linux_like.sockaddr.t.
      
      (*
                  fn clone(&self) -> $i { *self }
      *)
      Definition clone (self : ref Self) : M libc.unix.linux_like.sockaddr.t :=
        let* self := M.alloc self in
        let* α0 : ref libc.unix.linux_like.sockaddr.t := M.read self in
        M.read (deref α0).
      
      Global Instance AssociatedFunction_clone :
        Notations.DoubleColon Self "clone" := {
        Notations.double_colon := clone;
      }.
      
      Global Instance ℐ : core.clone.Clone.Required.Trait Self := {
        core.clone.Clone.clone := clone;
        core.clone.Clone.clone_from := Datatypes.None;
      }.
    End Impl_core_clone_Clone_for_libc_unix_linux_like_sockaddr_t.
    End Impl_core_clone_Clone_for_libc_unix_linux_like_sockaddr_t.
    
    Module  sockaddr_in.
    Section sockaddr_in.
      Record t : Set := {
        sin_family : ltac:(libc.unix.linux_like.sa_family_t);
        sin_port : ltac:(libc.unix.in_port_t);
        sin_addr : libc.unix.linux_like.in_addr.t;
        sin_zero : array u8.t;
      }.
      
      Definition Get_sin_family :=
        Ref.map
          (fun α => Some α.(sin_family))
          (fun β α => Some (α <| sin_family := β |>)).
      Definition Get_sin_port :=
        Ref.map
          (fun α => Some α.(sin_port))
          (fun β α => Some (α <| sin_port := β |>)).
      Definition Get_sin_addr :=
        Ref.map
          (fun α => Some α.(sin_addr))
          (fun β α => Some (α <| sin_addr := β |>)).
      Definition Get_sin_zero :=
        Ref.map
          (fun α => Some α.(sin_zero))
          (fun β α => Some (α <| sin_zero := β |>)).
    End sockaddr_in.
    End sockaddr_in.
    
    Module  Impl_core_marker_Copy_for_libc_unix_linux_like_sockaddr_in_t.
    Section Impl_core_marker_Copy_for_libc_unix_linux_like_sockaddr_in_t.
      Definition Self : Set := libc.unix.linux_like.sockaddr_in.t.
      
      Global Instance ℐ : core.marker.Copy.Trait Self := {
      }.
    End Impl_core_marker_Copy_for_libc_unix_linux_like_sockaddr_in_t.
    End Impl_core_marker_Copy_for_libc_unix_linux_like_sockaddr_in_t.
    
    Module  Impl_core_clone_Clone_for_libc_unix_linux_like_sockaddr_in_t.
    Section Impl_core_clone_Clone_for_libc_unix_linux_like_sockaddr_in_t.
      Definition Self : Set := libc.unix.linux_like.sockaddr_in.t.
      
      (*
                  fn clone(&self) -> $i { *self }
      *)
      Definition clone
          (self : ref Self)
          : M libc.unix.linux_like.sockaddr_in.t :=
        let* self := M.alloc self in
        let* α0 : ref libc.unix.linux_like.sockaddr_in.t := M.read self in
        M.read (deref α0).
      
      Global Instance AssociatedFunction_clone :
        Notations.DoubleColon Self "clone" := {
        Notations.double_colon := clone;
      }.
      
      Global Instance ℐ : core.clone.Clone.Required.Trait Self := {
        core.clone.Clone.clone := clone;
        core.clone.Clone.clone_from := Datatypes.None;
      }.
    End Impl_core_clone_Clone_for_libc_unix_linux_like_sockaddr_in_t.
    End Impl_core_clone_Clone_for_libc_unix_linux_like_sockaddr_in_t.
    
    Module  sockaddr_in6.
    Section sockaddr_in6.
      Record t : Set := {
        sin6_family : ltac:(libc.unix.linux_like.sa_family_t);
        sin6_port : ltac:(libc.unix.in_port_t);
        sin6_flowinfo : u32.t;
        sin6_addr : libc.unix.align.in6_addr.t;
        sin6_scope_id : u32.t;
      }.
      
      Definition Get_sin6_family :=
        Ref.map
          (fun α => Some α.(sin6_family))
          (fun β α => Some (α <| sin6_family := β |>)).
      Definition Get_sin6_port :=
        Ref.map
          (fun α => Some α.(sin6_port))
          (fun β α => Some (α <| sin6_port := β |>)).
      Definition Get_sin6_flowinfo :=
        Ref.map
          (fun α => Some α.(sin6_flowinfo))
          (fun β α => Some (α <| sin6_flowinfo := β |>)).
      Definition Get_sin6_addr :=
        Ref.map
          (fun α => Some α.(sin6_addr))
          (fun β α => Some (α <| sin6_addr := β |>)).
      Definition Get_sin6_scope_id :=
        Ref.map
          (fun α => Some α.(sin6_scope_id))
          (fun β α => Some (α <| sin6_scope_id := β |>)).
    End sockaddr_in6.
    End sockaddr_in6.
    
    Module  Impl_core_marker_Copy_for_libc_unix_linux_like_sockaddr_in6_t.
    Section Impl_core_marker_Copy_for_libc_unix_linux_like_sockaddr_in6_t.
      Definition Self : Set := libc.unix.linux_like.sockaddr_in6.t.
      
      Global Instance ℐ : core.marker.Copy.Trait Self := {
      }.
    End Impl_core_marker_Copy_for_libc_unix_linux_like_sockaddr_in6_t.
    End Impl_core_marker_Copy_for_libc_unix_linux_like_sockaddr_in6_t.
    
    Module  Impl_core_clone_Clone_for_libc_unix_linux_like_sockaddr_in6_t.
    Section Impl_core_clone_Clone_for_libc_unix_linux_like_sockaddr_in6_t.
      Definition Self : Set := libc.unix.linux_like.sockaddr_in6.t.
      
      (*
                  fn clone(&self) -> $i { *self }
      *)
      Definition clone
          (self : ref Self)
          : M libc.unix.linux_like.sockaddr_in6.t :=
        let* self := M.alloc self in
        let* α0 : ref libc.unix.linux_like.sockaddr_in6.t := M.read self in
        M.read (deref α0).
      
      Global Instance AssociatedFunction_clone :
        Notations.DoubleColon Self "clone" := {
        Notations.double_colon := clone;
      }.
      
      Global Instance ℐ : core.clone.Clone.Required.Trait Self := {
        core.clone.Clone.clone := clone;
        core.clone.Clone.clone_from := Datatypes.None;
      }.
    End Impl_core_clone_Clone_for_libc_unix_linux_like_sockaddr_in6_t.
    End Impl_core_clone_Clone_for_libc_unix_linux_like_sockaddr_in6_t.
    
    Module  addrinfo.
    Section addrinfo.
      Record t : Set := {
        ai_flags : ltac:(libc.unix.c_int);
        ai_family : ltac:(libc.unix.c_int);
        ai_socktype : ltac:(libc.unix.c_int);
        ai_protocol : ltac:(libc.unix.c_int);
        ai_addrlen : ltac:(libc.unix.linux_like.linux.socklen_t);
        ai_addr : mut_ref libc.unix.linux_like.sockaddr.t;
        ai_canonname :
          mut_ref ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.c_char);
        ai_next : mut_ref libc.unix.linux_like.addrinfo.t;
      }.
      
      Definition Get_ai_flags :=
        Ref.map
          (fun α => Some α.(ai_flags))
          (fun β α => Some (α <| ai_flags := β |>)).
      Definition Get_ai_family :=
        Ref.map
          (fun α => Some α.(ai_family))
          (fun β α => Some (α <| ai_family := β |>)).
      Definition Get_ai_socktype :=
        Ref.map
          (fun α => Some α.(ai_socktype))
          (fun β α => Some (α <| ai_socktype := β |>)).
      Definition Get_ai_protocol :=
        Ref.map
          (fun α => Some α.(ai_protocol))
          (fun β α => Some (α <| ai_protocol := β |>)).
      Definition Get_ai_addrlen :=
        Ref.map
          (fun α => Some α.(ai_addrlen))
          (fun β α => Some (α <| ai_addrlen := β |>)).
      Definition Get_ai_addr :=
        Ref.map
          (fun α => Some α.(ai_addr))
          (fun β α => Some (α <| ai_addr := β |>)).
      Definition Get_ai_canonname :=
        Ref.map
          (fun α => Some α.(ai_canonname))
          (fun β α => Some (α <| ai_canonname := β |>)).
      Definition Get_ai_next :=
        Ref.map
          (fun α => Some α.(ai_next))
          (fun β α => Some (α <| ai_next := β |>)).
    End addrinfo.
    End addrinfo.
    
    Module  Impl_core_marker_Copy_for_libc_unix_linux_like_addrinfo_t.
    Section Impl_core_marker_Copy_for_libc_unix_linux_like_addrinfo_t.
      Definition Self : Set := libc.unix.linux_like.addrinfo.t.
      
      Global Instance ℐ : core.marker.Copy.Trait Self := {
      }.
    End Impl_core_marker_Copy_for_libc_unix_linux_like_addrinfo_t.
    End Impl_core_marker_Copy_for_libc_unix_linux_like_addrinfo_t.
    
    Module  Impl_core_clone_Clone_for_libc_unix_linux_like_addrinfo_t.
    Section Impl_core_clone_Clone_for_libc_unix_linux_like_addrinfo_t.
      Definition Self : Set := libc.unix.linux_like.addrinfo.t.
      
      (*
                  fn clone(&self) -> $i { *self }
      *)
      Definition clone (self : ref Self) : M libc.unix.linux_like.addrinfo.t :=
        let* self := M.alloc self in
        let* α0 : ref libc.unix.linux_like.addrinfo.t := M.read self in
        M.read (deref α0).
      
      Global Instance AssociatedFunction_clone :
        Notations.DoubleColon Self "clone" := {
        Notations.double_colon := clone;
      }.
      
      Global Instance ℐ : core.clone.Clone.Required.Trait Self := {
        core.clone.Clone.clone := clone;
        core.clone.Clone.clone_from := Datatypes.None;
      }.
    End Impl_core_clone_Clone_for_libc_unix_linux_like_addrinfo_t.
    End Impl_core_clone_Clone_for_libc_unix_linux_like_addrinfo_t.
    
    Module  sockaddr_ll.
    Section sockaddr_ll.
      Record t : Set := {
        sll_family : ltac:(libc.unix.c_ushort);
        sll_protocol : ltac:(libc.unix.c_ushort);
        sll_ifindex : ltac:(libc.unix.c_int);
        sll_hatype : ltac:(libc.unix.c_ushort);
        sll_pkttype : ltac:(libc.unix.c_uchar);
        sll_halen : ltac:(libc.unix.c_uchar);
        sll_addr : array ltac:(libc.unix.c_uchar);
      }.
      
      Definition Get_sll_family :=
        Ref.map
          (fun α => Some α.(sll_family))
          (fun β α => Some (α <| sll_family := β |>)).
      Definition Get_sll_protocol :=
        Ref.map
          (fun α => Some α.(sll_protocol))
          (fun β α => Some (α <| sll_protocol := β |>)).
      Definition Get_sll_ifindex :=
        Ref.map
          (fun α => Some α.(sll_ifindex))
          (fun β α => Some (α <| sll_ifindex := β |>)).
      Definition Get_sll_hatype :=
        Ref.map
          (fun α => Some α.(sll_hatype))
          (fun β α => Some (α <| sll_hatype := β |>)).
      Definition Get_sll_pkttype :=
        Ref.map
          (fun α => Some α.(sll_pkttype))
          (fun β α => Some (α <| sll_pkttype := β |>)).
      Definition Get_sll_halen :=
        Ref.map
          (fun α => Some α.(sll_halen))
          (fun β α => Some (α <| sll_halen := β |>)).
      Definition Get_sll_addr :=
        Ref.map
          (fun α => Some α.(sll_addr))
          (fun β α => Some (α <| sll_addr := β |>)).
    End sockaddr_ll.
    End sockaddr_ll.
    
    Module  Impl_core_marker_Copy_for_libc_unix_linux_like_sockaddr_ll_t.
    Section Impl_core_marker_Copy_for_libc_unix_linux_like_sockaddr_ll_t.
      Definition Self : Set := libc.unix.linux_like.sockaddr_ll.t.
      
      Global Instance ℐ : core.marker.Copy.Trait Self := {
      }.
    End Impl_core_marker_Copy_for_libc_unix_linux_like_sockaddr_ll_t.
    End Impl_core_marker_Copy_for_libc_unix_linux_like_sockaddr_ll_t.
    
    Module  Impl_core_clone_Clone_for_libc_unix_linux_like_sockaddr_ll_t.
    Section Impl_core_clone_Clone_for_libc_unix_linux_like_sockaddr_ll_t.
      Definition Self : Set := libc.unix.linux_like.sockaddr_ll.t.
      
      (*
                  fn clone(&self) -> $i { *self }
      *)
      Definition clone
          (self : ref Self)
          : M libc.unix.linux_like.sockaddr_ll.t :=
        let* self := M.alloc self in
        let* α0 : ref libc.unix.linux_like.sockaddr_ll.t := M.read self in
        M.read (deref α0).
      
      Global Instance AssociatedFunction_clone :
        Notations.DoubleColon Self "clone" := {
        Notations.double_colon := clone;
      }.
      
      Global Instance ℐ : core.clone.Clone.Required.Trait Self := {
        core.clone.Clone.clone := clone;
        core.clone.Clone.clone_from := Datatypes.None;
      }.
    End Impl_core_clone_Clone_for_libc_unix_linux_like_sockaddr_ll_t.
    End Impl_core_clone_Clone_for_libc_unix_linux_like_sockaddr_ll_t.
    
    Module  fd_set.
    Section fd_set.
      Record t : Set := {
        fds_bits :
          array
            ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_ulong);
      }.
      
      Definition Get_fds_bits :=
        Ref.map
          (fun α => Some α.(fds_bits))
          (fun β α => Some (α <| fds_bits := β |>)).
    End fd_set.
    End fd_set.
    
    Module  Impl_core_marker_Copy_for_libc_unix_linux_like_fd_set_t.
    Section Impl_core_marker_Copy_for_libc_unix_linux_like_fd_set_t.
      Definition Self : Set := libc.unix.linux_like.fd_set.t.
      
      Global Instance ℐ : core.marker.Copy.Trait Self := {
      }.
    End Impl_core_marker_Copy_for_libc_unix_linux_like_fd_set_t.
    End Impl_core_marker_Copy_for_libc_unix_linux_like_fd_set_t.
    
    Module  Impl_core_clone_Clone_for_libc_unix_linux_like_fd_set_t.
    Section Impl_core_clone_Clone_for_libc_unix_linux_like_fd_set_t.
      Definition Self : Set := libc.unix.linux_like.fd_set.t.
      
      (*
                  fn clone(&self) -> $i { *self }
      *)
      Definition clone (self : ref Self) : M libc.unix.linux_like.fd_set.t :=
        let* self := M.alloc self in
        let* α0 : ref libc.unix.linux_like.fd_set.t := M.read self in
        M.read (deref α0).
      
      Global Instance AssociatedFunction_clone :
        Notations.DoubleColon Self "clone" := {
        Notations.double_colon := clone;
      }.
      
      Global Instance ℐ : core.clone.Clone.Required.Trait Self := {
        core.clone.Clone.clone := clone;
        core.clone.Clone.clone_from := Datatypes.None;
      }.
    End Impl_core_clone_Clone_for_libc_unix_linux_like_fd_set_t.
    End Impl_core_clone_Clone_for_libc_unix_linux_like_fd_set_t.
    
    Module  tm.
    Section tm.
      Record t : Set := {
        tm_sec : ltac:(libc.unix.c_int);
        tm_min : ltac:(libc.unix.c_int);
        tm_hour : ltac:(libc.unix.c_int);
        tm_mday : ltac:(libc.unix.c_int);
        tm_mon : ltac:(libc.unix.c_int);
        tm_year : ltac:(libc.unix.c_int);
        tm_wday : ltac:(libc.unix.c_int);
        tm_yday : ltac:(libc.unix.c_int);
        tm_isdst : ltac:(libc.unix.c_int);
        tm_gmtoff :
          ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_long);
        tm_zone : ref ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.c_char);
      }.
      
      Definition Get_tm_sec :=
        Ref.map
          (fun α => Some α.(tm_sec))
          (fun β α => Some (α <| tm_sec := β |>)).
      Definition Get_tm_min :=
        Ref.map
          (fun α => Some α.(tm_min))
          (fun β α => Some (α <| tm_min := β |>)).
      Definition Get_tm_hour :=
        Ref.map
          (fun α => Some α.(tm_hour))
          (fun β α => Some (α <| tm_hour := β |>)).
      Definition Get_tm_mday :=
        Ref.map
          (fun α => Some α.(tm_mday))
          (fun β α => Some (α <| tm_mday := β |>)).
      Definition Get_tm_mon :=
        Ref.map
          (fun α => Some α.(tm_mon))
          (fun β α => Some (α <| tm_mon := β |>)).
      Definition Get_tm_year :=
        Ref.map
          (fun α => Some α.(tm_year))
          (fun β α => Some (α <| tm_year := β |>)).
      Definition Get_tm_wday :=
        Ref.map
          (fun α => Some α.(tm_wday))
          (fun β α => Some (α <| tm_wday := β |>)).
      Definition Get_tm_yday :=
        Ref.map
          (fun α => Some α.(tm_yday))
          (fun β α => Some (α <| tm_yday := β |>)).
      Definition Get_tm_isdst :=
        Ref.map
          (fun α => Some α.(tm_isdst))
          (fun β α => Some (α <| tm_isdst := β |>)).
      Definition Get_tm_gmtoff :=
        Ref.map
          (fun α => Some α.(tm_gmtoff))
          (fun β α => Some (α <| tm_gmtoff := β |>)).
      Definition Get_tm_zone :=
        Ref.map
          (fun α => Some α.(tm_zone))
          (fun β α => Some (α <| tm_zone := β |>)).
    End tm.
    End tm.
    
    Module  Impl_core_marker_Copy_for_libc_unix_linux_like_tm_t.
    Section Impl_core_marker_Copy_for_libc_unix_linux_like_tm_t.
      Definition Self : Set := libc.unix.linux_like.tm.t.
      
      Global Instance ℐ : core.marker.Copy.Trait Self := {
      }.
    End Impl_core_marker_Copy_for_libc_unix_linux_like_tm_t.
    End Impl_core_marker_Copy_for_libc_unix_linux_like_tm_t.
    
    Module  Impl_core_clone_Clone_for_libc_unix_linux_like_tm_t.
    Section Impl_core_clone_Clone_for_libc_unix_linux_like_tm_t.
      Definition Self : Set := libc.unix.linux_like.tm.t.
      
      (*
                  fn clone(&self) -> $i { *self }
      *)
      Definition clone (self : ref Self) : M libc.unix.linux_like.tm.t :=
        let* self := M.alloc self in
        let* α0 : ref libc.unix.linux_like.tm.t := M.read self in
        M.read (deref α0).
      
      Global Instance AssociatedFunction_clone :
        Notations.DoubleColon Self "clone" := {
        Notations.double_colon := clone;
      }.
      
      Global Instance ℐ : core.clone.Clone.Required.Trait Self := {
        core.clone.Clone.clone := clone;
        core.clone.Clone.clone_from := Datatypes.None;
      }.
    End Impl_core_clone_Clone_for_libc_unix_linux_like_tm_t.
    End Impl_core_clone_Clone_for_libc_unix_linux_like_tm_t.
    
    Module  sched_param.
    Section sched_param.
      Record t : Set := {
        sched_priority : ltac:(libc.unix.c_int);
      }.
      
      Definition Get_sched_priority :=
        Ref.map
          (fun α => Some α.(sched_priority))
          (fun β α => Some (α <| sched_priority := β |>)).
    End sched_param.
    End sched_param.
    
    Module  Impl_core_marker_Copy_for_libc_unix_linux_like_sched_param_t.
    Section Impl_core_marker_Copy_for_libc_unix_linux_like_sched_param_t.
      Definition Self : Set := libc.unix.linux_like.sched_param.t.
      
      Global Instance ℐ : core.marker.Copy.Trait Self := {
      }.
    End Impl_core_marker_Copy_for_libc_unix_linux_like_sched_param_t.
    End Impl_core_marker_Copy_for_libc_unix_linux_like_sched_param_t.
    
    Module  Impl_core_clone_Clone_for_libc_unix_linux_like_sched_param_t.
    Section Impl_core_clone_Clone_for_libc_unix_linux_like_sched_param_t.
      Definition Self : Set := libc.unix.linux_like.sched_param.t.
      
      (*
                  fn clone(&self) -> $i { *self }
      *)
      Definition clone
          (self : ref Self)
          : M libc.unix.linux_like.sched_param.t :=
        let* self := M.alloc self in
        let* α0 : ref libc.unix.linux_like.sched_param.t := M.read self in
        M.read (deref α0).
      
      Global Instance AssociatedFunction_clone :
        Notations.DoubleColon Self "clone" := {
        Notations.double_colon := clone;
      }.
      
      Global Instance ℐ : core.clone.Clone.Required.Trait Self := {
        core.clone.Clone.clone := clone;
        core.clone.Clone.clone_from := Datatypes.None;
      }.
    End Impl_core_clone_Clone_for_libc_unix_linux_like_sched_param_t.
    End Impl_core_clone_Clone_for_libc_unix_linux_like_sched_param_t.
    
    Module  Dl_info.
    Section Dl_info.
      Record t : Set := {
        dli_fname : ref ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.c_char);
        dli_fbase : mut_ref core.ffi.c_void.t;
        dli_sname : ref ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.c_char);
        dli_saddr : mut_ref core.ffi.c_void.t;
      }.
      
      Definition Get_dli_fname :=
        Ref.map
          (fun α => Some α.(dli_fname))
          (fun β α => Some (α <| dli_fname := β |>)).
      Definition Get_dli_fbase :=
        Ref.map
          (fun α => Some α.(dli_fbase))
          (fun β α => Some (α <| dli_fbase := β |>)).
      Definition Get_dli_sname :=
        Ref.map
          (fun α => Some α.(dli_sname))
          (fun β α => Some (α <| dli_sname := β |>)).
      Definition Get_dli_saddr :=
        Ref.map
          (fun α => Some α.(dli_saddr))
          (fun β α => Some (α <| dli_saddr := β |>)).
    End Dl_info.
    End Dl_info.
    
    Module  Impl_core_marker_Copy_for_libc_unix_linux_like_Dl_info_t.
    Section Impl_core_marker_Copy_for_libc_unix_linux_like_Dl_info_t.
      Definition Self : Set := libc.unix.linux_like.Dl_info.t.
      
      Global Instance ℐ : core.marker.Copy.Trait Self := {
      }.
    End Impl_core_marker_Copy_for_libc_unix_linux_like_Dl_info_t.
    End Impl_core_marker_Copy_for_libc_unix_linux_like_Dl_info_t.
    
    Module  Impl_core_clone_Clone_for_libc_unix_linux_like_Dl_info_t.
    Section Impl_core_clone_Clone_for_libc_unix_linux_like_Dl_info_t.
      Definition Self : Set := libc.unix.linux_like.Dl_info.t.
      
      (*
                  fn clone(&self) -> $i { *self }
      *)
      Definition clone (self : ref Self) : M libc.unix.linux_like.Dl_info.t :=
        let* self := M.alloc self in
        let* α0 : ref libc.unix.linux_like.Dl_info.t := M.read self in
        M.read (deref α0).
      
      Global Instance AssociatedFunction_clone :
        Notations.DoubleColon Self "clone" := {
        Notations.double_colon := clone;
      }.
      
      Global Instance ℐ : core.clone.Clone.Required.Trait Self := {
        core.clone.Clone.clone := clone;
        core.clone.Clone.clone_from := Datatypes.None;
      }.
    End Impl_core_clone_Clone_for_libc_unix_linux_like_Dl_info_t.
    End Impl_core_clone_Clone_for_libc_unix_linux_like_Dl_info_t.
    
    Module  lconv.
    Section lconv.
      Record t : Set := {
        decimal_point :
          mut_ref ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.c_char);
        thousands_sep :
          mut_ref ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.c_char);
        grouping :
          mut_ref ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.c_char);
        int_curr_symbol :
          mut_ref ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.c_char);
        currency_symbol :
          mut_ref ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.c_char);
        mon_decimal_point :
          mut_ref ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.c_char);
        mon_thousands_sep :
          mut_ref ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.c_char);
        mon_grouping :
          mut_ref ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.c_char);
        positive_sign :
          mut_ref ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.c_char);
        negative_sign :
          mut_ref ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.c_char);
        int_frac_digits :
          ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.c_char);
        frac_digits : ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.c_char);
        p_cs_precedes : ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.c_char);
        p_sep_by_space :
          ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.c_char);
        n_cs_precedes : ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.c_char);
        n_sep_by_space :
          ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.c_char);
        p_sign_posn : ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.c_char);
        n_sign_posn : ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.c_char);
        int_p_cs_precedes :
          ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.c_char);
        int_p_sep_by_space :
          ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.c_char);
        int_n_cs_precedes :
          ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.c_char);
        int_n_sep_by_space :
          ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.c_char);
        int_p_sign_posn :
          ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.c_char);
        int_n_sign_posn :
          ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.c_char);
      }.
      
      Definition Get_decimal_point :=
        Ref.map
          (fun α => Some α.(decimal_point))
          (fun β α => Some (α <| decimal_point := β |>)).
      Definition Get_thousands_sep :=
        Ref.map
          (fun α => Some α.(thousands_sep))
          (fun β α => Some (α <| thousands_sep := β |>)).
      Definition Get_grouping :=
        Ref.map
          (fun α => Some α.(grouping))
          (fun β α => Some (α <| grouping := β |>)).
      Definition Get_int_curr_symbol :=
        Ref.map
          (fun α => Some α.(int_curr_symbol))
          (fun β α => Some (α <| int_curr_symbol := β |>)).
      Definition Get_currency_symbol :=
        Ref.map
          (fun α => Some α.(currency_symbol))
          (fun β α => Some (α <| currency_symbol := β |>)).
      Definition Get_mon_decimal_point :=
        Ref.map
          (fun α => Some α.(mon_decimal_point))
          (fun β α => Some (α <| mon_decimal_point := β |>)).
      Definition Get_mon_thousands_sep :=
        Ref.map
          (fun α => Some α.(mon_thousands_sep))
          (fun β α => Some (α <| mon_thousands_sep := β |>)).
      Definition Get_mon_grouping :=
        Ref.map
          (fun α => Some α.(mon_grouping))
          (fun β α => Some (α <| mon_grouping := β |>)).
      Definition Get_positive_sign :=
        Ref.map
          (fun α => Some α.(positive_sign))
          (fun β α => Some (α <| positive_sign := β |>)).
      Definition Get_negative_sign :=
        Ref.map
          (fun α => Some α.(negative_sign))
          (fun β α => Some (α <| negative_sign := β |>)).
      Definition Get_int_frac_digits :=
        Ref.map
          (fun α => Some α.(int_frac_digits))
          (fun β α => Some (α <| int_frac_digits := β |>)).
      Definition Get_frac_digits :=
        Ref.map
          (fun α => Some α.(frac_digits))
          (fun β α => Some (α <| frac_digits := β |>)).
      Definition Get_p_cs_precedes :=
        Ref.map
          (fun α => Some α.(p_cs_precedes))
          (fun β α => Some (α <| p_cs_precedes := β |>)).
      Definition Get_p_sep_by_space :=
        Ref.map
          (fun α => Some α.(p_sep_by_space))
          (fun β α => Some (α <| p_sep_by_space := β |>)).
      Definition Get_n_cs_precedes :=
        Ref.map
          (fun α => Some α.(n_cs_precedes))
          (fun β α => Some (α <| n_cs_precedes := β |>)).
      Definition Get_n_sep_by_space :=
        Ref.map
          (fun α => Some α.(n_sep_by_space))
          (fun β α => Some (α <| n_sep_by_space := β |>)).
      Definition Get_p_sign_posn :=
        Ref.map
          (fun α => Some α.(p_sign_posn))
          (fun β α => Some (α <| p_sign_posn := β |>)).
      Definition Get_n_sign_posn :=
        Ref.map
          (fun α => Some α.(n_sign_posn))
          (fun β α => Some (α <| n_sign_posn := β |>)).
      Definition Get_int_p_cs_precedes :=
        Ref.map
          (fun α => Some α.(int_p_cs_precedes))
          (fun β α => Some (α <| int_p_cs_precedes := β |>)).
      Definition Get_int_p_sep_by_space :=
        Ref.map
          (fun α => Some α.(int_p_sep_by_space))
          (fun β α => Some (α <| int_p_sep_by_space := β |>)).
      Definition Get_int_n_cs_precedes :=
        Ref.map
          (fun α => Some α.(int_n_cs_precedes))
          (fun β α => Some (α <| int_n_cs_precedes := β |>)).
      Definition Get_int_n_sep_by_space :=
        Ref.map
          (fun α => Some α.(int_n_sep_by_space))
          (fun β α => Some (α <| int_n_sep_by_space := β |>)).
      Definition Get_int_p_sign_posn :=
        Ref.map
          (fun α => Some α.(int_p_sign_posn))
          (fun β α => Some (α <| int_p_sign_posn := β |>)).
      Definition Get_int_n_sign_posn :=
        Ref.map
          (fun α => Some α.(int_n_sign_posn))
          (fun β α => Some (α <| int_n_sign_posn := β |>)).
    End lconv.
    End lconv.
    
    Module  Impl_core_marker_Copy_for_libc_unix_linux_like_lconv_t.
    Section Impl_core_marker_Copy_for_libc_unix_linux_like_lconv_t.
      Definition Self : Set := libc.unix.linux_like.lconv.t.
      
      Global Instance ℐ : core.marker.Copy.Trait Self := {
      }.
    End Impl_core_marker_Copy_for_libc_unix_linux_like_lconv_t.
    End Impl_core_marker_Copy_for_libc_unix_linux_like_lconv_t.
    
    Module  Impl_core_clone_Clone_for_libc_unix_linux_like_lconv_t.
    Section Impl_core_clone_Clone_for_libc_unix_linux_like_lconv_t.
      Definition Self : Set := libc.unix.linux_like.lconv.t.
      
      (*
                  fn clone(&self) -> $i { *self }
      *)
      Definition clone (self : ref Self) : M libc.unix.linux_like.lconv.t :=
        let* self := M.alloc self in
        let* α0 : ref libc.unix.linux_like.lconv.t := M.read self in
        M.read (deref α0).
      
      Global Instance AssociatedFunction_clone :
        Notations.DoubleColon Self "clone" := {
        Notations.double_colon := clone;
      }.
      
      Global Instance ℐ : core.clone.Clone.Required.Trait Self := {
        core.clone.Clone.clone := clone;
        core.clone.Clone.clone_from := Datatypes.None;
      }.
    End Impl_core_clone_Clone_for_libc_unix_linux_like_lconv_t.
    End Impl_core_clone_Clone_for_libc_unix_linux_like_lconv_t.
    
    Module  in_pktinfo.
    Section in_pktinfo.
      Record t : Set := {
        ipi_ifindex : ltac:(libc.unix.c_int);
        ipi_spec_dst : libc.unix.linux_like.in_addr.t;
        ipi_addr : libc.unix.linux_like.in_addr.t;
      }.
      
      Definition Get_ipi_ifindex :=
        Ref.map
          (fun α => Some α.(ipi_ifindex))
          (fun β α => Some (α <| ipi_ifindex := β |>)).
      Definition Get_ipi_spec_dst :=
        Ref.map
          (fun α => Some α.(ipi_spec_dst))
          (fun β α => Some (α <| ipi_spec_dst := β |>)).
      Definition Get_ipi_addr :=
        Ref.map
          (fun α => Some α.(ipi_addr))
          (fun β α => Some (α <| ipi_addr := β |>)).
    End in_pktinfo.
    End in_pktinfo.
    
    Module  Impl_core_marker_Copy_for_libc_unix_linux_like_in_pktinfo_t.
    Section Impl_core_marker_Copy_for_libc_unix_linux_like_in_pktinfo_t.
      Definition Self : Set := libc.unix.linux_like.in_pktinfo.t.
      
      Global Instance ℐ : core.marker.Copy.Trait Self := {
      }.
    End Impl_core_marker_Copy_for_libc_unix_linux_like_in_pktinfo_t.
    End Impl_core_marker_Copy_for_libc_unix_linux_like_in_pktinfo_t.
    
    Module  Impl_core_clone_Clone_for_libc_unix_linux_like_in_pktinfo_t.
    Section Impl_core_clone_Clone_for_libc_unix_linux_like_in_pktinfo_t.
      Definition Self : Set := libc.unix.linux_like.in_pktinfo.t.
      
      (*
                  fn clone(&self) -> $i { *self }
      *)
      Definition clone
          (self : ref Self)
          : M libc.unix.linux_like.in_pktinfo.t :=
        let* self := M.alloc self in
        let* α0 : ref libc.unix.linux_like.in_pktinfo.t := M.read self in
        M.read (deref α0).
      
      Global Instance AssociatedFunction_clone :
        Notations.DoubleColon Self "clone" := {
        Notations.double_colon := clone;
      }.
      
      Global Instance ℐ : core.clone.Clone.Required.Trait Self := {
        core.clone.Clone.clone := clone;
        core.clone.Clone.clone_from := Datatypes.None;
      }.
    End Impl_core_clone_Clone_for_libc_unix_linux_like_in_pktinfo_t.
    End Impl_core_clone_Clone_for_libc_unix_linux_like_in_pktinfo_t.
    
    Module  ifaddrs.
    Section ifaddrs.
      Record t : Set := {
        ifa_next : mut_ref libc.unix.linux_like.ifaddrs.t;
        ifa_name :
          mut_ref ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.c_char);
        ifa_flags : ltac:(libc.unix.c_uint);
        ifa_addr : mut_ref libc.unix.linux_like.sockaddr.t;
        ifa_netmask : mut_ref libc.unix.linux_like.sockaddr.t;
        ifa_ifu : mut_ref libc.unix.linux_like.sockaddr.t;
        ifa_data : mut_ref core.ffi.c_void.t;
      }.
      
      Definition Get_ifa_next :=
        Ref.map
          (fun α => Some α.(ifa_next))
          (fun β α => Some (α <| ifa_next := β |>)).
      Definition Get_ifa_name :=
        Ref.map
          (fun α => Some α.(ifa_name))
          (fun β α => Some (α <| ifa_name := β |>)).
      Definition Get_ifa_flags :=
        Ref.map
          (fun α => Some α.(ifa_flags))
          (fun β α => Some (α <| ifa_flags := β |>)).
      Definition Get_ifa_addr :=
        Ref.map
          (fun α => Some α.(ifa_addr))
          (fun β α => Some (α <| ifa_addr := β |>)).
      Definition Get_ifa_netmask :=
        Ref.map
          (fun α => Some α.(ifa_netmask))
          (fun β α => Some (α <| ifa_netmask := β |>)).
      Definition Get_ifa_ifu :=
        Ref.map
          (fun α => Some α.(ifa_ifu))
          (fun β α => Some (α <| ifa_ifu := β |>)).
      Definition Get_ifa_data :=
        Ref.map
          (fun α => Some α.(ifa_data))
          (fun β α => Some (α <| ifa_data := β |>)).
    End ifaddrs.
    End ifaddrs.
    
    Module  Impl_core_marker_Copy_for_libc_unix_linux_like_ifaddrs_t.
    Section Impl_core_marker_Copy_for_libc_unix_linux_like_ifaddrs_t.
      Definition Self : Set := libc.unix.linux_like.ifaddrs.t.
      
      Global Instance ℐ : core.marker.Copy.Trait Self := {
      }.
    End Impl_core_marker_Copy_for_libc_unix_linux_like_ifaddrs_t.
    End Impl_core_marker_Copy_for_libc_unix_linux_like_ifaddrs_t.
    
    Module  Impl_core_clone_Clone_for_libc_unix_linux_like_ifaddrs_t.
    Section Impl_core_clone_Clone_for_libc_unix_linux_like_ifaddrs_t.
      Definition Self : Set := libc.unix.linux_like.ifaddrs.t.
      
      (*
                  fn clone(&self) -> $i { *self }
      *)
      Definition clone (self : ref Self) : M libc.unix.linux_like.ifaddrs.t :=
        let* self := M.alloc self in
        let* α0 : ref libc.unix.linux_like.ifaddrs.t := M.read self in
        M.read (deref α0).
      
      Global Instance AssociatedFunction_clone :
        Notations.DoubleColon Self "clone" := {
        Notations.double_colon := clone;
      }.
      
      Global Instance ℐ : core.clone.Clone.Required.Trait Self := {
        core.clone.Clone.clone := clone;
        core.clone.Clone.clone_from := Datatypes.None;
      }.
    End Impl_core_clone_Clone_for_libc_unix_linux_like_ifaddrs_t.
    End Impl_core_clone_Clone_for_libc_unix_linux_like_ifaddrs_t.
    
    Module  in6_rtmsg.
    Section in6_rtmsg.
      Record t : Set := {
        rtmsg_dst : libc.unix.align.in6_addr.t;
        rtmsg_src : libc.unix.align.in6_addr.t;
        rtmsg_gateway : libc.unix.align.in6_addr.t;
        rtmsg_type : u32.t;
        rtmsg_dst_len : u16.t;
        rtmsg_src_len : u16.t;
        rtmsg_metric : u32.t;
        rtmsg_info :
          ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_ulong);
        rtmsg_flags : u32.t;
        rtmsg_ifindex : ltac:(libc.unix.c_int);
      }.
      
      Definition Get_rtmsg_dst :=
        Ref.map
          (fun α => Some α.(rtmsg_dst))
          (fun β α => Some (α <| rtmsg_dst := β |>)).
      Definition Get_rtmsg_src :=
        Ref.map
          (fun α => Some α.(rtmsg_src))
          (fun β α => Some (α <| rtmsg_src := β |>)).
      Definition Get_rtmsg_gateway :=
        Ref.map
          (fun α => Some α.(rtmsg_gateway))
          (fun β α => Some (α <| rtmsg_gateway := β |>)).
      Definition Get_rtmsg_type :=
        Ref.map
          (fun α => Some α.(rtmsg_type))
          (fun β α => Some (α <| rtmsg_type := β |>)).
      Definition Get_rtmsg_dst_len :=
        Ref.map
          (fun α => Some α.(rtmsg_dst_len))
          (fun β α => Some (α <| rtmsg_dst_len := β |>)).
      Definition Get_rtmsg_src_len :=
        Ref.map
          (fun α => Some α.(rtmsg_src_len))
          (fun β α => Some (α <| rtmsg_src_len := β |>)).
      Definition Get_rtmsg_metric :=
        Ref.map
          (fun α => Some α.(rtmsg_metric))
          (fun β α => Some (α <| rtmsg_metric := β |>)).
      Definition Get_rtmsg_info :=
        Ref.map
          (fun α => Some α.(rtmsg_info))
          (fun β α => Some (α <| rtmsg_info := β |>)).
      Definition Get_rtmsg_flags :=
        Ref.map
          (fun α => Some α.(rtmsg_flags))
          (fun β α => Some (α <| rtmsg_flags := β |>)).
      Definition Get_rtmsg_ifindex :=
        Ref.map
          (fun α => Some α.(rtmsg_ifindex))
          (fun β α => Some (α <| rtmsg_ifindex := β |>)).
    End in6_rtmsg.
    End in6_rtmsg.
    
    Module  Impl_core_marker_Copy_for_libc_unix_linux_like_in6_rtmsg_t.
    Section Impl_core_marker_Copy_for_libc_unix_linux_like_in6_rtmsg_t.
      Definition Self : Set := libc.unix.linux_like.in6_rtmsg.t.
      
      Global Instance ℐ : core.marker.Copy.Trait Self := {
      }.
    End Impl_core_marker_Copy_for_libc_unix_linux_like_in6_rtmsg_t.
    End Impl_core_marker_Copy_for_libc_unix_linux_like_in6_rtmsg_t.
    
    Module  Impl_core_clone_Clone_for_libc_unix_linux_like_in6_rtmsg_t.
    Section Impl_core_clone_Clone_for_libc_unix_linux_like_in6_rtmsg_t.
      Definition Self : Set := libc.unix.linux_like.in6_rtmsg.t.
      
      (*
                  fn clone(&self) -> $i { *self }
      *)
      Definition clone (self : ref Self) : M libc.unix.linux_like.in6_rtmsg.t :=
        let* self := M.alloc self in
        let* α0 : ref libc.unix.linux_like.in6_rtmsg.t := M.read self in
        M.read (deref α0).
      
      Global Instance AssociatedFunction_clone :
        Notations.DoubleColon Self "clone" := {
        Notations.double_colon := clone;
      }.
      
      Global Instance ℐ : core.clone.Clone.Required.Trait Self := {
        core.clone.Clone.clone := clone;
        core.clone.Clone.clone_from := Datatypes.None;
      }.
    End Impl_core_clone_Clone_for_libc_unix_linux_like_in6_rtmsg_t.
    End Impl_core_clone_Clone_for_libc_unix_linux_like_in6_rtmsg_t.
    
    Module  arpreq.
    Section arpreq.
      Record t : Set := {
        arp_pa : libc.unix.linux_like.sockaddr.t;
        arp_ha : libc.unix.linux_like.sockaddr.t;
        arp_flags : ltac:(libc.unix.c_int);
        arp_netmask : libc.unix.linux_like.sockaddr.t;
        arp_dev : array ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.c_char);
      }.
      
      Definition Get_arp_pa :=
        Ref.map
          (fun α => Some α.(arp_pa))
          (fun β α => Some (α <| arp_pa := β |>)).
      Definition Get_arp_ha :=
        Ref.map
          (fun α => Some α.(arp_ha))
          (fun β α => Some (α <| arp_ha := β |>)).
      Definition Get_arp_flags :=
        Ref.map
          (fun α => Some α.(arp_flags))
          (fun β α => Some (α <| arp_flags := β |>)).
      Definition Get_arp_netmask :=
        Ref.map
          (fun α => Some α.(arp_netmask))
          (fun β α => Some (α <| arp_netmask := β |>)).
      Definition Get_arp_dev :=
        Ref.map
          (fun α => Some α.(arp_dev))
          (fun β α => Some (α <| arp_dev := β |>)).
    End arpreq.
    End arpreq.
    
    Module  Impl_core_marker_Copy_for_libc_unix_linux_like_arpreq_t.
    Section Impl_core_marker_Copy_for_libc_unix_linux_like_arpreq_t.
      Definition Self : Set := libc.unix.linux_like.arpreq.t.
      
      Global Instance ℐ : core.marker.Copy.Trait Self := {
      }.
    End Impl_core_marker_Copy_for_libc_unix_linux_like_arpreq_t.
    End Impl_core_marker_Copy_for_libc_unix_linux_like_arpreq_t.
    
    Module  Impl_core_clone_Clone_for_libc_unix_linux_like_arpreq_t.
    Section Impl_core_clone_Clone_for_libc_unix_linux_like_arpreq_t.
      Definition Self : Set := libc.unix.linux_like.arpreq.t.
      
      (*
                  fn clone(&self) -> $i { *self }
      *)
      Definition clone (self : ref Self) : M libc.unix.linux_like.arpreq.t :=
        let* self := M.alloc self in
        let* α0 : ref libc.unix.linux_like.arpreq.t := M.read self in
        M.read (deref α0).
      
      Global Instance AssociatedFunction_clone :
        Notations.DoubleColon Self "clone" := {
        Notations.double_colon := clone;
      }.
      
      Global Instance ℐ : core.clone.Clone.Required.Trait Self := {
        core.clone.Clone.clone := clone;
        core.clone.Clone.clone_from := Datatypes.None;
      }.
    End Impl_core_clone_Clone_for_libc_unix_linux_like_arpreq_t.
    End Impl_core_clone_Clone_for_libc_unix_linux_like_arpreq_t.
    
    Module  arpreq_old.
    Section arpreq_old.
      Record t : Set := {
        arp_pa : libc.unix.linux_like.sockaddr.t;
        arp_ha : libc.unix.linux_like.sockaddr.t;
        arp_flags : ltac:(libc.unix.c_int);
        arp_netmask : libc.unix.linux_like.sockaddr.t;
      }.
      
      Definition Get_arp_pa :=
        Ref.map
          (fun α => Some α.(arp_pa))
          (fun β α => Some (α <| arp_pa := β |>)).
      Definition Get_arp_ha :=
        Ref.map
          (fun α => Some α.(arp_ha))
          (fun β α => Some (α <| arp_ha := β |>)).
      Definition Get_arp_flags :=
        Ref.map
          (fun α => Some α.(arp_flags))
          (fun β α => Some (α <| arp_flags := β |>)).
      Definition Get_arp_netmask :=
        Ref.map
          (fun α => Some α.(arp_netmask))
          (fun β α => Some (α <| arp_netmask := β |>)).
    End arpreq_old.
    End arpreq_old.
    
    Module  Impl_core_marker_Copy_for_libc_unix_linux_like_arpreq_old_t.
    Section Impl_core_marker_Copy_for_libc_unix_linux_like_arpreq_old_t.
      Definition Self : Set := libc.unix.linux_like.arpreq_old.t.
      
      Global Instance ℐ : core.marker.Copy.Trait Self := {
      }.
    End Impl_core_marker_Copy_for_libc_unix_linux_like_arpreq_old_t.
    End Impl_core_marker_Copy_for_libc_unix_linux_like_arpreq_old_t.
    
    Module  Impl_core_clone_Clone_for_libc_unix_linux_like_arpreq_old_t.
    Section Impl_core_clone_Clone_for_libc_unix_linux_like_arpreq_old_t.
      Definition Self : Set := libc.unix.linux_like.arpreq_old.t.
      
      (*
                  fn clone(&self) -> $i { *self }
      *)
      Definition clone
          (self : ref Self)
          : M libc.unix.linux_like.arpreq_old.t :=
        let* self := M.alloc self in
        let* α0 : ref libc.unix.linux_like.arpreq_old.t := M.read self in
        M.read (deref α0).
      
      Global Instance AssociatedFunction_clone :
        Notations.DoubleColon Self "clone" := {
        Notations.double_colon := clone;
      }.
      
      Global Instance ℐ : core.clone.Clone.Required.Trait Self := {
        core.clone.Clone.clone := clone;
        core.clone.Clone.clone_from := Datatypes.None;
      }.
    End Impl_core_clone_Clone_for_libc_unix_linux_like_arpreq_old_t.
    End Impl_core_clone_Clone_for_libc_unix_linux_like_arpreq_old_t.
    
    Module  arphdr.
    Section arphdr.
      Record t : Set := {
        ar_hrd : u16.t;
        ar_pro : u16.t;
        ar_hln : u8.t;
        ar_pln : u8.t;
        ar_op : u16.t;
      }.
      
      Definition Get_ar_hrd :=
        Ref.map
          (fun α => Some α.(ar_hrd))
          (fun β α => Some (α <| ar_hrd := β |>)).
      Definition Get_ar_pro :=
        Ref.map
          (fun α => Some α.(ar_pro))
          (fun β α => Some (α <| ar_pro := β |>)).
      Definition Get_ar_hln :=
        Ref.map
          (fun α => Some α.(ar_hln))
          (fun β α => Some (α <| ar_hln := β |>)).
      Definition Get_ar_pln :=
        Ref.map
          (fun α => Some α.(ar_pln))
          (fun β α => Some (α <| ar_pln := β |>)).
      Definition Get_ar_op :=
        Ref.map
          (fun α => Some α.(ar_op))
          (fun β α => Some (α <| ar_op := β |>)).
    End arphdr.
    End arphdr.
    
    Module  Impl_core_marker_Copy_for_libc_unix_linux_like_arphdr_t.
    Section Impl_core_marker_Copy_for_libc_unix_linux_like_arphdr_t.
      Definition Self : Set := libc.unix.linux_like.arphdr.t.
      
      Global Instance ℐ : core.marker.Copy.Trait Self := {
      }.
    End Impl_core_marker_Copy_for_libc_unix_linux_like_arphdr_t.
    End Impl_core_marker_Copy_for_libc_unix_linux_like_arphdr_t.
    
    Module  Impl_core_clone_Clone_for_libc_unix_linux_like_arphdr_t.
    Section Impl_core_clone_Clone_for_libc_unix_linux_like_arphdr_t.
      Definition Self : Set := libc.unix.linux_like.arphdr.t.
      
      (*
                  fn clone(&self) -> $i { *self }
      *)
      Definition clone (self : ref Self) : M libc.unix.linux_like.arphdr.t :=
        let* self := M.alloc self in
        let* α0 : ref libc.unix.linux_like.arphdr.t := M.read self in
        M.read (deref α0).
      
      Global Instance AssociatedFunction_clone :
        Notations.DoubleColon Self "clone" := {
        Notations.double_colon := clone;
      }.
      
      Global Instance ℐ : core.clone.Clone.Required.Trait Self := {
        core.clone.Clone.clone := clone;
        core.clone.Clone.clone_from := Datatypes.None;
      }.
    End Impl_core_clone_Clone_for_libc_unix_linux_like_arphdr_t.
    End Impl_core_clone_Clone_for_libc_unix_linux_like_arphdr_t.
    
    Module  mmsghdr.
    Section mmsghdr.
      Record t : Set := {
        msg_hdr : libc.unix.linux_like.linux.gnu.msghdr.t;
        msg_len : ltac:(libc.unix.c_uint);
      }.
      
      Definition Get_msg_hdr :=
        Ref.map
          (fun α => Some α.(msg_hdr))
          (fun β α => Some (α <| msg_hdr := β |>)).
      Definition Get_msg_len :=
        Ref.map
          (fun α => Some α.(msg_len))
          (fun β α => Some (α <| msg_len := β |>)).
    End mmsghdr.
    End mmsghdr.
    
    Module  Impl_core_marker_Copy_for_libc_unix_linux_like_mmsghdr_t.
    Section Impl_core_marker_Copy_for_libc_unix_linux_like_mmsghdr_t.
      Definition Self : Set := libc.unix.linux_like.mmsghdr.t.
      
      Global Instance ℐ : core.marker.Copy.Trait Self := {
      }.
    End Impl_core_marker_Copy_for_libc_unix_linux_like_mmsghdr_t.
    End Impl_core_marker_Copy_for_libc_unix_linux_like_mmsghdr_t.
    
    Module  Impl_core_clone_Clone_for_libc_unix_linux_like_mmsghdr_t.
    Section Impl_core_clone_Clone_for_libc_unix_linux_like_mmsghdr_t.
      Definition Self : Set := libc.unix.linux_like.mmsghdr.t.
      
      (*
                  fn clone(&self) -> $i { *self }
      *)
      Definition clone (self : ref Self) : M libc.unix.linux_like.mmsghdr.t :=
        let* self := M.alloc self in
        let* α0 : ref libc.unix.linux_like.mmsghdr.t := M.read self in
        M.read (deref α0).
      
      Global Instance AssociatedFunction_clone :
        Notations.DoubleColon Self "clone" := {
        Notations.double_colon := clone;
      }.
      
      Global Instance ℐ : core.clone.Clone.Required.Trait Self := {
        core.clone.Clone.clone := clone;
        core.clone.Clone.clone_from := Datatypes.None;
      }.
    End Impl_core_clone_Clone_for_libc_unix_linux_like_mmsghdr_t.
    End Impl_core_clone_Clone_for_libc_unix_linux_like_mmsghdr_t.
    
    Module  epoll_event.
    Section epoll_event.
      Record t : Set := {
        events : u32.t;
        u64 : u64.t;
      }.
      
      Definition Get_events :=
        Ref.map
          (fun α => Some α.(events))
          (fun β α => Some (α <| events := β |>)).
      Definition Get_u64 :=
        Ref.map (fun α => Some α.(u64)) (fun β α => Some (α <| u64 := β |>)).
    End epoll_event.
    End epoll_event.
    
    Module  Impl_core_marker_Copy_for_libc_unix_linux_like_epoll_event_t.
    Section Impl_core_marker_Copy_for_libc_unix_linux_like_epoll_event_t.
      Definition Self : Set := libc.unix.linux_like.epoll_event.t.
      
      Global Instance ℐ : core.marker.Copy.Trait Self := {
      }.
    End Impl_core_marker_Copy_for_libc_unix_linux_like_epoll_event_t.
    End Impl_core_marker_Copy_for_libc_unix_linux_like_epoll_event_t.
    
    Module  Impl_core_clone_Clone_for_libc_unix_linux_like_epoll_event_t.
    Section Impl_core_clone_Clone_for_libc_unix_linux_like_epoll_event_t.
      Definition Self : Set := libc.unix.linux_like.epoll_event.t.
      
      (*
                  fn clone(&self) -> $i { *self }
      *)
      Definition clone
          (self : ref Self)
          : M libc.unix.linux_like.epoll_event.t :=
        let* self := M.alloc self in
        let* α0 : ref libc.unix.linux_like.epoll_event.t := M.read self in
        M.read (deref α0).
      
      Global Instance AssociatedFunction_clone :
        Notations.DoubleColon Self "clone" := {
        Notations.double_colon := clone;
      }.
      
      Global Instance ℐ : core.clone.Clone.Required.Trait Self := {
        core.clone.Clone.clone := clone;
        core.clone.Clone.clone_from := Datatypes.None;
      }.
    End Impl_core_clone_Clone_for_libc_unix_linux_like_epoll_event_t.
    End Impl_core_clone_Clone_for_libc_unix_linux_like_epoll_event_t.
    
    Module  sockaddr_un.
    Section sockaddr_un.
      Record t : Set := {
        sun_family : ltac:(libc.unix.linux_like.sa_family_t);
        sun_path :
          array ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.c_char);
      }.
      
      Definition Get_sun_family :=
        Ref.map
          (fun α => Some α.(sun_family))
          (fun β α => Some (α <| sun_family := β |>)).
      Definition Get_sun_path :=
        Ref.map
          (fun α => Some α.(sun_path))
          (fun β α => Some (α <| sun_path := β |>)).
    End sockaddr_un.
    End sockaddr_un.
    
    Module  Impl_core_marker_Copy_for_libc_unix_linux_like_sockaddr_un_t.
    Section Impl_core_marker_Copy_for_libc_unix_linux_like_sockaddr_un_t.
      Definition Self : Set := libc.unix.linux_like.sockaddr_un.t.
      
      Global Instance ℐ : core.marker.Copy.Trait Self := {
      }.
    End Impl_core_marker_Copy_for_libc_unix_linux_like_sockaddr_un_t.
    End Impl_core_marker_Copy_for_libc_unix_linux_like_sockaddr_un_t.
    
    Module  Impl_core_clone_Clone_for_libc_unix_linux_like_sockaddr_un_t.
    Section Impl_core_clone_Clone_for_libc_unix_linux_like_sockaddr_un_t.
      Definition Self : Set := libc.unix.linux_like.sockaddr_un.t.
      
      (*
                  fn clone(&self) -> $i { *self }
      *)
      Definition clone
          (self : ref Self)
          : M libc.unix.linux_like.sockaddr_un.t :=
        let* self := M.alloc self in
        let* α0 : ref libc.unix.linux_like.sockaddr_un.t := M.read self in
        M.read (deref α0).
      
      Global Instance AssociatedFunction_clone :
        Notations.DoubleColon Self "clone" := {
        Notations.double_colon := clone;
      }.
      
      Global Instance ℐ : core.clone.Clone.Required.Trait Self := {
        core.clone.Clone.clone := clone;
        core.clone.Clone.clone_from := Datatypes.None;
      }.
    End Impl_core_clone_Clone_for_libc_unix_linux_like_sockaddr_un_t.
    End Impl_core_clone_Clone_for_libc_unix_linux_like_sockaddr_un_t.
    
    Module  sockaddr_storage.
    Section sockaddr_storage.
      Record t : Set := {
        ss_family : ltac:(libc.unix.linux_like.sa_family_t);
        __ss_pad2 : array u8.t;
        __ss_align : ltac:(libc.unix.size_t);
      }.
      
      Definition Get_ss_family :=
        Ref.map
          (fun α => Some α.(ss_family))
          (fun β α => Some (α <| ss_family := β |>)).
      Definition Get___ss_pad2 :=
        Ref.map
          (fun α => Some α.(__ss_pad2))
          (fun β α => Some (α <| __ss_pad2 := β |>)).
      Definition Get___ss_align :=
        Ref.map
          (fun α => Some α.(__ss_align))
          (fun β α => Some (α <| __ss_align := β |>)).
    End sockaddr_storage.
    End sockaddr_storage.
    
    Module  Impl_core_marker_Copy_for_libc_unix_linux_like_sockaddr_storage_t.
    Section Impl_core_marker_Copy_for_libc_unix_linux_like_sockaddr_storage_t.
      Definition Self : Set := libc.unix.linux_like.sockaddr_storage.t.
      
      Global Instance ℐ : core.marker.Copy.Trait Self := {
      }.
    End Impl_core_marker_Copy_for_libc_unix_linux_like_sockaddr_storage_t.
    End Impl_core_marker_Copy_for_libc_unix_linux_like_sockaddr_storage_t.
    
    Module  Impl_core_clone_Clone_for_libc_unix_linux_like_sockaddr_storage_t.
    Section Impl_core_clone_Clone_for_libc_unix_linux_like_sockaddr_storage_t.
      Definition Self : Set := libc.unix.linux_like.sockaddr_storage.t.
      
      (*
                  fn clone(&self) -> $i { *self }
      *)
      Definition clone
          (self : ref Self)
          : M libc.unix.linux_like.sockaddr_storage.t :=
        let* self := M.alloc self in
        let* α0 : ref libc.unix.linux_like.sockaddr_storage.t := M.read self in
        M.read (deref α0).
      
      Global Instance AssociatedFunction_clone :
        Notations.DoubleColon Self "clone" := {
        Notations.double_colon := clone;
      }.
      
      Global Instance ℐ : core.clone.Clone.Required.Trait Self := {
        core.clone.Clone.clone := clone;
        core.clone.Clone.clone_from := Datatypes.None;
      }.
    End Impl_core_clone_Clone_for_libc_unix_linux_like_sockaddr_storage_t.
    End Impl_core_clone_Clone_for_libc_unix_linux_like_sockaddr_storage_t.
    
    Module  utsname.
    Section utsname.
      Record t : Set := {
        sysname : array ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.c_char);
        nodename :
          array ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.c_char);
        release : array ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.c_char);
        version : array ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.c_char);
        machine : array ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.c_char);
        domainname :
          array ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.c_char);
      }.
      
      Definition Get_sysname :=
        Ref.map
          (fun α => Some α.(sysname))
          (fun β α => Some (α <| sysname := β |>)).
      Definition Get_nodename :=
        Ref.map
          (fun α => Some α.(nodename))
          (fun β α => Some (α <| nodename := β |>)).
      Definition Get_release :=
        Ref.map
          (fun α => Some α.(release))
          (fun β α => Some (α <| release := β |>)).
      Definition Get_version :=
        Ref.map
          (fun α => Some α.(version))
          (fun β α => Some (α <| version := β |>)).
      Definition Get_machine :=
        Ref.map
          (fun α => Some α.(machine))
          (fun β α => Some (α <| machine := β |>)).
      Definition Get_domainname :=
        Ref.map
          (fun α => Some α.(domainname))
          (fun β α => Some (α <| domainname := β |>)).
    End utsname.
    End utsname.
    
    Module  Impl_core_marker_Copy_for_libc_unix_linux_like_utsname_t.
    Section Impl_core_marker_Copy_for_libc_unix_linux_like_utsname_t.
      Definition Self : Set := libc.unix.linux_like.utsname.t.
      
      Global Instance ℐ : core.marker.Copy.Trait Self := {
      }.
    End Impl_core_marker_Copy_for_libc_unix_linux_like_utsname_t.
    End Impl_core_marker_Copy_for_libc_unix_linux_like_utsname_t.
    
    Module  Impl_core_clone_Clone_for_libc_unix_linux_like_utsname_t.
    Section Impl_core_clone_Clone_for_libc_unix_linux_like_utsname_t.
      Definition Self : Set := libc.unix.linux_like.utsname.t.
      
      (*
                  fn clone(&self) -> $i { *self }
      *)
      Definition clone (self : ref Self) : M libc.unix.linux_like.utsname.t :=
        let* self := M.alloc self in
        let* α0 : ref libc.unix.linux_like.utsname.t := M.read self in
        M.read (deref α0).
      
      Global Instance AssociatedFunction_clone :
        Notations.DoubleColon Self "clone" := {
        Notations.double_colon := clone;
      }.
      
      Global Instance ℐ : core.clone.Clone.Required.Trait Self := {
        core.clone.Clone.clone := clone;
        core.clone.Clone.clone_from := Datatypes.None;
      }.
    End Impl_core_clone_Clone_for_libc_unix_linux_like_utsname_t.
    End Impl_core_clone_Clone_for_libc_unix_linux_like_utsname_t.
    
    Module  sigevent.
    Section sigevent.
      Record t : Set := {
        sigev_value : libc.unix.sigval.t;
        sigev_signo : ltac:(libc.unix.c_int);
        sigev_notify : ltac:(libc.unix.c_int);
        sigev_notify_thread_id : ltac:(libc.unix.c_int);
        __unused1 : array ltac:(libc.unix.c_int);
      }.
      
      Definition Get_sigev_value :=
        Ref.map
          (fun α => Some α.(sigev_value))
          (fun β α => Some (α <| sigev_value := β |>)).
      Definition Get_sigev_signo :=
        Ref.map
          (fun α => Some α.(sigev_signo))
          (fun β α => Some (α <| sigev_signo := β |>)).
      Definition Get_sigev_notify :=
        Ref.map
          (fun α => Some α.(sigev_notify))
          (fun β α => Some (α <| sigev_notify := β |>)).
      Definition Get_sigev_notify_thread_id :=
        Ref.map
          (fun α => Some α.(sigev_notify_thread_id))
          (fun β α => Some (α <| sigev_notify_thread_id := β |>)).
      Definition Get___unused1 :=
        Ref.map
          (fun α => Some α.(__unused1))
          (fun β α => Some (α <| __unused1 := β |>)).
    End sigevent.
    End sigevent.
    
    Module  Impl_core_marker_Copy_for_libc_unix_linux_like_sigevent_t.
    Section Impl_core_marker_Copy_for_libc_unix_linux_like_sigevent_t.
      Definition Self : Set := libc.unix.linux_like.sigevent.t.
      
      Global Instance ℐ : core.marker.Copy.Trait Self := {
      }.
    End Impl_core_marker_Copy_for_libc_unix_linux_like_sigevent_t.
    End Impl_core_marker_Copy_for_libc_unix_linux_like_sigevent_t.
    
    Module  Impl_core_clone_Clone_for_libc_unix_linux_like_sigevent_t.
    Section Impl_core_clone_Clone_for_libc_unix_linux_like_sigevent_t.
      Definition Self : Set := libc.unix.linux_like.sigevent.t.
      
      (*
                  fn clone(&self) -> $i { *self }
      *)
      Definition clone (self : ref Self) : M libc.unix.linux_like.sigevent.t :=
        let* self := M.alloc self in
        let* α0 : ref libc.unix.linux_like.sigevent.t := M.read self in
        M.read (deref α0).
      
      Global Instance AssociatedFunction_clone :
        Notations.DoubleColon Self "clone" := {
        Notations.double_colon := clone;
      }.
      
      Global Instance ℐ : core.clone.Clone.Required.Trait Self := {
        core.clone.Clone.clone := clone;
        core.clone.Clone.clone_from := Datatypes.None;
      }.
    End Impl_core_clone_Clone_for_libc_unix_linux_like_sigevent_t.
    End Impl_core_clone_Clone_for_libc_unix_linux_like_sigevent_t.
    
    Definition ULONG_SIZE : M.Val usize.t :=
      M.run (M.alloc ((Integer.of_Z 64) : usize.t)).
    
    Definition EXIT_FAILURE : M.Val ltac:(libc.unix.c_int) :=
      M.run (M.alloc ((Integer.of_Z 1) : i32.t)).
    
    Definition EXIT_SUCCESS : M.Val ltac:(libc.unix.c_int) :=
      M.run (M.alloc ((Integer.of_Z 0) : i32.t)).
    
    Definition RAND_MAX : M.Val ltac:(libc.unix.c_int) :=
      M.run (M.alloc ((Integer.of_Z 2147483647) : i32.t)).
    
    Definition EOF : M.Val ltac:(libc.unix.c_int) :=
      M.run (M.alloc ((Integer.of_Z (-1)) : i32.t)).
    
    Definition SEEK_SET : M.Val ltac:(libc.unix.c_int) :=
      M.run (M.alloc ((Integer.of_Z 0) : i32.t)).
    
    Definition SEEK_CUR : M.Val ltac:(libc.unix.c_int) :=
      M.run (M.alloc ((Integer.of_Z 1) : i32.t)).
    
    Definition SEEK_END : M.Val ltac:(libc.unix.c_int) :=
      M.run (M.alloc ((Integer.of_Z 2) : i32.t)).
    
    Definition _IOFBF : M.Val ltac:(libc.unix.c_int) :=
      M.run (M.alloc ((Integer.of_Z 0) : i32.t)).
    
    Definition _IONBF : M.Val ltac:(libc.unix.c_int) :=
      M.run (M.alloc ((Integer.of_Z 2) : i32.t)).
    
    Definition _IOLBF : M.Val ltac:(libc.unix.c_int) :=
      M.run (M.alloc ((Integer.of_Z 1) : i32.t)).
    
    Definition F_DUPFD : M.Val ltac:(libc.unix.c_int) :=
      M.run (M.alloc ((Integer.of_Z 0) : i32.t)).
    
    Definition F_GETFD : M.Val ltac:(libc.unix.c_int) :=
      M.run (M.alloc ((Integer.of_Z 1) : i32.t)).
    
    Definition F_SETFD : M.Val ltac:(libc.unix.c_int) :=
      M.run (M.alloc ((Integer.of_Z 2) : i32.t)).
    
    Definition F_GETFL : M.Val ltac:(libc.unix.c_int) :=
      M.run (M.alloc ((Integer.of_Z 3) : i32.t)).
    
    Definition F_SETFL : M.Val ltac:(libc.unix.c_int) :=
      M.run (M.alloc ((Integer.of_Z 4) : i32.t)).
    
    Definition F_SETLEASE : M.Val ltac:(libc.unix.c_int) :=
      M.run (M.alloc ((Integer.of_Z 1024) : i32.t)).
    
    Definition F_GETLEASE : M.Val ltac:(libc.unix.c_int) :=
      M.run (M.alloc ((Integer.of_Z 1025) : i32.t)).
    
    Definition F_NOTIFY : M.Val ltac:(libc.unix.c_int) :=
      M.run (M.alloc ((Integer.of_Z 1026) : i32.t)).
    
    Definition F_CANCELLK : M.Val ltac:(libc.unix.c_int) :=
      M.run (M.alloc ((Integer.of_Z 1029) : i32.t)).
    
    Definition F_DUPFD_CLOEXEC : M.Val ltac:(libc.unix.c_int) :=
      M.run (M.alloc ((Integer.of_Z 1030) : i32.t)).
    
    Definition F_SETPIPE_SZ : M.Val ltac:(libc.unix.c_int) :=
      M.run (M.alloc ((Integer.of_Z 1031) : i32.t)).
    
    Definition F_GETPIPE_SZ : M.Val ltac:(libc.unix.c_int) :=
      M.run (M.alloc ((Integer.of_Z 1032) : i32.t)).
    
    Definition F_ADD_SEALS : M.Val ltac:(libc.unix.c_int) :=
      M.run (M.alloc ((Integer.of_Z 1033) : i32.t)).
    
    Definition F_GET_SEALS : M.Val ltac:(libc.unix.c_int) :=
      M.run (M.alloc ((Integer.of_Z 1034) : i32.t)).
    
    Definition F_SEAL_SEAL : M.Val ltac:(libc.unix.c_int) :=
      M.run (M.alloc ((Integer.of_Z 1) : i32.t)).
    
    Definition F_SEAL_SHRINK : M.Val ltac:(libc.unix.c_int) :=
      M.run (M.alloc ((Integer.of_Z 2) : i32.t)).
    
    Definition F_SEAL_GROW : M.Val ltac:(libc.unix.c_int) :=
      M.run (M.alloc ((Integer.of_Z 4) : i32.t)).
    
    Definition F_SEAL_WRITE : M.Val ltac:(libc.unix.c_int) :=
      M.run (M.alloc ((Integer.of_Z 8) : i32.t)).
    
    Definition SIGTRAP : M.Val ltac:(libc.unix.c_int) :=
      M.run (M.alloc ((Integer.of_Z 5) : i32.t)).
    
    Definition PTHREAD_CREATE_JOINABLE : M.Val ltac:(libc.unix.c_int) :=
      M.run (M.alloc ((Integer.of_Z 0) : i32.t)).
    
    Definition PTHREAD_CREATE_DETACHED : M.Val ltac:(libc.unix.c_int) :=
      M.run (M.alloc ((Integer.of_Z 1) : i32.t)).
    
    Definition CLOCK_REALTIME : M.Val ltac:(libc.unix.linux_like.clockid_t) :=
      M.run (M.alloc ((Integer.of_Z 0) : i32.t)).
    
    Definition CLOCK_MONOTONIC : M.Val ltac:(libc.unix.linux_like.clockid_t) :=
      M.run (M.alloc ((Integer.of_Z 1) : i32.t)).
    
    Definition CLOCK_PROCESS_CPUTIME_ID
        : M.Val ltac:(libc.unix.linux_like.clockid_t) :=
      M.run (M.alloc ((Integer.of_Z 2) : i32.t)).
    
    Definition CLOCK_THREAD_CPUTIME_ID
        : M.Val ltac:(libc.unix.linux_like.clockid_t) :=
      M.run (M.alloc ((Integer.of_Z 3) : i32.t)).
    
    Definition CLOCK_MONOTONIC_RAW
        : M.Val ltac:(libc.unix.linux_like.clockid_t) :=
      M.run (M.alloc ((Integer.of_Z 4) : i32.t)).
    
    Definition CLOCK_REALTIME_COARSE
        : M.Val ltac:(libc.unix.linux_like.clockid_t) :=
      M.run (M.alloc ((Integer.of_Z 5) : i32.t)).
    
    Definition CLOCK_MONOTONIC_COARSE
        : M.Val ltac:(libc.unix.linux_like.clockid_t) :=
      M.run (M.alloc ((Integer.of_Z 6) : i32.t)).
    
    Definition CLOCK_BOOTTIME : M.Val ltac:(libc.unix.linux_like.clockid_t) :=
      M.run (M.alloc ((Integer.of_Z 7) : i32.t)).
    
    Definition CLOCK_REALTIME_ALARM
        : M.Val ltac:(libc.unix.linux_like.clockid_t) :=
      M.run (M.alloc ((Integer.of_Z 8) : i32.t)).
    
    Definition CLOCK_BOOTTIME_ALARM
        : M.Val ltac:(libc.unix.linux_like.clockid_t) :=
      M.run (M.alloc ((Integer.of_Z 9) : i32.t)).
    
    Definition CLOCK_TAI : M.Val ltac:(libc.unix.linux_like.clockid_t) :=
      M.run (M.alloc ((Integer.of_Z 11) : i32.t)).
    
    Definition TIMER_ABSTIME : M.Val ltac:(libc.unix.c_int) :=
      M.run (M.alloc ((Integer.of_Z 1) : i32.t)).
    
    Definition RUSAGE_SELF : M.Val ltac:(libc.unix.c_int) :=
      M.run (M.alloc ((Integer.of_Z 0) : i32.t)).
    
    Definition O_RDONLY : M.Val ltac:(libc.unix.c_int) :=
      M.run (M.alloc ((Integer.of_Z 0) : i32.t)).
    
    Definition O_WRONLY : M.Val ltac:(libc.unix.c_int) :=
      M.run (M.alloc ((Integer.of_Z 1) : i32.t)).
    
    Definition O_RDWR : M.Val ltac:(libc.unix.c_int) :=
      M.run (M.alloc ((Integer.of_Z 2) : i32.t)).
    
    Definition SOCK_CLOEXEC : M.Val ltac:(libc.unix.c_int) :=
      M.run (M.pure libc.unix.linux_like.linux.gnu.b64.x86_64.O_CLOEXEC).
    
    Definition S_IFIFO : M.Val ltac:(libc.unix.linux_like.linux.mode_t) :=
      M.run (M.alloc ((Integer.of_Z 4096) : u32.t)).
    
    Definition S_IFCHR : M.Val ltac:(libc.unix.linux_like.linux.mode_t) :=
      M.run (M.alloc ((Integer.of_Z 8192) : u32.t)).
    
    Definition S_IFBLK : M.Val ltac:(libc.unix.linux_like.linux.mode_t) :=
      M.run (M.alloc ((Integer.of_Z 24576) : u32.t)).
    
    Definition S_IFDIR : M.Val ltac:(libc.unix.linux_like.linux.mode_t) :=
      M.run (M.alloc ((Integer.of_Z 16384) : u32.t)).
    
    Definition S_IFREG : M.Val ltac:(libc.unix.linux_like.linux.mode_t) :=
      M.run (M.alloc ((Integer.of_Z 32768) : u32.t)).
    
    Definition S_IFLNK : M.Val ltac:(libc.unix.linux_like.linux.mode_t) :=
      M.run (M.alloc ((Integer.of_Z 40960) : u32.t)).
    
    Definition S_IFSOCK : M.Val ltac:(libc.unix.linux_like.linux.mode_t) :=
      M.run (M.alloc ((Integer.of_Z 49152) : u32.t)).
    
    Definition S_IFMT : M.Val ltac:(libc.unix.linux_like.linux.mode_t) :=
      M.run (M.alloc ((Integer.of_Z 61440) : u32.t)).
    
    Definition S_IRWXU : M.Val ltac:(libc.unix.linux_like.linux.mode_t) :=
      M.run (M.alloc ((Integer.of_Z 448) : u32.t)).
    
    Definition S_IXUSR : M.Val ltac:(libc.unix.linux_like.linux.mode_t) :=
      M.run (M.alloc ((Integer.of_Z 64) : u32.t)).
    
    Definition S_IWUSR : M.Val ltac:(libc.unix.linux_like.linux.mode_t) :=
      M.run (M.alloc ((Integer.of_Z 128) : u32.t)).
    
    Definition S_IRUSR : M.Val ltac:(libc.unix.linux_like.linux.mode_t) :=
      M.run (M.alloc ((Integer.of_Z 256) : u32.t)).
    
    Definition S_IRWXG : M.Val ltac:(libc.unix.linux_like.linux.mode_t) :=
      M.run (M.alloc ((Integer.of_Z 56) : u32.t)).
    
    Definition S_IXGRP : M.Val ltac:(libc.unix.linux_like.linux.mode_t) :=
      M.run (M.alloc ((Integer.of_Z 8) : u32.t)).
    
    Definition S_IWGRP : M.Val ltac:(libc.unix.linux_like.linux.mode_t) :=
      M.run (M.alloc ((Integer.of_Z 16) : u32.t)).
    
    Definition S_IRGRP : M.Val ltac:(libc.unix.linux_like.linux.mode_t) :=
      M.run (M.alloc ((Integer.of_Z 32) : u32.t)).
    
    Definition S_IRWXO : M.Val ltac:(libc.unix.linux_like.linux.mode_t) :=
      M.run (M.alloc ((Integer.of_Z 7) : u32.t)).
    
    Definition S_IXOTH : M.Val ltac:(libc.unix.linux_like.linux.mode_t) :=
      M.run (M.alloc ((Integer.of_Z 1) : u32.t)).
    
    Definition S_IWOTH : M.Val ltac:(libc.unix.linux_like.linux.mode_t) :=
      M.run (M.alloc ((Integer.of_Z 2) : u32.t)).
    
    Definition S_IROTH : M.Val ltac:(libc.unix.linux_like.linux.mode_t) :=
      M.run (M.alloc ((Integer.of_Z 4) : u32.t)).
    
    Definition F_OK : M.Val ltac:(libc.unix.c_int) :=
      M.run (M.alloc ((Integer.of_Z 0) : i32.t)).
    
    Definition R_OK : M.Val ltac:(libc.unix.c_int) :=
      M.run (M.alloc ((Integer.of_Z 4) : i32.t)).
    
    Definition W_OK : M.Val ltac:(libc.unix.c_int) :=
      M.run (M.alloc ((Integer.of_Z 2) : i32.t)).
    
    Definition X_OK : M.Val ltac:(libc.unix.c_int) :=
      M.run (M.alloc ((Integer.of_Z 1) : i32.t)).
    
    Definition STDIN_FILENO : M.Val ltac:(libc.unix.c_int) :=
      M.run (M.alloc ((Integer.of_Z 0) : i32.t)).
    
    Definition STDOUT_FILENO : M.Val ltac:(libc.unix.c_int) :=
      M.run (M.alloc ((Integer.of_Z 1) : i32.t)).
    
    Definition STDERR_FILENO : M.Val ltac:(libc.unix.c_int) :=
      M.run (M.alloc ((Integer.of_Z 2) : i32.t)).
    
    Definition SIGHUP : M.Val ltac:(libc.unix.c_int) :=
      M.run (M.alloc ((Integer.of_Z 1) : i32.t)).
    
    Definition SIGINT : M.Val ltac:(libc.unix.c_int) :=
      M.run (M.alloc ((Integer.of_Z 2) : i32.t)).
    
    Definition SIGQUIT : M.Val ltac:(libc.unix.c_int) :=
      M.run (M.alloc ((Integer.of_Z 3) : i32.t)).
    
    Definition SIGILL : M.Val ltac:(libc.unix.c_int) :=
      M.run (M.alloc ((Integer.of_Z 4) : i32.t)).
    
    Definition SIGABRT : M.Val ltac:(libc.unix.c_int) :=
      M.run (M.alloc ((Integer.of_Z 6) : i32.t)).
    
    Definition SIGFPE : M.Val ltac:(libc.unix.c_int) :=
      M.run (M.alloc ((Integer.of_Z 8) : i32.t)).
    
    Definition SIGKILL : M.Val ltac:(libc.unix.c_int) :=
      M.run (M.alloc ((Integer.of_Z 9) : i32.t)).
    
    Definition SIGSEGV : M.Val ltac:(libc.unix.c_int) :=
      M.run (M.alloc ((Integer.of_Z 11) : i32.t)).
    
    Definition SIGPIPE : M.Val ltac:(libc.unix.c_int) :=
      M.run (M.alloc ((Integer.of_Z 13) : i32.t)).
    
    Definition SIGALRM : M.Val ltac:(libc.unix.c_int) :=
      M.run (M.alloc ((Integer.of_Z 14) : i32.t)).
    
    Definition SIGTERM : M.Val ltac:(libc.unix.c_int) :=
      M.run (M.alloc ((Integer.of_Z 15) : i32.t)).
    
    Definition PROT_NONE : M.Val ltac:(libc.unix.c_int) :=
      M.run (M.alloc ((Integer.of_Z 0) : i32.t)).
    
    Definition PROT_READ : M.Val ltac:(libc.unix.c_int) :=
      M.run (M.alloc ((Integer.of_Z 1) : i32.t)).
    
    Definition PROT_WRITE : M.Val ltac:(libc.unix.c_int) :=
      M.run (M.alloc ((Integer.of_Z 2) : i32.t)).
    
    Definition PROT_EXEC : M.Val ltac:(libc.unix.c_int) :=
      M.run (M.alloc ((Integer.of_Z 4) : i32.t)).
    
    Definition XATTR_CREATE : M.Val ltac:(libc.unix.c_int) :=
      M.run (M.alloc ((Integer.of_Z 1) : i32.t)).
    
    Definition XATTR_REPLACE : M.Val ltac:(libc.unix.c_int) :=
      M.run (M.alloc ((Integer.of_Z 2) : i32.t)).
    
    Definition RLIM64_INFINITY
        : M.Val ltac:(libc.unix.linux_like.linux.rlim64_t) :=
      M.run (M.alloc (UnOp.not ((Integer.of_Z 0) : u64.t))).
    
    Definition LC_CTYPE : M.Val ltac:(libc.unix.c_int) :=
      M.run (M.alloc ((Integer.of_Z 0) : i32.t)).
    
    Definition LC_NUMERIC : M.Val ltac:(libc.unix.c_int) :=
      M.run (M.alloc ((Integer.of_Z 1) : i32.t)).
    
    Definition LC_TIME : M.Val ltac:(libc.unix.c_int) :=
      M.run (M.alloc ((Integer.of_Z 2) : i32.t)).
    
    Definition LC_COLLATE : M.Val ltac:(libc.unix.c_int) :=
      M.run (M.alloc ((Integer.of_Z 3) : i32.t)).
    
    Definition LC_MONETARY : M.Val ltac:(libc.unix.c_int) :=
      M.run (M.alloc ((Integer.of_Z 4) : i32.t)).
    
    Definition LC_MESSAGES : M.Val ltac:(libc.unix.c_int) :=
      M.run (M.alloc ((Integer.of_Z 5) : i32.t)).
    
    Definition LC_ALL : M.Val ltac:(libc.unix.c_int) :=
      M.run (M.alloc ((Integer.of_Z 6) : i32.t)).
    
    Definition LC_CTYPE_MASK : M.Val ltac:(libc.unix.c_int) :=
      M.run
        (let* α0 : i32.t := M.read libc.unix.linux_like.LC_CTYPE in
        let* α1 : i32.t := BinOp.Panic.shl ((Integer.of_Z 1) : i32.t) α0 in
        M.alloc α1).
    
    Definition LC_NUMERIC_MASK : M.Val ltac:(libc.unix.c_int) :=
      M.run
        (let* α0 : i32.t := M.read libc.unix.linux_like.LC_NUMERIC in
        let* α1 : i32.t := BinOp.Panic.shl ((Integer.of_Z 1) : i32.t) α0 in
        M.alloc α1).
    
    Definition LC_TIME_MASK : M.Val ltac:(libc.unix.c_int) :=
      M.run
        (let* α0 : i32.t := M.read libc.unix.linux_like.LC_TIME in
        let* α1 : i32.t := BinOp.Panic.shl ((Integer.of_Z 1) : i32.t) α0 in
        M.alloc α1).
    
    Definition LC_COLLATE_MASK : M.Val ltac:(libc.unix.c_int) :=
      M.run
        (let* α0 : i32.t := M.read libc.unix.linux_like.LC_COLLATE in
        let* α1 : i32.t := BinOp.Panic.shl ((Integer.of_Z 1) : i32.t) α0 in
        M.alloc α1).
    
    Definition LC_MONETARY_MASK : M.Val ltac:(libc.unix.c_int) :=
      M.run
        (let* α0 : i32.t := M.read libc.unix.linux_like.LC_MONETARY in
        let* α1 : i32.t := BinOp.Panic.shl ((Integer.of_Z 1) : i32.t) α0 in
        M.alloc α1).
    
    Definition LC_MESSAGES_MASK : M.Val ltac:(libc.unix.c_int) :=
      M.run
        (let* α0 : i32.t := M.read libc.unix.linux_like.LC_MESSAGES in
        let* α1 : i32.t := BinOp.Panic.shl ((Integer.of_Z 1) : i32.t) α0 in
        M.alloc α1).
    
    Definition MAP_FILE : M.Val ltac:(libc.unix.c_int) :=
      M.run (M.alloc ((Integer.of_Z 0) : i32.t)).
    
    Definition MAP_SHARED : M.Val ltac:(libc.unix.c_int) :=
      M.run (M.alloc ((Integer.of_Z 1) : i32.t)).
    
    Definition MAP_PRIVATE : M.Val ltac:(libc.unix.c_int) :=
      M.run (M.alloc ((Integer.of_Z 2) : i32.t)).
    
    Definition MAP_FIXED : M.Val ltac:(libc.unix.c_int) :=
      M.run (M.alloc ((Integer.of_Z 16) : i32.t)).
    
    Definition MAP_FAILED : M.Val (mut_ref core.ffi.c_void.t) :=
      M.run (M.alloc (rust_cast (UnOp.not ((Integer.of_Z 0) : usize.t)))).
    
    Definition MS_ASYNC : M.Val ltac:(libc.unix.c_int) :=
      M.run (M.alloc ((Integer.of_Z 1) : i32.t)).
    
    Definition MS_INVALIDATE : M.Val ltac:(libc.unix.c_int) :=
      M.run (M.alloc ((Integer.of_Z 2) : i32.t)).
    
    Definition MS_SYNC : M.Val ltac:(libc.unix.c_int) :=
      M.run (M.alloc ((Integer.of_Z 4) : i32.t)).
    
    Definition MS_RDONLY
        :
          M.Val
            ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_ulong) :=
      M.run (M.alloc ((Integer.of_Z 1) : u64.t)).
    
    Definition MS_NOSUID
        :
          M.Val
            ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_ulong) :=
      M.run (M.alloc ((Integer.of_Z 2) : u64.t)).
    
    Definition MS_NODEV
        :
          M.Val
            ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_ulong) :=
      M.run (M.alloc ((Integer.of_Z 4) : u64.t)).
    
    Definition MS_NOEXEC
        :
          M.Val
            ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_ulong) :=
      M.run (M.alloc ((Integer.of_Z 8) : u64.t)).
    
    Definition MS_SYNCHRONOUS
        :
          M.Val
            ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_ulong) :=
      M.run (M.alloc ((Integer.of_Z 16) : u64.t)).
    
    Definition MS_REMOUNT
        :
          M.Val
            ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_ulong) :=
      M.run (M.alloc ((Integer.of_Z 32) : u64.t)).
    
    Definition MS_MANDLOCK
        :
          M.Val
            ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_ulong) :=
      M.run (M.alloc ((Integer.of_Z 64) : u64.t)).
    
    Definition MS_DIRSYNC
        :
          M.Val
            ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_ulong) :=
      M.run (M.alloc ((Integer.of_Z 128) : u64.t)).
    
    Definition MS_NOATIME
        :
          M.Val
            ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_ulong) :=
      M.run (M.alloc ((Integer.of_Z 1024) : u64.t)).
    
    Definition MS_NODIRATIME
        :
          M.Val
            ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_ulong) :=
      M.run (M.alloc ((Integer.of_Z 2048) : u64.t)).
    
    Definition MS_BIND
        :
          M.Val
            ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_ulong) :=
      M.run (M.alloc ((Integer.of_Z 4096) : u64.t)).
    
    Definition MS_MOVE
        :
          M.Val
            ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_ulong) :=
      M.run (M.alloc ((Integer.of_Z 8192) : u64.t)).
    
    Definition MS_REC
        :
          M.Val
            ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_ulong) :=
      M.run (M.alloc ((Integer.of_Z 16384) : u64.t)).
    
    Definition MS_SILENT
        :
          M.Val
            ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_ulong) :=
      M.run (M.alloc ((Integer.of_Z 32768) : u64.t)).
    
    Definition MS_POSIXACL
        :
          M.Val
            ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_ulong) :=
      M.run (M.alloc ((Integer.of_Z 65536) : u64.t)).
    
    Definition MS_UNBINDABLE
        :
          M.Val
            ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_ulong) :=
      M.run (M.alloc ((Integer.of_Z 131072) : u64.t)).
    
    Definition MS_PRIVATE
        :
          M.Val
            ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_ulong) :=
      M.run (M.alloc ((Integer.of_Z 262144) : u64.t)).
    
    Definition MS_SLAVE
        :
          M.Val
            ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_ulong) :=
      M.run (M.alloc ((Integer.of_Z 524288) : u64.t)).
    
    Definition MS_SHARED
        :
          M.Val
            ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_ulong) :=
      M.run (M.alloc ((Integer.of_Z 1048576) : u64.t)).
    
    Definition MS_RELATIME
        :
          M.Val
            ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_ulong) :=
      M.run (M.alloc ((Integer.of_Z 2097152) : u64.t)).
    
    Definition MS_KERNMOUNT
        :
          M.Val
            ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_ulong) :=
      M.run (M.alloc ((Integer.of_Z 4194304) : u64.t)).
    
    Definition MS_I_VERSION
        :
          M.Val
            ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_ulong) :=
      M.run (M.alloc ((Integer.of_Z 8388608) : u64.t)).
    
    Definition MS_STRICTATIME
        :
          M.Val
            ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_ulong) :=
      M.run (M.alloc ((Integer.of_Z 16777216) : u64.t)).
    
    Definition MS_LAZYTIME
        :
          M.Val
            ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_ulong) :=
      M.run (M.alloc ((Integer.of_Z 33554432) : u64.t)).
    
    Definition MS_ACTIVE
        :
          M.Val
            ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_ulong) :=
      M.run (M.alloc ((Integer.of_Z 1073741824) : u64.t)).
    
    Definition MS_MGC_VAL
        :
          M.Val
            ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_ulong) :=
      M.run (M.alloc ((Integer.of_Z 3236757504) : u64.t)).
    
    Definition MS_MGC_MSK
        :
          M.Val
            ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_ulong) :=
      M.run (M.alloc ((Integer.of_Z 4294901760) : u64.t)).
    
    Definition SCM_RIGHTS : M.Val ltac:(libc.unix.c_int) :=
      M.run (M.alloc ((Integer.of_Z 1) : i32.t)).
    
    Definition SCM_CREDENTIALS : M.Val ltac:(libc.unix.c_int) :=
      M.run (M.alloc ((Integer.of_Z 2) : i32.t)).
    
    Definition PROT_GROWSDOWN : M.Val ltac:(libc.unix.c_int) :=
      M.run (M.alloc ((Integer.of_Z 16777216) : i32.t)).
    
    Definition PROT_GROWSUP : M.Val ltac:(libc.unix.c_int) :=
      M.run (M.alloc ((Integer.of_Z 33554432) : i32.t)).
    
    Definition MAP_TYPE : M.Val ltac:(libc.unix.c_int) :=
      M.run (M.alloc ((Integer.of_Z 15) : i32.t)).
    
    Definition MADV_NORMAL : M.Val ltac:(libc.unix.c_int) :=
      M.run (M.alloc ((Integer.of_Z 0) : i32.t)).
    
    Definition MADV_RANDOM : M.Val ltac:(libc.unix.c_int) :=
      M.run (M.alloc ((Integer.of_Z 1) : i32.t)).
    
    Definition MADV_SEQUENTIAL : M.Val ltac:(libc.unix.c_int) :=
      M.run (M.alloc ((Integer.of_Z 2) : i32.t)).
    
    Definition MADV_WILLNEED : M.Val ltac:(libc.unix.c_int) :=
      M.run (M.alloc ((Integer.of_Z 3) : i32.t)).
    
    Definition MADV_DONTNEED : M.Val ltac:(libc.unix.c_int) :=
      M.run (M.alloc ((Integer.of_Z 4) : i32.t)).
    
    Definition MADV_FREE : M.Val ltac:(libc.unix.c_int) :=
      M.run (M.alloc ((Integer.of_Z 8) : i32.t)).
    
    Definition MADV_REMOVE : M.Val ltac:(libc.unix.c_int) :=
      M.run (M.alloc ((Integer.of_Z 9) : i32.t)).
    
    Definition MADV_DONTFORK : M.Val ltac:(libc.unix.c_int) :=
      M.run (M.alloc ((Integer.of_Z 10) : i32.t)).
    
    Definition MADV_DOFORK : M.Val ltac:(libc.unix.c_int) :=
      M.run (M.alloc ((Integer.of_Z 11) : i32.t)).
    
    Definition MADV_MERGEABLE : M.Val ltac:(libc.unix.c_int) :=
      M.run (M.alloc ((Integer.of_Z 12) : i32.t)).
    
    Definition MADV_UNMERGEABLE : M.Val ltac:(libc.unix.c_int) :=
      M.run (M.alloc ((Integer.of_Z 13) : i32.t)).
    
    Definition MADV_HUGEPAGE : M.Val ltac:(libc.unix.c_int) :=
      M.run (M.alloc ((Integer.of_Z 14) : i32.t)).
    
    Definition MADV_NOHUGEPAGE : M.Val ltac:(libc.unix.c_int) :=
      M.run (M.alloc ((Integer.of_Z 15) : i32.t)).
    
    Definition MADV_DONTDUMP : M.Val ltac:(libc.unix.c_int) :=
      M.run (M.alloc ((Integer.of_Z 16) : i32.t)).
    
    Definition MADV_DODUMP : M.Val ltac:(libc.unix.c_int) :=
      M.run (M.alloc ((Integer.of_Z 17) : i32.t)).
    
    Definition MADV_WIPEONFORK : M.Val ltac:(libc.unix.c_int) :=
      M.run (M.alloc ((Integer.of_Z 18) : i32.t)).
    
    Definition MADV_KEEPONFORK : M.Val ltac:(libc.unix.c_int) :=
      M.run (M.alloc ((Integer.of_Z 19) : i32.t)).
    
    Definition MADV_COLD : M.Val ltac:(libc.unix.c_int) :=
      M.run (M.alloc ((Integer.of_Z 20) : i32.t)).
    
    Definition MADV_PAGEOUT : M.Val ltac:(libc.unix.c_int) :=
      M.run (M.alloc ((Integer.of_Z 21) : i32.t)).
    
    Definition MADV_HWPOISON : M.Val ltac:(libc.unix.c_int) :=
      M.run (M.alloc ((Integer.of_Z 100) : i32.t)).
    
    Definition MADV_POPULATE_READ : M.Val ltac:(libc.unix.c_int) :=
      M.run (M.alloc ((Integer.of_Z 22) : i32.t)).
    
    Definition MADV_POPULATE_WRITE : M.Val ltac:(libc.unix.c_int) :=
      M.run (M.alloc ((Integer.of_Z 23) : i32.t)).
    
    Definition MADV_DONTNEED_LOCKED : M.Val ltac:(libc.unix.c_int) :=
      M.run (M.alloc ((Integer.of_Z 24) : i32.t)).
    
    Definition IFF_UP : M.Val ltac:(libc.unix.c_int) :=
      M.run (M.alloc ((Integer.of_Z 1) : i32.t)).
    
    Definition IFF_BROADCAST : M.Val ltac:(libc.unix.c_int) :=
      M.run (M.alloc ((Integer.of_Z 2) : i32.t)).
    
    Definition IFF_DEBUG : M.Val ltac:(libc.unix.c_int) :=
      M.run (M.alloc ((Integer.of_Z 4) : i32.t)).
    
    Definition IFF_LOOPBACK : M.Val ltac:(libc.unix.c_int) :=
      M.run (M.alloc ((Integer.of_Z 8) : i32.t)).
    
    Definition IFF_POINTOPOINT : M.Val ltac:(libc.unix.c_int) :=
      M.run (M.alloc ((Integer.of_Z 16) : i32.t)).
    
    Definition IFF_NOTRAILERS : M.Val ltac:(libc.unix.c_int) :=
      M.run (M.alloc ((Integer.of_Z 32) : i32.t)).
    
    Definition IFF_RUNNING : M.Val ltac:(libc.unix.c_int) :=
      M.run (M.alloc ((Integer.of_Z 64) : i32.t)).
    
    Definition IFF_NOARP : M.Val ltac:(libc.unix.c_int) :=
      M.run (M.alloc ((Integer.of_Z 128) : i32.t)).
    
    Definition IFF_PROMISC : M.Val ltac:(libc.unix.c_int) :=
      M.run (M.alloc ((Integer.of_Z 256) : i32.t)).
    
    Definition IFF_ALLMULTI : M.Val ltac:(libc.unix.c_int) :=
      M.run (M.alloc ((Integer.of_Z 512) : i32.t)).
    
    Definition IFF_MASTER : M.Val ltac:(libc.unix.c_int) :=
      M.run (M.alloc ((Integer.of_Z 1024) : i32.t)).
    
    Definition IFF_SLAVE : M.Val ltac:(libc.unix.c_int) :=
      M.run (M.alloc ((Integer.of_Z 2048) : i32.t)).
    
    Definition IFF_MULTICAST : M.Val ltac:(libc.unix.c_int) :=
      M.run (M.alloc ((Integer.of_Z 4096) : i32.t)).
    
    Definition IFF_PORTSEL : M.Val ltac:(libc.unix.c_int) :=
      M.run (M.alloc ((Integer.of_Z 8192) : i32.t)).
    
    Definition IFF_AUTOMEDIA : M.Val ltac:(libc.unix.c_int) :=
      M.run (M.alloc ((Integer.of_Z 16384) : i32.t)).
    
    Definition IFF_DYNAMIC : M.Val ltac:(libc.unix.c_int) :=
      M.run (M.alloc ((Integer.of_Z 32768) : i32.t)).
    
    Definition SOL_IP : M.Val ltac:(libc.unix.c_int) :=
      M.run (M.alloc ((Integer.of_Z 0) : i32.t)).
    
    Definition SOL_TCP : M.Val ltac:(libc.unix.c_int) :=
      M.run (M.alloc ((Integer.of_Z 6) : i32.t)).
    
    Definition SOL_UDP : M.Val ltac:(libc.unix.c_int) :=
      M.run (M.alloc ((Integer.of_Z 17) : i32.t)).
    
    Definition SOL_IPV6 : M.Val ltac:(libc.unix.c_int) :=
      M.run (M.alloc ((Integer.of_Z 41) : i32.t)).
    
    Definition SOL_ICMPV6 : M.Val ltac:(libc.unix.c_int) :=
      M.run (M.alloc ((Integer.of_Z 58) : i32.t)).
    
    Definition SOL_RAW : M.Val ltac:(libc.unix.c_int) :=
      M.run (M.alloc ((Integer.of_Z 255) : i32.t)).
    
    Definition SOL_DECNET : M.Val ltac:(libc.unix.c_int) :=
      M.run (M.alloc ((Integer.of_Z 261) : i32.t)).
    
    Definition SOL_X25 : M.Val ltac:(libc.unix.c_int) :=
      M.run (M.alloc ((Integer.of_Z 262) : i32.t)).
    
    Definition SOL_PACKET : M.Val ltac:(libc.unix.c_int) :=
      M.run (M.alloc ((Integer.of_Z 263) : i32.t)).
    
    Definition SOL_ATM : M.Val ltac:(libc.unix.c_int) :=
      M.run (M.alloc ((Integer.of_Z 264) : i32.t)).
    
    Definition SOL_AAL : M.Val ltac:(libc.unix.c_int) :=
      M.run (M.alloc ((Integer.of_Z 265) : i32.t)).
    
    Definition SOL_IRDA : M.Val ltac:(libc.unix.c_int) :=
      M.run (M.alloc ((Integer.of_Z 266) : i32.t)).
    
    Definition SOL_NETBEUI : M.Val ltac:(libc.unix.c_int) :=
      M.run (M.alloc ((Integer.of_Z 267) : i32.t)).
    
    Definition SOL_LLC : M.Val ltac:(libc.unix.c_int) :=
      M.run (M.alloc ((Integer.of_Z 268) : i32.t)).
    
    Definition SOL_DCCP : M.Val ltac:(libc.unix.c_int) :=
      M.run (M.alloc ((Integer.of_Z 269) : i32.t)).
    
    Definition SOL_NETLINK : M.Val ltac:(libc.unix.c_int) :=
      M.run (M.alloc ((Integer.of_Z 270) : i32.t)).
    
    Definition SOL_TIPC : M.Val ltac:(libc.unix.c_int) :=
      M.run (M.alloc ((Integer.of_Z 271) : i32.t)).
    
    Definition SOL_BLUETOOTH : M.Val ltac:(libc.unix.c_int) :=
      M.run (M.alloc ((Integer.of_Z 274) : i32.t)).
    
    Definition SOL_ALG : M.Val ltac:(libc.unix.c_int) :=
      M.run (M.alloc ((Integer.of_Z 279) : i32.t)).
    
    Definition AF_UNSPEC : M.Val ltac:(libc.unix.c_int) :=
      M.run (M.alloc ((Integer.of_Z 0) : i32.t)).
    
    Definition AF_UNIX : M.Val ltac:(libc.unix.c_int) :=
      M.run (M.alloc ((Integer.of_Z 1) : i32.t)).
    
    Definition AF_LOCAL : M.Val ltac:(libc.unix.c_int) :=
      M.run (M.alloc ((Integer.of_Z 1) : i32.t)).
    
    Definition AF_INET : M.Val ltac:(libc.unix.c_int) :=
      M.run (M.alloc ((Integer.of_Z 2) : i32.t)).
    
    Definition AF_AX25 : M.Val ltac:(libc.unix.c_int) :=
      M.run (M.alloc ((Integer.of_Z 3) : i32.t)).
    
    Definition AF_IPX : M.Val ltac:(libc.unix.c_int) :=
      M.run (M.alloc ((Integer.of_Z 4) : i32.t)).
    
    Definition AF_APPLETALK : M.Val ltac:(libc.unix.c_int) :=
      M.run (M.alloc ((Integer.of_Z 5) : i32.t)).
    
    Definition AF_NETROM : M.Val ltac:(libc.unix.c_int) :=
      M.run (M.alloc ((Integer.of_Z 6) : i32.t)).
    
    Definition AF_BRIDGE : M.Val ltac:(libc.unix.c_int) :=
      M.run (M.alloc ((Integer.of_Z 7) : i32.t)).
    
    Definition AF_ATMPVC : M.Val ltac:(libc.unix.c_int) :=
      M.run (M.alloc ((Integer.of_Z 8) : i32.t)).
    
    Definition AF_X25 : M.Val ltac:(libc.unix.c_int) :=
      M.run (M.alloc ((Integer.of_Z 9) : i32.t)).
    
    Definition AF_INET6 : M.Val ltac:(libc.unix.c_int) :=
      M.run (M.alloc ((Integer.of_Z 10) : i32.t)).
    
    Definition AF_ROSE : M.Val ltac:(libc.unix.c_int) :=
      M.run (M.alloc ((Integer.of_Z 11) : i32.t)).
    
    Definition AF_DECnet : M.Val ltac:(libc.unix.c_int) :=
      M.run (M.alloc ((Integer.of_Z 12) : i32.t)).
    
    Definition AF_NETBEUI : M.Val ltac:(libc.unix.c_int) :=
      M.run (M.alloc ((Integer.of_Z 13) : i32.t)).
    
    Definition AF_SECURITY : M.Val ltac:(libc.unix.c_int) :=
      M.run (M.alloc ((Integer.of_Z 14) : i32.t)).
    
    Definition AF_KEY : M.Val ltac:(libc.unix.c_int) :=
      M.run (M.alloc ((Integer.of_Z 15) : i32.t)).
    
    Definition AF_NETLINK : M.Val ltac:(libc.unix.c_int) :=
      M.run (M.alloc ((Integer.of_Z 16) : i32.t)).
    
    Definition AF_ROUTE : M.Val ltac:(libc.unix.c_int) :=
      M.run (M.pure libc.unix.linux_like.AF_NETLINK).
    
    Definition AF_PACKET : M.Val ltac:(libc.unix.c_int) :=
      M.run (M.alloc ((Integer.of_Z 17) : i32.t)).
    
    Definition AF_ASH : M.Val ltac:(libc.unix.c_int) :=
      M.run (M.alloc ((Integer.of_Z 18) : i32.t)).
    
    Definition AF_ECONET : M.Val ltac:(libc.unix.c_int) :=
      M.run (M.alloc ((Integer.of_Z 19) : i32.t)).
    
    Definition AF_ATMSVC : M.Val ltac:(libc.unix.c_int) :=
      M.run (M.alloc ((Integer.of_Z 20) : i32.t)).
    
    Definition AF_RDS : M.Val ltac:(libc.unix.c_int) :=
      M.run (M.alloc ((Integer.of_Z 21) : i32.t)).
    
    Definition AF_SNA : M.Val ltac:(libc.unix.c_int) :=
      M.run (M.alloc ((Integer.of_Z 22) : i32.t)).
    
    Definition AF_IRDA : M.Val ltac:(libc.unix.c_int) :=
      M.run (M.alloc ((Integer.of_Z 23) : i32.t)).
    
    Definition AF_PPPOX : M.Val ltac:(libc.unix.c_int) :=
      M.run (M.alloc ((Integer.of_Z 24) : i32.t)).
    
    Definition AF_WANPIPE : M.Val ltac:(libc.unix.c_int) :=
      M.run (M.alloc ((Integer.of_Z 25) : i32.t)).
    
    Definition AF_LLC : M.Val ltac:(libc.unix.c_int) :=
      M.run (M.alloc ((Integer.of_Z 26) : i32.t)).
    
    Definition AF_CAN : M.Val ltac:(libc.unix.c_int) :=
      M.run (M.alloc ((Integer.of_Z 29) : i32.t)).
    
    Definition AF_TIPC : M.Val ltac:(libc.unix.c_int) :=
      M.run (M.alloc ((Integer.of_Z 30) : i32.t)).
    
    Definition AF_BLUETOOTH : M.Val ltac:(libc.unix.c_int) :=
      M.run (M.alloc ((Integer.of_Z 31) : i32.t)).
    
    Definition AF_IUCV : M.Val ltac:(libc.unix.c_int) :=
      M.run (M.alloc ((Integer.of_Z 32) : i32.t)).
    
    Definition AF_RXRPC : M.Val ltac:(libc.unix.c_int) :=
      M.run (M.alloc ((Integer.of_Z 33) : i32.t)).
    
    Definition AF_ISDN : M.Val ltac:(libc.unix.c_int) :=
      M.run (M.alloc ((Integer.of_Z 34) : i32.t)).
    
    Definition AF_PHONET : M.Val ltac:(libc.unix.c_int) :=
      M.run (M.alloc ((Integer.of_Z 35) : i32.t)).
    
    Definition AF_IEEE802154 : M.Val ltac:(libc.unix.c_int) :=
      M.run (M.alloc ((Integer.of_Z 36) : i32.t)).
    
    Definition AF_CAIF : M.Val ltac:(libc.unix.c_int) :=
      M.run (M.alloc ((Integer.of_Z 37) : i32.t)).
    
    Definition AF_ALG : M.Val ltac:(libc.unix.c_int) :=
      M.run (M.alloc ((Integer.of_Z 38) : i32.t)).
    
    Definition PF_UNSPEC : M.Val ltac:(libc.unix.c_int) :=
      M.run (M.pure libc.unix.linux_like.AF_UNSPEC).
    
    Definition PF_UNIX : M.Val ltac:(libc.unix.c_int) :=
      M.run (M.pure libc.unix.linux_like.AF_UNIX).
    
    Definition PF_LOCAL : M.Val ltac:(libc.unix.c_int) :=
      M.run (M.pure libc.unix.linux_like.AF_LOCAL).
    
    Definition PF_INET : M.Val ltac:(libc.unix.c_int) :=
      M.run (M.pure libc.unix.linux_like.AF_INET).
    
    Definition PF_AX25 : M.Val ltac:(libc.unix.c_int) :=
      M.run (M.pure libc.unix.linux_like.AF_AX25).
    
    Definition PF_IPX : M.Val ltac:(libc.unix.c_int) :=
      M.run (M.pure libc.unix.linux_like.AF_IPX).
    
    Definition PF_APPLETALK : M.Val ltac:(libc.unix.c_int) :=
      M.run (M.pure libc.unix.linux_like.AF_APPLETALK).
    
    Definition PF_NETROM : M.Val ltac:(libc.unix.c_int) :=
      M.run (M.pure libc.unix.linux_like.AF_NETROM).
    
    Definition PF_BRIDGE : M.Val ltac:(libc.unix.c_int) :=
      M.run (M.pure libc.unix.linux_like.AF_BRIDGE).
    
    Definition PF_ATMPVC : M.Val ltac:(libc.unix.c_int) :=
      M.run (M.pure libc.unix.linux_like.AF_ATMPVC).
    
    Definition PF_X25 : M.Val ltac:(libc.unix.c_int) :=
      M.run (M.pure libc.unix.linux_like.AF_X25).
    
    Definition PF_INET6 : M.Val ltac:(libc.unix.c_int) :=
      M.run (M.pure libc.unix.linux_like.AF_INET6).
    
    Definition PF_ROSE : M.Val ltac:(libc.unix.c_int) :=
      M.run (M.pure libc.unix.linux_like.AF_ROSE).
    
    Definition PF_DECnet : M.Val ltac:(libc.unix.c_int) :=
      M.run (M.pure libc.unix.linux_like.AF_DECnet).
    
    Definition PF_NETBEUI : M.Val ltac:(libc.unix.c_int) :=
      M.run (M.pure libc.unix.linux_like.AF_NETBEUI).
    
    Definition PF_SECURITY : M.Val ltac:(libc.unix.c_int) :=
      M.run (M.pure libc.unix.linux_like.AF_SECURITY).
    
    Definition PF_KEY : M.Val ltac:(libc.unix.c_int) :=
      M.run (M.pure libc.unix.linux_like.AF_KEY).
    
    Definition PF_NETLINK : M.Val ltac:(libc.unix.c_int) :=
      M.run (M.pure libc.unix.linux_like.AF_NETLINK).
    
    Definition PF_ROUTE : M.Val ltac:(libc.unix.c_int) :=
      M.run (M.pure libc.unix.linux_like.AF_ROUTE).
    
    Definition PF_PACKET : M.Val ltac:(libc.unix.c_int) :=
      M.run (M.pure libc.unix.linux_like.AF_PACKET).
    
    Definition PF_ASH : M.Val ltac:(libc.unix.c_int) :=
      M.run (M.pure libc.unix.linux_like.AF_ASH).
    
    Definition PF_ECONET : M.Val ltac:(libc.unix.c_int) :=
      M.run (M.pure libc.unix.linux_like.AF_ECONET).
    
    Definition PF_ATMSVC : M.Val ltac:(libc.unix.c_int) :=
      M.run (M.pure libc.unix.linux_like.AF_ATMSVC).
    
    Definition PF_RDS : M.Val ltac:(libc.unix.c_int) :=
      M.run (M.pure libc.unix.linux_like.AF_RDS).
    
    Definition PF_SNA : M.Val ltac:(libc.unix.c_int) :=
      M.run (M.pure libc.unix.linux_like.AF_SNA).
    
    Definition PF_IRDA : M.Val ltac:(libc.unix.c_int) :=
      M.run (M.pure libc.unix.linux_like.AF_IRDA).
    
    Definition PF_PPPOX : M.Val ltac:(libc.unix.c_int) :=
      M.run (M.pure libc.unix.linux_like.AF_PPPOX).
    
    Definition PF_WANPIPE : M.Val ltac:(libc.unix.c_int) :=
      M.run (M.pure libc.unix.linux_like.AF_WANPIPE).
    
    Definition PF_LLC : M.Val ltac:(libc.unix.c_int) :=
      M.run (M.pure libc.unix.linux_like.AF_LLC).
    
    Definition PF_CAN : M.Val ltac:(libc.unix.c_int) :=
      M.run (M.pure libc.unix.linux_like.AF_CAN).
    
    Definition PF_TIPC : M.Val ltac:(libc.unix.c_int) :=
      M.run (M.pure libc.unix.linux_like.AF_TIPC).
    
    Definition PF_BLUETOOTH : M.Val ltac:(libc.unix.c_int) :=
      M.run (M.pure libc.unix.linux_like.AF_BLUETOOTH).
    
    Definition PF_IUCV : M.Val ltac:(libc.unix.c_int) :=
      M.run (M.pure libc.unix.linux_like.AF_IUCV).
    
    Definition PF_RXRPC : M.Val ltac:(libc.unix.c_int) :=
      M.run (M.pure libc.unix.linux_like.AF_RXRPC).
    
    Definition PF_ISDN : M.Val ltac:(libc.unix.c_int) :=
      M.run (M.pure libc.unix.linux_like.AF_ISDN).
    
    Definition PF_PHONET : M.Val ltac:(libc.unix.c_int) :=
      M.run (M.pure libc.unix.linux_like.AF_PHONET).
    
    Definition PF_IEEE802154 : M.Val ltac:(libc.unix.c_int) :=
      M.run (M.pure libc.unix.linux_like.AF_IEEE802154).
    
    Definition PF_CAIF : M.Val ltac:(libc.unix.c_int) :=
      M.run (M.pure libc.unix.linux_like.AF_CAIF).
    
    Definition PF_ALG : M.Val ltac:(libc.unix.c_int) :=
      M.run (M.pure libc.unix.linux_like.AF_ALG).
    
    Definition MSG_OOB : M.Val ltac:(libc.unix.c_int) :=
      M.run (M.alloc ((Integer.of_Z 1) : i32.t)).
    
    Definition MSG_PEEK : M.Val ltac:(libc.unix.c_int) :=
      M.run (M.alloc ((Integer.of_Z 2) : i32.t)).
    
    Definition MSG_DONTROUTE : M.Val ltac:(libc.unix.c_int) :=
      M.run (M.alloc ((Integer.of_Z 4) : i32.t)).
    
    Definition MSG_CTRUNC : M.Val ltac:(libc.unix.c_int) :=
      M.run (M.alloc ((Integer.of_Z 8) : i32.t)).
    
    Definition MSG_TRUNC : M.Val ltac:(libc.unix.c_int) :=
      M.run (M.alloc ((Integer.of_Z 32) : i32.t)).
    
    Definition MSG_DONTWAIT : M.Val ltac:(libc.unix.c_int) :=
      M.run (M.alloc ((Integer.of_Z 64) : i32.t)).
    
    Definition MSG_EOR : M.Val ltac:(libc.unix.c_int) :=
      M.run (M.alloc ((Integer.of_Z 128) : i32.t)).
    
    Definition MSG_WAITALL : M.Val ltac:(libc.unix.c_int) :=
      M.run (M.alloc ((Integer.of_Z 256) : i32.t)).
    
    Definition MSG_FIN : M.Val ltac:(libc.unix.c_int) :=
      M.run (M.alloc ((Integer.of_Z 512) : i32.t)).
    
    Definition MSG_SYN : M.Val ltac:(libc.unix.c_int) :=
      M.run (M.alloc ((Integer.of_Z 1024) : i32.t)).
    
    Definition MSG_CONFIRM : M.Val ltac:(libc.unix.c_int) :=
      M.run (M.alloc ((Integer.of_Z 2048) : i32.t)).
    
    Definition MSG_RST : M.Val ltac:(libc.unix.c_int) :=
      M.run (M.alloc ((Integer.of_Z 4096) : i32.t)).
    
    Definition MSG_ERRQUEUE : M.Val ltac:(libc.unix.c_int) :=
      M.run (M.alloc ((Integer.of_Z 8192) : i32.t)).
    
    Definition MSG_NOSIGNAL : M.Val ltac:(libc.unix.c_int) :=
      M.run (M.alloc ((Integer.of_Z 16384) : i32.t)).
    
    Definition MSG_MORE : M.Val ltac:(libc.unix.c_int) :=
      M.run (M.alloc ((Integer.of_Z 32768) : i32.t)).
    
    Definition MSG_WAITFORONE : M.Val ltac:(libc.unix.c_int) :=
      M.run (M.alloc ((Integer.of_Z 65536) : i32.t)).
    
    Definition MSG_FASTOPEN : M.Val ltac:(libc.unix.c_int) :=
      M.run (M.alloc ((Integer.of_Z 536870912) : i32.t)).
    
    Definition MSG_CMSG_CLOEXEC : M.Val ltac:(libc.unix.c_int) :=
      M.run (M.alloc ((Integer.of_Z 1073741824) : i32.t)).
    
    Definition SCM_TIMESTAMP : M.Val ltac:(libc.unix.c_int) :=
      M.run (M.pure libc.unix.linux_like.linux.arch.generic.SO_TIMESTAMP).
    
    Definition SOCK_RAW : M.Val ltac:(libc.unix.c_int) :=
      M.run (M.alloc ((Integer.of_Z 3) : i32.t)).
    
    Definition SOCK_RDM : M.Val ltac:(libc.unix.c_int) :=
      M.run (M.alloc ((Integer.of_Z 4) : i32.t)).
    
    Definition IP_TOS : M.Val ltac:(libc.unix.c_int) :=
      M.run (M.alloc ((Integer.of_Z 1) : i32.t)).
    
    Definition IP_TTL : M.Val ltac:(libc.unix.c_int) :=
      M.run (M.alloc ((Integer.of_Z 2) : i32.t)).
    
    Definition IP_HDRINCL : M.Val ltac:(libc.unix.c_int) :=
      M.run (M.alloc ((Integer.of_Z 3) : i32.t)).
    
    Definition IP_OPTIONS : M.Val ltac:(libc.unix.c_int) :=
      M.run (M.alloc ((Integer.of_Z 4) : i32.t)).
    
    Definition IP_ROUTER_ALERT : M.Val ltac:(libc.unix.c_int) :=
      M.run (M.alloc ((Integer.of_Z 5) : i32.t)).
    
    Definition IP_RECVOPTS : M.Val ltac:(libc.unix.c_int) :=
      M.run (M.alloc ((Integer.of_Z 6) : i32.t)).
    
    Definition IP_RETOPTS : M.Val ltac:(libc.unix.c_int) :=
      M.run (M.alloc ((Integer.of_Z 7) : i32.t)).
    
    Definition IP_PKTINFO : M.Val ltac:(libc.unix.c_int) :=
      M.run (M.alloc ((Integer.of_Z 8) : i32.t)).
    
    Definition IP_PKTOPTIONS : M.Val ltac:(libc.unix.c_int) :=
      M.run (M.alloc ((Integer.of_Z 9) : i32.t)).
    
    Definition IP_MTU_DISCOVER : M.Val ltac:(libc.unix.c_int) :=
      M.run (M.alloc ((Integer.of_Z 10) : i32.t)).
    
    Definition IP_RECVERR : M.Val ltac:(libc.unix.c_int) :=
      M.run (M.alloc ((Integer.of_Z 11) : i32.t)).
    
    Definition IP_RECVTTL : M.Val ltac:(libc.unix.c_int) :=
      M.run (M.alloc ((Integer.of_Z 12) : i32.t)).
    
    Definition IP_RECVTOS : M.Val ltac:(libc.unix.c_int) :=
      M.run (M.alloc ((Integer.of_Z 13) : i32.t)).
    
    Definition IP_MTU : M.Val ltac:(libc.unix.c_int) :=
      M.run (M.alloc ((Integer.of_Z 14) : i32.t)).
    
    Definition IP_FREEBIND : M.Val ltac:(libc.unix.c_int) :=
      M.run (M.alloc ((Integer.of_Z 15) : i32.t)).
    
    Definition IP_IPSEC_POLICY : M.Val ltac:(libc.unix.c_int) :=
      M.run (M.alloc ((Integer.of_Z 16) : i32.t)).
    
    Definition IP_XFRM_POLICY : M.Val ltac:(libc.unix.c_int) :=
      M.run (M.alloc ((Integer.of_Z 17) : i32.t)).
    
    Definition IP_PASSSEC : M.Val ltac:(libc.unix.c_int) :=
      M.run (M.alloc ((Integer.of_Z 18) : i32.t)).
    
    Definition IP_TRANSPARENT : M.Val ltac:(libc.unix.c_int) :=
      M.run (M.alloc ((Integer.of_Z 19) : i32.t)).
    
    Definition IP_ORIGDSTADDR : M.Val ltac:(libc.unix.c_int) :=
      M.run (M.alloc ((Integer.of_Z 20) : i32.t)).
    
    Definition IP_RECVORIGDSTADDR : M.Val ltac:(libc.unix.c_int) :=
      M.run (M.pure libc.unix.linux_like.IP_ORIGDSTADDR).
    
    Definition IP_MINTTL : M.Val ltac:(libc.unix.c_int) :=
      M.run (M.alloc ((Integer.of_Z 21) : i32.t)).
    
    Definition IP_NODEFRAG : M.Val ltac:(libc.unix.c_int) :=
      M.run (M.alloc ((Integer.of_Z 22) : i32.t)).
    
    Definition IP_CHECKSUM : M.Val ltac:(libc.unix.c_int) :=
      M.run (M.alloc ((Integer.of_Z 23) : i32.t)).
    
    Definition IP_BIND_ADDRESS_NO_PORT : M.Val ltac:(libc.unix.c_int) :=
      M.run (M.alloc ((Integer.of_Z 24) : i32.t)).
    
    Definition IP_MULTICAST_IF : M.Val ltac:(libc.unix.c_int) :=
      M.run (M.alloc ((Integer.of_Z 32) : i32.t)).
    
    Definition IP_MULTICAST_TTL : M.Val ltac:(libc.unix.c_int) :=
      M.run (M.alloc ((Integer.of_Z 33) : i32.t)).
    
    Definition IP_MULTICAST_LOOP : M.Val ltac:(libc.unix.c_int) :=
      M.run (M.alloc ((Integer.of_Z 34) : i32.t)).
    
    Definition IP_ADD_MEMBERSHIP : M.Val ltac:(libc.unix.c_int) :=
      M.run (M.alloc ((Integer.of_Z 35) : i32.t)).
    
    Definition IP_DROP_MEMBERSHIP : M.Val ltac:(libc.unix.c_int) :=
      M.run (M.alloc ((Integer.of_Z 36) : i32.t)).
    
    Definition IP_UNBLOCK_SOURCE : M.Val ltac:(libc.unix.c_int) :=
      M.run (M.alloc ((Integer.of_Z 37) : i32.t)).
    
    Definition IP_BLOCK_SOURCE : M.Val ltac:(libc.unix.c_int) :=
      M.run (M.alloc ((Integer.of_Z 38) : i32.t)).
    
    Definition IP_ADD_SOURCE_MEMBERSHIP : M.Val ltac:(libc.unix.c_int) :=
      M.run (M.alloc ((Integer.of_Z 39) : i32.t)).
    
    Definition IP_DROP_SOURCE_MEMBERSHIP : M.Val ltac:(libc.unix.c_int) :=
      M.run (M.alloc ((Integer.of_Z 40) : i32.t)).
    
    Definition IP_MSFILTER : M.Val ltac:(libc.unix.c_int) :=
      M.run (M.alloc ((Integer.of_Z 41) : i32.t)).
    
    Definition IP_MULTICAST_ALL : M.Val ltac:(libc.unix.c_int) :=
      M.run (M.alloc ((Integer.of_Z 49) : i32.t)).
    
    Definition IP_UNICAST_IF : M.Val ltac:(libc.unix.c_int) :=
      M.run (M.alloc ((Integer.of_Z 50) : i32.t)).
    
    Definition IP_DEFAULT_MULTICAST_TTL : M.Val ltac:(libc.unix.c_int) :=
      M.run (M.alloc ((Integer.of_Z 1) : i32.t)).
    
    Definition IP_DEFAULT_MULTICAST_LOOP : M.Val ltac:(libc.unix.c_int) :=
      M.run (M.alloc ((Integer.of_Z 1) : i32.t)).
    
    Definition IP_PMTUDISC_DONT : M.Val ltac:(libc.unix.c_int) :=
      M.run (M.alloc ((Integer.of_Z 0) : i32.t)).
    
    Definition IP_PMTUDISC_WANT : M.Val ltac:(libc.unix.c_int) :=
      M.run (M.alloc ((Integer.of_Z 1) : i32.t)).
    
    Definition IP_PMTUDISC_DO : M.Val ltac:(libc.unix.c_int) :=
      M.run (M.alloc ((Integer.of_Z 2) : i32.t)).
    
    Definition IP_PMTUDISC_PROBE : M.Val ltac:(libc.unix.c_int) :=
      M.run (M.alloc ((Integer.of_Z 3) : i32.t)).
    
    Definition IP_PMTUDISC_INTERFACE : M.Val ltac:(libc.unix.c_int) :=
      M.run (M.alloc ((Integer.of_Z 4) : i32.t)).
    
    Definition IP_PMTUDISC_OMIT : M.Val ltac:(libc.unix.c_int) :=
      M.run (M.alloc ((Integer.of_Z 5) : i32.t)).
    
    Definition IPPROTO_HOPOPTS : M.Val ltac:(libc.unix.c_int) :=
      M.run (M.alloc ((Integer.of_Z 0) : i32.t)).
    
    Definition IPPROTO_IGMP : M.Val ltac:(libc.unix.c_int) :=
      M.run (M.alloc ((Integer.of_Z 2) : i32.t)).
    
    Definition IPPROTO_IPIP : M.Val ltac:(libc.unix.c_int) :=
      M.run (M.alloc ((Integer.of_Z 4) : i32.t)).
    
    Definition IPPROTO_EGP : M.Val ltac:(libc.unix.c_int) :=
      M.run (M.alloc ((Integer.of_Z 8) : i32.t)).
    
    Definition IPPROTO_PUP : M.Val ltac:(libc.unix.c_int) :=
      M.run (M.alloc ((Integer.of_Z 12) : i32.t)).
    
    Definition IPPROTO_IDP : M.Val ltac:(libc.unix.c_int) :=
      M.run (M.alloc ((Integer.of_Z 22) : i32.t)).
    
    Definition IPPROTO_TP : M.Val ltac:(libc.unix.c_int) :=
      M.run (M.alloc ((Integer.of_Z 29) : i32.t)).
    
    Definition IPPROTO_DCCP : M.Val ltac:(libc.unix.c_int) :=
      M.run (M.alloc ((Integer.of_Z 33) : i32.t)).
    
    Definition IPPROTO_ROUTING : M.Val ltac:(libc.unix.c_int) :=
      M.run (M.alloc ((Integer.of_Z 43) : i32.t)).
    
    Definition IPPROTO_FRAGMENT : M.Val ltac:(libc.unix.c_int) :=
      M.run (M.alloc ((Integer.of_Z 44) : i32.t)).
    
    Definition IPPROTO_RSVP : M.Val ltac:(libc.unix.c_int) :=
      M.run (M.alloc ((Integer.of_Z 46) : i32.t)).
    
    Definition IPPROTO_GRE : M.Val ltac:(libc.unix.c_int) :=
      M.run (M.alloc ((Integer.of_Z 47) : i32.t)).
    
    Definition IPPROTO_ESP : M.Val ltac:(libc.unix.c_int) :=
      M.run (M.alloc ((Integer.of_Z 50) : i32.t)).
    
    Definition IPPROTO_AH : M.Val ltac:(libc.unix.c_int) :=
      M.run (M.alloc ((Integer.of_Z 51) : i32.t)).
    
    Definition IPPROTO_NONE : M.Val ltac:(libc.unix.c_int) :=
      M.run (M.alloc ((Integer.of_Z 59) : i32.t)).
    
    Definition IPPROTO_DSTOPTS : M.Val ltac:(libc.unix.c_int) :=
      M.run (M.alloc ((Integer.of_Z 60) : i32.t)).
    
    Definition IPPROTO_MTP : M.Val ltac:(libc.unix.c_int) :=
      M.run (M.alloc ((Integer.of_Z 92) : i32.t)).
    
    Definition IPPROTO_ENCAP : M.Val ltac:(libc.unix.c_int) :=
      M.run (M.alloc ((Integer.of_Z 98) : i32.t)).
    
    Definition IPPROTO_PIM : M.Val ltac:(libc.unix.c_int) :=
      M.run (M.alloc ((Integer.of_Z 103) : i32.t)).
    
    Definition IPPROTO_COMP : M.Val ltac:(libc.unix.c_int) :=
      M.run (M.alloc ((Integer.of_Z 108) : i32.t)).
    
    Definition IPPROTO_SCTP : M.Val ltac:(libc.unix.c_int) :=
      M.run (M.alloc ((Integer.of_Z 132) : i32.t)).
    
    Definition IPPROTO_MH : M.Val ltac:(libc.unix.c_int) :=
      M.run (M.alloc ((Integer.of_Z 135) : i32.t)).
    
    Definition IPPROTO_UDPLITE : M.Val ltac:(libc.unix.c_int) :=
      M.run (M.alloc ((Integer.of_Z 136) : i32.t)).
    
    Definition IPPROTO_RAW : M.Val ltac:(libc.unix.c_int) :=
      M.run (M.alloc ((Integer.of_Z 255) : i32.t)).
    
    Definition IPPROTO_BEETPH : M.Val ltac:(libc.unix.c_int) :=
      M.run (M.alloc ((Integer.of_Z 94) : i32.t)).
    
    Definition IPPROTO_MPLS : M.Val ltac:(libc.unix.c_int) :=
      M.run (M.alloc ((Integer.of_Z 137) : i32.t)).
    
    Definition IPPROTO_MPTCP : M.Val ltac:(libc.unix.c_int) :=
      M.run (M.alloc ((Integer.of_Z 262) : i32.t)).
    
    Definition IPPROTO_ETHERNET : M.Val ltac:(libc.unix.c_int) :=
      M.run (M.alloc ((Integer.of_Z 143) : i32.t)).
    
    Definition MCAST_EXCLUDE : M.Val ltac:(libc.unix.c_int) :=
      M.run (M.alloc ((Integer.of_Z 0) : i32.t)).
    
    Definition MCAST_INCLUDE : M.Val ltac:(libc.unix.c_int) :=
      M.run (M.alloc ((Integer.of_Z 1) : i32.t)).
    
    Definition MCAST_JOIN_GROUP : M.Val ltac:(libc.unix.c_int) :=
      M.run (M.alloc ((Integer.of_Z 42) : i32.t)).
    
    Definition MCAST_BLOCK_SOURCE : M.Val ltac:(libc.unix.c_int) :=
      M.run (M.alloc ((Integer.of_Z 43) : i32.t)).
    
    Definition MCAST_UNBLOCK_SOURCE : M.Val ltac:(libc.unix.c_int) :=
      M.run (M.alloc ((Integer.of_Z 44) : i32.t)).
    
    Definition MCAST_LEAVE_GROUP : M.Val ltac:(libc.unix.c_int) :=
      M.run (M.alloc ((Integer.of_Z 45) : i32.t)).
    
    Definition MCAST_JOIN_SOURCE_GROUP : M.Val ltac:(libc.unix.c_int) :=
      M.run (M.alloc ((Integer.of_Z 46) : i32.t)).
    
    Definition MCAST_LEAVE_SOURCE_GROUP : M.Val ltac:(libc.unix.c_int) :=
      M.run (M.alloc ((Integer.of_Z 47) : i32.t)).
    
    Definition MCAST_MSFILTER : M.Val ltac:(libc.unix.c_int) :=
      M.run (M.alloc ((Integer.of_Z 48) : i32.t)).
    
    Definition IPV6_ADDRFORM : M.Val ltac:(libc.unix.c_int) :=
      M.run (M.alloc ((Integer.of_Z 1) : i32.t)).
    
    Definition IPV6_2292PKTINFO : M.Val ltac:(libc.unix.c_int) :=
      M.run (M.alloc ((Integer.of_Z 2) : i32.t)).
    
    Definition IPV6_2292HOPOPTS : M.Val ltac:(libc.unix.c_int) :=
      M.run (M.alloc ((Integer.of_Z 3) : i32.t)).
    
    Definition IPV6_2292DSTOPTS : M.Val ltac:(libc.unix.c_int) :=
      M.run (M.alloc ((Integer.of_Z 4) : i32.t)).
    
    Definition IPV6_2292RTHDR : M.Val ltac:(libc.unix.c_int) :=
      M.run (M.alloc ((Integer.of_Z 5) : i32.t)).
    
    Definition IPV6_2292PKTOPTIONS : M.Val ltac:(libc.unix.c_int) :=
      M.run (M.alloc ((Integer.of_Z 6) : i32.t)).
    
    Definition IPV6_CHECKSUM : M.Val ltac:(libc.unix.c_int) :=
      M.run (M.alloc ((Integer.of_Z 7) : i32.t)).
    
    Definition IPV6_2292HOPLIMIT : M.Val ltac:(libc.unix.c_int) :=
      M.run (M.alloc ((Integer.of_Z 8) : i32.t)).
    
    Definition IPV6_NEXTHOP : M.Val ltac:(libc.unix.c_int) :=
      M.run (M.alloc ((Integer.of_Z 9) : i32.t)).
    
    Definition IPV6_AUTHHDR : M.Val ltac:(libc.unix.c_int) :=
      M.run (M.alloc ((Integer.of_Z 10) : i32.t)).
    
    Definition IPV6_UNICAST_HOPS : M.Val ltac:(libc.unix.c_int) :=
      M.run (M.alloc ((Integer.of_Z 16) : i32.t)).
    
    Definition IPV6_MULTICAST_IF : M.Val ltac:(libc.unix.c_int) :=
      M.run (M.alloc ((Integer.of_Z 17) : i32.t)).
    
    Definition IPV6_MULTICAST_HOPS : M.Val ltac:(libc.unix.c_int) :=
      M.run (M.alloc ((Integer.of_Z 18) : i32.t)).
    
    Definition IPV6_MULTICAST_LOOP : M.Val ltac:(libc.unix.c_int) :=
      M.run (M.alloc ((Integer.of_Z 19) : i32.t)).
    
    Definition IPV6_ADD_MEMBERSHIP : M.Val ltac:(libc.unix.c_int) :=
      M.run (M.alloc ((Integer.of_Z 20) : i32.t)).
    
    Definition IPV6_DROP_MEMBERSHIP : M.Val ltac:(libc.unix.c_int) :=
      M.run (M.alloc ((Integer.of_Z 21) : i32.t)).
    
    Definition IPV6_ROUTER_ALERT : M.Val ltac:(libc.unix.c_int) :=
      M.run (M.alloc ((Integer.of_Z 22) : i32.t)).
    
    Definition IPV6_MTU_DISCOVER : M.Val ltac:(libc.unix.c_int) :=
      M.run (M.alloc ((Integer.of_Z 23) : i32.t)).
    
    Definition IPV6_MTU : M.Val ltac:(libc.unix.c_int) :=
      M.run (M.alloc ((Integer.of_Z 24) : i32.t)).
    
    Definition IPV6_RECVERR : M.Val ltac:(libc.unix.c_int) :=
      M.run (M.alloc ((Integer.of_Z 25) : i32.t)).
    
    Definition IPV6_V6ONLY : M.Val ltac:(libc.unix.c_int) :=
      M.run (M.alloc ((Integer.of_Z 26) : i32.t)).
    
    Definition IPV6_JOIN_ANYCAST : M.Val ltac:(libc.unix.c_int) :=
      M.run (M.alloc ((Integer.of_Z 27) : i32.t)).
    
    Definition IPV6_LEAVE_ANYCAST : M.Val ltac:(libc.unix.c_int) :=
      M.run (M.alloc ((Integer.of_Z 28) : i32.t)).
    
    Definition IPV6_IPSEC_POLICY : M.Val ltac:(libc.unix.c_int) :=
      M.run (M.alloc ((Integer.of_Z 34) : i32.t)).
    
    Definition IPV6_XFRM_POLICY : M.Val ltac:(libc.unix.c_int) :=
      M.run (M.alloc ((Integer.of_Z 35) : i32.t)).
    
    Definition IPV6_HDRINCL : M.Val ltac:(libc.unix.c_int) :=
      M.run (M.alloc ((Integer.of_Z 36) : i32.t)).
    
    Definition IPV6_RECVPKTINFO : M.Val ltac:(libc.unix.c_int) :=
      M.run (M.alloc ((Integer.of_Z 49) : i32.t)).
    
    Definition IPV6_PKTINFO : M.Val ltac:(libc.unix.c_int) :=
      M.run (M.alloc ((Integer.of_Z 50) : i32.t)).
    
    Definition IPV6_RECVHOPLIMIT : M.Val ltac:(libc.unix.c_int) :=
      M.run (M.alloc ((Integer.of_Z 51) : i32.t)).
    
    Definition IPV6_HOPLIMIT : M.Val ltac:(libc.unix.c_int) :=
      M.run (M.alloc ((Integer.of_Z 52) : i32.t)).
    
    Definition IPV6_RECVHOPOPTS : M.Val ltac:(libc.unix.c_int) :=
      M.run (M.alloc ((Integer.of_Z 53) : i32.t)).
    
    Definition IPV6_HOPOPTS : M.Val ltac:(libc.unix.c_int) :=
      M.run (M.alloc ((Integer.of_Z 54) : i32.t)).
    
    Definition IPV6_RTHDRDSTOPTS : M.Val ltac:(libc.unix.c_int) :=
      M.run (M.alloc ((Integer.of_Z 55) : i32.t)).
    
    Definition IPV6_RECVRTHDR : M.Val ltac:(libc.unix.c_int) :=
      M.run (M.alloc ((Integer.of_Z 56) : i32.t)).
    
    Definition IPV6_RTHDR : M.Val ltac:(libc.unix.c_int) :=
      M.run (M.alloc ((Integer.of_Z 57) : i32.t)).
    
    Definition IPV6_RECVDSTOPTS : M.Val ltac:(libc.unix.c_int) :=
      M.run (M.alloc ((Integer.of_Z 58) : i32.t)).
    
    Definition IPV6_DSTOPTS : M.Val ltac:(libc.unix.c_int) :=
      M.run (M.alloc ((Integer.of_Z 59) : i32.t)).
    
    Definition IPV6_RECVPATHMTU : M.Val ltac:(libc.unix.c_int) :=
      M.run (M.alloc ((Integer.of_Z 60) : i32.t)).
    
    Definition IPV6_PATHMTU : M.Val ltac:(libc.unix.c_int) :=
      M.run (M.alloc ((Integer.of_Z 61) : i32.t)).
    
    Definition IPV6_DONTFRAG : M.Val ltac:(libc.unix.c_int) :=
      M.run (M.alloc ((Integer.of_Z 62) : i32.t)).
    
    Definition IPV6_RECVTCLASS : M.Val ltac:(libc.unix.c_int) :=
      M.run (M.alloc ((Integer.of_Z 66) : i32.t)).
    
    Definition IPV6_TCLASS : M.Val ltac:(libc.unix.c_int) :=
      M.run (M.alloc ((Integer.of_Z 67) : i32.t)).
    
    Definition IPV6_AUTOFLOWLABEL : M.Val ltac:(libc.unix.c_int) :=
      M.run (M.alloc ((Integer.of_Z 70) : i32.t)).
    
    Definition IPV6_ADDR_PREFERENCES : M.Val ltac:(libc.unix.c_int) :=
      M.run (M.alloc ((Integer.of_Z 72) : i32.t)).
    
    Definition IPV6_MINHOPCOUNT : M.Val ltac:(libc.unix.c_int) :=
      M.run (M.alloc ((Integer.of_Z 73) : i32.t)).
    
    Definition IPV6_ORIGDSTADDR : M.Val ltac:(libc.unix.c_int) :=
      M.run (M.alloc ((Integer.of_Z 74) : i32.t)).
    
    Definition IPV6_RECVORIGDSTADDR : M.Val ltac:(libc.unix.c_int) :=
      M.run (M.pure libc.unix.linux_like.IPV6_ORIGDSTADDR).
    
    Definition IPV6_TRANSPARENT : M.Val ltac:(libc.unix.c_int) :=
      M.run (M.alloc ((Integer.of_Z 75) : i32.t)).
    
    Definition IPV6_UNICAST_IF : M.Val ltac:(libc.unix.c_int) :=
      M.run (M.alloc ((Integer.of_Z 76) : i32.t)).
    
    Definition IPV6_PREFER_SRC_TMP : M.Val ltac:(libc.unix.c_int) :=
      M.run (M.alloc ((Integer.of_Z 1) : i32.t)).
    
    Definition IPV6_PREFER_SRC_PUBLIC : M.Val ltac:(libc.unix.c_int) :=
      M.run (M.alloc ((Integer.of_Z 2) : i32.t)).
    
    Definition IPV6_PREFER_SRC_PUBTMP_DEFAULT : M.Val ltac:(libc.unix.c_int) :=
      M.run (M.alloc ((Integer.of_Z 256) : i32.t)).
    
    Definition IPV6_PREFER_SRC_COA : M.Val ltac:(libc.unix.c_int) :=
      M.run (M.alloc ((Integer.of_Z 4) : i32.t)).
    
    Definition IPV6_PREFER_SRC_HOME : M.Val ltac:(libc.unix.c_int) :=
      M.run (M.alloc ((Integer.of_Z 1024) : i32.t)).
    
    Definition IPV6_PREFER_SRC_CGA : M.Val ltac:(libc.unix.c_int) :=
      M.run (M.alloc ((Integer.of_Z 8) : i32.t)).
    
    Definition IPV6_PREFER_SRC_NONCGA : M.Val ltac:(libc.unix.c_int) :=
      M.run (M.alloc ((Integer.of_Z 2048) : i32.t)).
    
    Definition IPV6_PMTUDISC_DONT : M.Val ltac:(libc.unix.c_int) :=
      M.run (M.alloc ((Integer.of_Z 0) : i32.t)).
    
    Definition IPV6_PMTUDISC_WANT : M.Val ltac:(libc.unix.c_int) :=
      M.run (M.alloc ((Integer.of_Z 1) : i32.t)).
    
    Definition IPV6_PMTUDISC_DO : M.Val ltac:(libc.unix.c_int) :=
      M.run (M.alloc ((Integer.of_Z 2) : i32.t)).
    
    Definition IPV6_PMTUDISC_PROBE : M.Val ltac:(libc.unix.c_int) :=
      M.run (M.alloc ((Integer.of_Z 3) : i32.t)).
    
    Definition IPV6_PMTUDISC_INTERFACE : M.Val ltac:(libc.unix.c_int) :=
      M.run (M.alloc ((Integer.of_Z 4) : i32.t)).
    
    Definition IPV6_PMTUDISC_OMIT : M.Val ltac:(libc.unix.c_int) :=
      M.run (M.alloc ((Integer.of_Z 5) : i32.t)).
    
    Definition TCP_NODELAY : M.Val ltac:(libc.unix.c_int) :=
      M.run (M.alloc ((Integer.of_Z 1) : i32.t)).
    
    Definition TCP_MAXSEG : M.Val ltac:(libc.unix.c_int) :=
      M.run (M.alloc ((Integer.of_Z 2) : i32.t)).
    
    Definition TCP_CORK : M.Val ltac:(libc.unix.c_int) :=
      M.run (M.alloc ((Integer.of_Z 3) : i32.t)).
    
    Definition TCP_KEEPIDLE : M.Val ltac:(libc.unix.c_int) :=
      M.run (M.alloc ((Integer.of_Z 4) : i32.t)).
    
    Definition TCP_KEEPINTVL : M.Val ltac:(libc.unix.c_int) :=
      M.run (M.alloc ((Integer.of_Z 5) : i32.t)).
    
    Definition TCP_KEEPCNT : M.Val ltac:(libc.unix.c_int) :=
      M.run (M.alloc ((Integer.of_Z 6) : i32.t)).
    
    Definition TCP_SYNCNT : M.Val ltac:(libc.unix.c_int) :=
      M.run (M.alloc ((Integer.of_Z 7) : i32.t)).
    
    Definition TCP_LINGER2 : M.Val ltac:(libc.unix.c_int) :=
      M.run (M.alloc ((Integer.of_Z 8) : i32.t)).
    
    Definition TCP_DEFER_ACCEPT : M.Val ltac:(libc.unix.c_int) :=
      M.run (M.alloc ((Integer.of_Z 9) : i32.t)).
    
    Definition TCP_WINDOW_CLAMP : M.Val ltac:(libc.unix.c_int) :=
      M.run (M.alloc ((Integer.of_Z 10) : i32.t)).
    
    Definition TCP_INFO : M.Val ltac:(libc.unix.c_int) :=
      M.run (M.alloc ((Integer.of_Z 11) : i32.t)).
    
    Definition TCP_QUICKACK : M.Val ltac:(libc.unix.c_int) :=
      M.run (M.alloc ((Integer.of_Z 12) : i32.t)).
    
    Definition TCP_CONGESTION : M.Val ltac:(libc.unix.c_int) :=
      M.run (M.alloc ((Integer.of_Z 13) : i32.t)).
    
    Definition TCP_MD5SIG : M.Val ltac:(libc.unix.c_int) :=
      M.run (M.alloc ((Integer.of_Z 14) : i32.t)).
    
    Definition TCP_COOKIE_TRANSACTIONS : M.Val ltac:(libc.unix.c_int) :=
      M.run (M.alloc ((Integer.of_Z 15) : i32.t)).
    
    Definition TCP_THIN_LINEAR_TIMEOUTS : M.Val ltac:(libc.unix.c_int) :=
      M.run (M.alloc ((Integer.of_Z 16) : i32.t)).
    
    Definition TCP_THIN_DUPACK : M.Val ltac:(libc.unix.c_int) :=
      M.run (M.alloc ((Integer.of_Z 17) : i32.t)).
    
    Definition TCP_USER_TIMEOUT : M.Val ltac:(libc.unix.c_int) :=
      M.run (M.alloc ((Integer.of_Z 18) : i32.t)).
    
    Definition TCP_REPAIR : M.Val ltac:(libc.unix.c_int) :=
      M.run (M.alloc ((Integer.of_Z 19) : i32.t)).
    
    Definition TCP_REPAIR_QUEUE : M.Val ltac:(libc.unix.c_int) :=
      M.run (M.alloc ((Integer.of_Z 20) : i32.t)).
    
    Definition TCP_QUEUE_SEQ : M.Val ltac:(libc.unix.c_int) :=
      M.run (M.alloc ((Integer.of_Z 21) : i32.t)).
    
    Definition TCP_REPAIR_OPTIONS : M.Val ltac:(libc.unix.c_int) :=
      M.run (M.alloc ((Integer.of_Z 22) : i32.t)).
    
    Definition TCP_FASTOPEN : M.Val ltac:(libc.unix.c_int) :=
      M.run (M.alloc ((Integer.of_Z 23) : i32.t)).
    
    Definition TCP_TIMESTAMP : M.Val ltac:(libc.unix.c_int) :=
      M.run (M.alloc ((Integer.of_Z 24) : i32.t)).
    
    Definition TCP_NOTSENT_LOWAT : M.Val ltac:(libc.unix.c_int) :=
      M.run (M.alloc ((Integer.of_Z 25) : i32.t)).
    
    Definition TCP_CC_INFO : M.Val ltac:(libc.unix.c_int) :=
      M.run (M.alloc ((Integer.of_Z 26) : i32.t)).
    
    Definition TCP_SAVE_SYN : M.Val ltac:(libc.unix.c_int) :=
      M.run (M.alloc ((Integer.of_Z 27) : i32.t)).
    
    Definition TCP_SAVED_SYN : M.Val ltac:(libc.unix.c_int) :=
      M.run (M.alloc ((Integer.of_Z 28) : i32.t)).
    
    Definition TCP_REPAIR_WINDOW : M.Val ltac:(libc.unix.c_int) :=
      M.run (M.alloc ((Integer.of_Z 29) : i32.t)).
    
    Definition TCP_FASTOPEN_CONNECT : M.Val ltac:(libc.unix.c_int) :=
      M.run (M.alloc ((Integer.of_Z 30) : i32.t)).
    
    Definition TCP_ULP : M.Val ltac:(libc.unix.c_int) :=
      M.run (M.alloc ((Integer.of_Z 31) : i32.t)).
    
    Definition TCP_MD5SIG_EXT : M.Val ltac:(libc.unix.c_int) :=
      M.run (M.alloc ((Integer.of_Z 32) : i32.t)).
    
    Definition TCP_FASTOPEN_KEY : M.Val ltac:(libc.unix.c_int) :=
      M.run (M.alloc ((Integer.of_Z 33) : i32.t)).
    
    Definition TCP_FASTOPEN_NO_COOKIE : M.Val ltac:(libc.unix.c_int) :=
      M.run (M.alloc ((Integer.of_Z 34) : i32.t)).
    
    Definition TCP_ZEROCOPY_RECEIVE : M.Val ltac:(libc.unix.c_int) :=
      M.run (M.alloc ((Integer.of_Z 35) : i32.t)).
    
    Definition TCP_INQ : M.Val ltac:(libc.unix.c_int) :=
      M.run (M.alloc ((Integer.of_Z 36) : i32.t)).
    
    Definition TCP_CM_INQ : M.Val ltac:(libc.unix.c_int) :=
      M.run (M.pure libc.unix.linux_like.TCP_INQ).
    
    Definition TCP_MD5SIG_MAXKEYLEN : M.Val usize.t :=
      M.run (M.alloc ((Integer.of_Z 80) : usize.t)).
    
    Definition SO_DEBUG : M.Val ltac:(libc.unix.c_int) :=
      M.run (M.alloc ((Integer.of_Z 1) : i32.t)).
    
    Definition SHUT_RD : M.Val ltac:(libc.unix.c_int) :=
      M.run (M.alloc ((Integer.of_Z 0) : i32.t)).
    
    Definition SHUT_WR : M.Val ltac:(libc.unix.c_int) :=
      M.run (M.alloc ((Integer.of_Z 1) : i32.t)).
    
    Definition SHUT_RDWR : M.Val ltac:(libc.unix.c_int) :=
      M.run (M.alloc ((Integer.of_Z 2) : i32.t)).
    
    Definition LOCK_SH : M.Val ltac:(libc.unix.c_int) :=
      M.run (M.alloc ((Integer.of_Z 1) : i32.t)).
    
    Definition LOCK_EX : M.Val ltac:(libc.unix.c_int) :=
      M.run (M.alloc ((Integer.of_Z 2) : i32.t)).
    
    Definition LOCK_NB : M.Val ltac:(libc.unix.c_int) :=
      M.run (M.alloc ((Integer.of_Z 4) : i32.t)).
    
    Definition LOCK_UN : M.Val ltac:(libc.unix.c_int) :=
      M.run (M.alloc ((Integer.of_Z 8) : i32.t)).
    
    Definition SS_ONSTACK : M.Val ltac:(libc.unix.c_int) :=
      M.run (M.alloc ((Integer.of_Z 1) : i32.t)).
    
    Definition SS_DISABLE : M.Val ltac:(libc.unix.c_int) :=
      M.run (M.alloc ((Integer.of_Z 2) : i32.t)).
    
    Definition PATH_MAX : M.Val ltac:(libc.unix.c_int) :=
      M.run (M.alloc ((Integer.of_Z 4096) : i32.t)).
    
    Definition UIO_MAXIOV : M.Val ltac:(libc.unix.c_int) :=
      M.run (M.alloc ((Integer.of_Z 1024) : i32.t)).
    
    Definition FD_SETSIZE : M.Val ltac:(libc.unix.c_int) :=
      M.run (M.alloc ((Integer.of_Z 1024) : i32.t)).
    
    Definition EPOLLIN : M.Val u32.t :=
      M.run (M.alloc ((Integer.of_Z 1) : u32.t)).
    
    Definition EPOLLPRI : M.Val u32.t :=
      M.run (M.alloc ((Integer.of_Z 2) : u32.t)).
    
    Definition EPOLLOUT : M.Val u32.t :=
      M.run (M.alloc ((Integer.of_Z 4) : u32.t)).
    
    Definition EPOLLERR : M.Val u32.t :=
      M.run (M.alloc ((Integer.of_Z 8) : u32.t)).
    
    Definition EPOLLHUP : M.Val u32.t :=
      M.run (M.alloc ((Integer.of_Z 16) : u32.t)).
    
    Definition EPOLLRDNORM : M.Val u32.t :=
      M.run (M.alloc ((Integer.of_Z 64) : u32.t)).
    
    Definition EPOLLRDBAND : M.Val u32.t :=
      M.run (M.alloc ((Integer.of_Z 128) : u32.t)).
    
    Definition EPOLLWRNORM : M.Val u32.t :=
      M.run (M.alloc ((Integer.of_Z 256) : u32.t)).
    
    Definition EPOLLWRBAND : M.Val u32.t :=
      M.run (M.alloc ((Integer.of_Z 512) : u32.t)).
    
    Definition EPOLLMSG : M.Val u32.t :=
      M.run (M.alloc ((Integer.of_Z 1024) : u32.t)).
    
    Definition EPOLLRDHUP : M.Val u32.t :=
      M.run (M.alloc ((Integer.of_Z 8192) : u32.t)).
    
    Definition EPOLLEXCLUSIVE : M.Val u32.t :=
      M.run (M.alloc ((Integer.of_Z 268435456) : u32.t)).
    
    Definition EPOLLWAKEUP : M.Val u32.t :=
      M.run (M.alloc ((Integer.of_Z 536870912) : u32.t)).
    
    Definition EPOLLONESHOT : M.Val u32.t :=
      M.run (M.alloc ((Integer.of_Z 1073741824) : u32.t)).
    
    Definition EPOLLET : M.Val u32.t :=
      M.run (M.alloc ((Integer.of_Z 2147483648) : u32.t)).
    
    Definition EPOLL_CTL_ADD : M.Val ltac:(libc.unix.c_int) :=
      M.run (M.alloc ((Integer.of_Z 1) : i32.t)).
    
    Definition EPOLL_CTL_MOD : M.Val ltac:(libc.unix.c_int) :=
      M.run (M.alloc ((Integer.of_Z 3) : i32.t)).
    
    Definition EPOLL_CTL_DEL : M.Val ltac:(libc.unix.c_int) :=
      M.run (M.alloc ((Integer.of_Z 2) : i32.t)).
    
    Definition MNT_FORCE : M.Val ltac:(libc.unix.c_int) :=
      M.run (M.alloc ((Integer.of_Z 1) : i32.t)).
    
    Definition MNT_DETACH : M.Val ltac:(libc.unix.c_int) :=
      M.run (M.alloc ((Integer.of_Z 2) : i32.t)).
    
    Definition MNT_EXPIRE : M.Val ltac:(libc.unix.c_int) :=
      M.run (M.alloc ((Integer.of_Z 4) : i32.t)).
    
    Definition UMOUNT_NOFOLLOW : M.Val ltac:(libc.unix.c_int) :=
      M.run (M.alloc ((Integer.of_Z 8) : i32.t)).
    
    Definition Q_GETFMT : M.Val ltac:(libc.unix.c_int) :=
      M.run (M.alloc ((Integer.of_Z 8388612) : i32.t)).
    
    Definition Q_GETINFO : M.Val ltac:(libc.unix.c_int) :=
      M.run (M.alloc ((Integer.of_Z 8388613) : i32.t)).
    
    Definition Q_SETINFO : M.Val ltac:(libc.unix.c_int) :=
      M.run (M.alloc ((Integer.of_Z 8388614) : i32.t)).
    
    Definition QIF_BLIMITS : M.Val u32.t :=
      M.run (M.alloc ((Integer.of_Z 1) : u32.t)).
    
    Definition QIF_SPACE : M.Val u32.t :=
      M.run (M.alloc ((Integer.of_Z 2) : u32.t)).
    
    Definition QIF_ILIMITS : M.Val u32.t :=
      M.run (M.alloc ((Integer.of_Z 4) : u32.t)).
    
    Definition QIF_INODES : M.Val u32.t :=
      M.run (M.alloc ((Integer.of_Z 8) : u32.t)).
    
    Definition QIF_BTIME : M.Val u32.t :=
      M.run (M.alloc ((Integer.of_Z 16) : u32.t)).
    
    Definition QIF_ITIME : M.Val u32.t :=
      M.run (M.alloc ((Integer.of_Z 32) : u32.t)).
    
    Definition QIF_LIMITS : M.Val u32.t :=
      M.run (M.alloc ((Integer.of_Z 5) : u32.t)).
    
    Definition QIF_USAGE : M.Val u32.t :=
      M.run (M.alloc ((Integer.of_Z 10) : u32.t)).
    
    Definition QIF_TIMES : M.Val u32.t :=
      M.run (M.alloc ((Integer.of_Z 48) : u32.t)).
    
    Definition QIF_ALL : M.Val u32.t :=
      M.run (M.alloc ((Integer.of_Z 63) : u32.t)).
    
    Definition Q_SYNC : M.Val ltac:(libc.unix.c_int) :=
      M.run (M.alloc ((Integer.of_Z 8388609) : i32.t)).
    
    Definition Q_QUOTAON : M.Val ltac:(libc.unix.c_int) :=
      M.run (M.alloc ((Integer.of_Z 8388610) : i32.t)).
    
    Definition Q_QUOTAOFF : M.Val ltac:(libc.unix.c_int) :=
      M.run (M.alloc ((Integer.of_Z 8388611) : i32.t)).
    
    Definition Q_GETQUOTA : M.Val ltac:(libc.unix.c_int) :=
      M.run (M.alloc ((Integer.of_Z 8388615) : i32.t)).
    
    Definition Q_SETQUOTA : M.Val ltac:(libc.unix.c_int) :=
      M.run (M.alloc ((Integer.of_Z 8388616) : i32.t)).
    
    Definition TCIOFF : M.Val ltac:(libc.unix.c_int) :=
      M.run (M.alloc ((Integer.of_Z 2) : i32.t)).
    
    Definition TCION : M.Val ltac:(libc.unix.c_int) :=
      M.run (M.alloc ((Integer.of_Z 3) : i32.t)).
    
    Definition TCOOFF : M.Val ltac:(libc.unix.c_int) :=
      M.run (M.alloc ((Integer.of_Z 0) : i32.t)).
    
    Definition TCOON : M.Val ltac:(libc.unix.c_int) :=
      M.run (M.alloc ((Integer.of_Z 1) : i32.t)).
    
    Definition TCIFLUSH : M.Val ltac:(libc.unix.c_int) :=
      M.run (M.alloc ((Integer.of_Z 0) : i32.t)).
    
    Definition TCOFLUSH : M.Val ltac:(libc.unix.c_int) :=
      M.run (M.alloc ((Integer.of_Z 1) : i32.t)).
    
    Definition TCIOFLUSH : M.Val ltac:(libc.unix.c_int) :=
      M.run (M.alloc ((Integer.of_Z 2) : i32.t)).
    
    Definition NL0 : M.Val ltac:(libc.unix.linux_like.tcflag_t) :=
      M.run (M.alloc ((Integer.of_Z 0) : u32.t)).
    
    Definition NL1 : M.Val ltac:(libc.unix.linux_like.tcflag_t) :=
      M.run (M.alloc ((Integer.of_Z 256) : u32.t)).
    
    Definition TAB0 : M.Val ltac:(libc.unix.linux_like.tcflag_t) :=
      M.run (M.alloc ((Integer.of_Z 0) : u32.t)).
    
    Definition CR0 : M.Val ltac:(libc.unix.linux_like.tcflag_t) :=
      M.run (M.alloc ((Integer.of_Z 0) : u32.t)).
    
    Definition FF0 : M.Val ltac:(libc.unix.linux_like.tcflag_t) :=
      M.run (M.alloc ((Integer.of_Z 0) : u32.t)).
    
    Definition BS0 : M.Val ltac:(libc.unix.linux_like.tcflag_t) :=
      M.run (M.alloc ((Integer.of_Z 0) : u32.t)).
    
    Definition VT0 : M.Val ltac:(libc.unix.linux_like.tcflag_t) :=
      M.run (M.alloc ((Integer.of_Z 0) : u32.t)).
    
    Definition VERASE : M.Val usize.t :=
      M.run (M.alloc ((Integer.of_Z 2) : usize.t)).
    
    Definition VKILL : M.Val usize.t :=
      M.run (M.alloc ((Integer.of_Z 3) : usize.t)).
    
    Definition VINTR : M.Val usize.t :=
      M.run (M.alloc ((Integer.of_Z 0) : usize.t)).
    
    Definition VQUIT : M.Val usize.t :=
      M.run (M.alloc ((Integer.of_Z 1) : usize.t)).
    
    Definition VLNEXT : M.Val usize.t :=
      M.run (M.alloc ((Integer.of_Z 15) : usize.t)).
    
    Definition IGNBRK : M.Val ltac:(libc.unix.linux_like.tcflag_t) :=
      M.run (M.alloc ((Integer.of_Z 1) : u32.t)).
    
    Definition BRKINT : M.Val ltac:(libc.unix.linux_like.tcflag_t) :=
      M.run (M.alloc ((Integer.of_Z 2) : u32.t)).
    
    Definition IGNPAR : M.Val ltac:(libc.unix.linux_like.tcflag_t) :=
      M.run (M.alloc ((Integer.of_Z 4) : u32.t)).
    
    Definition PARMRK : M.Val ltac:(libc.unix.linux_like.tcflag_t) :=
      M.run (M.alloc ((Integer.of_Z 8) : u32.t)).
    
    Definition INPCK : M.Val ltac:(libc.unix.linux_like.tcflag_t) :=
      M.run (M.alloc ((Integer.of_Z 16) : u32.t)).
    
    Definition ISTRIP : M.Val ltac:(libc.unix.linux_like.tcflag_t) :=
      M.run (M.alloc ((Integer.of_Z 32) : u32.t)).
    
    Definition INLCR : M.Val ltac:(libc.unix.linux_like.tcflag_t) :=
      M.run (M.alloc ((Integer.of_Z 64) : u32.t)).
    
    Definition IGNCR : M.Val ltac:(libc.unix.linux_like.tcflag_t) :=
      M.run (M.alloc ((Integer.of_Z 128) : u32.t)).
    
    Definition ICRNL : M.Val ltac:(libc.unix.linux_like.tcflag_t) :=
      M.run (M.alloc ((Integer.of_Z 256) : u32.t)).
    
    Definition IXANY : M.Val ltac:(libc.unix.linux_like.tcflag_t) :=
      M.run (M.alloc ((Integer.of_Z 2048) : u32.t)).
    
    Definition IMAXBEL : M.Val ltac:(libc.unix.linux_like.tcflag_t) :=
      M.run (M.alloc ((Integer.of_Z 8192) : u32.t)).
    
    Definition OPOST : M.Val ltac:(libc.unix.linux_like.tcflag_t) :=
      M.run (M.alloc ((Integer.of_Z 1) : u32.t)).
    
    Definition CS5 : M.Val ltac:(libc.unix.linux_like.tcflag_t) :=
      M.run (M.alloc ((Integer.of_Z 0) : u32.t)).
    
    Definition CRTSCTS : M.Val ltac:(libc.unix.linux_like.tcflag_t) :=
      M.run (M.alloc ((Integer.of_Z 2147483648) : u32.t)).
    
    Definition ECHO : M.Val ltac:(libc.unix.linux_like.tcflag_t) :=
      M.run (M.alloc ((Integer.of_Z 8) : u32.t)).
    
    Definition OCRNL : M.Val ltac:(libc.unix.linux_like.tcflag_t) :=
      M.run (M.alloc ((Integer.of_Z 8) : u32.t)).
    
    Definition ONOCR : M.Val ltac:(libc.unix.linux_like.tcflag_t) :=
      M.run (M.alloc ((Integer.of_Z 16) : u32.t)).
    
    Definition ONLRET : M.Val ltac:(libc.unix.linux_like.tcflag_t) :=
      M.run (M.alloc ((Integer.of_Z 32) : u32.t)).
    
    Definition OFILL : M.Val ltac:(libc.unix.linux_like.tcflag_t) :=
      M.run (M.alloc ((Integer.of_Z 64) : u32.t)).
    
    Definition OFDEL : M.Val ltac:(libc.unix.linux_like.tcflag_t) :=
      M.run (M.alloc ((Integer.of_Z 128) : u32.t)).
    
    Definition CLONE_VM : M.Val ltac:(libc.unix.c_int) :=
      M.run (M.alloc ((Integer.of_Z 256) : i32.t)).
    
    Definition CLONE_FS : M.Val ltac:(libc.unix.c_int) :=
      M.run (M.alloc ((Integer.of_Z 512) : i32.t)).
    
    Definition CLONE_FILES : M.Val ltac:(libc.unix.c_int) :=
      M.run (M.alloc ((Integer.of_Z 1024) : i32.t)).
    
    Definition CLONE_SIGHAND : M.Val ltac:(libc.unix.c_int) :=
      M.run (M.alloc ((Integer.of_Z 2048) : i32.t)).
    
    Definition CLONE_PTRACE : M.Val ltac:(libc.unix.c_int) :=
      M.run (M.alloc ((Integer.of_Z 8192) : i32.t)).
    
    Definition CLONE_VFORK : M.Val ltac:(libc.unix.c_int) :=
      M.run (M.alloc ((Integer.of_Z 16384) : i32.t)).
    
    Definition CLONE_PARENT : M.Val ltac:(libc.unix.c_int) :=
      M.run (M.alloc ((Integer.of_Z 32768) : i32.t)).
    
    Definition CLONE_THREAD : M.Val ltac:(libc.unix.c_int) :=
      M.run (M.alloc ((Integer.of_Z 65536) : i32.t)).
    
    Definition CLONE_NEWNS : M.Val ltac:(libc.unix.c_int) :=
      M.run (M.alloc ((Integer.of_Z 131072) : i32.t)).
    
    Definition CLONE_SYSVSEM : M.Val ltac:(libc.unix.c_int) :=
      M.run (M.alloc ((Integer.of_Z 262144) : i32.t)).
    
    Definition CLONE_SETTLS : M.Val ltac:(libc.unix.c_int) :=
      M.run (M.alloc ((Integer.of_Z 524288) : i32.t)).
    
    Definition CLONE_PARENT_SETTID : M.Val ltac:(libc.unix.c_int) :=
      M.run (M.alloc ((Integer.of_Z 1048576) : i32.t)).
    
    Definition CLONE_CHILD_CLEARTID : M.Val ltac:(libc.unix.c_int) :=
      M.run (M.alloc ((Integer.of_Z 2097152) : i32.t)).
    
    Definition CLONE_DETACHED : M.Val ltac:(libc.unix.c_int) :=
      M.run (M.alloc ((Integer.of_Z 4194304) : i32.t)).
    
    Definition CLONE_UNTRACED : M.Val ltac:(libc.unix.c_int) :=
      M.run (M.alloc ((Integer.of_Z 8388608) : i32.t)).
    
    Definition CLONE_CHILD_SETTID : M.Val ltac:(libc.unix.c_int) :=
      M.run (M.alloc ((Integer.of_Z 16777216) : i32.t)).
    
    Definition CLONE_NEWCGROUP : M.Val ltac:(libc.unix.c_int) :=
      M.run (M.alloc ((Integer.of_Z 33554432) : i32.t)).
    
    Definition CLONE_NEWUTS : M.Val ltac:(libc.unix.c_int) :=
      M.run (M.alloc ((Integer.of_Z 67108864) : i32.t)).
    
    Definition CLONE_NEWIPC : M.Val ltac:(libc.unix.c_int) :=
      M.run (M.alloc ((Integer.of_Z 134217728) : i32.t)).
    
    Definition CLONE_NEWUSER : M.Val ltac:(libc.unix.c_int) :=
      M.run (M.alloc ((Integer.of_Z 268435456) : i32.t)).
    
    Definition CLONE_NEWPID : M.Val ltac:(libc.unix.c_int) :=
      M.run (M.alloc ((Integer.of_Z 536870912) : i32.t)).
    
    Definition CLONE_NEWNET : M.Val ltac:(libc.unix.c_int) :=
      M.run (M.alloc ((Integer.of_Z 1073741824) : i32.t)).
    
    Definition CLONE_IO : M.Val ltac:(libc.unix.c_int) :=
      M.run (M.alloc ((Integer.of_Z 2147483648) : i32.t)).
    
    Definition WNOHANG : M.Val ltac:(libc.unix.c_int) :=
      M.run (M.alloc ((Integer.of_Z 1) : i32.t)).
    
    Definition WUNTRACED : M.Val ltac:(libc.unix.c_int) :=
      M.run (M.alloc ((Integer.of_Z 2) : i32.t)).
    
    Definition WSTOPPED : M.Val ltac:(libc.unix.c_int) :=
      M.run (M.pure libc.unix.linux_like.WUNTRACED).
    
    Definition WEXITED : M.Val ltac:(libc.unix.c_int) :=
      M.run (M.alloc ((Integer.of_Z 4) : i32.t)).
    
    Definition WCONTINUED : M.Val ltac:(libc.unix.c_int) :=
      M.run (M.alloc ((Integer.of_Z 8) : i32.t)).
    
    Definition WNOWAIT : M.Val ltac:(libc.unix.c_int) :=
      M.run (M.alloc ((Integer.of_Z 16777216) : i32.t)).
    
    Definition ADDR_NO_RANDOMIZE : M.Val ltac:(libc.unix.c_int) :=
      M.run (M.alloc ((Integer.of_Z 262144) : i32.t)).
    
    Definition MMAP_PAGE_ZERO : M.Val ltac:(libc.unix.c_int) :=
      M.run (M.alloc ((Integer.of_Z 1048576) : i32.t)).
    
    Definition ADDR_COMPAT_LAYOUT : M.Val ltac:(libc.unix.c_int) :=
      M.run (M.alloc ((Integer.of_Z 2097152) : i32.t)).
    
    Definition READ_IMPLIES_EXEC : M.Val ltac:(libc.unix.c_int) :=
      M.run (M.alloc ((Integer.of_Z 4194304) : i32.t)).
    
    Definition ADDR_LIMIT_32BIT : M.Val ltac:(libc.unix.c_int) :=
      M.run (M.alloc ((Integer.of_Z 8388608) : i32.t)).
    
    Definition SHORT_INODE : M.Val ltac:(libc.unix.c_int) :=
      M.run (M.alloc ((Integer.of_Z 16777216) : i32.t)).
    
    Definition WHOLE_SECONDS : M.Val ltac:(libc.unix.c_int) :=
      M.run (M.alloc ((Integer.of_Z 33554432) : i32.t)).
    
    Definition STICKY_TIMEOUTS : M.Val ltac:(libc.unix.c_int) :=
      M.run (M.alloc ((Integer.of_Z 67108864) : i32.t)).
    
    Definition ADDR_LIMIT_3GB : M.Val ltac:(libc.unix.c_int) :=
      M.run (M.alloc ((Integer.of_Z 134217728) : i32.t)).
    
    Definition PTRACE_O_TRACESYSGOOD : M.Val ltac:(libc.unix.c_int) :=
      M.run (M.alloc ((Integer.of_Z 1) : i32.t)).
    
    Definition PTRACE_O_TRACEFORK : M.Val ltac:(libc.unix.c_int) :=
      M.run (M.alloc ((Integer.of_Z 2) : i32.t)).
    
    Definition PTRACE_O_TRACEVFORK : M.Val ltac:(libc.unix.c_int) :=
      M.run (M.alloc ((Integer.of_Z 4) : i32.t)).
    
    Definition PTRACE_O_TRACECLONE : M.Val ltac:(libc.unix.c_int) :=
      M.run (M.alloc ((Integer.of_Z 8) : i32.t)).
    
    Definition PTRACE_O_TRACEEXEC : M.Val ltac:(libc.unix.c_int) :=
      M.run (M.alloc ((Integer.of_Z 16) : i32.t)).
    
    Definition PTRACE_O_TRACEVFORKDONE : M.Val ltac:(libc.unix.c_int) :=
      M.run (M.alloc ((Integer.of_Z 32) : i32.t)).
    
    Definition PTRACE_O_TRACEEXIT : M.Val ltac:(libc.unix.c_int) :=
      M.run (M.alloc ((Integer.of_Z 64) : i32.t)).
    
    Definition PTRACE_O_TRACESECCOMP : M.Val ltac:(libc.unix.c_int) :=
      M.run (M.alloc ((Integer.of_Z 128) : i32.t)).
    
    Definition PTRACE_O_SUSPEND_SECCOMP : M.Val ltac:(libc.unix.c_int) :=
      M.run (M.alloc ((Integer.of_Z 2097152) : i32.t)).
    
    Definition PTRACE_O_EXITKILL : M.Val ltac:(libc.unix.c_int) :=
      M.run (M.alloc ((Integer.of_Z 1048576) : i32.t)).
    
    Definition PTRACE_O_MASK : M.Val ltac:(libc.unix.c_int) :=
      M.run (M.alloc ((Integer.of_Z 3145983) : i32.t)).
    
    Definition PTRACE_EVENT_FORK : M.Val ltac:(libc.unix.c_int) :=
      M.run (M.alloc ((Integer.of_Z 1) : i32.t)).
    
    Definition PTRACE_EVENT_VFORK : M.Val ltac:(libc.unix.c_int) :=
      M.run (M.alloc ((Integer.of_Z 2) : i32.t)).
    
    Definition PTRACE_EVENT_CLONE : M.Val ltac:(libc.unix.c_int) :=
      M.run (M.alloc ((Integer.of_Z 3) : i32.t)).
    
    Definition PTRACE_EVENT_EXEC : M.Val ltac:(libc.unix.c_int) :=
      M.run (M.alloc ((Integer.of_Z 4) : i32.t)).
    
    Definition PTRACE_EVENT_VFORK_DONE : M.Val ltac:(libc.unix.c_int) :=
      M.run (M.alloc ((Integer.of_Z 5) : i32.t)).
    
    Definition PTRACE_EVENT_EXIT : M.Val ltac:(libc.unix.c_int) :=
      M.run (M.alloc ((Integer.of_Z 6) : i32.t)).
    
    Definition PTRACE_EVENT_SECCOMP : M.Val ltac:(libc.unix.c_int) :=
      M.run (M.alloc ((Integer.of_Z 7) : i32.t)).
    
    Definition __WNOTHREAD : M.Val ltac:(libc.unix.c_int) :=
      M.run (M.alloc ((Integer.of_Z 536870912) : i32.t)).
    
    Definition __WALL : M.Val ltac:(libc.unix.c_int) :=
      M.run (M.alloc ((Integer.of_Z 1073741824) : i32.t)).
    
    Definition __WCLONE : M.Val ltac:(libc.unix.c_int) :=
      M.run (M.alloc ((Integer.of_Z 2147483648) : i32.t)).
    
    Definition SPLICE_F_MOVE : M.Val ltac:(libc.unix.c_uint) :=
      M.run (M.alloc ((Integer.of_Z 1) : u32.t)).
    
    Definition SPLICE_F_NONBLOCK : M.Val ltac:(libc.unix.c_uint) :=
      M.run (M.alloc ((Integer.of_Z 2) : u32.t)).
    
    Definition SPLICE_F_MORE : M.Val ltac:(libc.unix.c_uint) :=
      M.run (M.alloc ((Integer.of_Z 4) : u32.t)).
    
    Definition SPLICE_F_GIFT : M.Val ltac:(libc.unix.c_uint) :=
      M.run (M.alloc ((Integer.of_Z 8) : u32.t)).
    
    Definition RTLD_LOCAL : M.Val ltac:(libc.unix.c_int) :=
      M.run (M.alloc ((Integer.of_Z 0) : i32.t)).
    
    Definition RTLD_LAZY : M.Val ltac:(libc.unix.c_int) :=
      M.run (M.alloc ((Integer.of_Z 1) : i32.t)).
    
    Definition POSIX_FADV_NORMAL : M.Val ltac:(libc.unix.c_int) :=
      M.run (M.alloc ((Integer.of_Z 0) : i32.t)).
    
    Definition POSIX_FADV_RANDOM : M.Val ltac:(libc.unix.c_int) :=
      M.run (M.alloc ((Integer.of_Z 1) : i32.t)).
    
    Definition POSIX_FADV_SEQUENTIAL : M.Val ltac:(libc.unix.c_int) :=
      M.run (M.alloc ((Integer.of_Z 2) : i32.t)).
    
    Definition POSIX_FADV_WILLNEED : M.Val ltac:(libc.unix.c_int) :=
      M.run (M.alloc ((Integer.of_Z 3) : i32.t)).
    
    Definition AT_FDCWD : M.Val ltac:(libc.unix.c_int) :=
      M.run (M.alloc ((Integer.of_Z (-100)) : i32.t)).
    
    Definition AT_SYMLINK_NOFOLLOW : M.Val ltac:(libc.unix.c_int) :=
      M.run (M.alloc ((Integer.of_Z 256) : i32.t)).
    
    Definition AT_REMOVEDIR : M.Val ltac:(libc.unix.c_int) :=
      M.run (M.alloc ((Integer.of_Z 512) : i32.t)).
    
    Definition AT_SYMLINK_FOLLOW : M.Val ltac:(libc.unix.c_int) :=
      M.run (M.alloc ((Integer.of_Z 1024) : i32.t)).
    
    Definition AT_NO_AUTOMOUNT : M.Val ltac:(libc.unix.c_int) :=
      M.run (M.alloc ((Integer.of_Z 2048) : i32.t)).
    
    Definition AT_EMPTY_PATH : M.Val ltac:(libc.unix.c_int) :=
      M.run (M.alloc ((Integer.of_Z 4096) : i32.t)).
    
    Definition AT_RECURSIVE : M.Val ltac:(libc.unix.c_int) :=
      M.run (M.alloc ((Integer.of_Z 32768) : i32.t)).
    
    Definition LOG_CRON : M.Val ltac:(libc.unix.c_int) :=
      M.run
        (let* α0 : i32.t :=
          BinOp.Panic.shl
            ((Integer.of_Z 9) : i32.t)
            ((Integer.of_Z 3) : i32.t) in
        M.alloc α0).
    
    Definition LOG_AUTHPRIV : M.Val ltac:(libc.unix.c_int) :=
      M.run
        (let* α0 : i32.t :=
          BinOp.Panic.shl
            ((Integer.of_Z 10) : i32.t)
            ((Integer.of_Z 3) : i32.t) in
        M.alloc α0).
    
    Definition LOG_FTP : M.Val ltac:(libc.unix.c_int) :=
      M.run
        (let* α0 : i32.t :=
          BinOp.Panic.shl
            ((Integer.of_Z 11) : i32.t)
            ((Integer.of_Z 3) : i32.t) in
        M.alloc α0).
    
    Definition LOG_PERROR : M.Val ltac:(libc.unix.c_int) :=
      M.run (M.alloc ((Integer.of_Z 32) : i32.t)).
    
    Definition PIPE_BUF : M.Val usize.t :=
      M.run (M.alloc ((Integer.of_Z 4096) : usize.t)).
    
    Definition SI_LOAD_SHIFT : M.Val ltac:(libc.unix.c_uint) :=
      M.run (M.alloc ((Integer.of_Z 16) : u32.t)).
    
    Definition BUS_ADRALN : M.Val ltac:(libc.unix.c_int) :=
      M.run (M.alloc ((Integer.of_Z 1) : i32.t)).
    
    Definition BUS_ADRERR : M.Val ltac:(libc.unix.c_int) :=
      M.run (M.alloc ((Integer.of_Z 2) : i32.t)).
    
    Definition BUS_OBJERR : M.Val ltac:(libc.unix.c_int) :=
      M.run (M.alloc ((Integer.of_Z 3) : i32.t)).
    
    Definition BUS_MCEERR_AR : M.Val ltac:(libc.unix.c_int) :=
      M.run (M.alloc ((Integer.of_Z 4) : i32.t)).
    
    Definition BUS_MCEERR_AO : M.Val ltac:(libc.unix.c_int) :=
      M.run (M.alloc ((Integer.of_Z 5) : i32.t)).
    
    Definition CLD_EXITED : M.Val ltac:(libc.unix.c_int) :=
      M.run (M.alloc ((Integer.of_Z 1) : i32.t)).
    
    Definition CLD_KILLED : M.Val ltac:(libc.unix.c_int) :=
      M.run (M.alloc ((Integer.of_Z 2) : i32.t)).
    
    Definition CLD_DUMPED : M.Val ltac:(libc.unix.c_int) :=
      M.run (M.alloc ((Integer.of_Z 3) : i32.t)).
    
    Definition CLD_TRAPPED : M.Val ltac:(libc.unix.c_int) :=
      M.run (M.alloc ((Integer.of_Z 4) : i32.t)).
    
    Definition CLD_STOPPED : M.Val ltac:(libc.unix.c_int) :=
      M.run (M.alloc ((Integer.of_Z 5) : i32.t)).
    
    Definition CLD_CONTINUED : M.Val ltac:(libc.unix.c_int) :=
      M.run (M.alloc ((Integer.of_Z 6) : i32.t)).
    
    Definition SIGEV_SIGNAL : M.Val ltac:(libc.unix.c_int) :=
      M.run (M.alloc ((Integer.of_Z 0) : i32.t)).
    
    Definition SIGEV_NONE : M.Val ltac:(libc.unix.c_int) :=
      M.run (M.alloc ((Integer.of_Z 1) : i32.t)).
    
    Definition SIGEV_THREAD : M.Val ltac:(libc.unix.c_int) :=
      M.run (M.alloc ((Integer.of_Z 2) : i32.t)).
    
    Definition P_ALL : M.Val ltac:(libc.unix.linux_like.linux.idtype_t) :=
      M.run (M.alloc ((Integer.of_Z 0) : u32.t)).
    
    Definition P_PID : M.Val ltac:(libc.unix.linux_like.linux.idtype_t) :=
      M.run (M.alloc ((Integer.of_Z 1) : u32.t)).
    
    Definition P_PGID : M.Val ltac:(libc.unix.linux_like.linux.idtype_t) :=
      M.run (M.alloc ((Integer.of_Z 2) : u32.t)).
    
    Definition P_PIDFD : M.Val ltac:(libc.unix.linux_like.linux.idtype_t) :=
      M.run (M.alloc ((Integer.of_Z 3) : u32.t)).
    
    Definition UTIME_OMIT
        :
          M.Val
            ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_long) :=
      M.run (M.alloc ((Integer.of_Z 1073741822) : i64.t)).
    
    Definition UTIME_NOW
        :
          M.Val
            ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_long) :=
      M.run (M.alloc ((Integer.of_Z 1073741823) : i64.t)).
    
    Definition POLLIN : M.Val ltac:(libc.unix.c_short) :=
      M.run (M.alloc ((Integer.of_Z 1) : i16.t)).
    
    Definition POLLPRI : M.Val ltac:(libc.unix.c_short) :=
      M.run (M.alloc ((Integer.of_Z 2) : i16.t)).
    
    Definition POLLOUT : M.Val ltac:(libc.unix.c_short) :=
      M.run (M.alloc ((Integer.of_Z 4) : i16.t)).
    
    Definition POLLERR : M.Val ltac:(libc.unix.c_short) :=
      M.run (M.alloc ((Integer.of_Z 8) : i16.t)).
    
    Definition POLLHUP : M.Val ltac:(libc.unix.c_short) :=
      M.run (M.alloc ((Integer.of_Z 16) : i16.t)).
    
    Definition POLLNVAL : M.Val ltac:(libc.unix.c_short) :=
      M.run (M.alloc ((Integer.of_Z 32) : i16.t)).
    
    Definition POLLRDNORM : M.Val ltac:(libc.unix.c_short) :=
      M.run (M.alloc ((Integer.of_Z 64) : i16.t)).
    
    Definition POLLRDBAND : M.Val ltac:(libc.unix.c_short) :=
      M.run (M.alloc ((Integer.of_Z 128) : i16.t)).
    
    Definition POLLRDHUP : M.Val ltac:(libc.unix.c_short) :=
      M.run (M.alloc ((Integer.of_Z 8192) : i16.t)).
    
    Definition IPTOS_LOWDELAY : M.Val u8.t :=
      M.run (M.alloc ((Integer.of_Z 16) : u8.t)).
    
    Definition IPTOS_THROUGHPUT : M.Val u8.t :=
      M.run (M.alloc ((Integer.of_Z 8) : u8.t)).
    
    Definition IPTOS_RELIABILITY : M.Val u8.t :=
      M.run (M.alloc ((Integer.of_Z 4) : u8.t)).
    
    Definition IPTOS_MINCOST : M.Val u8.t :=
      M.run (M.alloc ((Integer.of_Z 2) : u8.t)).
    
    Definition IPTOS_PREC_NETCONTROL : M.Val u8.t :=
      M.run (M.alloc ((Integer.of_Z 224) : u8.t)).
    
    Definition IPTOS_PREC_INTERNETCONTROL : M.Val u8.t :=
      M.run (M.alloc ((Integer.of_Z 192) : u8.t)).
    
    Definition IPTOS_PREC_CRITIC_ECP : M.Val u8.t :=
      M.run (M.alloc ((Integer.of_Z 160) : u8.t)).
    
    Definition IPTOS_PREC_FLASHOVERRIDE : M.Val u8.t :=
      M.run (M.alloc ((Integer.of_Z 128) : u8.t)).
    
    Definition IPTOS_PREC_FLASH : M.Val u8.t :=
      M.run (M.alloc ((Integer.of_Z 96) : u8.t)).
    
    Definition IPTOS_PREC_IMMEDIATE : M.Val u8.t :=
      M.run (M.alloc ((Integer.of_Z 64) : u8.t)).
    
    Definition IPTOS_PREC_PRIORITY : M.Val u8.t :=
      M.run (M.alloc ((Integer.of_Z 32) : u8.t)).
    
    Definition IPTOS_PREC_ROUTINE : M.Val u8.t :=
      M.run (M.alloc ((Integer.of_Z 0) : u8.t)).
    
    Definition IPTOS_ECN_MASK : M.Val u8.t :=
      M.run (M.alloc ((Integer.of_Z 3) : u8.t)).
    
    Definition IPTOS_ECN_ECT1 : M.Val u8.t :=
      M.run (M.alloc ((Integer.of_Z 1) : u8.t)).
    
    Definition IPTOS_ECN_ECT0 : M.Val u8.t :=
      M.run (M.alloc ((Integer.of_Z 2) : u8.t)).
    
    Definition IPTOS_ECN_CE : M.Val u8.t :=
      M.run (M.alloc ((Integer.of_Z 3) : u8.t)).
    
    Definition IPOPT_COPY : M.Val u8.t :=
      M.run (M.alloc ((Integer.of_Z 128) : u8.t)).
    
    Definition IPOPT_CLASS_MASK : M.Val u8.t :=
      M.run (M.alloc ((Integer.of_Z 96) : u8.t)).
    
    Definition IPOPT_NUMBER_MASK : M.Val u8.t :=
      M.run (M.alloc ((Integer.of_Z 31) : u8.t)).
    
    Definition IPOPT_CONTROL : M.Val u8.t :=
      M.run (M.alloc ((Integer.of_Z 0) : u8.t)).
    
    Definition IPOPT_RESERVED1 : M.Val u8.t :=
      M.run (M.alloc ((Integer.of_Z 32) : u8.t)).
    
    Definition IPOPT_MEASUREMENT : M.Val u8.t :=
      M.run (M.alloc ((Integer.of_Z 64) : u8.t)).
    
    Definition IPOPT_RESERVED2 : M.Val u8.t :=
      M.run (M.alloc ((Integer.of_Z 96) : u8.t)).
    
    Definition IPOPT_END : M.Val u8.t :=
      M.run
        (let* α0 : u8.t := M.read libc.unix.linux_like.IPOPT_CONTROL in
        M.alloc (BinOp.Pure.bit_or ((Integer.of_Z 0) : u8.t) α0)).
    
    Definition IPOPT_NOOP : M.Val u8.t :=
      M.run
        (let* α0 : u8.t := M.read libc.unix.linux_like.IPOPT_CONTROL in
        M.alloc (BinOp.Pure.bit_or ((Integer.of_Z 1) : u8.t) α0)).
    
    Definition IPOPT_SEC : M.Val u8.t :=
      M.run
        (let* α0 : u8.t := M.read libc.unix.linux_like.IPOPT_CONTROL in
        let* α1 : u8.t := M.read libc.unix.linux_like.IPOPT_COPY in
        M.alloc
          (BinOp.Pure.bit_or
            (BinOp.Pure.bit_or ((Integer.of_Z 2) : u8.t) α0)
            α1)).
    
    Definition IPOPT_LSRR : M.Val u8.t :=
      M.run
        (let* α0 : u8.t := M.read libc.unix.linux_like.IPOPT_CONTROL in
        let* α1 : u8.t := M.read libc.unix.linux_like.IPOPT_COPY in
        M.alloc
          (BinOp.Pure.bit_or
            (BinOp.Pure.bit_or ((Integer.of_Z 3) : u8.t) α0)
            α1)).
    
    Definition IPOPT_TIMESTAMP : M.Val u8.t :=
      M.run
        (let* α0 : u8.t := M.read libc.unix.linux_like.IPOPT_MEASUREMENT in
        M.alloc (BinOp.Pure.bit_or ((Integer.of_Z 4) : u8.t) α0)).
    
    Definition IPOPT_RR : M.Val u8.t :=
      M.run
        (let* α0 : u8.t := M.read libc.unix.linux_like.IPOPT_CONTROL in
        M.alloc (BinOp.Pure.bit_or ((Integer.of_Z 7) : u8.t) α0)).
    
    Definition IPOPT_SID : M.Val u8.t :=
      M.run
        (let* α0 : u8.t := M.read libc.unix.linux_like.IPOPT_CONTROL in
        let* α1 : u8.t := M.read libc.unix.linux_like.IPOPT_COPY in
        M.alloc
          (BinOp.Pure.bit_or
            (BinOp.Pure.bit_or ((Integer.of_Z 8) : u8.t) α0)
            α1)).
    
    Definition IPOPT_SSRR : M.Val u8.t :=
      M.run
        (let* α0 : u8.t := M.read libc.unix.linux_like.IPOPT_CONTROL in
        let* α1 : u8.t := M.read libc.unix.linux_like.IPOPT_COPY in
        M.alloc
          (BinOp.Pure.bit_or
            (BinOp.Pure.bit_or ((Integer.of_Z 9) : u8.t) α0)
            α1)).
    
    Definition IPOPT_RA : M.Val u8.t :=
      M.run
        (let* α0 : u8.t := M.read libc.unix.linux_like.IPOPT_CONTROL in
        let* α1 : u8.t := M.read libc.unix.linux_like.IPOPT_COPY in
        M.alloc
          (BinOp.Pure.bit_or
            (BinOp.Pure.bit_or ((Integer.of_Z 20) : u8.t) α0)
            α1)).
    
    Definition IPVERSION : M.Val u8.t :=
      M.run (M.alloc ((Integer.of_Z 4) : u8.t)).
    
    Definition MAXTTL : M.Val u8.t :=
      M.run (M.alloc ((Integer.of_Z 255) : u8.t)).
    
    Definition IPDEFTTL : M.Val u8.t :=
      M.run (M.alloc ((Integer.of_Z 64) : u8.t)).
    
    Definition IPOPT_OPTVAL : M.Val u8.t :=
      M.run (M.alloc ((Integer.of_Z 0) : u8.t)).
    
    Definition IPOPT_OLEN : M.Val u8.t :=
      M.run (M.alloc ((Integer.of_Z 1) : u8.t)).
    
    Definition IPOPT_OFFSET : M.Val u8.t :=
      M.run (M.alloc ((Integer.of_Z 2) : u8.t)).
    
    Definition IPOPT_MINOFF : M.Val u8.t :=
      M.run (M.alloc ((Integer.of_Z 4) : u8.t)).
    
    Definition MAX_IPOPTLEN : M.Val u8.t :=
      M.run (M.alloc ((Integer.of_Z 40) : u8.t)).
    
    Definition IPOPT_NOP : M.Val u8.t :=
      M.run (M.pure libc.unix.linux_like.IPOPT_NOOP).
    
    Definition IPOPT_EOL : M.Val u8.t :=
      M.run (M.pure libc.unix.linux_like.IPOPT_END).
    
    Definition IPOPT_TS : M.Val u8.t :=
      M.run (M.pure libc.unix.linux_like.IPOPT_TIMESTAMP).
    
    Definition IPOPT_TS_TSONLY : M.Val u8.t :=
      M.run (M.alloc ((Integer.of_Z 0) : u8.t)).
    
    Definition IPOPT_TS_TSANDADDR : M.Val u8.t :=
      M.run (M.alloc ((Integer.of_Z 1) : u8.t)).
    
    Definition IPOPT_TS_PRESPEC : M.Val u8.t :=
      M.run (M.alloc ((Integer.of_Z 3) : u8.t)).
    
    Definition ARPOP_RREQUEST : M.Val u16.t :=
      M.run (M.alloc ((Integer.of_Z 3) : u16.t)).
    
    Definition ARPOP_RREPLY : M.Val u16.t :=
      M.run (M.alloc ((Integer.of_Z 4) : u16.t)).
    
    Definition ARPOP_InREQUEST : M.Val u16.t :=
      M.run (M.alloc ((Integer.of_Z 8) : u16.t)).
    
    Definition ARPOP_InREPLY : M.Val u16.t :=
      M.run (M.alloc ((Integer.of_Z 9) : u16.t)).
    
    Definition ARPOP_NAK : M.Val u16.t :=
      M.run (M.alloc ((Integer.of_Z 10) : u16.t)).
    
    Definition ATF_NETMASK : M.Val ltac:(libc.unix.c_int) :=
      M.run (M.alloc ((Integer.of_Z 32) : i32.t)).
    
    Definition ATF_DONTPUB : M.Val ltac:(libc.unix.c_int) :=
      M.run (M.alloc ((Integer.of_Z 64) : i32.t)).
    
    Definition ARPHRD_NETROM : M.Val u16.t :=
      M.run (M.alloc ((Integer.of_Z 0) : u16.t)).
    
    Definition ARPHRD_ETHER : M.Val u16.t :=
      M.run (M.alloc ((Integer.of_Z 1) : u16.t)).
    
    Definition ARPHRD_EETHER : M.Val u16.t :=
      M.run (M.alloc ((Integer.of_Z 2) : u16.t)).
    
    Definition ARPHRD_AX25 : M.Val u16.t :=
      M.run (M.alloc ((Integer.of_Z 3) : u16.t)).
    
    Definition ARPHRD_PRONET : M.Val u16.t :=
      M.run (M.alloc ((Integer.of_Z 4) : u16.t)).
    
    Definition ARPHRD_CHAOS : M.Val u16.t :=
      M.run (M.alloc ((Integer.of_Z 5) : u16.t)).
    
    Definition ARPHRD_IEEE802 : M.Val u16.t :=
      M.run (M.alloc ((Integer.of_Z 6) : u16.t)).
    
    Definition ARPHRD_ARCNET : M.Val u16.t :=
      M.run (M.alloc ((Integer.of_Z 7) : u16.t)).
    
    Definition ARPHRD_APPLETLK : M.Val u16.t :=
      M.run (M.alloc ((Integer.of_Z 8) : u16.t)).
    
    Definition ARPHRD_DLCI : M.Val u16.t :=
      M.run (M.alloc ((Integer.of_Z 15) : u16.t)).
    
    Definition ARPHRD_ATM : M.Val u16.t :=
      M.run (M.alloc ((Integer.of_Z 19) : u16.t)).
    
    Definition ARPHRD_METRICOM : M.Val u16.t :=
      M.run (M.alloc ((Integer.of_Z 23) : u16.t)).
    
    Definition ARPHRD_IEEE1394 : M.Val u16.t :=
      M.run (M.alloc ((Integer.of_Z 24) : u16.t)).
    
    Definition ARPHRD_EUI64 : M.Val u16.t :=
      M.run (M.alloc ((Integer.of_Z 27) : u16.t)).
    
    Definition ARPHRD_INFINIBAND : M.Val u16.t :=
      M.run (M.alloc ((Integer.of_Z 32) : u16.t)).
    
    Definition ARPHRD_SLIP : M.Val u16.t :=
      M.run (M.alloc ((Integer.of_Z 256) : u16.t)).
    
    Definition ARPHRD_CSLIP : M.Val u16.t :=
      M.run (M.alloc ((Integer.of_Z 257) : u16.t)).
    
    Definition ARPHRD_SLIP6 : M.Val u16.t :=
      M.run (M.alloc ((Integer.of_Z 258) : u16.t)).
    
    Definition ARPHRD_CSLIP6 : M.Val u16.t :=
      M.run (M.alloc ((Integer.of_Z 259) : u16.t)).
    
    Definition ARPHRD_RSRVD : M.Val u16.t :=
      M.run (M.alloc ((Integer.of_Z 260) : u16.t)).
    
    Definition ARPHRD_ADAPT : M.Val u16.t :=
      M.run (M.alloc ((Integer.of_Z 264) : u16.t)).
    
    Definition ARPHRD_ROSE : M.Val u16.t :=
      M.run (M.alloc ((Integer.of_Z 270) : u16.t)).
    
    Definition ARPHRD_X25 : M.Val u16.t :=
      M.run (M.alloc ((Integer.of_Z 271) : u16.t)).
    
    Definition ARPHRD_HWX25 : M.Val u16.t :=
      M.run (M.alloc ((Integer.of_Z 272) : u16.t)).
    
    Definition ARPHRD_CAN : M.Val u16.t :=
      M.run (M.alloc ((Integer.of_Z 280) : u16.t)).
    
    Definition ARPHRD_PPP : M.Val u16.t :=
      M.run (M.alloc ((Integer.of_Z 512) : u16.t)).
    
    Definition ARPHRD_CISCO : M.Val u16.t :=
      M.run (M.alloc ((Integer.of_Z 513) : u16.t)).
    
    Definition ARPHRD_HDLC : M.Val u16.t :=
      M.run (M.pure libc.unix.linux_like.ARPHRD_CISCO).
    
    Definition ARPHRD_LAPB : M.Val u16.t :=
      M.run (M.alloc ((Integer.of_Z 516) : u16.t)).
    
    Definition ARPHRD_DDCMP : M.Val u16.t :=
      M.run (M.alloc ((Integer.of_Z 517) : u16.t)).
    
    Definition ARPHRD_RAWHDLC : M.Val u16.t :=
      M.run (M.alloc ((Integer.of_Z 518) : u16.t)).
    
    Definition ARPHRD_TUNNEL : M.Val u16.t :=
      M.run (M.alloc ((Integer.of_Z 768) : u16.t)).
    
    Definition ARPHRD_TUNNEL6 : M.Val u16.t :=
      M.run (M.alloc ((Integer.of_Z 769) : u16.t)).
    
    Definition ARPHRD_FRAD : M.Val u16.t :=
      M.run (M.alloc ((Integer.of_Z 770) : u16.t)).
    
    Definition ARPHRD_SKIP : M.Val u16.t :=
      M.run (M.alloc ((Integer.of_Z 771) : u16.t)).
    
    Definition ARPHRD_LOOPBACK : M.Val u16.t :=
      M.run (M.alloc ((Integer.of_Z 772) : u16.t)).
    
    Definition ARPHRD_LOCALTLK : M.Val u16.t :=
      M.run (M.alloc ((Integer.of_Z 773) : u16.t)).
    
    Definition ARPHRD_FDDI : M.Val u16.t :=
      M.run (M.alloc ((Integer.of_Z 774) : u16.t)).
    
    Definition ARPHRD_BIF : M.Val u16.t :=
      M.run (M.alloc ((Integer.of_Z 775) : u16.t)).
    
    Definition ARPHRD_SIT : M.Val u16.t :=
      M.run (M.alloc ((Integer.of_Z 776) : u16.t)).
    
    Definition ARPHRD_IPDDP : M.Val u16.t :=
      M.run (M.alloc ((Integer.of_Z 777) : u16.t)).
    
    Definition ARPHRD_IPGRE : M.Val u16.t :=
      M.run (M.alloc ((Integer.of_Z 778) : u16.t)).
    
    Definition ARPHRD_PIMREG : M.Val u16.t :=
      M.run (M.alloc ((Integer.of_Z 779) : u16.t)).
    
    Definition ARPHRD_HIPPI : M.Val u16.t :=
      M.run (M.alloc ((Integer.of_Z 780) : u16.t)).
    
    Definition ARPHRD_ASH : M.Val u16.t :=
      M.run (M.alloc ((Integer.of_Z 781) : u16.t)).
    
    Definition ARPHRD_ECONET : M.Val u16.t :=
      M.run (M.alloc ((Integer.of_Z 782) : u16.t)).
    
    Definition ARPHRD_IRDA : M.Val u16.t :=
      M.run (M.alloc ((Integer.of_Z 783) : u16.t)).
    
    Definition ARPHRD_FCPP : M.Val u16.t :=
      M.run (M.alloc ((Integer.of_Z 784) : u16.t)).
    
    Definition ARPHRD_FCAL : M.Val u16.t :=
      M.run (M.alloc ((Integer.of_Z 785) : u16.t)).
    
    Definition ARPHRD_FCPL : M.Val u16.t :=
      M.run (M.alloc ((Integer.of_Z 786) : u16.t)).
    
    Definition ARPHRD_FCFABRIC : M.Val u16.t :=
      M.run (M.alloc ((Integer.of_Z 787) : u16.t)).
    
    Definition ARPHRD_IEEE802_TR : M.Val u16.t :=
      M.run (M.alloc ((Integer.of_Z 800) : u16.t)).
    
    Definition ARPHRD_IEEE80211 : M.Val u16.t :=
      M.run (M.alloc ((Integer.of_Z 801) : u16.t)).
    
    Definition ARPHRD_IEEE80211_PRISM : M.Val u16.t :=
      M.run (M.alloc ((Integer.of_Z 802) : u16.t)).
    
    Definition ARPHRD_IEEE80211_RADIOTAP : M.Val u16.t :=
      M.run (M.alloc ((Integer.of_Z 803) : u16.t)).
    
    Definition ARPHRD_IEEE802154 : M.Val u16.t :=
      M.run (M.alloc ((Integer.of_Z 804) : u16.t)).
    
    Definition ARPHRD_VOID : M.Val u16.t :=
      M.run (M.alloc ((Integer.of_Z 65535) : u16.t)).
    
    Definition ARPHRD_NONE : M.Val u16.t :=
      M.run (M.alloc ((Integer.of_Z 65534) : u16.t)).
    
    Definition ADFS_SUPER_MAGIC
        :
          M.Val
            ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_long) :=
      M.run (M.alloc ((Integer.of_Z 44533) : i64.t)).
    
    Definition AFFS_SUPER_MAGIC
        :
          M.Val
            ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_long) :=
      M.run (M.alloc ((Integer.of_Z 44543) : i64.t)).
    
    Definition AFS_SUPER_MAGIC
        :
          M.Val
            ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_long) :=
      M.run (M.alloc ((Integer.of_Z 1397113167) : i64.t)).
    
    Definition AUTOFS_SUPER_MAGIC
        :
          M.Val
            ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_long) :=
      M.run (M.alloc ((Integer.of_Z 391) : i64.t)).
    
    Definition BPF_FS_MAGIC
        :
          M.Val
            ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_long) :=
      M.run (M.alloc ((Integer.of_Z 3405662737) : i64.t)).
    
    Definition BTRFS_SUPER_MAGIC
        :
          M.Val
            ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_long) :=
      M.run (M.alloc ((Integer.of_Z 2435016766) : i64.t)).
    
    Definition CGROUP2_SUPER_MAGIC
        :
          M.Val
            ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_long) :=
      M.run (M.alloc ((Integer.of_Z 1667723888) : i64.t)).
    
    Definition CGROUP_SUPER_MAGIC
        :
          M.Val
            ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_long) :=
      M.run (M.alloc ((Integer.of_Z 2613483) : i64.t)).
    
    Definition CODA_SUPER_MAGIC
        :
          M.Val
            ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_long) :=
      M.run (M.alloc ((Integer.of_Z 1937076805) : i64.t)).
    
    Definition CRAMFS_MAGIC
        :
          M.Val
            ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_long) :=
      M.run (M.alloc ((Integer.of_Z 684539205) : i64.t)).
    
    Definition DEBUGFS_MAGIC
        :
          M.Val
            ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_long) :=
      M.run (M.alloc ((Integer.of_Z 1684170528) : i64.t)).
    
    Definition DEVPTS_SUPER_MAGIC
        :
          M.Val
            ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_long) :=
      M.run (M.alloc ((Integer.of_Z 7377) : i64.t)).
    
    Definition ECRYPTFS_SUPER_MAGIC
        :
          M.Val
            ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_long) :=
      M.run (M.alloc ((Integer.of_Z 61791) : i64.t)).
    
    Definition EFS_SUPER_MAGIC
        :
          M.Val
            ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_long) :=
      M.run (M.alloc ((Integer.of_Z 4278867) : i64.t)).
    
    Definition EXT2_SUPER_MAGIC
        :
          M.Val
            ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_long) :=
      M.run (M.alloc ((Integer.of_Z 61267) : i64.t)).
    
    Definition EXT3_SUPER_MAGIC
        :
          M.Val
            ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_long) :=
      M.run (M.alloc ((Integer.of_Z 61267) : i64.t)).
    
    Definition EXT4_SUPER_MAGIC
        :
          M.Val
            ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_long) :=
      M.run (M.alloc ((Integer.of_Z 61267) : i64.t)).
    
    Definition F2FS_SUPER_MAGIC
        :
          M.Val
            ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_long) :=
      M.run (M.alloc ((Integer.of_Z 4076150800) : i64.t)).
    
    Definition FUSE_SUPER_MAGIC
        :
          M.Val
            ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_long) :=
      M.run (M.alloc ((Integer.of_Z 1702057286) : i64.t)).
    
    Definition FUTEXFS_SUPER_MAGIC
        :
          M.Val
            ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_long) :=
      M.run (M.alloc ((Integer.of_Z 195894762) : i64.t)).
    
    Definition HOSTFS_SUPER_MAGIC
        :
          M.Val
            ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_long) :=
      M.run (M.alloc ((Integer.of_Z 12648430) : i64.t)).
    
    Definition HPFS_SUPER_MAGIC
        :
          M.Val
            ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_long) :=
      M.run (M.alloc ((Integer.of_Z 4187351113) : i64.t)).
    
    Definition HUGETLBFS_MAGIC
        :
          M.Val
            ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_long) :=
      M.run (M.alloc ((Integer.of_Z 2508478710) : i64.t)).
    
    Definition ISOFS_SUPER_MAGIC
        :
          M.Val
            ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_long) :=
      M.run (M.alloc ((Integer.of_Z 38496) : i64.t)).
    
    Definition JFFS2_SUPER_MAGIC
        :
          M.Val
            ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_long) :=
      M.run (M.alloc ((Integer.of_Z 29366) : i64.t)).
    
    Definition MINIX2_SUPER_MAGIC2
        :
          M.Val
            ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_long) :=
      M.run (M.alloc ((Integer.of_Z 9336) : i64.t)).
    
    Definition MINIX2_SUPER_MAGIC
        :
          M.Val
            ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_long) :=
      M.run (M.alloc ((Integer.of_Z 9320) : i64.t)).
    
    Definition MINIX3_SUPER_MAGIC
        :
          M.Val
            ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_long) :=
      M.run (M.alloc ((Integer.of_Z 19802) : i64.t)).
    
    Definition MINIX_SUPER_MAGIC2
        :
          M.Val
            ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_long) :=
      M.run (M.alloc ((Integer.of_Z 5007) : i64.t)).
    
    Definition MINIX_SUPER_MAGIC
        :
          M.Val
            ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_long) :=
      M.run (M.alloc ((Integer.of_Z 4991) : i64.t)).
    
    Definition MSDOS_SUPER_MAGIC
        :
          M.Val
            ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_long) :=
      M.run (M.alloc ((Integer.of_Z 19780) : i64.t)).
    
    Definition NCP_SUPER_MAGIC
        :
          M.Val
            ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_long) :=
      M.run (M.alloc ((Integer.of_Z 22092) : i64.t)).
    
    Definition NFS_SUPER_MAGIC
        :
          M.Val
            ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_long) :=
      M.run (M.alloc ((Integer.of_Z 26985) : i64.t)).
    
    Definition NILFS_SUPER_MAGIC
        :
          M.Val
            ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_long) :=
      M.run (M.alloc ((Integer.of_Z 13364) : i64.t)).
    
    Definition OCFS2_SUPER_MAGIC
        :
          M.Val
            ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_long) :=
      M.run (M.alloc ((Integer.of_Z 1952539503) : i64.t)).
    
    Definition OPENPROM_SUPER_MAGIC
        :
          M.Val
            ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_long) :=
      M.run (M.alloc ((Integer.of_Z 40865) : i64.t)).
    
    Definition OVERLAYFS_SUPER_MAGIC
        :
          M.Val
            ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_long) :=
      M.run (M.alloc ((Integer.of_Z 2035054128) : i64.t)).
    
    Definition PROC_SUPER_MAGIC
        :
          M.Val
            ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_long) :=
      M.run (M.alloc ((Integer.of_Z 40864) : i64.t)).
    
    Definition QNX4_SUPER_MAGIC
        :
          M.Val
            ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_long) :=
      M.run (M.alloc ((Integer.of_Z 47) : i64.t)).
    
    Definition QNX6_SUPER_MAGIC
        :
          M.Val
            ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_long) :=
      M.run (M.alloc ((Integer.of_Z 1746473250) : i64.t)).
    
    Definition RDTGROUP_SUPER_MAGIC
        :
          M.Val
            ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_long) :=
      M.run (M.alloc ((Integer.of_Z 124082209) : i64.t)).
    
    Definition REISERFS_SUPER_MAGIC
        :
          M.Val
            ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_long) :=
      M.run (M.alloc ((Integer.of_Z 1382369651) : i64.t)).
    
    Definition SECURITYFS_MAGIC
        :
          M.Val
            ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_long) :=
      M.run (M.alloc ((Integer.of_Z 1935894131) : i64.t)).
    
    Definition SELINUX_MAGIC
        :
          M.Val
            ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_long) :=
      M.run (M.alloc ((Integer.of_Z 4185718668) : i64.t)).
    
    Definition SMACK_MAGIC
        :
          M.Val
            ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_long) :=
      M.run (M.alloc ((Integer.of_Z 1128357203) : i64.t)).
    
    Definition SMB_SUPER_MAGIC
        :
          M.Val
            ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_long) :=
      M.run (M.alloc ((Integer.of_Z 20859) : i64.t)).
    
    Definition SYSFS_MAGIC
        :
          M.Val
            ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_long) :=
      M.run (M.alloc ((Integer.of_Z 1650812274) : i64.t)).
    
    Definition TMPFS_MAGIC
        :
          M.Val
            ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_long) :=
      M.run (M.alloc ((Integer.of_Z 16914836) : i64.t)).
    
    Definition TRACEFS_MAGIC
        :
          M.Val
            ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_long) :=
      M.run (M.alloc ((Integer.of_Z 1953653091) : i64.t)).
    
    Definition UDF_SUPER_MAGIC
        :
          M.Val
            ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_long) :=
      M.run (M.alloc ((Integer.of_Z 352400198) : i64.t)).
    
    Definition USBDEVICE_SUPER_MAGIC
        :
          M.Val
            ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_long) :=
      M.run (M.alloc ((Integer.of_Z 40866) : i64.t)).
    
    Definition XENFS_SUPER_MAGIC
        :
          M.Val
            ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_long) :=
      M.run (M.alloc ((Integer.of_Z 2881100148) : i64.t)).
    
    Definition NSFS_MAGIC
        :
          M.Val
            ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_long) :=
      M.run (M.alloc ((Integer.of_Z 1853056627) : i64.t)).
    
    (*
                    fn $i($($arg: $argty),*
                    ) -> $ret {
                        $($body);*
                    }
    *)
    Definition CMSG_ALIGN (len : usize.t) : M usize.t :=
      let* len := M.alloc len in
      let* α0 : usize.t := M.read len in
      let* α1 : usize.t := M.call core.mem.size_of in
      let* α2 : usize.t := BinOp.Panic.add α0 α1 in
      let* α3 : usize.t := BinOp.Panic.sub α2 ((Integer.of_Z 1) : usize.t) in
      let* α4 : usize.t := M.call core.mem.size_of in
      let* α5 : usize.t := BinOp.Panic.sub α4 ((Integer.of_Z 1) : usize.t) in
      M.pure (BinOp.Pure.bit_and α3 (UnOp.not α5)).
    
    (*
                    pub unsafe extern fn $i($($arg: $argty),*
                    ) -> $ret {
                        $($body);*
                    }
    *)
    Definition CMSG_FIRSTHDR
        (mhdr : ref libc.unix.linux_like.linux.gnu.msghdr.t)
        : M (mut_ref libc.unix.linux_like.linux.gnu.cmsghdr.t) :=
      let* mhdr := M.alloc mhdr in
      let* α0 : ref libc.unix.linux_like.linux.gnu.msghdr.t := M.read mhdr in
      let* α1 : usize.t :=
        M.read
          (use
            (libc.unix.linux_like.linux.gnu.msghdr.Get_msg_controllen
              (deref α0))) in
      let* α2 : usize.t := M.call core.mem.size_of in
      let* α3 : M.Val bool.t := M.alloc (BinOp.Pure.ge α1 α2) in
      let* α4 : bool.t := M.read (use α3) in
      let* α5 : M.Val (mut_ref libc.unix.linux_like.linux.gnu.cmsghdr.t) :=
        if α4 then
          let* α0 : ref libc.unix.linux_like.linux.gnu.msghdr.t :=
            M.read mhdr in
          let* α1 : mut_ref core.ffi.c_void.t :=
            M.read
              (libc.unix.linux_like.linux.gnu.msghdr.Get_msg_control
                (deref α0)) in
          M.alloc (rust_cast α1)
        else
          M.alloc (rust_cast ((Integer.of_Z 0) : usize.t)) in
      M.read α5.
    
    (*
                    pub unsafe extern fn $i($($arg: $argty),*
                    ) -> $ret {
                        $($body);*
                    }
    *)
    Definition CMSG_DATA
        (cmsg : ref libc.unix.linux_like.linux.gnu.cmsghdr.t)
        : M (mut_ref ltac:(libc.unix.c_uchar)) :=
      let* cmsg := M.alloc cmsg in
      let* α0 : ref libc.unix.linux_like.linux.gnu.cmsghdr.t := M.read cmsg in
      let* α1 : ref libc.unix.linux_like.linux.gnu.cmsghdr.t :=
        M.call
          ((ref libc.unix.linux_like.linux.gnu.cmsghdr.t)::["offset"]
            α0
            ((Integer.of_Z 1) : isize.t)) in
      M.pure (rust_cast α1).
    
    (*
                    pub unsafe extern fn $i($($arg: $argty),*
                    ) -> $ret {
                        $($body);*
                    }
    *)
    Definition CMSG_SPACE
        (length : ltac:(libc.unix.c_uint))
        : M ltac:(libc.unix.c_uint) :=
      let* length := M.alloc length in
      let* α0 : u32.t := M.read length in
      let* α1 : usize.t :=
        M.call (libc.unix.linux_like.CMSG_ALIGN (rust_cast α0)) in
      let* α2 : usize.t := M.call core.mem.size_of in
      let* α3 : usize.t := M.call (libc.unix.linux_like.CMSG_ALIGN α2) in
      let* α4 : usize.t := BinOp.Panic.add α1 α3 in
      M.pure (rust_cast α4).
    
    (*
                    pub unsafe extern fn $i($($arg: $argty),*
                    ) -> $ret {
                        $($body);*
                    }
    *)
    Definition CMSG_LEN
        (length : ltac:(libc.unix.c_uint))
        : M ltac:(libc.unix.c_uint) :=
      let* length := M.alloc length in
      let* α0 : usize.t := M.call core.mem.size_of in
      let* α1 : usize.t := M.call (libc.unix.linux_like.CMSG_ALIGN α0) in
      let* α2 : u32.t := M.read length in
      BinOp.Panic.add (rust_cast α1) α2.
    
    (*
                    pub unsafe extern fn $i($($arg: $argty),*
                    ) -> $ret {
                        $($body);*
                    }
    *)
    Definition FD_CLR
        (fd : ltac:(libc.unix.c_int))
        (set : mut_ref libc.unix.linux_like.fd_set.t)
        : M unit :=
      let* fd := M.alloc fd in
      let* set := M.alloc set in
      let return_ := M.return_ (R := unit) in
      M.catch_return
        (let* fd : M.Val usize.t :=
          let* α0 : i32.t := M.read fd in
          M.alloc (rust_cast α0) in
        let* size : M.Val usize.t :=
          let* α0 : mut_ref libc.unix.linux_like.fd_set.t := M.read set in
          let* α1 : usize.t :=
            M.call
              (core.mem.size_of_val
                (borrow
                  (libc.unix.linux_like.fd_set.Get_fds_bits (deref α0))[M.alloc
                      ((Integer.of_Z 0) : usize.t)])) in
          let* α2 : usize.t :=
            BinOp.Panic.mul α1 ((Integer.of_Z 8) : usize.t) in
          M.alloc α2 in
        let* _ : M.Val unit :=
          let* β : M.Val u64.t :=
            let* α0 : mut_ref libc.unix.linux_like.fd_set.t := M.read set in
            M.pure
              (libc.unix.linux_like.fd_set.Get_fds_bits (deref α0))[M.alloc
                  (BinOp.Panic.div (M.read fd) (M.read size))] in
          let* α0 := M.read β in
          let* α1 : usize.t := M.read fd in
          let* α2 : usize.t := M.read size in
          let* α3 : usize.t := BinOp.Panic.rem α1 α2 in
          let* α4 : u64.t := BinOp.Panic.shl ((Integer.of_Z 1) : u64.t) α3 in
          assign β (BinOp.Pure.bit_and α0 (UnOp.not α4)) in
        let* α0 : M.Val never.t := return_ tt in
        let* α1 := M.read α0 in
        let* α2 : unit := never_to_any α1 in
        let* α0 : M.Val unit := M.alloc α2 in
        M.read α0).
    
    (*
                    pub unsafe extern fn $i($($arg: $argty),*
                    ) -> $ret {
                        $($body);*
                    }
    *)
    Definition FD_ISSET
        (fd : ltac:(libc.unix.c_int))
        (set : ref libc.unix.linux_like.fd_set.t)
        : M bool.t :=
      let* fd := M.alloc fd in
      let* set := M.alloc set in
      let return_ := M.return_ (R := bool.t) in
      M.catch_return
        (let* fd : M.Val usize.t :=
          let* α0 : i32.t := M.read fd in
          M.alloc (rust_cast α0) in
        let* size : M.Val usize.t :=
          let* α0 : ref libc.unix.linux_like.fd_set.t := M.read set in
          let* α1 : usize.t :=
            M.call
              (core.mem.size_of_val
                (borrow
                  (libc.unix.linux_like.fd_set.Get_fds_bits (deref α0))[M.alloc
                      ((Integer.of_Z 0) : usize.t)])) in
          let* α2 : usize.t :=
            BinOp.Panic.mul α1 ((Integer.of_Z 8) : usize.t) in
          M.alloc α2 in
        let* α0 : ref libc.unix.linux_like.fd_set.t := M.read set in
        let* α1 : u64.t :=
          M.read
            (libc.unix.linux_like.fd_set.Get_fds_bits (deref α0))[M.alloc
                (BinOp.Panic.div (M.read fd) (M.read size))] in
        let* α2 : usize.t := M.read fd in
        let* α3 : usize.t := M.read size in
        let* α4 : usize.t := BinOp.Panic.rem α2 α3 in
        let* α5 : u64.t := BinOp.Panic.shl ((Integer.of_Z 1) : u64.t) α4 in
        let* α6 : M.Val never.t :=
          return_
            (BinOp.Pure.ne
              (BinOp.Pure.bit_and α1 α5)
              ((Integer.of_Z 0) : u64.t)) in
        let* α7 := M.read α6 in
        let* α8 : bool.t := never_to_any α7 in
        let* α0 : M.Val bool.t := M.alloc α8 in
        M.read α0).
    
    (*
                    pub unsafe extern fn $i($($arg: $argty),*
                    ) -> $ret {
                        $($body);*
                    }
    *)
    Definition FD_SET
        (fd : ltac:(libc.unix.c_int))
        (set : mut_ref libc.unix.linux_like.fd_set.t)
        : M unit :=
      let* fd := M.alloc fd in
      let* set := M.alloc set in
      let return_ := M.return_ (R := unit) in
      M.catch_return
        (let* fd : M.Val usize.t :=
          let* α0 : i32.t := M.read fd in
          M.alloc (rust_cast α0) in
        let* size : M.Val usize.t :=
          let* α0 : mut_ref libc.unix.linux_like.fd_set.t := M.read set in
          let* α1 : usize.t :=
            M.call
              (core.mem.size_of_val
                (borrow
                  (libc.unix.linux_like.fd_set.Get_fds_bits (deref α0))[M.alloc
                      ((Integer.of_Z 0) : usize.t)])) in
          let* α2 : usize.t :=
            BinOp.Panic.mul α1 ((Integer.of_Z 8) : usize.t) in
          M.alloc α2 in
        let* _ : M.Val unit :=
          let* β : M.Val u64.t :=
            let* α0 : mut_ref libc.unix.linux_like.fd_set.t := M.read set in
            M.pure
              (libc.unix.linux_like.fd_set.Get_fds_bits (deref α0))[M.alloc
                  (BinOp.Panic.div (M.read fd) (M.read size))] in
          let* α0 := M.read β in
          let* α1 : usize.t := M.read fd in
          let* α2 : usize.t := M.read size in
          let* α3 : usize.t := BinOp.Panic.rem α1 α2 in
          let* α4 : u64.t := BinOp.Panic.shl ((Integer.of_Z 1) : u64.t) α3 in
          assign β (BinOp.Pure.bit_or α0 α4) in
        let* α0 : M.Val never.t := return_ tt in
        let* α1 := M.read α0 in
        let* α2 : unit := never_to_any α1 in
        let* α0 : M.Val unit := M.alloc α2 in
        M.read α0).
    
    (*
                    pub unsafe extern fn $i($($arg: $argty),*
                    ) -> $ret {
                        $($body);*
                    }
    *)
    Definition FD_ZERO (set : mut_ref libc.unix.linux_like.fd_set.t) : M unit :=
      let* set := M.alloc set in
      let* α0 : (core.slice.iter.IterMut.t u64.t) -> M _ :=
        ltac:(M.get_method (fun ℐ =>
          core.iter.traits.collect.IntoIterator.into_iter
            (Self := core.slice.iter.IterMut.t u64.t)
            (Trait := ℐ))) in
      let* α1 : mut_ref libc.unix.linux_like.fd_set.t := M.read set in
      let* α2 : core.slice.iter.IterMut.t u64.t :=
        M.call
          ((slice u64.t)::["iter_mut"]
            (pointer_coercion
              "Unsize"
              (borrow_mut
                (libc.unix.linux_like.fd_set.Get_fds_bits (deref α1))))) in
      let* α3 : core.slice.iter.IterMut.t u64.t := M.call (α0 α2) in
      let* α4 : M.Val (core.slice.iter.IterMut.t u64.t) := M.alloc α3 in
      let* α5 : M.Val unit :=
        match_operator
          α4
          [
            fun γ =>
              (let* iter := M.copy γ in
              M.loop
                (let* _ : M.Val unit :=
                  let* α0 :
                      (mut_ref (core.slice.iter.IterMut.t u64.t)) ->
                        M (core.option.Option.t _) :=
                    ltac:(M.get_method (fun ℐ =>
                      core.iter.traits.iterator.Iterator.next
                        (Self := core.slice.iter.IterMut.t u64.t)
                        (Trait := ℐ))) in
                  let* α1 : core.option.Option.t (mut_ref u64.t) :=
                    M.call (α0 (borrow_mut iter)) in
                  let* α2 : M.Val (core.option.Option.t (mut_ref u64.t)) :=
                    M.alloc α1 in
                  match_operator
                    α2
                    [
                      fun γ =>
                        (let* α0 := M.read γ in
                        match α0 with
                        | core.option.Option.None =>
                          let* α0 : M.Val never.t := M.break in
                          let* α1 := M.read α0 in
                          let* α2 : unit := never_to_any α1 in
                          M.alloc α2
                        | _ => M.break_match
                        end) :
                        M (M.Val unit);
                      fun γ =>
                        (let* α0 := M.read γ in
                        match α0 with
                        | core.option.Option.Some _ =>
                          let γ0_0 := core.option.Option.Get_Some_0 γ in
                          let* slot := M.copy γ0_0 in
                          let* _ : M.Val unit :=
                            let* α0 : mut_ref u64.t := M.read slot in
                            assign (deref α0) ((Integer.of_Z 0) : u64.t) in
                          M.alloc tt
                        | _ => M.break_match
                        end) :
                        M (M.Val unit)
                    ] in
                M.alloc tt)) :
              M (M.Val unit)
          ] in
      M.read (use α5).
    
    (*
                    pub extern fn $i($($arg: $argty),*
                    ) -> $ret {
                        $($body);*
                    }
    *)
    Definition SIGRTMAX : M ltac:(libc.unix.c_int) :=
      M.call libc.unix.linux_like.__libc_current_sigrtmax.
    
    (*
                    pub extern fn $i($($arg: $argty),*
                    ) -> $ret {
                        $($body);*
                    }
    *)
    Definition SIGRTMIN : M ltac:(libc.unix.c_int) :=
      M.call libc.unix.linux_like.__libc_current_sigrtmin.
    
    (*
                    pub extern fn $i($($arg: $argty),*
                    ) -> $ret {
                        $($body);*
                    }
    *)
    Definition WIFSTOPPED (status : ltac:(libc.unix.c_int)) : M bool.t :=
      let* status := M.alloc status in
      let* α0 : i32.t := M.read status in
      M.pure
        (BinOp.Pure.eq
          (BinOp.Pure.bit_and α0 ((Integer.of_Z 255) : i32.t))
          ((Integer.of_Z 127) : i32.t)).
    
    (*
                    pub extern fn $i($($arg: $argty),*
                    ) -> $ret {
                        $($body);*
                    }
    *)
    Definition WSTOPSIG
        (status : ltac:(libc.unix.c_int))
        : M ltac:(libc.unix.c_int) :=
      let* status := M.alloc status in
      let* α0 : i32.t := M.read status in
      let* α1 : i32.t := BinOp.Panic.shr α0 ((Integer.of_Z 8) : i32.t) in
      M.pure (BinOp.Pure.bit_and α1 ((Integer.of_Z 255) : i32.t)).
    
    (*
                    pub extern fn $i($($arg: $argty),*
                    ) -> $ret {
                        $($body);*
                    }
    *)
    Definition WIFCONTINUED (status : ltac:(libc.unix.c_int)) : M bool.t :=
      let* status := M.alloc status in
      let* α0 : i32.t := M.read status in
      M.pure (BinOp.Pure.eq α0 ((Integer.of_Z 65535) : i32.t)).
    
    (*
                    pub extern fn $i($($arg: $argty),*
                    ) -> $ret {
                        $($body);*
                    }
    *)
    Definition WIFSIGNALED (status : ltac:(libc.unix.c_int)) : M bool.t :=
      let* status := M.alloc status in
      let* α0 : i32.t := M.read status in
      let* α1 : i32.t :=
        BinOp.Panic.add
          (BinOp.Pure.bit_and α0 ((Integer.of_Z 127) : i32.t))
          ((Integer.of_Z 1) : i32.t) in
      M.pure (BinOp.Pure.ge (rust_cast α1) ((Integer.of_Z 2) : i8.t)).
    
    (*
                    pub extern fn $i($($arg: $argty),*
                    ) -> $ret {
                        $($body);*
                    }
    *)
    Definition WTERMSIG
        (status : ltac:(libc.unix.c_int))
        : M ltac:(libc.unix.c_int) :=
      let* status := M.alloc status in
      let* α0 : i32.t := M.read status in
      M.pure (BinOp.Pure.bit_and α0 ((Integer.of_Z 127) : i32.t)).
    
    (*
                    pub extern fn $i($($arg: $argty),*
                    ) -> $ret {
                        $($body);*
                    }
    *)
    Definition WIFEXITED (status : ltac:(libc.unix.c_int)) : M bool.t :=
      let* status := M.alloc status in
      let* α0 : i32.t := M.read status in
      M.pure
        (BinOp.Pure.eq
          (BinOp.Pure.bit_and α0 ((Integer.of_Z 127) : i32.t))
          ((Integer.of_Z 0) : i32.t)).
    
    (*
                    pub extern fn $i($($arg: $argty),*
                    ) -> $ret {
                        $($body);*
                    }
    *)
    Definition WEXITSTATUS
        (status : ltac:(libc.unix.c_int))
        : M ltac:(libc.unix.c_int) :=
      let* status := M.alloc status in
      let* α0 : i32.t := M.read status in
      let* α1 : i32.t := BinOp.Panic.shr α0 ((Integer.of_Z 8) : i32.t) in
      M.pure (BinOp.Pure.bit_and α1 ((Integer.of_Z 255) : i32.t)).
    
    (*
                    pub extern fn $i($($arg: $argty),*
                    ) -> $ret {
                        $($body);*
                    }
    *)
    Definition WCOREDUMP (status : ltac:(libc.unix.c_int)) : M bool.t :=
      let* status := M.alloc status in
      let* α0 : i32.t := M.read status in
      M.pure
        (BinOp.Pure.ne
          (BinOp.Pure.bit_and α0 ((Integer.of_Z 128) : i32.t))
          ((Integer.of_Z 0) : i32.t)).
    
    (*
                    pub extern fn $i($($arg: $argty),*
                    ) -> $ret {
                        $($body);*
                    }
    *)
    Definition W_EXITCODE
        (ret : ltac:(libc.unix.c_int))
        (sig : ltac:(libc.unix.c_int))
        : M ltac:(libc.unix.c_int) :=
      let* ret := M.alloc ret in
      let* sig := M.alloc sig in
      let* α0 : i32.t := M.read ret in
      let* α1 : i32.t := BinOp.Panic.shl α0 ((Integer.of_Z 8) : i32.t) in
      let* α2 : i32.t := M.read sig in
      M.pure (BinOp.Pure.bit_or α1 α2).
    
    (*
                    pub extern fn $i($($arg: $argty),*
                    ) -> $ret {
                        $($body);*
                    }
    *)
    Definition W_STOPCODE
        (sig : ltac:(libc.unix.c_int))
        : M ltac:(libc.unix.c_int) :=
      let* sig := M.alloc sig in
      let* α0 : i32.t := M.read sig in
      let* α1 : i32.t := BinOp.Panic.shl α0 ((Integer.of_Z 8) : i32.t) in
      M.pure (BinOp.Pure.bit_or α1 ((Integer.of_Z 127) : i32.t)).
    
    (*
                    pub extern fn $i($($arg: $argty),*
                    ) -> $ret {
                        $($body);*
                    }
    *)
    Definition QCMD
        (cmd : ltac:(libc.unix.c_int))
        (type_ : ltac:(libc.unix.c_int))
        : M ltac:(libc.unix.c_int) :=
      let* cmd := M.alloc cmd in
      let* type_ := M.alloc type_ in
      let* α0 : i32.t := M.read cmd in
      let* α1 : i32.t := BinOp.Panic.shl α0 ((Integer.of_Z 8) : i32.t) in
      let* α2 : i32.t := M.read type_ in
      M.pure
        (BinOp.Pure.bit_or
          α1
          (BinOp.Pure.bit_and α2 ((Integer.of_Z 255) : i32.t))).
    
    (*
                    pub extern fn $i($($arg: $argty),*
                    ) -> $ret {
                        $($body);*
                    }
    *)
    Definition IPOPT_COPIED (o : u8.t) : M u8.t :=
      let* o := M.alloc o in
      let* α0 : u8.t := M.read o in
      let* α1 : u8.t := M.read libc.unix.linux_like.IPOPT_COPY in
      M.pure (BinOp.Pure.bit_and α0 α1).
    
    (*
                    pub extern fn $i($($arg: $argty),*
                    ) -> $ret {
                        $($body);*
                    }
    *)
    Definition IPOPT_CLASS (o : u8.t) : M u8.t :=
      let* o := M.alloc o in
      let* α0 : u8.t := M.read o in
      let* α1 : u8.t := M.read libc.unix.linux_like.IPOPT_CLASS_MASK in
      M.pure (BinOp.Pure.bit_and α0 α1).
    
    (*
                    pub extern fn $i($($arg: $argty),*
                    ) -> $ret {
                        $($body);*
                    }
    *)
    Definition IPOPT_NUMBER (o : u8.t) : M u8.t :=
      let* o := M.alloc o in
      let* α0 : u8.t := M.read o in
      let* α1 : u8.t := M.read libc.unix.linux_like.IPOPT_NUMBER_MASK in
      M.pure (BinOp.Pure.bit_and α0 α1).
    
    (*
                    pub extern fn $i($($arg: $argty),*
                    ) -> $ret {
                        $($body);*
                    }
    *)
    Definition IPTOS_ECN (x : u8.t) : M u8.t :=
      let* x := M.alloc x in
      let* α0 : u8.t := M.read x in
      let* α1 : u8.t := M.read libc.unix.linux_like.IPTOS_ECN_MASK in
      M.pure (BinOp.Pure.bit_and α0 α1).
    
    (*
                    pub extern fn $i($($arg: $argty),*
                    ) -> $ret {
                        $($body);*
                    }
    *)
    Definition KERNEL_VERSION (a : u32.t) (b : u32.t) (c : u32.t) : M u32.t :=
      let* a := M.alloc a in
      let* b := M.alloc b in
      let* c := M.alloc c in
      let* α0 : u32.t := M.read a in
      let* α1 : u32.t := BinOp.Panic.shl α0 ((Integer.of_Z 16) : i32.t) in
      let* α2 : u32.t := M.read b in
      let* α3 : u32.t := BinOp.Panic.shl α2 ((Integer.of_Z 8) : i32.t) in
      let* α4 : u32.t := BinOp.Panic.add α1 α3 in
      let* α5 : M.Val u32.t :=
        match_operator
          c
          [
            fun γ => (M.pure c) : M (M.Val u32.t);
            fun γ => (M.alloc ((Integer.of_Z 255) : u32.t)) : M (M.Val u32.t)
          ] in
      let* α6 : u32.t := M.read α5 in
      BinOp.Panic.add α4 α6.
    
    Error ForeignMod.
    
    Error ForeignMod.
    
    Error ForeignMod.
    
    Error ForeignMod.
    
    Module linux.
      Ltac useconds_t := exact u32.t.
      
      Ltac dev_t := exact u64.t.
      
      Ltac socklen_t := exact u32.t.
      
      Ltac mode_t := exact u32.t.
      
      Ltac ino64_t := exact u64.t.
      
      Ltac off64_t := exact i64.t.
      
      Ltac blkcnt64_t := exact i64.t.
      
      Ltac rlim64_t := exact u64.t.
      
      Ltac mqd_t := exact ltac:(libc.unix.c_int).
      
      Ltac nfds_t :=
        exact ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_ulong).
      
      Ltac nl_item := exact ltac:(libc.unix.c_int).
      
      Ltac idtype_t := exact ltac:(libc.unix.c_uint).
      
      Ltac loff_t := exact ltac:(libc.unix.c_longlong).
      
      Ltac pthread_key_t := exact ltac:(libc.unix.c_uint).
      
      Ltac pthread_once_t := exact ltac:(libc.unix.c_int).
      
      Ltac pthread_spinlock_t := exact ltac:(libc.unix.c_int).
      
      Ltac __u8 := exact ltac:(libc.unix.c_uchar).
      
      Ltac __u16 := exact ltac:(libc.unix.c_ushort).
      
      Ltac __s16 := exact ltac:(libc.unix.c_short).
      
      Ltac __u32 := exact ltac:(libc.unix.c_uint).
      
      Ltac __s32 := exact ltac:(libc.unix.c_int).
      
      Ltac Elf32_Half := exact u16.t.
      
      Ltac Elf32_Word := exact u32.t.
      
      Ltac Elf32_Off := exact u32.t.
      
      Ltac Elf32_Addr := exact u32.t.
      
      Ltac Elf32_Xword := exact u64.t.
      
      Ltac Elf32_Sword := exact i32.t.
      
      Ltac Elf64_Half := exact u16.t.
      
      Ltac Elf64_Word := exact u32.t.
      
      Ltac Elf64_Off := exact u64.t.
      
      Ltac Elf64_Addr := exact u64.t.
      
      Ltac Elf64_Xword := exact u64.t.
      
      Ltac Elf64_Sxword := exact i64.t.
      
      Ltac Elf64_Sword := exact i32.t.
      
      Ltac Elf32_Section := exact u16.t.
      
      Ltac Elf64_Section := exact u16.t.
      
      Ltac Elf32_Relr := exact ltac:(libc.unix.linux_like.linux.Elf32_Word).
      
      Ltac Elf64_Relr := exact ltac:(libc.unix.linux_like.linux.Elf32_Xword).
      
      Ltac Elf32_Rel :=
        exact libc.unix.linux_like.linux.__c_anonymous_elf32_rel.t.
      
      Ltac Elf64_Rel :=
        exact libc.unix.linux_like.linux.__c_anonymous_elf64_rel.t.
      
      Ltac Elf32_Rela :=
        exact libc.unix.linux_like.linux.__c_anonymous_elf32_rela.t.
      
      Ltac Elf64_Rela :=
        exact libc.unix.linux_like.linux.__c_anonymous_elf64_rela.t.
      
      Ltac canid_t := exact u32.t.
      
      Ltac can_err_mask_t := exact u32.t.
      
      Ltac pgn_t := exact u32.t.
      
      Ltac priority_t := exact u8.t.
      
      Ltac name_t := exact u64.t.
      
      Ltac iconv_t := exact (mut_ref core.ffi.c_void.t).
      
      Ltac sctp_assoc_t := exact ltac:(libc.unix.linux_like.linux.__s32).
      
      Ltac eventfd_t := exact u64.t.
      
      Module fpos64_t.
        Inductive t : Set :=
        .
      End fpos64_t.
      
      Module tpacket_versions.
        Inductive t : Set :=
        | TPACKET_V1
        | TPACKET_V2
        | TPACKET_V3.
      End tpacket_versions.
      
      Module  Impl_core_marker_Copy_for_libc_unix_linux_like_linux_tpacket_versions_t.
      Section Impl_core_marker_Copy_for_libc_unix_linux_like_linux_tpacket_versions_t.
        Definition Self : Set := libc.unix.linux_like.linux.tpacket_versions.t.
        
        Global Instance ℐ : core.marker.Copy.Trait Self := {
        }.
      End Impl_core_marker_Copy_for_libc_unix_linux_like_linux_tpacket_versions_t.
      End Impl_core_marker_Copy_for_libc_unix_linux_like_linux_tpacket_versions_t.
      
      Module  Impl_core_clone_Clone_for_libc_unix_linux_like_linux_tpacket_versions_t.
      Section Impl_core_clone_Clone_for_libc_unix_linux_like_linux_tpacket_versions_t.
        Definition Self : Set := libc.unix.linux_like.linux.tpacket_versions.t.
        
        (*
                    fn clone(&self) -> $i { *self }
        *)
        Definition clone
            (self : ref Self)
            : M libc.unix.linux_like.linux.tpacket_versions.t :=
          let* self := M.alloc self in
          let* α0 : ref libc.unix.linux_like.linux.tpacket_versions.t :=
            M.read self in
          M.read (deref α0).
        
        Global Instance AssociatedFunction_clone :
          Notations.DoubleColon Self "clone" := {
          Notations.double_colon := clone;
        }.
        
        Global Instance ℐ : core.clone.Clone.Required.Trait Self := {
          core.clone.Clone.clone := clone;
          core.clone.Clone.clone_from := Datatypes.None;
        }.
      End Impl_core_clone_Clone_for_libc_unix_linux_like_linux_tpacket_versions_t.
      End Impl_core_clone_Clone_for_libc_unix_linux_like_linux_tpacket_versions_t.
      
      Module  glob_t.
      Section glob_t.
        Record t : Set := {
          gl_pathc : ltac:(libc.unix.size_t);
          gl_pathv :
            mut_ref
              (mut_ref ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.c_char));
          gl_offs : ltac:(libc.unix.size_t);
          gl_flags : ltac:(libc.unix.c_int);
          __unused1 : mut_ref core.ffi.c_void.t;
          __unused2 : mut_ref core.ffi.c_void.t;
          __unused3 : mut_ref core.ffi.c_void.t;
          __unused4 : mut_ref core.ffi.c_void.t;
          __unused5 : mut_ref core.ffi.c_void.t;
        }.
        
        Definition Get_gl_pathc :=
          Ref.map
            (fun α => Some α.(gl_pathc))
            (fun β α => Some (α <| gl_pathc := β |>)).
        Definition Get_gl_pathv :=
          Ref.map
            (fun α => Some α.(gl_pathv))
            (fun β α => Some (α <| gl_pathv := β |>)).
        Definition Get_gl_offs :=
          Ref.map
            (fun α => Some α.(gl_offs))
            (fun β α => Some (α <| gl_offs := β |>)).
        Definition Get_gl_flags :=
          Ref.map
            (fun α => Some α.(gl_flags))
            (fun β α => Some (α <| gl_flags := β |>)).
        Definition Get___unused1 :=
          Ref.map
            (fun α => Some α.(__unused1))
            (fun β α => Some (α <| __unused1 := β |>)).
        Definition Get___unused2 :=
          Ref.map
            (fun α => Some α.(__unused2))
            (fun β α => Some (α <| __unused2 := β |>)).
        Definition Get___unused3 :=
          Ref.map
            (fun α => Some α.(__unused3))
            (fun β α => Some (α <| __unused3 := β |>)).
        Definition Get___unused4 :=
          Ref.map
            (fun α => Some α.(__unused4))
            (fun β α => Some (α <| __unused4 := β |>)).
        Definition Get___unused5 :=
          Ref.map
            (fun α => Some α.(__unused5))
            (fun β α => Some (α <| __unused5 := β |>)).
      End glob_t.
      End glob_t.
      
      Module  Impl_core_marker_Copy_for_libc_unix_linux_like_linux_glob_t_t.
      Section Impl_core_marker_Copy_for_libc_unix_linux_like_linux_glob_t_t.
        Definition Self : Set := libc.unix.linux_like.linux.glob_t.t.
        
        Global Instance ℐ : core.marker.Copy.Trait Self := {
        }.
      End Impl_core_marker_Copy_for_libc_unix_linux_like_linux_glob_t_t.
      End Impl_core_marker_Copy_for_libc_unix_linux_like_linux_glob_t_t.
      
      Module  Impl_core_clone_Clone_for_libc_unix_linux_like_linux_glob_t_t.
      Section Impl_core_clone_Clone_for_libc_unix_linux_like_linux_glob_t_t.
        Definition Self : Set := libc.unix.linux_like.linux.glob_t.t.
        
        (*
                    fn clone(&self) -> $i { *self }
        *)
        Definition clone
            (self : ref Self)
            : M libc.unix.linux_like.linux.glob_t.t :=
          let* self := M.alloc self in
          let* α0 : ref libc.unix.linux_like.linux.glob_t.t := M.read self in
          M.read (deref α0).
        
        Global Instance AssociatedFunction_clone :
          Notations.DoubleColon Self "clone" := {
          Notations.double_colon := clone;
        }.
        
        Global Instance ℐ : core.clone.Clone.Required.Trait Self := {
          core.clone.Clone.clone := clone;
          core.clone.Clone.clone_from := Datatypes.None;
        }.
      End Impl_core_clone_Clone_for_libc_unix_linux_like_linux_glob_t_t.
      End Impl_core_clone_Clone_for_libc_unix_linux_like_linux_glob_t_t.
      
      Module  passwd.
      Section passwd.
        Record t : Set := {
          pw_name :
            mut_ref ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.c_char);
          pw_passwd :
            mut_ref ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.c_char);
          pw_uid : ltac:(libc.unix.uid_t);
          pw_gid : ltac:(libc.unix.gid_t);
          pw_gecos :
            mut_ref ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.c_char);
          pw_dir :
            mut_ref ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.c_char);
          pw_shell :
            mut_ref ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.c_char);
        }.
        
        Definition Get_pw_name :=
          Ref.map
            (fun α => Some α.(pw_name))
            (fun β α => Some (α <| pw_name := β |>)).
        Definition Get_pw_passwd :=
          Ref.map
            (fun α => Some α.(pw_passwd))
            (fun β α => Some (α <| pw_passwd := β |>)).
        Definition Get_pw_uid :=
          Ref.map
            (fun α => Some α.(pw_uid))
            (fun β α => Some (α <| pw_uid := β |>)).
        Definition Get_pw_gid :=
          Ref.map
            (fun α => Some α.(pw_gid))
            (fun β α => Some (α <| pw_gid := β |>)).
        Definition Get_pw_gecos :=
          Ref.map
            (fun α => Some α.(pw_gecos))
            (fun β α => Some (α <| pw_gecos := β |>)).
        Definition Get_pw_dir :=
          Ref.map
            (fun α => Some α.(pw_dir))
            (fun β α => Some (α <| pw_dir := β |>)).
        Definition Get_pw_shell :=
          Ref.map
            (fun α => Some α.(pw_shell))
            (fun β α => Some (α <| pw_shell := β |>)).
      End passwd.
      End passwd.
      
      Module  Impl_core_marker_Copy_for_libc_unix_linux_like_linux_passwd_t.
      Section Impl_core_marker_Copy_for_libc_unix_linux_like_linux_passwd_t.
        Definition Self : Set := libc.unix.linux_like.linux.passwd.t.
        
        Global Instance ℐ : core.marker.Copy.Trait Self := {
        }.
      End Impl_core_marker_Copy_for_libc_unix_linux_like_linux_passwd_t.
      End Impl_core_marker_Copy_for_libc_unix_linux_like_linux_passwd_t.
      
      Module  Impl_core_clone_Clone_for_libc_unix_linux_like_linux_passwd_t.
      Section Impl_core_clone_Clone_for_libc_unix_linux_like_linux_passwd_t.
        Definition Self : Set := libc.unix.linux_like.linux.passwd.t.
        
        (*
                    fn clone(&self) -> $i { *self }
        *)
        Definition clone
            (self : ref Self)
            : M libc.unix.linux_like.linux.passwd.t :=
          let* self := M.alloc self in
          let* α0 : ref libc.unix.linux_like.linux.passwd.t := M.read self in
          M.read (deref α0).
        
        Global Instance AssociatedFunction_clone :
          Notations.DoubleColon Self "clone" := {
          Notations.double_colon := clone;
        }.
        
        Global Instance ℐ : core.clone.Clone.Required.Trait Self := {
          core.clone.Clone.clone := clone;
          core.clone.Clone.clone_from := Datatypes.None;
        }.
      End Impl_core_clone_Clone_for_libc_unix_linux_like_linux_passwd_t.
      End Impl_core_clone_Clone_for_libc_unix_linux_like_linux_passwd_t.
      
      Module  spwd.
      Section spwd.
        Record t : Set := {
          sp_namp :
            mut_ref ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.c_char);
          sp_pwdp :
            mut_ref ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.c_char);
          sp_lstchg :
            ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_long);
          sp_min :
            ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_long);
          sp_max :
            ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_long);
          sp_warn :
            ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_long);
          sp_inact :
            ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_long);
          sp_expire :
            ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_long);
          sp_flag :
            ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_ulong);
        }.
        
        Definition Get_sp_namp :=
          Ref.map
            (fun α => Some α.(sp_namp))
            (fun β α => Some (α <| sp_namp := β |>)).
        Definition Get_sp_pwdp :=
          Ref.map
            (fun α => Some α.(sp_pwdp))
            (fun β α => Some (α <| sp_pwdp := β |>)).
        Definition Get_sp_lstchg :=
          Ref.map
            (fun α => Some α.(sp_lstchg))
            (fun β α => Some (α <| sp_lstchg := β |>)).
        Definition Get_sp_min :=
          Ref.map
            (fun α => Some α.(sp_min))
            (fun β α => Some (α <| sp_min := β |>)).
        Definition Get_sp_max :=
          Ref.map
            (fun α => Some α.(sp_max))
            (fun β α => Some (α <| sp_max := β |>)).
        Definition Get_sp_warn :=
          Ref.map
            (fun α => Some α.(sp_warn))
            (fun β α => Some (α <| sp_warn := β |>)).
        Definition Get_sp_inact :=
          Ref.map
            (fun α => Some α.(sp_inact))
            (fun β α => Some (α <| sp_inact := β |>)).
        Definition Get_sp_expire :=
          Ref.map
            (fun α => Some α.(sp_expire))
            (fun β α => Some (α <| sp_expire := β |>)).
        Definition Get_sp_flag :=
          Ref.map
            (fun α => Some α.(sp_flag))
            (fun β α => Some (α <| sp_flag := β |>)).
      End spwd.
      End spwd.
      
      Module  Impl_core_marker_Copy_for_libc_unix_linux_like_linux_spwd_t.
      Section Impl_core_marker_Copy_for_libc_unix_linux_like_linux_spwd_t.
        Definition Self : Set := libc.unix.linux_like.linux.spwd.t.
        
        Global Instance ℐ : core.marker.Copy.Trait Self := {
        }.
      End Impl_core_marker_Copy_for_libc_unix_linux_like_linux_spwd_t.
      End Impl_core_marker_Copy_for_libc_unix_linux_like_linux_spwd_t.
      
      Module  Impl_core_clone_Clone_for_libc_unix_linux_like_linux_spwd_t.
      Section Impl_core_clone_Clone_for_libc_unix_linux_like_linux_spwd_t.
        Definition Self : Set := libc.unix.linux_like.linux.spwd.t.
        
        (*
                    fn clone(&self) -> $i { *self }
        *)
        Definition clone
            (self : ref Self)
            : M libc.unix.linux_like.linux.spwd.t :=
          let* self := M.alloc self in
          let* α0 : ref libc.unix.linux_like.linux.spwd.t := M.read self in
          M.read (deref α0).
        
        Global Instance AssociatedFunction_clone :
          Notations.DoubleColon Self "clone" := {
          Notations.double_colon := clone;
        }.
        
        Global Instance ℐ : core.clone.Clone.Required.Trait Self := {
          core.clone.Clone.clone := clone;
          core.clone.Clone.clone_from := Datatypes.None;
        }.
      End Impl_core_clone_Clone_for_libc_unix_linux_like_linux_spwd_t.
      End Impl_core_clone_Clone_for_libc_unix_linux_like_linux_spwd_t.
      
      Module  dqblk.
      Section dqblk.
        Record t : Set := {
          dqb_bhardlimit : u64.t;
          dqb_bsoftlimit : u64.t;
          dqb_curspace : u64.t;
          dqb_ihardlimit : u64.t;
          dqb_isoftlimit : u64.t;
          dqb_curinodes : u64.t;
          dqb_btime : u64.t;
          dqb_itime : u64.t;
          dqb_valid : u32.t;
        }.
        
        Definition Get_dqb_bhardlimit :=
          Ref.map
            (fun α => Some α.(dqb_bhardlimit))
            (fun β α => Some (α <| dqb_bhardlimit := β |>)).
        Definition Get_dqb_bsoftlimit :=
          Ref.map
            (fun α => Some α.(dqb_bsoftlimit))
            (fun β α => Some (α <| dqb_bsoftlimit := β |>)).
        Definition Get_dqb_curspace :=
          Ref.map
            (fun α => Some α.(dqb_curspace))
            (fun β α => Some (α <| dqb_curspace := β |>)).
        Definition Get_dqb_ihardlimit :=
          Ref.map
            (fun α => Some α.(dqb_ihardlimit))
            (fun β α => Some (α <| dqb_ihardlimit := β |>)).
        Definition Get_dqb_isoftlimit :=
          Ref.map
            (fun α => Some α.(dqb_isoftlimit))
            (fun β α => Some (α <| dqb_isoftlimit := β |>)).
        Definition Get_dqb_curinodes :=
          Ref.map
            (fun α => Some α.(dqb_curinodes))
            (fun β α => Some (α <| dqb_curinodes := β |>)).
        Definition Get_dqb_btime :=
          Ref.map
            (fun α => Some α.(dqb_btime))
            (fun β α => Some (α <| dqb_btime := β |>)).
        Definition Get_dqb_itime :=
          Ref.map
            (fun α => Some α.(dqb_itime))
            (fun β α => Some (α <| dqb_itime := β |>)).
        Definition Get_dqb_valid :=
          Ref.map
            (fun α => Some α.(dqb_valid))
            (fun β α => Some (α <| dqb_valid := β |>)).
      End dqblk.
      End dqblk.
      
      Module  Impl_core_marker_Copy_for_libc_unix_linux_like_linux_dqblk_t.
      Section Impl_core_marker_Copy_for_libc_unix_linux_like_linux_dqblk_t.
        Definition Self : Set := libc.unix.linux_like.linux.dqblk.t.
        
        Global Instance ℐ : core.marker.Copy.Trait Self := {
        }.
      End Impl_core_marker_Copy_for_libc_unix_linux_like_linux_dqblk_t.
      End Impl_core_marker_Copy_for_libc_unix_linux_like_linux_dqblk_t.
      
      Module  Impl_core_clone_Clone_for_libc_unix_linux_like_linux_dqblk_t.
      Section Impl_core_clone_Clone_for_libc_unix_linux_like_linux_dqblk_t.
        Definition Self : Set := libc.unix.linux_like.linux.dqblk.t.
        
        (*
                    fn clone(&self) -> $i { *self }
        *)
        Definition clone
            (self : ref Self)
            : M libc.unix.linux_like.linux.dqblk.t :=
          let* self := M.alloc self in
          let* α0 : ref libc.unix.linux_like.linux.dqblk.t := M.read self in
          M.read (deref α0).
        
        Global Instance AssociatedFunction_clone :
          Notations.DoubleColon Self "clone" := {
          Notations.double_colon := clone;
        }.
        
        Global Instance ℐ : core.clone.Clone.Required.Trait Self := {
          core.clone.Clone.clone := clone;
          core.clone.Clone.clone_from := Datatypes.None;
        }.
      End Impl_core_clone_Clone_for_libc_unix_linux_like_linux_dqblk_t.
      End Impl_core_clone_Clone_for_libc_unix_linux_like_linux_dqblk_t.
      
      Module  signalfd_siginfo.
      Section signalfd_siginfo.
        Record t : Set := {
          ssi_signo : u32.t;
          ssi_errno : i32.t;
          ssi_code : i32.t;
          ssi_pid : u32.t;
          ssi_uid : u32.t;
          ssi_fd : i32.t;
          ssi_tid : u32.t;
          ssi_band : u32.t;
          ssi_overrun : u32.t;
          ssi_trapno : u32.t;
          ssi_status : i32.t;
          ssi_int : i32.t;
          ssi_ptr : u64.t;
          ssi_utime : u64.t;
          ssi_stime : u64.t;
          ssi_addr : u64.t;
          ssi_addr_lsb : u16.t;
          _pad2 : u16.t;
          ssi_syscall : i32.t;
          ssi_call_addr : u64.t;
          ssi_arch : u32.t;
          _pad : array u8.t;
        }.
        
        Definition Get_ssi_signo :=
          Ref.map
            (fun α => Some α.(ssi_signo))
            (fun β α => Some (α <| ssi_signo := β |>)).
        Definition Get_ssi_errno :=
          Ref.map
            (fun α => Some α.(ssi_errno))
            (fun β α => Some (α <| ssi_errno := β |>)).
        Definition Get_ssi_code :=
          Ref.map
            (fun α => Some α.(ssi_code))
            (fun β α => Some (α <| ssi_code := β |>)).
        Definition Get_ssi_pid :=
          Ref.map
            (fun α => Some α.(ssi_pid))
            (fun β α => Some (α <| ssi_pid := β |>)).
        Definition Get_ssi_uid :=
          Ref.map
            (fun α => Some α.(ssi_uid))
            (fun β α => Some (α <| ssi_uid := β |>)).
        Definition Get_ssi_fd :=
          Ref.map
            (fun α => Some α.(ssi_fd))
            (fun β α => Some (α <| ssi_fd := β |>)).
        Definition Get_ssi_tid :=
          Ref.map
            (fun α => Some α.(ssi_tid))
            (fun β α => Some (α <| ssi_tid := β |>)).
        Definition Get_ssi_band :=
          Ref.map
            (fun α => Some α.(ssi_band))
            (fun β α => Some (α <| ssi_band := β |>)).
        Definition Get_ssi_overrun :=
          Ref.map
            (fun α => Some α.(ssi_overrun))
            (fun β α => Some (α <| ssi_overrun := β |>)).
        Definition Get_ssi_trapno :=
          Ref.map
            (fun α => Some α.(ssi_trapno))
            (fun β α => Some (α <| ssi_trapno := β |>)).
        Definition Get_ssi_status :=
          Ref.map
            (fun α => Some α.(ssi_status))
            (fun β α => Some (α <| ssi_status := β |>)).
        Definition Get_ssi_int :=
          Ref.map
            (fun α => Some α.(ssi_int))
            (fun β α => Some (α <| ssi_int := β |>)).
        Definition Get_ssi_ptr :=
          Ref.map
            (fun α => Some α.(ssi_ptr))
            (fun β α => Some (α <| ssi_ptr := β |>)).
        Definition Get_ssi_utime :=
          Ref.map
            (fun α => Some α.(ssi_utime))
            (fun β α => Some (α <| ssi_utime := β |>)).
        Definition Get_ssi_stime :=
          Ref.map
            (fun α => Some α.(ssi_stime))
            (fun β α => Some (α <| ssi_stime := β |>)).
        Definition Get_ssi_addr :=
          Ref.map
            (fun α => Some α.(ssi_addr))
            (fun β α => Some (α <| ssi_addr := β |>)).
        Definition Get_ssi_addr_lsb :=
          Ref.map
            (fun α => Some α.(ssi_addr_lsb))
            (fun β α => Some (α <| ssi_addr_lsb := β |>)).
        Definition Get__pad2 :=
          Ref.map
            (fun α => Some α.(_pad2))
            (fun β α => Some (α <| _pad2 := β |>)).
        Definition Get_ssi_syscall :=
          Ref.map
            (fun α => Some α.(ssi_syscall))
            (fun β α => Some (α <| ssi_syscall := β |>)).
        Definition Get_ssi_call_addr :=
          Ref.map
            (fun α => Some α.(ssi_call_addr))
            (fun β α => Some (α <| ssi_call_addr := β |>)).
        Definition Get_ssi_arch :=
          Ref.map
            (fun α => Some α.(ssi_arch))
            (fun β α => Some (α <| ssi_arch := β |>)).
        Definition Get__pad :=
          Ref.map
            (fun α => Some α.(_pad))
            (fun β α => Some (α <| _pad := β |>)).
      End signalfd_siginfo.
      End signalfd_siginfo.
      
      Module  Impl_core_marker_Copy_for_libc_unix_linux_like_linux_signalfd_siginfo_t.
      Section Impl_core_marker_Copy_for_libc_unix_linux_like_linux_signalfd_siginfo_t.
        Definition Self : Set := libc.unix.linux_like.linux.signalfd_siginfo.t.
        
        Global Instance ℐ : core.marker.Copy.Trait Self := {
        }.
      End Impl_core_marker_Copy_for_libc_unix_linux_like_linux_signalfd_siginfo_t.
      End Impl_core_marker_Copy_for_libc_unix_linux_like_linux_signalfd_siginfo_t.
      
      Module  Impl_core_clone_Clone_for_libc_unix_linux_like_linux_signalfd_siginfo_t.
      Section Impl_core_clone_Clone_for_libc_unix_linux_like_linux_signalfd_siginfo_t.
        Definition Self : Set := libc.unix.linux_like.linux.signalfd_siginfo.t.
        
        (*
                    fn clone(&self) -> $i { *self }
        *)
        Definition clone
            (self : ref Self)
            : M libc.unix.linux_like.linux.signalfd_siginfo.t :=
          let* self := M.alloc self in
          let* α0 : ref libc.unix.linux_like.linux.signalfd_siginfo.t :=
            M.read self in
          M.read (deref α0).
        
        Global Instance AssociatedFunction_clone :
          Notations.DoubleColon Self "clone" := {
          Notations.double_colon := clone;
        }.
        
        Global Instance ℐ : core.clone.Clone.Required.Trait Self := {
          core.clone.Clone.clone := clone;
          core.clone.Clone.clone_from := Datatypes.None;
        }.
      End Impl_core_clone_Clone_for_libc_unix_linux_like_linux_signalfd_siginfo_t.
      End Impl_core_clone_Clone_for_libc_unix_linux_like_linux_signalfd_siginfo_t.
      
      Module  itimerspec.
      Section itimerspec.
        Record t : Set := {
          it_interval : libc.unix.timespec.t;
          it_value : libc.unix.timespec.t;
        }.
        
        Definition Get_it_interval :=
          Ref.map
            (fun α => Some α.(it_interval))
            (fun β α => Some (α <| it_interval := β |>)).
        Definition Get_it_value :=
          Ref.map
            (fun α => Some α.(it_value))
            (fun β α => Some (α <| it_value := β |>)).
      End itimerspec.
      End itimerspec.
      
      Module  Impl_core_marker_Copy_for_libc_unix_linux_like_linux_itimerspec_t.
      Section Impl_core_marker_Copy_for_libc_unix_linux_like_linux_itimerspec_t.
        Definition Self : Set := libc.unix.linux_like.linux.itimerspec.t.
        
        Global Instance ℐ : core.marker.Copy.Trait Self := {
        }.
      End Impl_core_marker_Copy_for_libc_unix_linux_like_linux_itimerspec_t.
      End Impl_core_marker_Copy_for_libc_unix_linux_like_linux_itimerspec_t.
      
      Module  Impl_core_clone_Clone_for_libc_unix_linux_like_linux_itimerspec_t.
      Section Impl_core_clone_Clone_for_libc_unix_linux_like_linux_itimerspec_t.
        Definition Self : Set := libc.unix.linux_like.linux.itimerspec.t.
        
        (*
                    fn clone(&self) -> $i { *self }
        *)
        Definition clone
            (self : ref Self)
            : M libc.unix.linux_like.linux.itimerspec.t :=
          let* self := M.alloc self in
          let* α0 : ref libc.unix.linux_like.linux.itimerspec.t :=
            M.read self in
          M.read (deref α0).
        
        Global Instance AssociatedFunction_clone :
          Notations.DoubleColon Self "clone" := {
          Notations.double_colon := clone;
        }.
        
        Global Instance ℐ : core.clone.Clone.Required.Trait Self := {
          core.clone.Clone.clone := clone;
          core.clone.Clone.clone_from := Datatypes.None;
        }.
      End Impl_core_clone_Clone_for_libc_unix_linux_like_linux_itimerspec_t.
      End Impl_core_clone_Clone_for_libc_unix_linux_like_linux_itimerspec_t.
      
      Module  fsid_t.
      Section fsid_t.
        Record t : Set := {
          __val : array ltac:(libc.unix.c_int);
        }.
        
        Definition Get___val :=
          Ref.map
            (fun α => Some α.(__val))
            (fun β α => Some (α <| __val := β |>)).
      End fsid_t.
      End fsid_t.
      
      Module  Impl_core_marker_Copy_for_libc_unix_linux_like_linux_fsid_t_t.
      Section Impl_core_marker_Copy_for_libc_unix_linux_like_linux_fsid_t_t.
        Definition Self : Set := libc.unix.linux_like.linux.fsid_t.t.
        
        Global Instance ℐ : core.marker.Copy.Trait Self := {
        }.
      End Impl_core_marker_Copy_for_libc_unix_linux_like_linux_fsid_t_t.
      End Impl_core_marker_Copy_for_libc_unix_linux_like_linux_fsid_t_t.
      
      Module  Impl_core_clone_Clone_for_libc_unix_linux_like_linux_fsid_t_t.
      Section Impl_core_clone_Clone_for_libc_unix_linux_like_linux_fsid_t_t.
        Definition Self : Set := libc.unix.linux_like.linux.fsid_t.t.
        
        (*
                    fn clone(&self) -> $i { *self }
        *)
        Definition clone
            (self : ref Self)
            : M libc.unix.linux_like.linux.fsid_t.t :=
          let* self := M.alloc self in
          let* α0 : ref libc.unix.linux_like.linux.fsid_t.t := M.read self in
          M.read (deref α0).
        
        Global Instance AssociatedFunction_clone :
          Notations.DoubleColon Self "clone" := {
          Notations.double_colon := clone;
        }.
        
        Global Instance ℐ : core.clone.Clone.Required.Trait Self := {
          core.clone.Clone.clone := clone;
          core.clone.Clone.clone_from := Datatypes.None;
        }.
      End Impl_core_clone_Clone_for_libc_unix_linux_like_linux_fsid_t_t.
      End Impl_core_clone_Clone_for_libc_unix_linux_like_linux_fsid_t_t.
      
      Module  fanout_args.
      Section fanout_args.
        Record t : Set := {
          id : ltac:(libc.unix.linux_like.linux.__u16);
          type_flags : ltac:(libc.unix.linux_like.linux.__u16);
          max_num_members : ltac:(libc.unix.linux_like.linux.__u32);
        }.
        
        Definition Get_id :=
          Ref.map (fun α => Some α.(id)) (fun β α => Some (α <| id := β |>)).
        Definition Get_type_flags :=
          Ref.map
            (fun α => Some α.(type_flags))
            (fun β α => Some (α <| type_flags := β |>)).
        Definition Get_max_num_members :=
          Ref.map
            (fun α => Some α.(max_num_members))
            (fun β α => Some (α <| max_num_members := β |>)).
      End fanout_args.
      End fanout_args.
      
      Module  Impl_core_marker_Copy_for_libc_unix_linux_like_linux_fanout_args_t.
      Section Impl_core_marker_Copy_for_libc_unix_linux_like_linux_fanout_args_t.
        Definition Self : Set := libc.unix.linux_like.linux.fanout_args.t.
        
        Global Instance ℐ : core.marker.Copy.Trait Self := {
        }.
      End Impl_core_marker_Copy_for_libc_unix_linux_like_linux_fanout_args_t.
      End Impl_core_marker_Copy_for_libc_unix_linux_like_linux_fanout_args_t.
      
      Module  Impl_core_clone_Clone_for_libc_unix_linux_like_linux_fanout_args_t.
      Section Impl_core_clone_Clone_for_libc_unix_linux_like_linux_fanout_args_t.
        Definition Self : Set := libc.unix.linux_like.linux.fanout_args.t.
        
        (*
                    fn clone(&self) -> $i { *self }
        *)
        Definition clone
            (self : ref Self)
            : M libc.unix.linux_like.linux.fanout_args.t :=
          let* self := M.alloc self in
          let* α0 : ref libc.unix.linux_like.linux.fanout_args.t :=
            M.read self in
          M.read (deref α0).
        
        Global Instance AssociatedFunction_clone :
          Notations.DoubleColon Self "clone" := {
          Notations.double_colon := clone;
        }.
        
        Global Instance ℐ : core.clone.Clone.Required.Trait Self := {
          core.clone.Clone.clone := clone;
          core.clone.Clone.clone_from := Datatypes.None;
        }.
      End Impl_core_clone_Clone_for_libc_unix_linux_like_linux_fanout_args_t.
      End Impl_core_clone_Clone_for_libc_unix_linux_like_linux_fanout_args_t.
      
      Module  packet_mreq.
      Section packet_mreq.
        Record t : Set := {
          mr_ifindex : ltac:(libc.unix.c_int);
          mr_type : ltac:(libc.unix.c_ushort);
          mr_alen : ltac:(libc.unix.c_ushort);
          mr_address : array ltac:(libc.unix.c_uchar);
        }.
        
        Definition Get_mr_ifindex :=
          Ref.map
            (fun α => Some α.(mr_ifindex))
            (fun β α => Some (α <| mr_ifindex := β |>)).
        Definition Get_mr_type :=
          Ref.map
            (fun α => Some α.(mr_type))
            (fun β α => Some (α <| mr_type := β |>)).
        Definition Get_mr_alen :=
          Ref.map
            (fun α => Some α.(mr_alen))
            (fun β α => Some (α <| mr_alen := β |>)).
        Definition Get_mr_address :=
          Ref.map
            (fun α => Some α.(mr_address))
            (fun β α => Some (α <| mr_address := β |>)).
      End packet_mreq.
      End packet_mreq.
      
      Module  Impl_core_marker_Copy_for_libc_unix_linux_like_linux_packet_mreq_t.
      Section Impl_core_marker_Copy_for_libc_unix_linux_like_linux_packet_mreq_t.
        Definition Self : Set := libc.unix.linux_like.linux.packet_mreq.t.
        
        Global Instance ℐ : core.marker.Copy.Trait Self := {
        }.
      End Impl_core_marker_Copy_for_libc_unix_linux_like_linux_packet_mreq_t.
      End Impl_core_marker_Copy_for_libc_unix_linux_like_linux_packet_mreq_t.
      
      Module  Impl_core_clone_Clone_for_libc_unix_linux_like_linux_packet_mreq_t.
      Section Impl_core_clone_Clone_for_libc_unix_linux_like_linux_packet_mreq_t.
        Definition Self : Set := libc.unix.linux_like.linux.packet_mreq.t.
        
        (*
                    fn clone(&self) -> $i { *self }
        *)
        Definition clone
            (self : ref Self)
            : M libc.unix.linux_like.linux.packet_mreq.t :=
          let* self := M.alloc self in
          let* α0 : ref libc.unix.linux_like.linux.packet_mreq.t :=
            M.read self in
          M.read (deref α0).
        
        Global Instance AssociatedFunction_clone :
          Notations.DoubleColon Self "clone" := {
          Notations.double_colon := clone;
        }.
        
        Global Instance ℐ : core.clone.Clone.Required.Trait Self := {
          core.clone.Clone.clone := clone;
          core.clone.Clone.clone_from := Datatypes.None;
        }.
      End Impl_core_clone_Clone_for_libc_unix_linux_like_linux_packet_mreq_t.
      End Impl_core_clone_Clone_for_libc_unix_linux_like_linux_packet_mreq_t.
      
      Module  sockaddr_pkt.
      Section sockaddr_pkt.
        Record t : Set := {
          spkt_family : ltac:(libc.unix.c_ushort);
          spkt_device : array ltac:(libc.unix.c_uchar);
          spkt_protocol : ltac:(libc.unix.c_ushort);
        }.
        
        Definition Get_spkt_family :=
          Ref.map
            (fun α => Some α.(spkt_family))
            (fun β α => Some (α <| spkt_family := β |>)).
        Definition Get_spkt_device :=
          Ref.map
            (fun α => Some α.(spkt_device))
            (fun β α => Some (α <| spkt_device := β |>)).
        Definition Get_spkt_protocol :=
          Ref.map
            (fun α => Some α.(spkt_protocol))
            (fun β α => Some (α <| spkt_protocol := β |>)).
      End sockaddr_pkt.
      End sockaddr_pkt.
      
      Module  Impl_core_marker_Copy_for_libc_unix_linux_like_linux_sockaddr_pkt_t.
      Section Impl_core_marker_Copy_for_libc_unix_linux_like_linux_sockaddr_pkt_t.
        Definition Self : Set := libc.unix.linux_like.linux.sockaddr_pkt.t.
        
        Global Instance ℐ : core.marker.Copy.Trait Self := {
        }.
      End Impl_core_marker_Copy_for_libc_unix_linux_like_linux_sockaddr_pkt_t.
      End Impl_core_marker_Copy_for_libc_unix_linux_like_linux_sockaddr_pkt_t.
      
      Module  Impl_core_clone_Clone_for_libc_unix_linux_like_linux_sockaddr_pkt_t.
      Section Impl_core_clone_Clone_for_libc_unix_linux_like_linux_sockaddr_pkt_t.
        Definition Self : Set := libc.unix.linux_like.linux.sockaddr_pkt.t.
        
        (*
                    fn clone(&self) -> $i { *self }
        *)
        Definition clone
            (self : ref Self)
            : M libc.unix.linux_like.linux.sockaddr_pkt.t :=
          let* self := M.alloc self in
          let* α0 : ref libc.unix.linux_like.linux.sockaddr_pkt.t :=
            M.read self in
          M.read (deref α0).
        
        Global Instance AssociatedFunction_clone :
          Notations.DoubleColon Self "clone" := {
          Notations.double_colon := clone;
        }.
        
        Global Instance ℐ : core.clone.Clone.Required.Trait Self := {
          core.clone.Clone.clone := clone;
          core.clone.Clone.clone_from := Datatypes.None;
        }.
      End Impl_core_clone_Clone_for_libc_unix_linux_like_linux_sockaddr_pkt_t.
      End Impl_core_clone_Clone_for_libc_unix_linux_like_linux_sockaddr_pkt_t.
      
      Module  tpacket_auxdata.
      Section tpacket_auxdata.
        Record t : Set := {
          tp_status : ltac:(libc.unix.linux_like.linux.__u32);
          tp_len : ltac:(libc.unix.linux_like.linux.__u32);
          tp_snaplen : ltac:(libc.unix.linux_like.linux.__u32);
          tp_mac : ltac:(libc.unix.linux_like.linux.__u16);
          tp_net : ltac:(libc.unix.linux_like.linux.__u16);
          tp_vlan_tci : ltac:(libc.unix.linux_like.linux.__u16);
          tp_vlan_tpid : ltac:(libc.unix.linux_like.linux.__u16);
        }.
        
        Definition Get_tp_status :=
          Ref.map
            (fun α => Some α.(tp_status))
            (fun β α => Some (α <| tp_status := β |>)).
        Definition Get_tp_len :=
          Ref.map
            (fun α => Some α.(tp_len))
            (fun β α => Some (α <| tp_len := β |>)).
        Definition Get_tp_snaplen :=
          Ref.map
            (fun α => Some α.(tp_snaplen))
            (fun β α => Some (α <| tp_snaplen := β |>)).
        Definition Get_tp_mac :=
          Ref.map
            (fun α => Some α.(tp_mac))
            (fun β α => Some (α <| tp_mac := β |>)).
        Definition Get_tp_net :=
          Ref.map
            (fun α => Some α.(tp_net))
            (fun β α => Some (α <| tp_net := β |>)).
        Definition Get_tp_vlan_tci :=
          Ref.map
            (fun α => Some α.(tp_vlan_tci))
            (fun β α => Some (α <| tp_vlan_tci := β |>)).
        Definition Get_tp_vlan_tpid :=
          Ref.map
            (fun α => Some α.(tp_vlan_tpid))
            (fun β α => Some (α <| tp_vlan_tpid := β |>)).
      End tpacket_auxdata.
      End tpacket_auxdata.
      
      Module  Impl_core_marker_Copy_for_libc_unix_linux_like_linux_tpacket_auxdata_t.
      Section Impl_core_marker_Copy_for_libc_unix_linux_like_linux_tpacket_auxdata_t.
        Definition Self : Set := libc.unix.linux_like.linux.tpacket_auxdata.t.
        
        Global Instance ℐ : core.marker.Copy.Trait Self := {
        }.
      End Impl_core_marker_Copy_for_libc_unix_linux_like_linux_tpacket_auxdata_t.
      End Impl_core_marker_Copy_for_libc_unix_linux_like_linux_tpacket_auxdata_t.
      
      Module  Impl_core_clone_Clone_for_libc_unix_linux_like_linux_tpacket_auxdata_t.
      Section Impl_core_clone_Clone_for_libc_unix_linux_like_linux_tpacket_auxdata_t.
        Definition Self : Set := libc.unix.linux_like.linux.tpacket_auxdata.t.
        
        (*
                    fn clone(&self) -> $i { *self }
        *)
        Definition clone
            (self : ref Self)
            : M libc.unix.linux_like.linux.tpacket_auxdata.t :=
          let* self := M.alloc self in
          let* α0 : ref libc.unix.linux_like.linux.tpacket_auxdata.t :=
            M.read self in
          M.read (deref α0).
        
        Global Instance AssociatedFunction_clone :
          Notations.DoubleColon Self "clone" := {
          Notations.double_colon := clone;
        }.
        
        Global Instance ℐ : core.clone.Clone.Required.Trait Self := {
          core.clone.Clone.clone := clone;
          core.clone.Clone.clone_from := Datatypes.None;
        }.
      End Impl_core_clone_Clone_for_libc_unix_linux_like_linux_tpacket_auxdata_t.
      End Impl_core_clone_Clone_for_libc_unix_linux_like_linux_tpacket_auxdata_t.
      
      Module  tpacket_hdr.
      Section tpacket_hdr.
        Record t : Set := {
          tp_status :
            ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_ulong);
          tp_len : ltac:(libc.unix.c_uint);
          tp_snaplen : ltac:(libc.unix.c_uint);
          tp_mac : ltac:(libc.unix.c_ushort);
          tp_net : ltac:(libc.unix.c_ushort);
          tp_sec : ltac:(libc.unix.c_uint);
          tp_usec : ltac:(libc.unix.c_uint);
        }.
        
        Definition Get_tp_status :=
          Ref.map
            (fun α => Some α.(tp_status))
            (fun β α => Some (α <| tp_status := β |>)).
        Definition Get_tp_len :=
          Ref.map
            (fun α => Some α.(tp_len))
            (fun β α => Some (α <| tp_len := β |>)).
        Definition Get_tp_snaplen :=
          Ref.map
            (fun α => Some α.(tp_snaplen))
            (fun β α => Some (α <| tp_snaplen := β |>)).
        Definition Get_tp_mac :=
          Ref.map
            (fun α => Some α.(tp_mac))
            (fun β α => Some (α <| tp_mac := β |>)).
        Definition Get_tp_net :=
          Ref.map
            (fun α => Some α.(tp_net))
            (fun β α => Some (α <| tp_net := β |>)).
        Definition Get_tp_sec :=
          Ref.map
            (fun α => Some α.(tp_sec))
            (fun β α => Some (α <| tp_sec := β |>)).
        Definition Get_tp_usec :=
          Ref.map
            (fun α => Some α.(tp_usec))
            (fun β α => Some (α <| tp_usec := β |>)).
      End tpacket_hdr.
      End tpacket_hdr.
      
      Module  Impl_core_marker_Copy_for_libc_unix_linux_like_linux_tpacket_hdr_t.
      Section Impl_core_marker_Copy_for_libc_unix_linux_like_linux_tpacket_hdr_t.
        Definition Self : Set := libc.unix.linux_like.linux.tpacket_hdr.t.
        
        Global Instance ℐ : core.marker.Copy.Trait Self := {
        }.
      End Impl_core_marker_Copy_for_libc_unix_linux_like_linux_tpacket_hdr_t.
      End Impl_core_marker_Copy_for_libc_unix_linux_like_linux_tpacket_hdr_t.
      
      Module  Impl_core_clone_Clone_for_libc_unix_linux_like_linux_tpacket_hdr_t.
      Section Impl_core_clone_Clone_for_libc_unix_linux_like_linux_tpacket_hdr_t.
        Definition Self : Set := libc.unix.linux_like.linux.tpacket_hdr.t.
        
        (*
                    fn clone(&self) -> $i { *self }
        *)
        Definition clone
            (self : ref Self)
            : M libc.unix.linux_like.linux.tpacket_hdr.t :=
          let* self := M.alloc self in
          let* α0 : ref libc.unix.linux_like.linux.tpacket_hdr.t :=
            M.read self in
          M.read (deref α0).
        
        Global Instance AssociatedFunction_clone :
          Notations.DoubleColon Self "clone" := {
          Notations.double_colon := clone;
        }.
        
        Global Instance ℐ : core.clone.Clone.Required.Trait Self := {
          core.clone.Clone.clone := clone;
          core.clone.Clone.clone_from := Datatypes.None;
        }.
      End Impl_core_clone_Clone_for_libc_unix_linux_like_linux_tpacket_hdr_t.
      End Impl_core_clone_Clone_for_libc_unix_linux_like_linux_tpacket_hdr_t.
      
      Module  tpacket_hdr_variant1.
      Section tpacket_hdr_variant1.
        Record t : Set := {
          tp_rxhash : ltac:(libc.unix.linux_like.linux.__u32);
          tp_vlan_tci : ltac:(libc.unix.linux_like.linux.__u32);
          tp_vlan_tpid : ltac:(libc.unix.linux_like.linux.__u16);
          tp_padding : ltac:(libc.unix.linux_like.linux.__u16);
        }.
        
        Definition Get_tp_rxhash :=
          Ref.map
            (fun α => Some α.(tp_rxhash))
            (fun β α => Some (α <| tp_rxhash := β |>)).
        Definition Get_tp_vlan_tci :=
          Ref.map
            (fun α => Some α.(tp_vlan_tci))
            (fun β α => Some (α <| tp_vlan_tci := β |>)).
        Definition Get_tp_vlan_tpid :=
          Ref.map
            (fun α => Some α.(tp_vlan_tpid))
            (fun β α => Some (α <| tp_vlan_tpid := β |>)).
        Definition Get_tp_padding :=
          Ref.map
            (fun α => Some α.(tp_padding))
            (fun β α => Some (α <| tp_padding := β |>)).
      End tpacket_hdr_variant1.
      End tpacket_hdr_variant1.
      
      Module  Impl_core_marker_Copy_for_libc_unix_linux_like_linux_tpacket_hdr_variant1_t.
      Section Impl_core_marker_Copy_for_libc_unix_linux_like_linux_tpacket_hdr_variant1_t.
        Definition Self : Set :=
          libc.unix.linux_like.linux.tpacket_hdr_variant1.t.
        
        Global Instance ℐ : core.marker.Copy.Trait Self := {
        }.
      End Impl_core_marker_Copy_for_libc_unix_linux_like_linux_tpacket_hdr_variant1_t.
      End Impl_core_marker_Copy_for_libc_unix_linux_like_linux_tpacket_hdr_variant1_t.
      
      Module  Impl_core_clone_Clone_for_libc_unix_linux_like_linux_tpacket_hdr_variant1_t.
      Section Impl_core_clone_Clone_for_libc_unix_linux_like_linux_tpacket_hdr_variant1_t.
        Definition Self : Set :=
          libc.unix.linux_like.linux.tpacket_hdr_variant1.t.
        
        (*
                    fn clone(&self) -> $i { *self }
        *)
        Definition clone
            (self : ref Self)
            : M libc.unix.linux_like.linux.tpacket_hdr_variant1.t :=
          let* self := M.alloc self in
          let* α0 : ref libc.unix.linux_like.linux.tpacket_hdr_variant1.t :=
            M.read self in
          M.read (deref α0).
        
        Global Instance AssociatedFunction_clone :
          Notations.DoubleColon Self "clone" := {
          Notations.double_colon := clone;
        }.
        
        Global Instance ℐ : core.clone.Clone.Required.Trait Self := {
          core.clone.Clone.clone := clone;
          core.clone.Clone.clone_from := Datatypes.None;
        }.
      End Impl_core_clone_Clone_for_libc_unix_linux_like_linux_tpacket_hdr_variant1_t.
      End Impl_core_clone_Clone_for_libc_unix_linux_like_linux_tpacket_hdr_variant1_t.
      
      Module  tpacket2_hdr.
      Section tpacket2_hdr.
        Record t : Set := {
          tp_status : ltac:(libc.unix.linux_like.linux.__u32);
          tp_len : ltac:(libc.unix.linux_like.linux.__u32);
          tp_snaplen : ltac:(libc.unix.linux_like.linux.__u32);
          tp_mac : ltac:(libc.unix.linux_like.linux.__u16);
          tp_net : ltac:(libc.unix.linux_like.linux.__u16);
          tp_sec : ltac:(libc.unix.linux_like.linux.__u32);
          tp_nsec : ltac:(libc.unix.linux_like.linux.__u32);
          tp_vlan_tci : ltac:(libc.unix.linux_like.linux.__u16);
          tp_vlan_tpid : ltac:(libc.unix.linux_like.linux.__u16);
          tp_padding : array ltac:(libc.unix.linux_like.linux.__u8);
        }.
        
        Definition Get_tp_status :=
          Ref.map
            (fun α => Some α.(tp_status))
            (fun β α => Some (α <| tp_status := β |>)).
        Definition Get_tp_len :=
          Ref.map
            (fun α => Some α.(tp_len))
            (fun β α => Some (α <| tp_len := β |>)).
        Definition Get_tp_snaplen :=
          Ref.map
            (fun α => Some α.(tp_snaplen))
            (fun β α => Some (α <| tp_snaplen := β |>)).
        Definition Get_tp_mac :=
          Ref.map
            (fun α => Some α.(tp_mac))
            (fun β α => Some (α <| tp_mac := β |>)).
        Definition Get_tp_net :=
          Ref.map
            (fun α => Some α.(tp_net))
            (fun β α => Some (α <| tp_net := β |>)).
        Definition Get_tp_sec :=
          Ref.map
            (fun α => Some α.(tp_sec))
            (fun β α => Some (α <| tp_sec := β |>)).
        Definition Get_tp_nsec :=
          Ref.map
            (fun α => Some α.(tp_nsec))
            (fun β α => Some (α <| tp_nsec := β |>)).
        Definition Get_tp_vlan_tci :=
          Ref.map
            (fun α => Some α.(tp_vlan_tci))
            (fun β α => Some (α <| tp_vlan_tci := β |>)).
        Definition Get_tp_vlan_tpid :=
          Ref.map
            (fun α => Some α.(tp_vlan_tpid))
            (fun β α => Some (α <| tp_vlan_tpid := β |>)).
        Definition Get_tp_padding :=
          Ref.map
            (fun α => Some α.(tp_padding))
            (fun β α => Some (α <| tp_padding := β |>)).
      End tpacket2_hdr.
      End tpacket2_hdr.
      
      Module  Impl_core_marker_Copy_for_libc_unix_linux_like_linux_tpacket2_hdr_t.
      Section Impl_core_marker_Copy_for_libc_unix_linux_like_linux_tpacket2_hdr_t.
        Definition Self : Set := libc.unix.linux_like.linux.tpacket2_hdr.t.
        
        Global Instance ℐ : core.marker.Copy.Trait Self := {
        }.
      End Impl_core_marker_Copy_for_libc_unix_linux_like_linux_tpacket2_hdr_t.
      End Impl_core_marker_Copy_for_libc_unix_linux_like_linux_tpacket2_hdr_t.
      
      Module  Impl_core_clone_Clone_for_libc_unix_linux_like_linux_tpacket2_hdr_t.
      Section Impl_core_clone_Clone_for_libc_unix_linux_like_linux_tpacket2_hdr_t.
        Definition Self : Set := libc.unix.linux_like.linux.tpacket2_hdr.t.
        
        (*
                    fn clone(&self) -> $i { *self }
        *)
        Definition clone
            (self : ref Self)
            : M libc.unix.linux_like.linux.tpacket2_hdr.t :=
          let* self := M.alloc self in
          let* α0 : ref libc.unix.linux_like.linux.tpacket2_hdr.t :=
            M.read self in
          M.read (deref α0).
        
        Global Instance AssociatedFunction_clone :
          Notations.DoubleColon Self "clone" := {
          Notations.double_colon := clone;
        }.
        
        Global Instance ℐ : core.clone.Clone.Required.Trait Self := {
          core.clone.Clone.clone := clone;
          core.clone.Clone.clone_from := Datatypes.None;
        }.
      End Impl_core_clone_Clone_for_libc_unix_linux_like_linux_tpacket2_hdr_t.
      End Impl_core_clone_Clone_for_libc_unix_linux_like_linux_tpacket2_hdr_t.
      
      Module  tpacket_req.
      Section tpacket_req.
        Record t : Set := {
          tp_block_size : ltac:(libc.unix.c_uint);
          tp_block_nr : ltac:(libc.unix.c_uint);
          tp_frame_size : ltac:(libc.unix.c_uint);
          tp_frame_nr : ltac:(libc.unix.c_uint);
        }.
        
        Definition Get_tp_block_size :=
          Ref.map
            (fun α => Some α.(tp_block_size))
            (fun β α => Some (α <| tp_block_size := β |>)).
        Definition Get_tp_block_nr :=
          Ref.map
            (fun α => Some α.(tp_block_nr))
            (fun β α => Some (α <| tp_block_nr := β |>)).
        Definition Get_tp_frame_size :=
          Ref.map
            (fun α => Some α.(tp_frame_size))
            (fun β α => Some (α <| tp_frame_size := β |>)).
        Definition Get_tp_frame_nr :=
          Ref.map
            (fun α => Some α.(tp_frame_nr))
            (fun β α => Some (α <| tp_frame_nr := β |>)).
      End tpacket_req.
      End tpacket_req.
      
      Module  Impl_core_marker_Copy_for_libc_unix_linux_like_linux_tpacket_req_t.
      Section Impl_core_marker_Copy_for_libc_unix_linux_like_linux_tpacket_req_t.
        Definition Self : Set := libc.unix.linux_like.linux.tpacket_req.t.
        
        Global Instance ℐ : core.marker.Copy.Trait Self := {
        }.
      End Impl_core_marker_Copy_for_libc_unix_linux_like_linux_tpacket_req_t.
      End Impl_core_marker_Copy_for_libc_unix_linux_like_linux_tpacket_req_t.
      
      Module  Impl_core_clone_Clone_for_libc_unix_linux_like_linux_tpacket_req_t.
      Section Impl_core_clone_Clone_for_libc_unix_linux_like_linux_tpacket_req_t.
        Definition Self : Set := libc.unix.linux_like.linux.tpacket_req.t.
        
        (*
                    fn clone(&self) -> $i { *self }
        *)
        Definition clone
            (self : ref Self)
            : M libc.unix.linux_like.linux.tpacket_req.t :=
          let* self := M.alloc self in
          let* α0 : ref libc.unix.linux_like.linux.tpacket_req.t :=
            M.read self in
          M.read (deref α0).
        
        Global Instance AssociatedFunction_clone :
          Notations.DoubleColon Self "clone" := {
          Notations.double_colon := clone;
        }.
        
        Global Instance ℐ : core.clone.Clone.Required.Trait Self := {
          core.clone.Clone.clone := clone;
          core.clone.Clone.clone_from := Datatypes.None;
        }.
      End Impl_core_clone_Clone_for_libc_unix_linux_like_linux_tpacket_req_t.
      End Impl_core_clone_Clone_for_libc_unix_linux_like_linux_tpacket_req_t.
      
      Module  tpacket_req3.
      Section tpacket_req3.
        Record t : Set := {
          tp_block_size : ltac:(libc.unix.c_uint);
          tp_block_nr : ltac:(libc.unix.c_uint);
          tp_frame_size : ltac:(libc.unix.c_uint);
          tp_frame_nr : ltac:(libc.unix.c_uint);
          tp_retire_blk_tov : ltac:(libc.unix.c_uint);
          tp_sizeof_priv : ltac:(libc.unix.c_uint);
          tp_feature_req_word : ltac:(libc.unix.c_uint);
        }.
        
        Definition Get_tp_block_size :=
          Ref.map
            (fun α => Some α.(tp_block_size))
            (fun β α => Some (α <| tp_block_size := β |>)).
        Definition Get_tp_block_nr :=
          Ref.map
            (fun α => Some α.(tp_block_nr))
            (fun β α => Some (α <| tp_block_nr := β |>)).
        Definition Get_tp_frame_size :=
          Ref.map
            (fun α => Some α.(tp_frame_size))
            (fun β α => Some (α <| tp_frame_size := β |>)).
        Definition Get_tp_frame_nr :=
          Ref.map
            (fun α => Some α.(tp_frame_nr))
            (fun β α => Some (α <| tp_frame_nr := β |>)).
        Definition Get_tp_retire_blk_tov :=
          Ref.map
            (fun α => Some α.(tp_retire_blk_tov))
            (fun β α => Some (α <| tp_retire_blk_tov := β |>)).
        Definition Get_tp_sizeof_priv :=
          Ref.map
            (fun α => Some α.(tp_sizeof_priv))
            (fun β α => Some (α <| tp_sizeof_priv := β |>)).
        Definition Get_tp_feature_req_word :=
          Ref.map
            (fun α => Some α.(tp_feature_req_word))
            (fun β α => Some (α <| tp_feature_req_word := β |>)).
      End tpacket_req3.
      End tpacket_req3.
      
      Module  Impl_core_marker_Copy_for_libc_unix_linux_like_linux_tpacket_req3_t.
      Section Impl_core_marker_Copy_for_libc_unix_linux_like_linux_tpacket_req3_t.
        Definition Self : Set := libc.unix.linux_like.linux.tpacket_req3.t.
        
        Global Instance ℐ : core.marker.Copy.Trait Self := {
        }.
      End Impl_core_marker_Copy_for_libc_unix_linux_like_linux_tpacket_req3_t.
      End Impl_core_marker_Copy_for_libc_unix_linux_like_linux_tpacket_req3_t.
      
      Module  Impl_core_clone_Clone_for_libc_unix_linux_like_linux_tpacket_req3_t.
      Section Impl_core_clone_Clone_for_libc_unix_linux_like_linux_tpacket_req3_t.
        Definition Self : Set := libc.unix.linux_like.linux.tpacket_req3.t.
        
        (*
                    fn clone(&self) -> $i { *self }
        *)
        Definition clone
            (self : ref Self)
            : M libc.unix.linux_like.linux.tpacket_req3.t :=
          let* self := M.alloc self in
          let* α0 : ref libc.unix.linux_like.linux.tpacket_req3.t :=
            M.read self in
          M.read (deref α0).
        
        Global Instance AssociatedFunction_clone :
          Notations.DoubleColon Self "clone" := {
          Notations.double_colon := clone;
        }.
        
        Global Instance ℐ : core.clone.Clone.Required.Trait Self := {
          core.clone.Clone.clone := clone;
          core.clone.Clone.clone_from := Datatypes.None;
        }.
      End Impl_core_clone_Clone_for_libc_unix_linux_like_linux_tpacket_req3_t.
      End Impl_core_clone_Clone_for_libc_unix_linux_like_linux_tpacket_req3_t.
      
      Module  tpacket_rollover_stats.
      Section tpacket_rollover_stats.
        Record t : Set := {
          tp_all : ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.__u64);
          tp_huge : ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.__u64);
          tp_failed : ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.__u64);
        }.
        
        Definition Get_tp_all :=
          Ref.map
            (fun α => Some α.(tp_all))
            (fun β α => Some (α <| tp_all := β |>)).
        Definition Get_tp_huge :=
          Ref.map
            (fun α => Some α.(tp_huge))
            (fun β α => Some (α <| tp_huge := β |>)).
        Definition Get_tp_failed :=
          Ref.map
            (fun α => Some α.(tp_failed))
            (fun β α => Some (α <| tp_failed := β |>)).
      End tpacket_rollover_stats.
      End tpacket_rollover_stats.
      
      Module  Impl_core_marker_Copy_for_libc_unix_linux_like_linux_tpacket_rollover_stats_t.
      Section Impl_core_marker_Copy_for_libc_unix_linux_like_linux_tpacket_rollover_stats_t.
        Definition Self : Set :=
          libc.unix.linux_like.linux.tpacket_rollover_stats.t.
        
        Global Instance ℐ : core.marker.Copy.Trait Self := {
        }.
      End Impl_core_marker_Copy_for_libc_unix_linux_like_linux_tpacket_rollover_stats_t.
      End Impl_core_marker_Copy_for_libc_unix_linux_like_linux_tpacket_rollover_stats_t.
      
      Module  Impl_core_clone_Clone_for_libc_unix_linux_like_linux_tpacket_rollover_stats_t.
      Section Impl_core_clone_Clone_for_libc_unix_linux_like_linux_tpacket_rollover_stats_t.
        Definition Self : Set :=
          libc.unix.linux_like.linux.tpacket_rollover_stats.t.
        
        (*
                    fn clone(&self) -> $i { *self }
        *)
        Definition clone
            (self : ref Self)
            : M libc.unix.linux_like.linux.tpacket_rollover_stats.t :=
          let* self := M.alloc self in
          let* α0 : ref libc.unix.linux_like.linux.tpacket_rollover_stats.t :=
            M.read self in
          M.read (deref α0).
        
        Global Instance AssociatedFunction_clone :
          Notations.DoubleColon Self "clone" := {
          Notations.double_colon := clone;
        }.
        
        Global Instance ℐ : core.clone.Clone.Required.Trait Self := {
          core.clone.Clone.clone := clone;
          core.clone.Clone.clone_from := Datatypes.None;
        }.
      End Impl_core_clone_Clone_for_libc_unix_linux_like_linux_tpacket_rollover_stats_t.
      End Impl_core_clone_Clone_for_libc_unix_linux_like_linux_tpacket_rollover_stats_t.
      
      Module  tpacket_stats.
      Section tpacket_stats.
        Record t : Set := {
          tp_packets : ltac:(libc.unix.c_uint);
          tp_drops : ltac:(libc.unix.c_uint);
        }.
        
        Definition Get_tp_packets :=
          Ref.map
            (fun α => Some α.(tp_packets))
            (fun β α => Some (α <| tp_packets := β |>)).
        Definition Get_tp_drops :=
          Ref.map
            (fun α => Some α.(tp_drops))
            (fun β α => Some (α <| tp_drops := β |>)).
      End tpacket_stats.
      End tpacket_stats.
      
      Module  Impl_core_marker_Copy_for_libc_unix_linux_like_linux_tpacket_stats_t.
      Section Impl_core_marker_Copy_for_libc_unix_linux_like_linux_tpacket_stats_t.
        Definition Self : Set := libc.unix.linux_like.linux.tpacket_stats.t.
        
        Global Instance ℐ : core.marker.Copy.Trait Self := {
        }.
      End Impl_core_marker_Copy_for_libc_unix_linux_like_linux_tpacket_stats_t.
      End Impl_core_marker_Copy_for_libc_unix_linux_like_linux_tpacket_stats_t.
      
      Module  Impl_core_clone_Clone_for_libc_unix_linux_like_linux_tpacket_stats_t.
      Section Impl_core_clone_Clone_for_libc_unix_linux_like_linux_tpacket_stats_t.
        Definition Self : Set := libc.unix.linux_like.linux.tpacket_stats.t.
        
        (*
                    fn clone(&self) -> $i { *self }
        *)
        Definition clone
            (self : ref Self)
            : M libc.unix.linux_like.linux.tpacket_stats.t :=
          let* self := M.alloc self in
          let* α0 : ref libc.unix.linux_like.linux.tpacket_stats.t :=
            M.read self in
          M.read (deref α0).
        
        Global Instance AssociatedFunction_clone :
          Notations.DoubleColon Self "clone" := {
          Notations.double_colon := clone;
        }.
        
        Global Instance ℐ : core.clone.Clone.Required.Trait Self := {
          core.clone.Clone.clone := clone;
          core.clone.Clone.clone_from := Datatypes.None;
        }.
      End Impl_core_clone_Clone_for_libc_unix_linux_like_linux_tpacket_stats_t.
      End Impl_core_clone_Clone_for_libc_unix_linux_like_linux_tpacket_stats_t.
      
      Module  tpacket_stats_v3.
      Section tpacket_stats_v3.
        Record t : Set := {
          tp_packets : ltac:(libc.unix.c_uint);
          tp_drops : ltac:(libc.unix.c_uint);
          tp_freeze_q_cnt : ltac:(libc.unix.c_uint);
        }.
        
        Definition Get_tp_packets :=
          Ref.map
            (fun α => Some α.(tp_packets))
            (fun β α => Some (α <| tp_packets := β |>)).
        Definition Get_tp_drops :=
          Ref.map
            (fun α => Some α.(tp_drops))
            (fun β α => Some (α <| tp_drops := β |>)).
        Definition Get_tp_freeze_q_cnt :=
          Ref.map
            (fun α => Some α.(tp_freeze_q_cnt))
            (fun β α => Some (α <| tp_freeze_q_cnt := β |>)).
      End tpacket_stats_v3.
      End tpacket_stats_v3.
      
      Module  Impl_core_marker_Copy_for_libc_unix_linux_like_linux_tpacket_stats_v3_t.
      Section Impl_core_marker_Copy_for_libc_unix_linux_like_linux_tpacket_stats_v3_t.
        Definition Self : Set := libc.unix.linux_like.linux.tpacket_stats_v3.t.
        
        Global Instance ℐ : core.marker.Copy.Trait Self := {
        }.
      End Impl_core_marker_Copy_for_libc_unix_linux_like_linux_tpacket_stats_v3_t.
      End Impl_core_marker_Copy_for_libc_unix_linux_like_linux_tpacket_stats_v3_t.
      
      Module  Impl_core_clone_Clone_for_libc_unix_linux_like_linux_tpacket_stats_v3_t.
      Section Impl_core_clone_Clone_for_libc_unix_linux_like_linux_tpacket_stats_v3_t.
        Definition Self : Set := libc.unix.linux_like.linux.tpacket_stats_v3.t.
        
        (*
                    fn clone(&self) -> $i { *self }
        *)
        Definition clone
            (self : ref Self)
            : M libc.unix.linux_like.linux.tpacket_stats_v3.t :=
          let* self := M.alloc self in
          let* α0 : ref libc.unix.linux_like.linux.tpacket_stats_v3.t :=
            M.read self in
          M.read (deref α0).
        
        Global Instance AssociatedFunction_clone :
          Notations.DoubleColon Self "clone" := {
          Notations.double_colon := clone;
        }.
        
        Global Instance ℐ : core.clone.Clone.Required.Trait Self := {
          core.clone.Clone.clone := clone;
          core.clone.Clone.clone_from := Datatypes.None;
        }.
      End Impl_core_clone_Clone_for_libc_unix_linux_like_linux_tpacket_stats_v3_t.
      End Impl_core_clone_Clone_for_libc_unix_linux_like_linux_tpacket_stats_v3_t.
      
      Module  tpacket3_hdr.
      Section tpacket3_hdr.
        Record t : Set := {
          tp_next_offset : ltac:(libc.unix.linux_like.linux.__u32);
          tp_sec : ltac:(libc.unix.linux_like.linux.__u32);
          tp_nsec : ltac:(libc.unix.linux_like.linux.__u32);
          tp_snaplen : ltac:(libc.unix.linux_like.linux.__u32);
          tp_len : ltac:(libc.unix.linux_like.linux.__u32);
          tp_status : ltac:(libc.unix.linux_like.linux.__u32);
          tp_mac : ltac:(libc.unix.linux_like.linux.__u16);
          tp_net : ltac:(libc.unix.linux_like.linux.__u16);
          hv1 : libc.unix.linux_like.linux.tpacket_hdr_variant1.t;
          tp_padding : array ltac:(libc.unix.linux_like.linux.__u8);
        }.
        
        Definition Get_tp_next_offset :=
          Ref.map
            (fun α => Some α.(tp_next_offset))
            (fun β α => Some (α <| tp_next_offset := β |>)).
        Definition Get_tp_sec :=
          Ref.map
            (fun α => Some α.(tp_sec))
            (fun β α => Some (α <| tp_sec := β |>)).
        Definition Get_tp_nsec :=
          Ref.map
            (fun α => Some α.(tp_nsec))
            (fun β α => Some (α <| tp_nsec := β |>)).
        Definition Get_tp_snaplen :=
          Ref.map
            (fun α => Some α.(tp_snaplen))
            (fun β α => Some (α <| tp_snaplen := β |>)).
        Definition Get_tp_len :=
          Ref.map
            (fun α => Some α.(tp_len))
            (fun β α => Some (α <| tp_len := β |>)).
        Definition Get_tp_status :=
          Ref.map
            (fun α => Some α.(tp_status))
            (fun β α => Some (α <| tp_status := β |>)).
        Definition Get_tp_mac :=
          Ref.map
            (fun α => Some α.(tp_mac))
            (fun β α => Some (α <| tp_mac := β |>)).
        Definition Get_tp_net :=
          Ref.map
            (fun α => Some α.(tp_net))
            (fun β α => Some (α <| tp_net := β |>)).
        Definition Get_hv1 :=
          Ref.map (fun α => Some α.(hv1)) (fun β α => Some (α <| hv1 := β |>)).
        Definition Get_tp_padding :=
          Ref.map
            (fun α => Some α.(tp_padding))
            (fun β α => Some (α <| tp_padding := β |>)).
      End tpacket3_hdr.
      End tpacket3_hdr.
      
      Module  Impl_core_marker_Copy_for_libc_unix_linux_like_linux_tpacket3_hdr_t.
      Section Impl_core_marker_Copy_for_libc_unix_linux_like_linux_tpacket3_hdr_t.
        Definition Self : Set := libc.unix.linux_like.linux.tpacket3_hdr.t.
        
        Global Instance ℐ : core.marker.Copy.Trait Self := {
        }.
      End Impl_core_marker_Copy_for_libc_unix_linux_like_linux_tpacket3_hdr_t.
      End Impl_core_marker_Copy_for_libc_unix_linux_like_linux_tpacket3_hdr_t.
      
      Module  Impl_core_clone_Clone_for_libc_unix_linux_like_linux_tpacket3_hdr_t.
      Section Impl_core_clone_Clone_for_libc_unix_linux_like_linux_tpacket3_hdr_t.
        Definition Self : Set := libc.unix.linux_like.linux.tpacket3_hdr.t.
        
        (*
                    fn clone(&self) -> $i { *self }
        *)
        Definition clone
            (self : ref Self)
            : M libc.unix.linux_like.linux.tpacket3_hdr.t :=
          let* self := M.alloc self in
          let* α0 : ref libc.unix.linux_like.linux.tpacket3_hdr.t :=
            M.read self in
          M.read (deref α0).
        
        Global Instance AssociatedFunction_clone :
          Notations.DoubleColon Self "clone" := {
          Notations.double_colon := clone;
        }.
        
        Global Instance ℐ : core.clone.Clone.Required.Trait Self := {
          core.clone.Clone.clone := clone;
          core.clone.Clone.clone_from := Datatypes.None;
        }.
      End Impl_core_clone_Clone_for_libc_unix_linux_like_linux_tpacket3_hdr_t.
      End Impl_core_clone_Clone_for_libc_unix_linux_like_linux_tpacket3_hdr_t.
      
      Module  tpacket_bd_ts.
      Section tpacket_bd_ts.
        Record t : Set := {
          ts_sec : ltac:(libc.unix.c_uint);
          ts_usec : ltac:(libc.unix.c_uint);
        }.
        
        Definition Get_ts_sec :=
          Ref.map
            (fun α => Some α.(ts_sec))
            (fun β α => Some (α <| ts_sec := β |>)).
        Definition Get_ts_usec :=
          Ref.map
            (fun α => Some α.(ts_usec))
            (fun β α => Some (α <| ts_usec := β |>)).
      End tpacket_bd_ts.
      End tpacket_bd_ts.
      
      Module  Impl_core_marker_Copy_for_libc_unix_linux_like_linux_tpacket_bd_ts_t.
      Section Impl_core_marker_Copy_for_libc_unix_linux_like_linux_tpacket_bd_ts_t.
        Definition Self : Set := libc.unix.linux_like.linux.tpacket_bd_ts.t.
        
        Global Instance ℐ : core.marker.Copy.Trait Self := {
        }.
      End Impl_core_marker_Copy_for_libc_unix_linux_like_linux_tpacket_bd_ts_t.
      End Impl_core_marker_Copy_for_libc_unix_linux_like_linux_tpacket_bd_ts_t.
      
      Module  Impl_core_clone_Clone_for_libc_unix_linux_like_linux_tpacket_bd_ts_t.
      Section Impl_core_clone_Clone_for_libc_unix_linux_like_linux_tpacket_bd_ts_t.
        Definition Self : Set := libc.unix.linux_like.linux.tpacket_bd_ts.t.
        
        (*
                    fn clone(&self) -> $i { *self }
        *)
        Definition clone
            (self : ref Self)
            : M libc.unix.linux_like.linux.tpacket_bd_ts.t :=
          let* self := M.alloc self in
          let* α0 : ref libc.unix.linux_like.linux.tpacket_bd_ts.t :=
            M.read self in
          M.read (deref α0).
        
        Global Instance AssociatedFunction_clone :
          Notations.DoubleColon Self "clone" := {
          Notations.double_colon := clone;
        }.
        
        Global Instance ℐ : core.clone.Clone.Required.Trait Self := {
          core.clone.Clone.clone := clone;
          core.clone.Clone.clone_from := Datatypes.None;
        }.
      End Impl_core_clone_Clone_for_libc_unix_linux_like_linux_tpacket_bd_ts_t.
      End Impl_core_clone_Clone_for_libc_unix_linux_like_linux_tpacket_bd_ts_t.
      
      Module  tpacket_hdr_v1.
      Section tpacket_hdr_v1.
        Record t : Set := {
          block_status : ltac:(libc.unix.linux_like.linux.__u32);
          num_pkts : ltac:(libc.unix.linux_like.linux.__u32);
          offset_to_first_pkt : ltac:(libc.unix.linux_like.linux.__u32);
          blk_len : ltac:(libc.unix.linux_like.linux.__u32);
          seq_num : ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.__u64);
          ts_first_pkt : libc.unix.linux_like.linux.tpacket_bd_ts.t;
          ts_last_pkt : libc.unix.linux_like.linux.tpacket_bd_ts.t;
        }.
        
        Definition Get_block_status :=
          Ref.map
            (fun α => Some α.(block_status))
            (fun β α => Some (α <| block_status := β |>)).
        Definition Get_num_pkts :=
          Ref.map
            (fun α => Some α.(num_pkts))
            (fun β α => Some (α <| num_pkts := β |>)).
        Definition Get_offset_to_first_pkt :=
          Ref.map
            (fun α => Some α.(offset_to_first_pkt))
            (fun β α => Some (α <| offset_to_first_pkt := β |>)).
        Definition Get_blk_len :=
          Ref.map
            (fun α => Some α.(blk_len))
            (fun β α => Some (α <| blk_len := β |>)).
        Definition Get_seq_num :=
          Ref.map
            (fun α => Some α.(seq_num))
            (fun β α => Some (α <| seq_num := β |>)).
        Definition Get_ts_first_pkt :=
          Ref.map
            (fun α => Some α.(ts_first_pkt))
            (fun β α => Some (α <| ts_first_pkt := β |>)).
        Definition Get_ts_last_pkt :=
          Ref.map
            (fun α => Some α.(ts_last_pkt))
            (fun β α => Some (α <| ts_last_pkt := β |>)).
      End tpacket_hdr_v1.
      End tpacket_hdr_v1.
      
      Module  Impl_core_marker_Copy_for_libc_unix_linux_like_linux_tpacket_hdr_v1_t.
      Section Impl_core_marker_Copy_for_libc_unix_linux_like_linux_tpacket_hdr_v1_t.
        Definition Self : Set := libc.unix.linux_like.linux.tpacket_hdr_v1.t.
        
        Global Instance ℐ : core.marker.Copy.Trait Self := {
        }.
      End Impl_core_marker_Copy_for_libc_unix_linux_like_linux_tpacket_hdr_v1_t.
      End Impl_core_marker_Copy_for_libc_unix_linux_like_linux_tpacket_hdr_v1_t.
      
      Module  Impl_core_clone_Clone_for_libc_unix_linux_like_linux_tpacket_hdr_v1_t.
      Section Impl_core_clone_Clone_for_libc_unix_linux_like_linux_tpacket_hdr_v1_t.
        Definition Self : Set := libc.unix.linux_like.linux.tpacket_hdr_v1.t.
        
        (*
                    fn clone(&self) -> $i { *self }
        *)
        Definition clone
            (self : ref Self)
            : M libc.unix.linux_like.linux.tpacket_hdr_v1.t :=
          let* self := M.alloc self in
          let* α0 : ref libc.unix.linux_like.linux.tpacket_hdr_v1.t :=
            M.read self in
          M.read (deref α0).
        
        Global Instance AssociatedFunction_clone :
          Notations.DoubleColon Self "clone" := {
          Notations.double_colon := clone;
        }.
        
        Global Instance ℐ : core.clone.Clone.Required.Trait Self := {
          core.clone.Clone.clone := clone;
          core.clone.Clone.clone_from := Datatypes.None;
        }.
      End Impl_core_clone_Clone_for_libc_unix_linux_like_linux_tpacket_hdr_v1_t.
      End Impl_core_clone_Clone_for_libc_unix_linux_like_linux_tpacket_hdr_v1_t.
      
      Module  cpu_set_t.
      Section cpu_set_t.
        Record t : Set := {
          bits : array u64.t;
        }.
        
        Definition Get_bits :=
          Ref.map
            (fun α => Some α.(bits))
            (fun β α => Some (α <| bits := β |>)).
      End cpu_set_t.
      End cpu_set_t.
      
      Module  Impl_core_marker_Copy_for_libc_unix_linux_like_linux_cpu_set_t_t.
      Section Impl_core_marker_Copy_for_libc_unix_linux_like_linux_cpu_set_t_t.
        Definition Self : Set := libc.unix.linux_like.linux.cpu_set_t.t.
        
        Global Instance ℐ : core.marker.Copy.Trait Self := {
        }.
      End Impl_core_marker_Copy_for_libc_unix_linux_like_linux_cpu_set_t_t.
      End Impl_core_marker_Copy_for_libc_unix_linux_like_linux_cpu_set_t_t.
      
      Module  Impl_core_clone_Clone_for_libc_unix_linux_like_linux_cpu_set_t_t.
      Section Impl_core_clone_Clone_for_libc_unix_linux_like_linux_cpu_set_t_t.
        Definition Self : Set := libc.unix.linux_like.linux.cpu_set_t.t.
        
        (*
                    fn clone(&self) -> $i { *self }
        *)
        Definition clone
            (self : ref Self)
            : M libc.unix.linux_like.linux.cpu_set_t.t :=
          let* self := M.alloc self in
          let* α0 : ref libc.unix.linux_like.linux.cpu_set_t.t := M.read self in
          M.read (deref α0).
        
        Global Instance AssociatedFunction_clone :
          Notations.DoubleColon Self "clone" := {
          Notations.double_colon := clone;
        }.
        
        Global Instance ℐ : core.clone.Clone.Required.Trait Self := {
          core.clone.Clone.clone := clone;
          core.clone.Clone.clone_from := Datatypes.None;
        }.
      End Impl_core_clone_Clone_for_libc_unix_linux_like_linux_cpu_set_t_t.
      End Impl_core_clone_Clone_for_libc_unix_linux_like_linux_cpu_set_t_t.
      
      Module  if_nameindex.
      Section if_nameindex.
        Record t : Set := {
          if_index : ltac:(libc.unix.c_uint);
          if_name :
            mut_ref ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.c_char);
        }.
        
        Definition Get_if_index :=
          Ref.map
            (fun α => Some α.(if_index))
            (fun β α => Some (α <| if_index := β |>)).
        Definition Get_if_name :=
          Ref.map
            (fun α => Some α.(if_name))
            (fun β α => Some (α <| if_name := β |>)).
      End if_nameindex.
      End if_nameindex.
      
      Module  Impl_core_marker_Copy_for_libc_unix_linux_like_linux_if_nameindex_t.
      Section Impl_core_marker_Copy_for_libc_unix_linux_like_linux_if_nameindex_t.
        Definition Self : Set := libc.unix.linux_like.linux.if_nameindex.t.
        
        Global Instance ℐ : core.marker.Copy.Trait Self := {
        }.
      End Impl_core_marker_Copy_for_libc_unix_linux_like_linux_if_nameindex_t.
      End Impl_core_marker_Copy_for_libc_unix_linux_like_linux_if_nameindex_t.
      
      Module  Impl_core_clone_Clone_for_libc_unix_linux_like_linux_if_nameindex_t.
      Section Impl_core_clone_Clone_for_libc_unix_linux_like_linux_if_nameindex_t.
        Definition Self : Set := libc.unix.linux_like.linux.if_nameindex.t.
        
        (*
                    fn clone(&self) -> $i { *self }
        *)
        Definition clone
            (self : ref Self)
            : M libc.unix.linux_like.linux.if_nameindex.t :=
          let* self := M.alloc self in
          let* α0 : ref libc.unix.linux_like.linux.if_nameindex.t :=
            M.read self in
          M.read (deref α0).
        
        Global Instance AssociatedFunction_clone :
          Notations.DoubleColon Self "clone" := {
          Notations.double_colon := clone;
        }.
        
        Global Instance ℐ : core.clone.Clone.Required.Trait Self := {
          core.clone.Clone.clone := clone;
          core.clone.Clone.clone_from := Datatypes.None;
        }.
      End Impl_core_clone_Clone_for_libc_unix_linux_like_linux_if_nameindex_t.
      End Impl_core_clone_Clone_for_libc_unix_linux_like_linux_if_nameindex_t.
      
      Module  msginfo.
      Section msginfo.
        Record t : Set := {
          msgpool : ltac:(libc.unix.c_int);
          msgmap : ltac:(libc.unix.c_int);
          msgmax : ltac:(libc.unix.c_int);
          msgmnb : ltac:(libc.unix.c_int);
          msgmni : ltac:(libc.unix.c_int);
          msgssz : ltac:(libc.unix.c_int);
          msgtql : ltac:(libc.unix.c_int);
          msgseg : ltac:(libc.unix.c_ushort);
        }.
        
        Definition Get_msgpool :=
          Ref.map
            (fun α => Some α.(msgpool))
            (fun β α => Some (α <| msgpool := β |>)).
        Definition Get_msgmap :=
          Ref.map
            (fun α => Some α.(msgmap))
            (fun β α => Some (α <| msgmap := β |>)).
        Definition Get_msgmax :=
          Ref.map
            (fun α => Some α.(msgmax))
            (fun β α => Some (α <| msgmax := β |>)).
        Definition Get_msgmnb :=
          Ref.map
            (fun α => Some α.(msgmnb))
            (fun β α => Some (α <| msgmnb := β |>)).
        Definition Get_msgmni :=
          Ref.map
            (fun α => Some α.(msgmni))
            (fun β α => Some (α <| msgmni := β |>)).
        Definition Get_msgssz :=
          Ref.map
            (fun α => Some α.(msgssz))
            (fun β α => Some (α <| msgssz := β |>)).
        Definition Get_msgtql :=
          Ref.map
            (fun α => Some α.(msgtql))
            (fun β α => Some (α <| msgtql := β |>)).
        Definition Get_msgseg :=
          Ref.map
            (fun α => Some α.(msgseg))
            (fun β α => Some (α <| msgseg := β |>)).
      End msginfo.
      End msginfo.
      
      Module  Impl_core_marker_Copy_for_libc_unix_linux_like_linux_msginfo_t.
      Section Impl_core_marker_Copy_for_libc_unix_linux_like_linux_msginfo_t.
        Definition Self : Set := libc.unix.linux_like.linux.msginfo.t.
        
        Global Instance ℐ : core.marker.Copy.Trait Self := {
        }.
      End Impl_core_marker_Copy_for_libc_unix_linux_like_linux_msginfo_t.
      End Impl_core_marker_Copy_for_libc_unix_linux_like_linux_msginfo_t.
      
      Module  Impl_core_clone_Clone_for_libc_unix_linux_like_linux_msginfo_t.
      Section Impl_core_clone_Clone_for_libc_unix_linux_like_linux_msginfo_t.
        Definition Self : Set := libc.unix.linux_like.linux.msginfo.t.
        
        (*
                    fn clone(&self) -> $i { *self }
        *)
        Definition clone
            (self : ref Self)
            : M libc.unix.linux_like.linux.msginfo.t :=
          let* self := M.alloc self in
          let* α0 : ref libc.unix.linux_like.linux.msginfo.t := M.read self in
          M.read (deref α0).
        
        Global Instance AssociatedFunction_clone :
          Notations.DoubleColon Self "clone" := {
          Notations.double_colon := clone;
        }.
        
        Global Instance ℐ : core.clone.Clone.Required.Trait Self := {
          core.clone.Clone.clone := clone;
          core.clone.Clone.clone_from := Datatypes.None;
        }.
      End Impl_core_clone_Clone_for_libc_unix_linux_like_linux_msginfo_t.
      End Impl_core_clone_Clone_for_libc_unix_linux_like_linux_msginfo_t.
      
      Module  sembuf.
      Section sembuf.
        Record t : Set := {
          sem_num : ltac:(libc.unix.c_ushort);
          sem_op : ltac:(libc.unix.c_short);
          sem_flg : ltac:(libc.unix.c_short);
        }.
        
        Definition Get_sem_num :=
          Ref.map
            (fun α => Some α.(sem_num))
            (fun β α => Some (α <| sem_num := β |>)).
        Definition Get_sem_op :=
          Ref.map
            (fun α => Some α.(sem_op))
            (fun β α => Some (α <| sem_op := β |>)).
        Definition Get_sem_flg :=
          Ref.map
            (fun α => Some α.(sem_flg))
            (fun β α => Some (α <| sem_flg := β |>)).
      End sembuf.
      End sembuf.
      
      Module  Impl_core_marker_Copy_for_libc_unix_linux_like_linux_sembuf_t.
      Section Impl_core_marker_Copy_for_libc_unix_linux_like_linux_sembuf_t.
        Definition Self : Set := libc.unix.linux_like.linux.sembuf.t.
        
        Global Instance ℐ : core.marker.Copy.Trait Self := {
        }.
      End Impl_core_marker_Copy_for_libc_unix_linux_like_linux_sembuf_t.
      End Impl_core_marker_Copy_for_libc_unix_linux_like_linux_sembuf_t.
      
      Module  Impl_core_clone_Clone_for_libc_unix_linux_like_linux_sembuf_t.
      Section Impl_core_clone_Clone_for_libc_unix_linux_like_linux_sembuf_t.
        Definition Self : Set := libc.unix.linux_like.linux.sembuf.t.
        
        (*
                    fn clone(&self) -> $i { *self }
        *)
        Definition clone
            (self : ref Self)
            : M libc.unix.linux_like.linux.sembuf.t :=
          let* self := M.alloc self in
          let* α0 : ref libc.unix.linux_like.linux.sembuf.t := M.read self in
          M.read (deref α0).
        
        Global Instance AssociatedFunction_clone :
          Notations.DoubleColon Self "clone" := {
          Notations.double_colon := clone;
        }.
        
        Global Instance ℐ : core.clone.Clone.Required.Trait Self := {
          core.clone.Clone.clone := clone;
          core.clone.Clone.clone_from := Datatypes.None;
        }.
      End Impl_core_clone_Clone_for_libc_unix_linux_like_linux_sembuf_t.
      End Impl_core_clone_Clone_for_libc_unix_linux_like_linux_sembuf_t.
      
      Module  input_event.
      Section input_event.
        Record t : Set := {
          time : libc.unix.timeval.t;
          type_ : ltac:(libc.unix.linux_like.linux.__u16);
          code : ltac:(libc.unix.linux_like.linux.__u16);
          value : ltac:(libc.unix.linux_like.linux.__s32);
        }.
        
        Definition Get_time :=
          Ref.map
            (fun α => Some α.(time))
            (fun β α => Some (α <| time := β |>)).
        Definition Get_type_ :=
          Ref.map
            (fun α => Some α.(type_))
            (fun β α => Some (α <| type_ := β |>)).
        Definition Get_code :=
          Ref.map
            (fun α => Some α.(code))
            (fun β α => Some (α <| code := β |>)).
        Definition Get_value :=
          Ref.map
            (fun α => Some α.(value))
            (fun β α => Some (α <| value := β |>)).
      End input_event.
      End input_event.
      
      Module  Impl_core_marker_Copy_for_libc_unix_linux_like_linux_input_event_t.
      Section Impl_core_marker_Copy_for_libc_unix_linux_like_linux_input_event_t.
        Definition Self : Set := libc.unix.linux_like.linux.input_event.t.
        
        Global Instance ℐ : core.marker.Copy.Trait Self := {
        }.
      End Impl_core_marker_Copy_for_libc_unix_linux_like_linux_input_event_t.
      End Impl_core_marker_Copy_for_libc_unix_linux_like_linux_input_event_t.
      
      Module  Impl_core_clone_Clone_for_libc_unix_linux_like_linux_input_event_t.
      Section Impl_core_clone_Clone_for_libc_unix_linux_like_linux_input_event_t.
        Definition Self : Set := libc.unix.linux_like.linux.input_event.t.
        
        (*
                    fn clone(&self) -> $i { *self }
        *)
        Definition clone
            (self : ref Self)
            : M libc.unix.linux_like.linux.input_event.t :=
          let* self := M.alloc self in
          let* α0 : ref libc.unix.linux_like.linux.input_event.t :=
            M.read self in
          M.read (deref α0).
        
        Global Instance AssociatedFunction_clone :
          Notations.DoubleColon Self "clone" := {
          Notations.double_colon := clone;
        }.
        
        Global Instance ℐ : core.clone.Clone.Required.Trait Self := {
          core.clone.Clone.clone := clone;
          core.clone.Clone.clone_from := Datatypes.None;
        }.
      End Impl_core_clone_Clone_for_libc_unix_linux_like_linux_input_event_t.
      End Impl_core_clone_Clone_for_libc_unix_linux_like_linux_input_event_t.
      
      Module  input_id.
      Section input_id.
        Record t : Set := {
          bustype : ltac:(libc.unix.linux_like.linux.__u16);
          vendor : ltac:(libc.unix.linux_like.linux.__u16);
          product : ltac:(libc.unix.linux_like.linux.__u16);
          version : ltac:(libc.unix.linux_like.linux.__u16);
        }.
        
        Definition Get_bustype :=
          Ref.map
            (fun α => Some α.(bustype))
            (fun β α => Some (α <| bustype := β |>)).
        Definition Get_vendor :=
          Ref.map
            (fun α => Some α.(vendor))
            (fun β α => Some (α <| vendor := β |>)).
        Definition Get_product :=
          Ref.map
            (fun α => Some α.(product))
            (fun β α => Some (α <| product := β |>)).
        Definition Get_version :=
          Ref.map
            (fun α => Some α.(version))
            (fun β α => Some (α <| version := β |>)).
      End input_id.
      End input_id.
      
      Module  Impl_core_marker_Copy_for_libc_unix_linux_like_linux_input_id_t.
      Section Impl_core_marker_Copy_for_libc_unix_linux_like_linux_input_id_t.
        Definition Self : Set := libc.unix.linux_like.linux.input_id.t.
        
        Global Instance ℐ : core.marker.Copy.Trait Self := {
        }.
      End Impl_core_marker_Copy_for_libc_unix_linux_like_linux_input_id_t.
      End Impl_core_marker_Copy_for_libc_unix_linux_like_linux_input_id_t.
      
      Module  Impl_core_clone_Clone_for_libc_unix_linux_like_linux_input_id_t.
      Section Impl_core_clone_Clone_for_libc_unix_linux_like_linux_input_id_t.
        Definition Self : Set := libc.unix.linux_like.linux.input_id.t.
        
        (*
                    fn clone(&self) -> $i { *self }
        *)
        Definition clone
            (self : ref Self)
            : M libc.unix.linux_like.linux.input_id.t :=
          let* self := M.alloc self in
          let* α0 : ref libc.unix.linux_like.linux.input_id.t := M.read self in
          M.read (deref α0).
        
        Global Instance AssociatedFunction_clone :
          Notations.DoubleColon Self "clone" := {
          Notations.double_colon := clone;
        }.
        
        Global Instance ℐ : core.clone.Clone.Required.Trait Self := {
          core.clone.Clone.clone := clone;
          core.clone.Clone.clone_from := Datatypes.None;
        }.
      End Impl_core_clone_Clone_for_libc_unix_linux_like_linux_input_id_t.
      End Impl_core_clone_Clone_for_libc_unix_linux_like_linux_input_id_t.
      
      Module  input_absinfo.
      Section input_absinfo.
        Record t : Set := {
          value : ltac:(libc.unix.linux_like.linux.__s32);
          minimum : ltac:(libc.unix.linux_like.linux.__s32);
          maximum : ltac:(libc.unix.linux_like.linux.__s32);
          fuzz : ltac:(libc.unix.linux_like.linux.__s32);
          flat : ltac:(libc.unix.linux_like.linux.__s32);
          resolution : ltac:(libc.unix.linux_like.linux.__s32);
        }.
        
        Definition Get_value :=
          Ref.map
            (fun α => Some α.(value))
            (fun β α => Some (α <| value := β |>)).
        Definition Get_minimum :=
          Ref.map
            (fun α => Some α.(minimum))
            (fun β α => Some (α <| minimum := β |>)).
        Definition Get_maximum :=
          Ref.map
            (fun α => Some α.(maximum))
            (fun β α => Some (α <| maximum := β |>)).
        Definition Get_fuzz :=
          Ref.map
            (fun α => Some α.(fuzz))
            (fun β α => Some (α <| fuzz := β |>)).
        Definition Get_flat :=
          Ref.map
            (fun α => Some α.(flat))
            (fun β α => Some (α <| flat := β |>)).
        Definition Get_resolution :=
          Ref.map
            (fun α => Some α.(resolution))
            (fun β α => Some (α <| resolution := β |>)).
      End input_absinfo.
      End input_absinfo.
      
      Module  Impl_core_marker_Copy_for_libc_unix_linux_like_linux_input_absinfo_t.
      Section Impl_core_marker_Copy_for_libc_unix_linux_like_linux_input_absinfo_t.
        Definition Self : Set := libc.unix.linux_like.linux.input_absinfo.t.
        
        Global Instance ℐ : core.marker.Copy.Trait Self := {
        }.
      End Impl_core_marker_Copy_for_libc_unix_linux_like_linux_input_absinfo_t.
      End Impl_core_marker_Copy_for_libc_unix_linux_like_linux_input_absinfo_t.
      
      Module  Impl_core_clone_Clone_for_libc_unix_linux_like_linux_input_absinfo_t.
      Section Impl_core_clone_Clone_for_libc_unix_linux_like_linux_input_absinfo_t.
        Definition Self : Set := libc.unix.linux_like.linux.input_absinfo.t.
        
        (*
                    fn clone(&self) -> $i { *self }
        *)
        Definition clone
            (self : ref Self)
            : M libc.unix.linux_like.linux.input_absinfo.t :=
          let* self := M.alloc self in
          let* α0 : ref libc.unix.linux_like.linux.input_absinfo.t :=
            M.read self in
          M.read (deref α0).
        
        Global Instance AssociatedFunction_clone :
          Notations.DoubleColon Self "clone" := {
          Notations.double_colon := clone;
        }.
        
        Global Instance ℐ : core.clone.Clone.Required.Trait Self := {
          core.clone.Clone.clone := clone;
          core.clone.Clone.clone_from := Datatypes.None;
        }.
      End Impl_core_clone_Clone_for_libc_unix_linux_like_linux_input_absinfo_t.
      End Impl_core_clone_Clone_for_libc_unix_linux_like_linux_input_absinfo_t.
      
      Module  input_keymap_entry.
      Section input_keymap_entry.
        Record t : Set := {
          flags : ltac:(libc.unix.linux_like.linux.__u8);
          len : ltac:(libc.unix.linux_like.linux.__u8);
          index : ltac:(libc.unix.linux_like.linux.__u16);
          keycode : ltac:(libc.unix.linux_like.linux.__u32);
          scancode : array ltac:(libc.unix.linux_like.linux.__u8);
        }.
        
        Definition Get_flags :=
          Ref.map
            (fun α => Some α.(flags))
            (fun β α => Some (α <| flags := β |>)).
        Definition Get_len :=
          Ref.map (fun α => Some α.(len)) (fun β α => Some (α <| len := β |>)).
        Definition Get_index :=
          Ref.map
            (fun α => Some α.(index))
            (fun β α => Some (α <| index := β |>)).
        Definition Get_keycode :=
          Ref.map
            (fun α => Some α.(keycode))
            (fun β α => Some (α <| keycode := β |>)).
        Definition Get_scancode :=
          Ref.map
            (fun α => Some α.(scancode))
            (fun β α => Some (α <| scancode := β |>)).
      End input_keymap_entry.
      End input_keymap_entry.
      
      Module  Impl_core_marker_Copy_for_libc_unix_linux_like_linux_input_keymap_entry_t.
      Section Impl_core_marker_Copy_for_libc_unix_linux_like_linux_input_keymap_entry_t.
        Definition Self : Set :=
          libc.unix.linux_like.linux.input_keymap_entry.t.
        
        Global Instance ℐ : core.marker.Copy.Trait Self := {
        }.
      End Impl_core_marker_Copy_for_libc_unix_linux_like_linux_input_keymap_entry_t.
      End Impl_core_marker_Copy_for_libc_unix_linux_like_linux_input_keymap_entry_t.
      
      Module  Impl_core_clone_Clone_for_libc_unix_linux_like_linux_input_keymap_entry_t.
      Section Impl_core_clone_Clone_for_libc_unix_linux_like_linux_input_keymap_entry_t.
        Definition Self : Set :=
          libc.unix.linux_like.linux.input_keymap_entry.t.
        
        (*
                    fn clone(&self) -> $i { *self }
        *)
        Definition clone
            (self : ref Self)
            : M libc.unix.linux_like.linux.input_keymap_entry.t :=
          let* self := M.alloc self in
          let* α0 : ref libc.unix.linux_like.linux.input_keymap_entry.t :=
            M.read self in
          M.read (deref α0).
        
        Global Instance AssociatedFunction_clone :
          Notations.DoubleColon Self "clone" := {
          Notations.double_colon := clone;
        }.
        
        Global Instance ℐ : core.clone.Clone.Required.Trait Self := {
          core.clone.Clone.clone := clone;
          core.clone.Clone.clone_from := Datatypes.None;
        }.
      End Impl_core_clone_Clone_for_libc_unix_linux_like_linux_input_keymap_entry_t.
      End Impl_core_clone_Clone_for_libc_unix_linux_like_linux_input_keymap_entry_t.
      
      Module  input_mask.
      Section input_mask.
        Record t : Set := {
          type_ : ltac:(libc.unix.linux_like.linux.__u32);
          codes_size : ltac:(libc.unix.linux_like.linux.__u32);
          codes_ptr : ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.__u64);
        }.
        
        Definition Get_type_ :=
          Ref.map
            (fun α => Some α.(type_))
            (fun β α => Some (α <| type_ := β |>)).
        Definition Get_codes_size :=
          Ref.map
            (fun α => Some α.(codes_size))
            (fun β α => Some (α <| codes_size := β |>)).
        Definition Get_codes_ptr :=
          Ref.map
            (fun α => Some α.(codes_ptr))
            (fun β α => Some (α <| codes_ptr := β |>)).
      End input_mask.
      End input_mask.
      
      Module  Impl_core_marker_Copy_for_libc_unix_linux_like_linux_input_mask_t.
      Section Impl_core_marker_Copy_for_libc_unix_linux_like_linux_input_mask_t.
        Definition Self : Set := libc.unix.linux_like.linux.input_mask.t.
        
        Global Instance ℐ : core.marker.Copy.Trait Self := {
        }.
      End Impl_core_marker_Copy_for_libc_unix_linux_like_linux_input_mask_t.
      End Impl_core_marker_Copy_for_libc_unix_linux_like_linux_input_mask_t.
      
      Module  Impl_core_clone_Clone_for_libc_unix_linux_like_linux_input_mask_t.
      Section Impl_core_clone_Clone_for_libc_unix_linux_like_linux_input_mask_t.
        Definition Self : Set := libc.unix.linux_like.linux.input_mask.t.
        
        (*
                    fn clone(&self) -> $i { *self }
        *)
        Definition clone
            (self : ref Self)
            : M libc.unix.linux_like.linux.input_mask.t :=
          let* self := M.alloc self in
          let* α0 : ref libc.unix.linux_like.linux.input_mask.t :=
            M.read self in
          M.read (deref α0).
        
        Global Instance AssociatedFunction_clone :
          Notations.DoubleColon Self "clone" := {
          Notations.double_colon := clone;
        }.
        
        Global Instance ℐ : core.clone.Clone.Required.Trait Self := {
          core.clone.Clone.clone := clone;
          core.clone.Clone.clone_from := Datatypes.None;
        }.
      End Impl_core_clone_Clone_for_libc_unix_linux_like_linux_input_mask_t.
      End Impl_core_clone_Clone_for_libc_unix_linux_like_linux_input_mask_t.
      
      Module  ff_replay.
      Section ff_replay.
        Record t : Set := {
          length : ltac:(libc.unix.linux_like.linux.__u16);
          delay : ltac:(libc.unix.linux_like.linux.__u16);
        }.
        
        Definition Get_length :=
          Ref.map
            (fun α => Some α.(length))
            (fun β α => Some (α <| length := β |>)).
        Definition Get_delay :=
          Ref.map
            (fun α => Some α.(delay))
            (fun β α => Some (α <| delay := β |>)).
      End ff_replay.
      End ff_replay.
      
      Module  Impl_core_marker_Copy_for_libc_unix_linux_like_linux_ff_replay_t.
      Section Impl_core_marker_Copy_for_libc_unix_linux_like_linux_ff_replay_t.
        Definition Self : Set := libc.unix.linux_like.linux.ff_replay.t.
        
        Global Instance ℐ : core.marker.Copy.Trait Self := {
        }.
      End Impl_core_marker_Copy_for_libc_unix_linux_like_linux_ff_replay_t.
      End Impl_core_marker_Copy_for_libc_unix_linux_like_linux_ff_replay_t.
      
      Module  Impl_core_clone_Clone_for_libc_unix_linux_like_linux_ff_replay_t.
      Section Impl_core_clone_Clone_for_libc_unix_linux_like_linux_ff_replay_t.
        Definition Self : Set := libc.unix.linux_like.linux.ff_replay.t.
        
        (*
                    fn clone(&self) -> $i { *self }
        *)
        Definition clone
            (self : ref Self)
            : M libc.unix.linux_like.linux.ff_replay.t :=
          let* self := M.alloc self in
          let* α0 : ref libc.unix.linux_like.linux.ff_replay.t := M.read self in
          M.read (deref α0).
        
        Global Instance AssociatedFunction_clone :
          Notations.DoubleColon Self "clone" := {
          Notations.double_colon := clone;
        }.
        
        Global Instance ℐ : core.clone.Clone.Required.Trait Self := {
          core.clone.Clone.clone := clone;
          core.clone.Clone.clone_from := Datatypes.None;
        }.
      End Impl_core_clone_Clone_for_libc_unix_linux_like_linux_ff_replay_t.
      End Impl_core_clone_Clone_for_libc_unix_linux_like_linux_ff_replay_t.
      
      Module  ff_trigger.
      Section ff_trigger.
        Record t : Set := {
          button : ltac:(libc.unix.linux_like.linux.__u16);
          interval : ltac:(libc.unix.linux_like.linux.__u16);
        }.
        
        Definition Get_button :=
          Ref.map
            (fun α => Some α.(button))
            (fun β α => Some (α <| button := β |>)).
        Definition Get_interval :=
          Ref.map
            (fun α => Some α.(interval))
            (fun β α => Some (α <| interval := β |>)).
      End ff_trigger.
      End ff_trigger.
      
      Module  Impl_core_marker_Copy_for_libc_unix_linux_like_linux_ff_trigger_t.
      Section Impl_core_marker_Copy_for_libc_unix_linux_like_linux_ff_trigger_t.
        Definition Self : Set := libc.unix.linux_like.linux.ff_trigger.t.
        
        Global Instance ℐ : core.marker.Copy.Trait Self := {
        }.
      End Impl_core_marker_Copy_for_libc_unix_linux_like_linux_ff_trigger_t.
      End Impl_core_marker_Copy_for_libc_unix_linux_like_linux_ff_trigger_t.
      
      Module  Impl_core_clone_Clone_for_libc_unix_linux_like_linux_ff_trigger_t.
      Section Impl_core_clone_Clone_for_libc_unix_linux_like_linux_ff_trigger_t.
        Definition Self : Set := libc.unix.linux_like.linux.ff_trigger.t.
        
        (*
                    fn clone(&self) -> $i { *self }
        *)
        Definition clone
            (self : ref Self)
            : M libc.unix.linux_like.linux.ff_trigger.t :=
          let* self := M.alloc self in
          let* α0 : ref libc.unix.linux_like.linux.ff_trigger.t :=
            M.read self in
          M.read (deref α0).
        
        Global Instance AssociatedFunction_clone :
          Notations.DoubleColon Self "clone" := {
          Notations.double_colon := clone;
        }.
        
        Global Instance ℐ : core.clone.Clone.Required.Trait Self := {
          core.clone.Clone.clone := clone;
          core.clone.Clone.clone_from := Datatypes.None;
        }.
      End Impl_core_clone_Clone_for_libc_unix_linux_like_linux_ff_trigger_t.
      End Impl_core_clone_Clone_for_libc_unix_linux_like_linux_ff_trigger_t.
      
      Module  ff_envelope.
      Section ff_envelope.
        Record t : Set := {
          attack_length : ltac:(libc.unix.linux_like.linux.__u16);
          attack_level : ltac:(libc.unix.linux_like.linux.__u16);
          fade_length : ltac:(libc.unix.linux_like.linux.__u16);
          fade_level : ltac:(libc.unix.linux_like.linux.__u16);
        }.
        
        Definition Get_attack_length :=
          Ref.map
            (fun α => Some α.(attack_length))
            (fun β α => Some (α <| attack_length := β |>)).
        Definition Get_attack_level :=
          Ref.map
            (fun α => Some α.(attack_level))
            (fun β α => Some (α <| attack_level := β |>)).
        Definition Get_fade_length :=
          Ref.map
            (fun α => Some α.(fade_length))
            (fun β α => Some (α <| fade_length := β |>)).
        Definition Get_fade_level :=
          Ref.map
            (fun α => Some α.(fade_level))
            (fun β α => Some (α <| fade_level := β |>)).
      End ff_envelope.
      End ff_envelope.
      
      Module  Impl_core_marker_Copy_for_libc_unix_linux_like_linux_ff_envelope_t.
      Section Impl_core_marker_Copy_for_libc_unix_linux_like_linux_ff_envelope_t.
        Definition Self : Set := libc.unix.linux_like.linux.ff_envelope.t.
        
        Global Instance ℐ : core.marker.Copy.Trait Self := {
        }.
      End Impl_core_marker_Copy_for_libc_unix_linux_like_linux_ff_envelope_t.
      End Impl_core_marker_Copy_for_libc_unix_linux_like_linux_ff_envelope_t.
      
      Module  Impl_core_clone_Clone_for_libc_unix_linux_like_linux_ff_envelope_t.
      Section Impl_core_clone_Clone_for_libc_unix_linux_like_linux_ff_envelope_t.
        Definition Self : Set := libc.unix.linux_like.linux.ff_envelope.t.
        
        (*
                    fn clone(&self) -> $i { *self }
        *)
        Definition clone
            (self : ref Self)
            : M libc.unix.linux_like.linux.ff_envelope.t :=
          let* self := M.alloc self in
          let* α0 : ref libc.unix.linux_like.linux.ff_envelope.t :=
            M.read self in
          M.read (deref α0).
        
        Global Instance AssociatedFunction_clone :
          Notations.DoubleColon Self "clone" := {
          Notations.double_colon := clone;
        }.
        
        Global Instance ℐ : core.clone.Clone.Required.Trait Self := {
          core.clone.Clone.clone := clone;
          core.clone.Clone.clone_from := Datatypes.None;
        }.
      End Impl_core_clone_Clone_for_libc_unix_linux_like_linux_ff_envelope_t.
      End Impl_core_clone_Clone_for_libc_unix_linux_like_linux_ff_envelope_t.
      
      Module  ff_constant_effect.
      Section ff_constant_effect.
        Record t : Set := {
          level : ltac:(libc.unix.linux_like.linux.__s16);
          envelope : libc.unix.linux_like.linux.ff_envelope.t;
        }.
        
        Definition Get_level :=
          Ref.map
            (fun α => Some α.(level))
            (fun β α => Some (α <| level := β |>)).
        Definition Get_envelope :=
          Ref.map
            (fun α => Some α.(envelope))
            (fun β α => Some (α <| envelope := β |>)).
      End ff_constant_effect.
      End ff_constant_effect.
      
      Module  Impl_core_marker_Copy_for_libc_unix_linux_like_linux_ff_constant_effect_t.
      Section Impl_core_marker_Copy_for_libc_unix_linux_like_linux_ff_constant_effect_t.
        Definition Self : Set :=
          libc.unix.linux_like.linux.ff_constant_effect.t.
        
        Global Instance ℐ : core.marker.Copy.Trait Self := {
        }.
      End Impl_core_marker_Copy_for_libc_unix_linux_like_linux_ff_constant_effect_t.
      End Impl_core_marker_Copy_for_libc_unix_linux_like_linux_ff_constant_effect_t.
      
      Module  Impl_core_clone_Clone_for_libc_unix_linux_like_linux_ff_constant_effect_t.
      Section Impl_core_clone_Clone_for_libc_unix_linux_like_linux_ff_constant_effect_t.
        Definition Self : Set :=
          libc.unix.linux_like.linux.ff_constant_effect.t.
        
        (*
                    fn clone(&self) -> $i { *self }
        *)
        Definition clone
            (self : ref Self)
            : M libc.unix.linux_like.linux.ff_constant_effect.t :=
          let* self := M.alloc self in
          let* α0 : ref libc.unix.linux_like.linux.ff_constant_effect.t :=
            M.read self in
          M.read (deref α0).
        
        Global Instance AssociatedFunction_clone :
          Notations.DoubleColon Self "clone" := {
          Notations.double_colon := clone;
        }.
        
        Global Instance ℐ : core.clone.Clone.Required.Trait Self := {
          core.clone.Clone.clone := clone;
          core.clone.Clone.clone_from := Datatypes.None;
        }.
      End Impl_core_clone_Clone_for_libc_unix_linux_like_linux_ff_constant_effect_t.
      End Impl_core_clone_Clone_for_libc_unix_linux_like_linux_ff_constant_effect_t.
      
      Module  ff_ramp_effect.
      Section ff_ramp_effect.
        Record t : Set := {
          start_level : ltac:(libc.unix.linux_like.linux.__s16);
          end_level : ltac:(libc.unix.linux_like.linux.__s16);
          envelope : libc.unix.linux_like.linux.ff_envelope.t;
        }.
        
        Definition Get_start_level :=
          Ref.map
            (fun α => Some α.(start_level))
            (fun β α => Some (α <| start_level := β |>)).
        Definition Get_end_level :=
          Ref.map
            (fun α => Some α.(end_level))
            (fun β α => Some (α <| end_level := β |>)).
        Definition Get_envelope :=
          Ref.map
            (fun α => Some α.(envelope))
            (fun β α => Some (α <| envelope := β |>)).
      End ff_ramp_effect.
      End ff_ramp_effect.
      
      Module  Impl_core_marker_Copy_for_libc_unix_linux_like_linux_ff_ramp_effect_t.
      Section Impl_core_marker_Copy_for_libc_unix_linux_like_linux_ff_ramp_effect_t.
        Definition Self : Set := libc.unix.linux_like.linux.ff_ramp_effect.t.
        
        Global Instance ℐ : core.marker.Copy.Trait Self := {
        }.
      End Impl_core_marker_Copy_for_libc_unix_linux_like_linux_ff_ramp_effect_t.
      End Impl_core_marker_Copy_for_libc_unix_linux_like_linux_ff_ramp_effect_t.
      
      Module  Impl_core_clone_Clone_for_libc_unix_linux_like_linux_ff_ramp_effect_t.
      Section Impl_core_clone_Clone_for_libc_unix_linux_like_linux_ff_ramp_effect_t.
        Definition Self : Set := libc.unix.linux_like.linux.ff_ramp_effect.t.
        
        (*
                    fn clone(&self) -> $i { *self }
        *)
        Definition clone
            (self : ref Self)
            : M libc.unix.linux_like.linux.ff_ramp_effect.t :=
          let* self := M.alloc self in
          let* α0 : ref libc.unix.linux_like.linux.ff_ramp_effect.t :=
            M.read self in
          M.read (deref α0).
        
        Global Instance AssociatedFunction_clone :
          Notations.DoubleColon Self "clone" := {
          Notations.double_colon := clone;
        }.
        
        Global Instance ℐ : core.clone.Clone.Required.Trait Self := {
          core.clone.Clone.clone := clone;
          core.clone.Clone.clone_from := Datatypes.None;
        }.
      End Impl_core_clone_Clone_for_libc_unix_linux_like_linux_ff_ramp_effect_t.
      End Impl_core_clone_Clone_for_libc_unix_linux_like_linux_ff_ramp_effect_t.
      
      Module  ff_condition_effect.
      Section ff_condition_effect.
        Record t : Set := {
          right_saturation : ltac:(libc.unix.linux_like.linux.__u16);
          left_saturation : ltac:(libc.unix.linux_like.linux.__u16);
          right_coeff : ltac:(libc.unix.linux_like.linux.__s16);
          left_coeff : ltac:(libc.unix.linux_like.linux.__s16);
          deadband : ltac:(libc.unix.linux_like.linux.__u16);
          center : ltac:(libc.unix.linux_like.linux.__s16);
        }.
        
        Definition Get_right_saturation :=
          Ref.map
            (fun α => Some α.(right_saturation))
            (fun β α => Some (α <| right_saturation := β |>)).
        Definition Get_left_saturation :=
          Ref.map
            (fun α => Some α.(left_saturation))
            (fun β α => Some (α <| left_saturation := β |>)).
        Definition Get_right_coeff :=
          Ref.map
            (fun α => Some α.(right_coeff))
            (fun β α => Some (α <| right_coeff := β |>)).
        Definition Get_left_coeff :=
          Ref.map
            (fun α => Some α.(left_coeff))
            (fun β α => Some (α <| left_coeff := β |>)).
        Definition Get_deadband :=
          Ref.map
            (fun α => Some α.(deadband))
            (fun β α => Some (α <| deadband := β |>)).
        Definition Get_center :=
          Ref.map
            (fun α => Some α.(center))
            (fun β α => Some (α <| center := β |>)).
      End ff_condition_effect.
      End ff_condition_effect.
      
      Module  Impl_core_marker_Copy_for_libc_unix_linux_like_linux_ff_condition_effect_t.
      Section Impl_core_marker_Copy_for_libc_unix_linux_like_linux_ff_condition_effect_t.
        Definition Self : Set :=
          libc.unix.linux_like.linux.ff_condition_effect.t.
        
        Global Instance ℐ : core.marker.Copy.Trait Self := {
        }.
      End Impl_core_marker_Copy_for_libc_unix_linux_like_linux_ff_condition_effect_t.
      End Impl_core_marker_Copy_for_libc_unix_linux_like_linux_ff_condition_effect_t.
      
      Module  Impl_core_clone_Clone_for_libc_unix_linux_like_linux_ff_condition_effect_t.
      Section Impl_core_clone_Clone_for_libc_unix_linux_like_linux_ff_condition_effect_t.
        Definition Self : Set :=
          libc.unix.linux_like.linux.ff_condition_effect.t.
        
        (*
                    fn clone(&self) -> $i { *self }
        *)
        Definition clone
            (self : ref Self)
            : M libc.unix.linux_like.linux.ff_condition_effect.t :=
          let* self := M.alloc self in
          let* α0 : ref libc.unix.linux_like.linux.ff_condition_effect.t :=
            M.read self in
          M.read (deref α0).
        
        Global Instance AssociatedFunction_clone :
          Notations.DoubleColon Self "clone" := {
          Notations.double_colon := clone;
        }.
        
        Global Instance ℐ : core.clone.Clone.Required.Trait Self := {
          core.clone.Clone.clone := clone;
          core.clone.Clone.clone_from := Datatypes.None;
        }.
      End Impl_core_clone_Clone_for_libc_unix_linux_like_linux_ff_condition_effect_t.
      End Impl_core_clone_Clone_for_libc_unix_linux_like_linux_ff_condition_effect_t.
      
      Module  ff_periodic_effect.
      Section ff_periodic_effect.
        Record t : Set := {
          waveform : ltac:(libc.unix.linux_like.linux.__u16);
          period : ltac:(libc.unix.linux_like.linux.__u16);
          magnitude : ltac:(libc.unix.linux_like.linux.__s16);
          offset : ltac:(libc.unix.linux_like.linux.__s16);
          phase : ltac:(libc.unix.linux_like.linux.__u16);
          envelope : libc.unix.linux_like.linux.ff_envelope.t;
          custom_len : ltac:(libc.unix.linux_like.linux.__u32);
          custom_data : mut_ref ltac:(libc.unix.linux_like.linux.__s16);
        }.
        
        Definition Get_waveform :=
          Ref.map
            (fun α => Some α.(waveform))
            (fun β α => Some (α <| waveform := β |>)).
        Definition Get_period :=
          Ref.map
            (fun α => Some α.(period))
            (fun β α => Some (α <| period := β |>)).
        Definition Get_magnitude :=
          Ref.map
            (fun α => Some α.(magnitude))
            (fun β α => Some (α <| magnitude := β |>)).
        Definition Get_offset :=
          Ref.map
            (fun α => Some α.(offset))
            (fun β α => Some (α <| offset := β |>)).
        Definition Get_phase :=
          Ref.map
            (fun α => Some α.(phase))
            (fun β α => Some (α <| phase := β |>)).
        Definition Get_envelope :=
          Ref.map
            (fun α => Some α.(envelope))
            (fun β α => Some (α <| envelope := β |>)).
        Definition Get_custom_len :=
          Ref.map
            (fun α => Some α.(custom_len))
            (fun β α => Some (α <| custom_len := β |>)).
        Definition Get_custom_data :=
          Ref.map
            (fun α => Some α.(custom_data))
            (fun β α => Some (α <| custom_data := β |>)).
      End ff_periodic_effect.
      End ff_periodic_effect.
      
      Module  Impl_core_marker_Copy_for_libc_unix_linux_like_linux_ff_periodic_effect_t.
      Section Impl_core_marker_Copy_for_libc_unix_linux_like_linux_ff_periodic_effect_t.
        Definition Self : Set :=
          libc.unix.linux_like.linux.ff_periodic_effect.t.
        
        Global Instance ℐ : core.marker.Copy.Trait Self := {
        }.
      End Impl_core_marker_Copy_for_libc_unix_linux_like_linux_ff_periodic_effect_t.
      End Impl_core_marker_Copy_for_libc_unix_linux_like_linux_ff_periodic_effect_t.
      
      Module  Impl_core_clone_Clone_for_libc_unix_linux_like_linux_ff_periodic_effect_t.
      Section Impl_core_clone_Clone_for_libc_unix_linux_like_linux_ff_periodic_effect_t.
        Definition Self : Set :=
          libc.unix.linux_like.linux.ff_periodic_effect.t.
        
        (*
                    fn clone(&self) -> $i { *self }
        *)
        Definition clone
            (self : ref Self)
            : M libc.unix.linux_like.linux.ff_periodic_effect.t :=
          let* self := M.alloc self in
          let* α0 : ref libc.unix.linux_like.linux.ff_periodic_effect.t :=
            M.read self in
          M.read (deref α0).
        
        Global Instance AssociatedFunction_clone :
          Notations.DoubleColon Self "clone" := {
          Notations.double_colon := clone;
        }.
        
        Global Instance ℐ : core.clone.Clone.Required.Trait Self := {
          core.clone.Clone.clone := clone;
          core.clone.Clone.clone_from := Datatypes.None;
        }.
      End Impl_core_clone_Clone_for_libc_unix_linux_like_linux_ff_periodic_effect_t.
      End Impl_core_clone_Clone_for_libc_unix_linux_like_linux_ff_periodic_effect_t.
      
      Module  ff_rumble_effect.
      Section ff_rumble_effect.
        Record t : Set := {
          strong_magnitude : ltac:(libc.unix.linux_like.linux.__u16);
          weak_magnitude : ltac:(libc.unix.linux_like.linux.__u16);
        }.
        
        Definition Get_strong_magnitude :=
          Ref.map
            (fun α => Some α.(strong_magnitude))
            (fun β α => Some (α <| strong_magnitude := β |>)).
        Definition Get_weak_magnitude :=
          Ref.map
            (fun α => Some α.(weak_magnitude))
            (fun β α => Some (α <| weak_magnitude := β |>)).
      End ff_rumble_effect.
      End ff_rumble_effect.
      
      Module  Impl_core_marker_Copy_for_libc_unix_linux_like_linux_ff_rumble_effect_t.
      Section Impl_core_marker_Copy_for_libc_unix_linux_like_linux_ff_rumble_effect_t.
        Definition Self : Set := libc.unix.linux_like.linux.ff_rumble_effect.t.
        
        Global Instance ℐ : core.marker.Copy.Trait Self := {
        }.
      End Impl_core_marker_Copy_for_libc_unix_linux_like_linux_ff_rumble_effect_t.
      End Impl_core_marker_Copy_for_libc_unix_linux_like_linux_ff_rumble_effect_t.
      
      Module  Impl_core_clone_Clone_for_libc_unix_linux_like_linux_ff_rumble_effect_t.
      Section Impl_core_clone_Clone_for_libc_unix_linux_like_linux_ff_rumble_effect_t.
        Definition Self : Set := libc.unix.linux_like.linux.ff_rumble_effect.t.
        
        (*
                    fn clone(&self) -> $i { *self }
        *)
        Definition clone
            (self : ref Self)
            : M libc.unix.linux_like.linux.ff_rumble_effect.t :=
          let* self := M.alloc self in
          let* α0 : ref libc.unix.linux_like.linux.ff_rumble_effect.t :=
            M.read self in
          M.read (deref α0).
        
        Global Instance AssociatedFunction_clone :
          Notations.DoubleColon Self "clone" := {
          Notations.double_colon := clone;
        }.
        
        Global Instance ℐ : core.clone.Clone.Required.Trait Self := {
          core.clone.Clone.clone := clone;
          core.clone.Clone.clone_from := Datatypes.None;
        }.
      End Impl_core_clone_Clone_for_libc_unix_linux_like_linux_ff_rumble_effect_t.
      End Impl_core_clone_Clone_for_libc_unix_linux_like_linux_ff_rumble_effect_t.
      
      Module  ff_effect.
      Section ff_effect.
        Record t : Set := {
          type_ : ltac:(libc.unix.linux_like.linux.__u16);
          id : ltac:(libc.unix.linux_like.linux.__s16);
          direction : ltac:(libc.unix.linux_like.linux.__u16);
          trigger : libc.unix.linux_like.linux.ff_trigger.t;
          replay : libc.unix.linux_like.linux.ff_replay.t;
          u : array u64.t;
        }.
        
        Definition Get_type_ :=
          Ref.map
            (fun α => Some α.(type_))
            (fun β α => Some (α <| type_ := β |>)).
        Definition Get_id :=
          Ref.map (fun α => Some α.(id)) (fun β α => Some (α <| id := β |>)).
        Definition Get_direction :=
          Ref.map
            (fun α => Some α.(direction))
            (fun β α => Some (α <| direction := β |>)).
        Definition Get_trigger :=
          Ref.map
            (fun α => Some α.(trigger))
            (fun β α => Some (α <| trigger := β |>)).
        Definition Get_replay :=
          Ref.map
            (fun α => Some α.(replay))
            (fun β α => Some (α <| replay := β |>)).
        Definition Get_u :=
          Ref.map (fun α => Some α.(u)) (fun β α => Some (α <| u := β |>)).
      End ff_effect.
      End ff_effect.
      
      Module  Impl_core_marker_Copy_for_libc_unix_linux_like_linux_ff_effect_t.
      Section Impl_core_marker_Copy_for_libc_unix_linux_like_linux_ff_effect_t.
        Definition Self : Set := libc.unix.linux_like.linux.ff_effect.t.
        
        Global Instance ℐ : core.marker.Copy.Trait Self := {
        }.
      End Impl_core_marker_Copy_for_libc_unix_linux_like_linux_ff_effect_t.
      End Impl_core_marker_Copy_for_libc_unix_linux_like_linux_ff_effect_t.
      
      Module  Impl_core_clone_Clone_for_libc_unix_linux_like_linux_ff_effect_t.
      Section Impl_core_clone_Clone_for_libc_unix_linux_like_linux_ff_effect_t.
        Definition Self : Set := libc.unix.linux_like.linux.ff_effect.t.
        
        (*
                    fn clone(&self) -> $i { *self }
        *)
        Definition clone
            (self : ref Self)
            : M libc.unix.linux_like.linux.ff_effect.t :=
          let* self := M.alloc self in
          let* α0 : ref libc.unix.linux_like.linux.ff_effect.t := M.read self in
          M.read (deref α0).
        
        Global Instance AssociatedFunction_clone :
          Notations.DoubleColon Self "clone" := {
          Notations.double_colon := clone;
        }.
        
        Global Instance ℐ : core.clone.Clone.Required.Trait Self := {
          core.clone.Clone.clone := clone;
          core.clone.Clone.clone_from := Datatypes.None;
        }.
      End Impl_core_clone_Clone_for_libc_unix_linux_like_linux_ff_effect_t.
      End Impl_core_clone_Clone_for_libc_unix_linux_like_linux_ff_effect_t.
      
      Module  uinput_ff_upload.
      Section uinput_ff_upload.
        Record t : Set := {
          request_id : ltac:(libc.unix.linux_like.linux.__u32);
          retval : ltac:(libc.unix.linux_like.linux.__s32);
          effect : libc.unix.linux_like.linux.ff_effect.t;
          old : libc.unix.linux_like.linux.ff_effect.t;
        }.
        
        Definition Get_request_id :=
          Ref.map
            (fun α => Some α.(request_id))
            (fun β α => Some (α <| request_id := β |>)).
        Definition Get_retval :=
          Ref.map
            (fun α => Some α.(retval))
            (fun β α => Some (α <| retval := β |>)).
        Definition Get_effect :=
          Ref.map
            (fun α => Some α.(effect))
            (fun β α => Some (α <| effect := β |>)).
        Definition Get_old :=
          Ref.map (fun α => Some α.(old)) (fun β α => Some (α <| old := β |>)).
      End uinput_ff_upload.
      End uinput_ff_upload.
      
      Module  Impl_core_marker_Copy_for_libc_unix_linux_like_linux_uinput_ff_upload_t.
      Section Impl_core_marker_Copy_for_libc_unix_linux_like_linux_uinput_ff_upload_t.
        Definition Self : Set := libc.unix.linux_like.linux.uinput_ff_upload.t.
        
        Global Instance ℐ : core.marker.Copy.Trait Self := {
        }.
      End Impl_core_marker_Copy_for_libc_unix_linux_like_linux_uinput_ff_upload_t.
      End Impl_core_marker_Copy_for_libc_unix_linux_like_linux_uinput_ff_upload_t.
      
      Module  Impl_core_clone_Clone_for_libc_unix_linux_like_linux_uinput_ff_upload_t.
      Section Impl_core_clone_Clone_for_libc_unix_linux_like_linux_uinput_ff_upload_t.
        Definition Self : Set := libc.unix.linux_like.linux.uinput_ff_upload.t.
        
        (*
                    fn clone(&self) -> $i { *self }
        *)
        Definition clone
            (self : ref Self)
            : M libc.unix.linux_like.linux.uinput_ff_upload.t :=
          let* self := M.alloc self in
          let* α0 : ref libc.unix.linux_like.linux.uinput_ff_upload.t :=
            M.read self in
          M.read (deref α0).
        
        Global Instance AssociatedFunction_clone :
          Notations.DoubleColon Self "clone" := {
          Notations.double_colon := clone;
        }.
        
        Global Instance ℐ : core.clone.Clone.Required.Trait Self := {
          core.clone.Clone.clone := clone;
          core.clone.Clone.clone_from := Datatypes.None;
        }.
      End Impl_core_clone_Clone_for_libc_unix_linux_like_linux_uinput_ff_upload_t.
      End Impl_core_clone_Clone_for_libc_unix_linux_like_linux_uinput_ff_upload_t.
      
      Module  uinput_ff_erase.
      Section uinput_ff_erase.
        Record t : Set := {
          request_id : ltac:(libc.unix.linux_like.linux.__u32);
          retval : ltac:(libc.unix.linux_like.linux.__s32);
          effect_id : ltac:(libc.unix.linux_like.linux.__u32);
        }.
        
        Definition Get_request_id :=
          Ref.map
            (fun α => Some α.(request_id))
            (fun β α => Some (α <| request_id := β |>)).
        Definition Get_retval :=
          Ref.map
            (fun α => Some α.(retval))
            (fun β α => Some (α <| retval := β |>)).
        Definition Get_effect_id :=
          Ref.map
            (fun α => Some α.(effect_id))
            (fun β α => Some (α <| effect_id := β |>)).
      End uinput_ff_erase.
      End uinput_ff_erase.
      
      Module  Impl_core_marker_Copy_for_libc_unix_linux_like_linux_uinput_ff_erase_t.
      Section Impl_core_marker_Copy_for_libc_unix_linux_like_linux_uinput_ff_erase_t.
        Definition Self : Set := libc.unix.linux_like.linux.uinput_ff_erase.t.
        
        Global Instance ℐ : core.marker.Copy.Trait Self := {
        }.
      End Impl_core_marker_Copy_for_libc_unix_linux_like_linux_uinput_ff_erase_t.
      End Impl_core_marker_Copy_for_libc_unix_linux_like_linux_uinput_ff_erase_t.
      
      Module  Impl_core_clone_Clone_for_libc_unix_linux_like_linux_uinput_ff_erase_t.
      Section Impl_core_clone_Clone_for_libc_unix_linux_like_linux_uinput_ff_erase_t.
        Definition Self : Set := libc.unix.linux_like.linux.uinput_ff_erase.t.
        
        (*
                    fn clone(&self) -> $i { *self }
        *)
        Definition clone
            (self : ref Self)
            : M libc.unix.linux_like.linux.uinput_ff_erase.t :=
          let* self := M.alloc self in
          let* α0 : ref libc.unix.linux_like.linux.uinput_ff_erase.t :=
            M.read self in
          M.read (deref α0).
        
        Global Instance AssociatedFunction_clone :
          Notations.DoubleColon Self "clone" := {
          Notations.double_colon := clone;
        }.
        
        Global Instance ℐ : core.clone.Clone.Required.Trait Self := {
          core.clone.Clone.clone := clone;
          core.clone.Clone.clone_from := Datatypes.None;
        }.
      End Impl_core_clone_Clone_for_libc_unix_linux_like_linux_uinput_ff_erase_t.
      End Impl_core_clone_Clone_for_libc_unix_linux_like_linux_uinput_ff_erase_t.
      
      Module  uinput_abs_setup.
      Section uinput_abs_setup.
        Record t : Set := {
          code : ltac:(libc.unix.linux_like.linux.__u16);
          absinfo : libc.unix.linux_like.linux.input_absinfo.t;
        }.
        
        Definition Get_code :=
          Ref.map
            (fun α => Some α.(code))
            (fun β α => Some (α <| code := β |>)).
        Definition Get_absinfo :=
          Ref.map
            (fun α => Some α.(absinfo))
            (fun β α => Some (α <| absinfo := β |>)).
      End uinput_abs_setup.
      End uinput_abs_setup.
      
      Module  Impl_core_marker_Copy_for_libc_unix_linux_like_linux_uinput_abs_setup_t.
      Section Impl_core_marker_Copy_for_libc_unix_linux_like_linux_uinput_abs_setup_t.
        Definition Self : Set := libc.unix.linux_like.linux.uinput_abs_setup.t.
        
        Global Instance ℐ : core.marker.Copy.Trait Self := {
        }.
      End Impl_core_marker_Copy_for_libc_unix_linux_like_linux_uinput_abs_setup_t.
      End Impl_core_marker_Copy_for_libc_unix_linux_like_linux_uinput_abs_setup_t.
      
      Module  Impl_core_clone_Clone_for_libc_unix_linux_like_linux_uinput_abs_setup_t.
      Section Impl_core_clone_Clone_for_libc_unix_linux_like_linux_uinput_abs_setup_t.
        Definition Self : Set := libc.unix.linux_like.linux.uinput_abs_setup.t.
        
        (*
                    fn clone(&self) -> $i { *self }
        *)
        Definition clone
            (self : ref Self)
            : M libc.unix.linux_like.linux.uinput_abs_setup.t :=
          let* self := M.alloc self in
          let* α0 : ref libc.unix.linux_like.linux.uinput_abs_setup.t :=
            M.read self in
          M.read (deref α0).
        
        Global Instance AssociatedFunction_clone :
          Notations.DoubleColon Self "clone" := {
          Notations.double_colon := clone;
        }.
        
        Global Instance ℐ : core.clone.Clone.Required.Trait Self := {
          core.clone.Clone.clone := clone;
          core.clone.Clone.clone_from := Datatypes.None;
        }.
      End Impl_core_clone_Clone_for_libc_unix_linux_like_linux_uinput_abs_setup_t.
      End Impl_core_clone_Clone_for_libc_unix_linux_like_linux_uinput_abs_setup_t.
      
      Module  dl_phdr_info.
      Section dl_phdr_info.
        Record t : Set := {
          dlpi_addr : ltac:(libc.unix.linux_like.linux.Elf64_Addr);
          dlpi_name :
            ref ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.c_char);
          dlpi_phdr : ref libc.unix.linux_like.linux.Elf64_Phdr.t;
          dlpi_phnum : ltac:(libc.unix.linux_like.linux.Elf64_Half);
          dlpi_adds : ltac:(libc.unix.c_ulonglong);
          dlpi_subs : ltac:(libc.unix.c_ulonglong);
          dlpi_tls_modid : ltac:(libc.unix.size_t);
          dlpi_tls_data : mut_ref core.ffi.c_void.t;
        }.
        
        Definition Get_dlpi_addr :=
          Ref.map
            (fun α => Some α.(dlpi_addr))
            (fun β α => Some (α <| dlpi_addr := β |>)).
        Definition Get_dlpi_name :=
          Ref.map
            (fun α => Some α.(dlpi_name))
            (fun β α => Some (α <| dlpi_name := β |>)).
        Definition Get_dlpi_phdr :=
          Ref.map
            (fun α => Some α.(dlpi_phdr))
            (fun β α => Some (α <| dlpi_phdr := β |>)).
        Definition Get_dlpi_phnum :=
          Ref.map
            (fun α => Some α.(dlpi_phnum))
            (fun β α => Some (α <| dlpi_phnum := β |>)).
        Definition Get_dlpi_adds :=
          Ref.map
            (fun α => Some α.(dlpi_adds))
            (fun β α => Some (α <| dlpi_adds := β |>)).
        Definition Get_dlpi_subs :=
          Ref.map
            (fun α => Some α.(dlpi_subs))
            (fun β α => Some (α <| dlpi_subs := β |>)).
        Definition Get_dlpi_tls_modid :=
          Ref.map
            (fun α => Some α.(dlpi_tls_modid))
            (fun β α => Some (α <| dlpi_tls_modid := β |>)).
        Definition Get_dlpi_tls_data :=
          Ref.map
            (fun α => Some α.(dlpi_tls_data))
            (fun β α => Some (α <| dlpi_tls_data := β |>)).
      End dl_phdr_info.
      End dl_phdr_info.
      
      Module  Impl_core_marker_Copy_for_libc_unix_linux_like_linux_dl_phdr_info_t.
      Section Impl_core_marker_Copy_for_libc_unix_linux_like_linux_dl_phdr_info_t.
        Definition Self : Set := libc.unix.linux_like.linux.dl_phdr_info.t.
        
        Global Instance ℐ : core.marker.Copy.Trait Self := {
        }.
      End Impl_core_marker_Copy_for_libc_unix_linux_like_linux_dl_phdr_info_t.
      End Impl_core_marker_Copy_for_libc_unix_linux_like_linux_dl_phdr_info_t.
      
      Module  Impl_core_clone_Clone_for_libc_unix_linux_like_linux_dl_phdr_info_t.
      Section Impl_core_clone_Clone_for_libc_unix_linux_like_linux_dl_phdr_info_t.
        Definition Self : Set := libc.unix.linux_like.linux.dl_phdr_info.t.
        
        (*
                    fn clone(&self) -> $i { *self }
        *)
        Definition clone
            (self : ref Self)
            : M libc.unix.linux_like.linux.dl_phdr_info.t :=
          let* self := M.alloc self in
          let* α0 : ref libc.unix.linux_like.linux.dl_phdr_info.t :=
            M.read self in
          M.read (deref α0).
        
        Global Instance AssociatedFunction_clone :
          Notations.DoubleColon Self "clone" := {
          Notations.double_colon := clone;
        }.
        
        Global Instance ℐ : core.clone.Clone.Required.Trait Self := {
          core.clone.Clone.clone := clone;
          core.clone.Clone.clone_from := Datatypes.None;
        }.
      End Impl_core_clone_Clone_for_libc_unix_linux_like_linux_dl_phdr_info_t.
      End Impl_core_clone_Clone_for_libc_unix_linux_like_linux_dl_phdr_info_t.
      
      Module  Elf32_Ehdr.
      Section Elf32_Ehdr.
        Record t : Set := {
          e_ident : array ltac:(libc.unix.c_uchar);
          e_type : ltac:(libc.unix.linux_like.linux.Elf32_Half);
          e_machine : ltac:(libc.unix.linux_like.linux.Elf32_Half);
          e_version : ltac:(libc.unix.linux_like.linux.Elf32_Word);
          e_entry : ltac:(libc.unix.linux_like.linux.Elf32_Addr);
          e_phoff : ltac:(libc.unix.linux_like.linux.Elf32_Off);
          e_shoff : ltac:(libc.unix.linux_like.linux.Elf32_Off);
          e_flags : ltac:(libc.unix.linux_like.linux.Elf32_Word);
          e_ehsize : ltac:(libc.unix.linux_like.linux.Elf32_Half);
          e_phentsize : ltac:(libc.unix.linux_like.linux.Elf32_Half);
          e_phnum : ltac:(libc.unix.linux_like.linux.Elf32_Half);
          e_shentsize : ltac:(libc.unix.linux_like.linux.Elf32_Half);
          e_shnum : ltac:(libc.unix.linux_like.linux.Elf32_Half);
          e_shstrndx : ltac:(libc.unix.linux_like.linux.Elf32_Half);
        }.
        
        Definition Get_e_ident :=
          Ref.map
            (fun α => Some α.(e_ident))
            (fun β α => Some (α <| e_ident := β |>)).
        Definition Get_e_type :=
          Ref.map
            (fun α => Some α.(e_type))
            (fun β α => Some (α <| e_type := β |>)).
        Definition Get_e_machine :=
          Ref.map
            (fun α => Some α.(e_machine))
            (fun β α => Some (α <| e_machine := β |>)).
        Definition Get_e_version :=
          Ref.map
            (fun α => Some α.(e_version))
            (fun β α => Some (α <| e_version := β |>)).
        Definition Get_e_entry :=
          Ref.map
            (fun α => Some α.(e_entry))
            (fun β α => Some (α <| e_entry := β |>)).
        Definition Get_e_phoff :=
          Ref.map
            (fun α => Some α.(e_phoff))
            (fun β α => Some (α <| e_phoff := β |>)).
        Definition Get_e_shoff :=
          Ref.map
            (fun α => Some α.(e_shoff))
            (fun β α => Some (α <| e_shoff := β |>)).
        Definition Get_e_flags :=
          Ref.map
            (fun α => Some α.(e_flags))
            (fun β α => Some (α <| e_flags := β |>)).
        Definition Get_e_ehsize :=
          Ref.map
            (fun α => Some α.(e_ehsize))
            (fun β α => Some (α <| e_ehsize := β |>)).
        Definition Get_e_phentsize :=
          Ref.map
            (fun α => Some α.(e_phentsize))
            (fun β α => Some (α <| e_phentsize := β |>)).
        Definition Get_e_phnum :=
          Ref.map
            (fun α => Some α.(e_phnum))
            (fun β α => Some (α <| e_phnum := β |>)).
        Definition Get_e_shentsize :=
          Ref.map
            (fun α => Some α.(e_shentsize))
            (fun β α => Some (α <| e_shentsize := β |>)).
        Definition Get_e_shnum :=
          Ref.map
            (fun α => Some α.(e_shnum))
            (fun β α => Some (α <| e_shnum := β |>)).
        Definition Get_e_shstrndx :=
          Ref.map
            (fun α => Some α.(e_shstrndx))
            (fun β α => Some (α <| e_shstrndx := β |>)).
      End Elf32_Ehdr.
      End Elf32_Ehdr.
      
      Module  Impl_core_marker_Copy_for_libc_unix_linux_like_linux_Elf32_Ehdr_t.
      Section Impl_core_marker_Copy_for_libc_unix_linux_like_linux_Elf32_Ehdr_t.
        Definition Self : Set := libc.unix.linux_like.linux.Elf32_Ehdr.t.
        
        Global Instance ℐ : core.marker.Copy.Trait Self := {
        }.
      End Impl_core_marker_Copy_for_libc_unix_linux_like_linux_Elf32_Ehdr_t.
      End Impl_core_marker_Copy_for_libc_unix_linux_like_linux_Elf32_Ehdr_t.
      
      Module  Impl_core_clone_Clone_for_libc_unix_linux_like_linux_Elf32_Ehdr_t.
      Section Impl_core_clone_Clone_for_libc_unix_linux_like_linux_Elf32_Ehdr_t.
        Definition Self : Set := libc.unix.linux_like.linux.Elf32_Ehdr.t.
        
        (*
                    fn clone(&self) -> $i { *self }
        *)
        Definition clone
            (self : ref Self)
            : M libc.unix.linux_like.linux.Elf32_Ehdr.t :=
          let* self := M.alloc self in
          let* α0 : ref libc.unix.linux_like.linux.Elf32_Ehdr.t :=
            M.read self in
          M.read (deref α0).
        
        Global Instance AssociatedFunction_clone :
          Notations.DoubleColon Self "clone" := {
          Notations.double_colon := clone;
        }.
        
        Global Instance ℐ : core.clone.Clone.Required.Trait Self := {
          core.clone.Clone.clone := clone;
          core.clone.Clone.clone_from := Datatypes.None;
        }.
      End Impl_core_clone_Clone_for_libc_unix_linux_like_linux_Elf32_Ehdr_t.
      End Impl_core_clone_Clone_for_libc_unix_linux_like_linux_Elf32_Ehdr_t.
      
      Module  Elf64_Ehdr.
      Section Elf64_Ehdr.
        Record t : Set := {
          e_ident : array ltac:(libc.unix.c_uchar);
          e_type : ltac:(libc.unix.linux_like.linux.Elf64_Half);
          e_machine : ltac:(libc.unix.linux_like.linux.Elf64_Half);
          e_version : ltac:(libc.unix.linux_like.linux.Elf64_Word);
          e_entry : ltac:(libc.unix.linux_like.linux.Elf64_Addr);
          e_phoff : ltac:(libc.unix.linux_like.linux.Elf64_Off);
          e_shoff : ltac:(libc.unix.linux_like.linux.Elf64_Off);
          e_flags : ltac:(libc.unix.linux_like.linux.Elf64_Word);
          e_ehsize : ltac:(libc.unix.linux_like.linux.Elf64_Half);
          e_phentsize : ltac:(libc.unix.linux_like.linux.Elf64_Half);
          e_phnum : ltac:(libc.unix.linux_like.linux.Elf64_Half);
          e_shentsize : ltac:(libc.unix.linux_like.linux.Elf64_Half);
          e_shnum : ltac:(libc.unix.linux_like.linux.Elf64_Half);
          e_shstrndx : ltac:(libc.unix.linux_like.linux.Elf64_Half);
        }.
        
        Definition Get_e_ident :=
          Ref.map
            (fun α => Some α.(e_ident))
            (fun β α => Some (α <| e_ident := β |>)).
        Definition Get_e_type :=
          Ref.map
            (fun α => Some α.(e_type))
            (fun β α => Some (α <| e_type := β |>)).
        Definition Get_e_machine :=
          Ref.map
            (fun α => Some α.(e_machine))
            (fun β α => Some (α <| e_machine := β |>)).
        Definition Get_e_version :=
          Ref.map
            (fun α => Some α.(e_version))
            (fun β α => Some (α <| e_version := β |>)).
        Definition Get_e_entry :=
          Ref.map
            (fun α => Some α.(e_entry))
            (fun β α => Some (α <| e_entry := β |>)).
        Definition Get_e_phoff :=
          Ref.map
            (fun α => Some α.(e_phoff))
            (fun β α => Some (α <| e_phoff := β |>)).
        Definition Get_e_shoff :=
          Ref.map
            (fun α => Some α.(e_shoff))
            (fun β α => Some (α <| e_shoff := β |>)).
        Definition Get_e_flags :=
          Ref.map
            (fun α => Some α.(e_flags))
            (fun β α => Some (α <| e_flags := β |>)).
        Definition Get_e_ehsize :=
          Ref.map
            (fun α => Some α.(e_ehsize))
            (fun β α => Some (α <| e_ehsize := β |>)).
        Definition Get_e_phentsize :=
          Ref.map
            (fun α => Some α.(e_phentsize))
            (fun β α => Some (α <| e_phentsize := β |>)).
        Definition Get_e_phnum :=
          Ref.map
            (fun α => Some α.(e_phnum))
            (fun β α => Some (α <| e_phnum := β |>)).
        Definition Get_e_shentsize :=
          Ref.map
            (fun α => Some α.(e_shentsize))
            (fun β α => Some (α <| e_shentsize := β |>)).
        Definition Get_e_shnum :=
          Ref.map
            (fun α => Some α.(e_shnum))
            (fun β α => Some (α <| e_shnum := β |>)).
        Definition Get_e_shstrndx :=
          Ref.map
            (fun α => Some α.(e_shstrndx))
            (fun β α => Some (α <| e_shstrndx := β |>)).
      End Elf64_Ehdr.
      End Elf64_Ehdr.
      
      Module  Impl_core_marker_Copy_for_libc_unix_linux_like_linux_Elf64_Ehdr_t.
      Section Impl_core_marker_Copy_for_libc_unix_linux_like_linux_Elf64_Ehdr_t.
        Definition Self : Set := libc.unix.linux_like.linux.Elf64_Ehdr.t.
        
        Global Instance ℐ : core.marker.Copy.Trait Self := {
        }.
      End Impl_core_marker_Copy_for_libc_unix_linux_like_linux_Elf64_Ehdr_t.
      End Impl_core_marker_Copy_for_libc_unix_linux_like_linux_Elf64_Ehdr_t.
      
      Module  Impl_core_clone_Clone_for_libc_unix_linux_like_linux_Elf64_Ehdr_t.
      Section Impl_core_clone_Clone_for_libc_unix_linux_like_linux_Elf64_Ehdr_t.
        Definition Self : Set := libc.unix.linux_like.linux.Elf64_Ehdr.t.
        
        (*
                    fn clone(&self) -> $i { *self }
        *)
        Definition clone
            (self : ref Self)
            : M libc.unix.linux_like.linux.Elf64_Ehdr.t :=
          let* self := M.alloc self in
          let* α0 : ref libc.unix.linux_like.linux.Elf64_Ehdr.t :=
            M.read self in
          M.read (deref α0).
        
        Global Instance AssociatedFunction_clone :
          Notations.DoubleColon Self "clone" := {
          Notations.double_colon := clone;
        }.
        
        Global Instance ℐ : core.clone.Clone.Required.Trait Self := {
          core.clone.Clone.clone := clone;
          core.clone.Clone.clone_from := Datatypes.None;
        }.
      End Impl_core_clone_Clone_for_libc_unix_linux_like_linux_Elf64_Ehdr_t.
      End Impl_core_clone_Clone_for_libc_unix_linux_like_linux_Elf64_Ehdr_t.
      
      Module  Elf32_Sym.
      Section Elf32_Sym.
        Record t : Set := {
          st_name : ltac:(libc.unix.linux_like.linux.Elf32_Word);
          st_value : ltac:(libc.unix.linux_like.linux.Elf32_Addr);
          st_size : ltac:(libc.unix.linux_like.linux.Elf32_Word);
          st_info : ltac:(libc.unix.c_uchar);
          st_other : ltac:(libc.unix.c_uchar);
          st_shndx : ltac:(libc.unix.linux_like.linux.Elf32_Section);
        }.
        
        Definition Get_st_name :=
          Ref.map
            (fun α => Some α.(st_name))
            (fun β α => Some (α <| st_name := β |>)).
        Definition Get_st_value :=
          Ref.map
            (fun α => Some α.(st_value))
            (fun β α => Some (α <| st_value := β |>)).
        Definition Get_st_size :=
          Ref.map
            (fun α => Some α.(st_size))
            (fun β α => Some (α <| st_size := β |>)).
        Definition Get_st_info :=
          Ref.map
            (fun α => Some α.(st_info))
            (fun β α => Some (α <| st_info := β |>)).
        Definition Get_st_other :=
          Ref.map
            (fun α => Some α.(st_other))
            (fun β α => Some (α <| st_other := β |>)).
        Definition Get_st_shndx :=
          Ref.map
            (fun α => Some α.(st_shndx))
            (fun β α => Some (α <| st_shndx := β |>)).
      End Elf32_Sym.
      End Elf32_Sym.
      
      Module  Impl_core_marker_Copy_for_libc_unix_linux_like_linux_Elf32_Sym_t.
      Section Impl_core_marker_Copy_for_libc_unix_linux_like_linux_Elf32_Sym_t.
        Definition Self : Set := libc.unix.linux_like.linux.Elf32_Sym.t.
        
        Global Instance ℐ : core.marker.Copy.Trait Self := {
        }.
      End Impl_core_marker_Copy_for_libc_unix_linux_like_linux_Elf32_Sym_t.
      End Impl_core_marker_Copy_for_libc_unix_linux_like_linux_Elf32_Sym_t.
      
      Module  Impl_core_clone_Clone_for_libc_unix_linux_like_linux_Elf32_Sym_t.
      Section Impl_core_clone_Clone_for_libc_unix_linux_like_linux_Elf32_Sym_t.
        Definition Self : Set := libc.unix.linux_like.linux.Elf32_Sym.t.
        
        (*
                    fn clone(&self) -> $i { *self }
        *)
        Definition clone
            (self : ref Self)
            : M libc.unix.linux_like.linux.Elf32_Sym.t :=
          let* self := M.alloc self in
          let* α0 : ref libc.unix.linux_like.linux.Elf32_Sym.t := M.read self in
          M.read (deref α0).
        
        Global Instance AssociatedFunction_clone :
          Notations.DoubleColon Self "clone" := {
          Notations.double_colon := clone;
        }.
        
        Global Instance ℐ : core.clone.Clone.Required.Trait Self := {
          core.clone.Clone.clone := clone;
          core.clone.Clone.clone_from := Datatypes.None;
        }.
      End Impl_core_clone_Clone_for_libc_unix_linux_like_linux_Elf32_Sym_t.
      End Impl_core_clone_Clone_for_libc_unix_linux_like_linux_Elf32_Sym_t.
      
      Module  Elf64_Sym.
      Section Elf64_Sym.
        Record t : Set := {
          st_name : ltac:(libc.unix.linux_like.linux.Elf64_Word);
          st_info : ltac:(libc.unix.c_uchar);
          st_other : ltac:(libc.unix.c_uchar);
          st_shndx : ltac:(libc.unix.linux_like.linux.Elf64_Section);
          st_value : ltac:(libc.unix.linux_like.linux.Elf64_Addr);
          st_size : ltac:(libc.unix.linux_like.linux.Elf64_Xword);
        }.
        
        Definition Get_st_name :=
          Ref.map
            (fun α => Some α.(st_name))
            (fun β α => Some (α <| st_name := β |>)).
        Definition Get_st_info :=
          Ref.map
            (fun α => Some α.(st_info))
            (fun β α => Some (α <| st_info := β |>)).
        Definition Get_st_other :=
          Ref.map
            (fun α => Some α.(st_other))
            (fun β α => Some (α <| st_other := β |>)).
        Definition Get_st_shndx :=
          Ref.map
            (fun α => Some α.(st_shndx))
            (fun β α => Some (α <| st_shndx := β |>)).
        Definition Get_st_value :=
          Ref.map
            (fun α => Some α.(st_value))
            (fun β α => Some (α <| st_value := β |>)).
        Definition Get_st_size :=
          Ref.map
            (fun α => Some α.(st_size))
            (fun β α => Some (α <| st_size := β |>)).
      End Elf64_Sym.
      End Elf64_Sym.
      
      Module  Impl_core_marker_Copy_for_libc_unix_linux_like_linux_Elf64_Sym_t.
      Section Impl_core_marker_Copy_for_libc_unix_linux_like_linux_Elf64_Sym_t.
        Definition Self : Set := libc.unix.linux_like.linux.Elf64_Sym.t.
        
        Global Instance ℐ : core.marker.Copy.Trait Self := {
        }.
      End Impl_core_marker_Copy_for_libc_unix_linux_like_linux_Elf64_Sym_t.
      End Impl_core_marker_Copy_for_libc_unix_linux_like_linux_Elf64_Sym_t.
      
      Module  Impl_core_clone_Clone_for_libc_unix_linux_like_linux_Elf64_Sym_t.
      Section Impl_core_clone_Clone_for_libc_unix_linux_like_linux_Elf64_Sym_t.
        Definition Self : Set := libc.unix.linux_like.linux.Elf64_Sym.t.
        
        (*
                    fn clone(&self) -> $i { *self }
        *)
        Definition clone
            (self : ref Self)
            : M libc.unix.linux_like.linux.Elf64_Sym.t :=
          let* self := M.alloc self in
          let* α0 : ref libc.unix.linux_like.linux.Elf64_Sym.t := M.read self in
          M.read (deref α0).
        
        Global Instance AssociatedFunction_clone :
          Notations.DoubleColon Self "clone" := {
          Notations.double_colon := clone;
        }.
        
        Global Instance ℐ : core.clone.Clone.Required.Trait Self := {
          core.clone.Clone.clone := clone;
          core.clone.Clone.clone_from := Datatypes.None;
        }.
      End Impl_core_clone_Clone_for_libc_unix_linux_like_linux_Elf64_Sym_t.
      End Impl_core_clone_Clone_for_libc_unix_linux_like_linux_Elf64_Sym_t.
      
      Module  Elf32_Phdr.
      Section Elf32_Phdr.
        Record t : Set := {
          p_type : ltac:(libc.unix.linux_like.linux.Elf32_Word);
          p_offset : ltac:(libc.unix.linux_like.linux.Elf32_Off);
          p_vaddr : ltac:(libc.unix.linux_like.linux.Elf32_Addr);
          p_paddr : ltac:(libc.unix.linux_like.linux.Elf32_Addr);
          p_filesz : ltac:(libc.unix.linux_like.linux.Elf32_Word);
          p_memsz : ltac:(libc.unix.linux_like.linux.Elf32_Word);
          p_flags : ltac:(libc.unix.linux_like.linux.Elf32_Word);
          p_align : ltac:(libc.unix.linux_like.linux.Elf32_Word);
        }.
        
        Definition Get_p_type :=
          Ref.map
            (fun α => Some α.(p_type))
            (fun β α => Some (α <| p_type := β |>)).
        Definition Get_p_offset :=
          Ref.map
            (fun α => Some α.(p_offset))
            (fun β α => Some (α <| p_offset := β |>)).
        Definition Get_p_vaddr :=
          Ref.map
            (fun α => Some α.(p_vaddr))
            (fun β α => Some (α <| p_vaddr := β |>)).
        Definition Get_p_paddr :=
          Ref.map
            (fun α => Some α.(p_paddr))
            (fun β α => Some (α <| p_paddr := β |>)).
        Definition Get_p_filesz :=
          Ref.map
            (fun α => Some α.(p_filesz))
            (fun β α => Some (α <| p_filesz := β |>)).
        Definition Get_p_memsz :=
          Ref.map
            (fun α => Some α.(p_memsz))
            (fun β α => Some (α <| p_memsz := β |>)).
        Definition Get_p_flags :=
          Ref.map
            (fun α => Some α.(p_flags))
            (fun β α => Some (α <| p_flags := β |>)).
        Definition Get_p_align :=
          Ref.map
            (fun α => Some α.(p_align))
            (fun β α => Some (α <| p_align := β |>)).
      End Elf32_Phdr.
      End Elf32_Phdr.
      
      Module  Impl_core_marker_Copy_for_libc_unix_linux_like_linux_Elf32_Phdr_t.
      Section Impl_core_marker_Copy_for_libc_unix_linux_like_linux_Elf32_Phdr_t.
        Definition Self : Set := libc.unix.linux_like.linux.Elf32_Phdr.t.
        
        Global Instance ℐ : core.marker.Copy.Trait Self := {
        }.
      End Impl_core_marker_Copy_for_libc_unix_linux_like_linux_Elf32_Phdr_t.
      End Impl_core_marker_Copy_for_libc_unix_linux_like_linux_Elf32_Phdr_t.
      
      Module  Impl_core_clone_Clone_for_libc_unix_linux_like_linux_Elf32_Phdr_t.
      Section Impl_core_clone_Clone_for_libc_unix_linux_like_linux_Elf32_Phdr_t.
        Definition Self : Set := libc.unix.linux_like.linux.Elf32_Phdr.t.
        
        (*
                    fn clone(&self) -> $i { *self }
        *)
        Definition clone
            (self : ref Self)
            : M libc.unix.linux_like.linux.Elf32_Phdr.t :=
          let* self := M.alloc self in
          let* α0 : ref libc.unix.linux_like.linux.Elf32_Phdr.t :=
            M.read self in
          M.read (deref α0).
        
        Global Instance AssociatedFunction_clone :
          Notations.DoubleColon Self "clone" := {
          Notations.double_colon := clone;
        }.
        
        Global Instance ℐ : core.clone.Clone.Required.Trait Self := {
          core.clone.Clone.clone := clone;
          core.clone.Clone.clone_from := Datatypes.None;
        }.
      End Impl_core_clone_Clone_for_libc_unix_linux_like_linux_Elf32_Phdr_t.
      End Impl_core_clone_Clone_for_libc_unix_linux_like_linux_Elf32_Phdr_t.
      
      Module  Elf64_Phdr.
      Section Elf64_Phdr.
        Record t : Set := {
          p_type : ltac:(libc.unix.linux_like.linux.Elf64_Word);
          p_flags : ltac:(libc.unix.linux_like.linux.Elf64_Word);
          p_offset : ltac:(libc.unix.linux_like.linux.Elf64_Off);
          p_vaddr : ltac:(libc.unix.linux_like.linux.Elf64_Addr);
          p_paddr : ltac:(libc.unix.linux_like.linux.Elf64_Addr);
          p_filesz : ltac:(libc.unix.linux_like.linux.Elf64_Xword);
          p_memsz : ltac:(libc.unix.linux_like.linux.Elf64_Xword);
          p_align : ltac:(libc.unix.linux_like.linux.Elf64_Xword);
        }.
        
        Definition Get_p_type :=
          Ref.map
            (fun α => Some α.(p_type))
            (fun β α => Some (α <| p_type := β |>)).
        Definition Get_p_flags :=
          Ref.map
            (fun α => Some α.(p_flags))
            (fun β α => Some (α <| p_flags := β |>)).
        Definition Get_p_offset :=
          Ref.map
            (fun α => Some α.(p_offset))
            (fun β α => Some (α <| p_offset := β |>)).
        Definition Get_p_vaddr :=
          Ref.map
            (fun α => Some α.(p_vaddr))
            (fun β α => Some (α <| p_vaddr := β |>)).
        Definition Get_p_paddr :=
          Ref.map
            (fun α => Some α.(p_paddr))
            (fun β α => Some (α <| p_paddr := β |>)).
        Definition Get_p_filesz :=
          Ref.map
            (fun α => Some α.(p_filesz))
            (fun β α => Some (α <| p_filesz := β |>)).
        Definition Get_p_memsz :=
          Ref.map
            (fun α => Some α.(p_memsz))
            (fun β α => Some (α <| p_memsz := β |>)).
        Definition Get_p_align :=
          Ref.map
            (fun α => Some α.(p_align))
            (fun β α => Some (α <| p_align := β |>)).
      End Elf64_Phdr.
      End Elf64_Phdr.
      
      Module  Impl_core_marker_Copy_for_libc_unix_linux_like_linux_Elf64_Phdr_t.
      Section Impl_core_marker_Copy_for_libc_unix_linux_like_linux_Elf64_Phdr_t.
        Definition Self : Set := libc.unix.linux_like.linux.Elf64_Phdr.t.
        
        Global Instance ℐ : core.marker.Copy.Trait Self := {
        }.
      End Impl_core_marker_Copy_for_libc_unix_linux_like_linux_Elf64_Phdr_t.
      End Impl_core_marker_Copy_for_libc_unix_linux_like_linux_Elf64_Phdr_t.
      
      Module  Impl_core_clone_Clone_for_libc_unix_linux_like_linux_Elf64_Phdr_t.
      Section Impl_core_clone_Clone_for_libc_unix_linux_like_linux_Elf64_Phdr_t.
        Definition Self : Set := libc.unix.linux_like.linux.Elf64_Phdr.t.
        
        (*
                    fn clone(&self) -> $i { *self }
        *)
        Definition clone
            (self : ref Self)
            : M libc.unix.linux_like.linux.Elf64_Phdr.t :=
          let* self := M.alloc self in
          let* α0 : ref libc.unix.linux_like.linux.Elf64_Phdr.t :=
            M.read self in
          M.read (deref α0).
        
        Global Instance AssociatedFunction_clone :
          Notations.DoubleColon Self "clone" := {
          Notations.double_colon := clone;
        }.
        
        Global Instance ℐ : core.clone.Clone.Required.Trait Self := {
          core.clone.Clone.clone := clone;
          core.clone.Clone.clone_from := Datatypes.None;
        }.
      End Impl_core_clone_Clone_for_libc_unix_linux_like_linux_Elf64_Phdr_t.
      End Impl_core_clone_Clone_for_libc_unix_linux_like_linux_Elf64_Phdr_t.
      
      Module  Elf32_Shdr.
      Section Elf32_Shdr.
        Record t : Set := {
          sh_name : ltac:(libc.unix.linux_like.linux.Elf32_Word);
          sh_type : ltac:(libc.unix.linux_like.linux.Elf32_Word);
          sh_flags : ltac:(libc.unix.linux_like.linux.Elf32_Word);
          sh_addr : ltac:(libc.unix.linux_like.linux.Elf32_Addr);
          sh_offset : ltac:(libc.unix.linux_like.linux.Elf32_Off);
          sh_size : ltac:(libc.unix.linux_like.linux.Elf32_Word);
          sh_link : ltac:(libc.unix.linux_like.linux.Elf32_Word);
          sh_info : ltac:(libc.unix.linux_like.linux.Elf32_Word);
          sh_addralign : ltac:(libc.unix.linux_like.linux.Elf32_Word);
          sh_entsize : ltac:(libc.unix.linux_like.linux.Elf32_Word);
        }.
        
        Definition Get_sh_name :=
          Ref.map
            (fun α => Some α.(sh_name))
            (fun β α => Some (α <| sh_name := β |>)).
        Definition Get_sh_type :=
          Ref.map
            (fun α => Some α.(sh_type))
            (fun β α => Some (α <| sh_type := β |>)).
        Definition Get_sh_flags :=
          Ref.map
            (fun α => Some α.(sh_flags))
            (fun β α => Some (α <| sh_flags := β |>)).
        Definition Get_sh_addr :=
          Ref.map
            (fun α => Some α.(sh_addr))
            (fun β α => Some (α <| sh_addr := β |>)).
        Definition Get_sh_offset :=
          Ref.map
            (fun α => Some α.(sh_offset))
            (fun β α => Some (α <| sh_offset := β |>)).
        Definition Get_sh_size :=
          Ref.map
            (fun α => Some α.(sh_size))
            (fun β α => Some (α <| sh_size := β |>)).
        Definition Get_sh_link :=
          Ref.map
            (fun α => Some α.(sh_link))
            (fun β α => Some (α <| sh_link := β |>)).
        Definition Get_sh_info :=
          Ref.map
            (fun α => Some α.(sh_info))
            (fun β α => Some (α <| sh_info := β |>)).
        Definition Get_sh_addralign :=
          Ref.map
            (fun α => Some α.(sh_addralign))
            (fun β α => Some (α <| sh_addralign := β |>)).
        Definition Get_sh_entsize :=
          Ref.map
            (fun α => Some α.(sh_entsize))
            (fun β α => Some (α <| sh_entsize := β |>)).
      End Elf32_Shdr.
      End Elf32_Shdr.
      
      Module  Impl_core_marker_Copy_for_libc_unix_linux_like_linux_Elf32_Shdr_t.
      Section Impl_core_marker_Copy_for_libc_unix_linux_like_linux_Elf32_Shdr_t.
        Definition Self : Set := libc.unix.linux_like.linux.Elf32_Shdr.t.
        
        Global Instance ℐ : core.marker.Copy.Trait Self := {
        }.
      End Impl_core_marker_Copy_for_libc_unix_linux_like_linux_Elf32_Shdr_t.
      End Impl_core_marker_Copy_for_libc_unix_linux_like_linux_Elf32_Shdr_t.
      
      Module  Impl_core_clone_Clone_for_libc_unix_linux_like_linux_Elf32_Shdr_t.
      Section Impl_core_clone_Clone_for_libc_unix_linux_like_linux_Elf32_Shdr_t.
        Definition Self : Set := libc.unix.linux_like.linux.Elf32_Shdr.t.
        
        (*
                    fn clone(&self) -> $i { *self }
        *)
        Definition clone
            (self : ref Self)
            : M libc.unix.linux_like.linux.Elf32_Shdr.t :=
          let* self := M.alloc self in
          let* α0 : ref libc.unix.linux_like.linux.Elf32_Shdr.t :=
            M.read self in
          M.read (deref α0).
        
        Global Instance AssociatedFunction_clone :
          Notations.DoubleColon Self "clone" := {
          Notations.double_colon := clone;
        }.
        
        Global Instance ℐ : core.clone.Clone.Required.Trait Self := {
          core.clone.Clone.clone := clone;
          core.clone.Clone.clone_from := Datatypes.None;
        }.
      End Impl_core_clone_Clone_for_libc_unix_linux_like_linux_Elf32_Shdr_t.
      End Impl_core_clone_Clone_for_libc_unix_linux_like_linux_Elf32_Shdr_t.
      
      Module  Elf64_Shdr.
      Section Elf64_Shdr.
        Record t : Set := {
          sh_name : ltac:(libc.unix.linux_like.linux.Elf64_Word);
          sh_type : ltac:(libc.unix.linux_like.linux.Elf64_Word);
          sh_flags : ltac:(libc.unix.linux_like.linux.Elf64_Xword);
          sh_addr : ltac:(libc.unix.linux_like.linux.Elf64_Addr);
          sh_offset : ltac:(libc.unix.linux_like.linux.Elf64_Off);
          sh_size : ltac:(libc.unix.linux_like.linux.Elf64_Xword);
          sh_link : ltac:(libc.unix.linux_like.linux.Elf64_Word);
          sh_info : ltac:(libc.unix.linux_like.linux.Elf64_Word);
          sh_addralign : ltac:(libc.unix.linux_like.linux.Elf64_Xword);
          sh_entsize : ltac:(libc.unix.linux_like.linux.Elf64_Xword);
        }.
        
        Definition Get_sh_name :=
          Ref.map
            (fun α => Some α.(sh_name))
            (fun β α => Some (α <| sh_name := β |>)).
        Definition Get_sh_type :=
          Ref.map
            (fun α => Some α.(sh_type))
            (fun β α => Some (α <| sh_type := β |>)).
        Definition Get_sh_flags :=
          Ref.map
            (fun α => Some α.(sh_flags))
            (fun β α => Some (α <| sh_flags := β |>)).
        Definition Get_sh_addr :=
          Ref.map
            (fun α => Some α.(sh_addr))
            (fun β α => Some (α <| sh_addr := β |>)).
        Definition Get_sh_offset :=
          Ref.map
            (fun α => Some α.(sh_offset))
            (fun β α => Some (α <| sh_offset := β |>)).
        Definition Get_sh_size :=
          Ref.map
            (fun α => Some α.(sh_size))
            (fun β α => Some (α <| sh_size := β |>)).
        Definition Get_sh_link :=
          Ref.map
            (fun α => Some α.(sh_link))
            (fun β α => Some (α <| sh_link := β |>)).
        Definition Get_sh_info :=
          Ref.map
            (fun α => Some α.(sh_info))
            (fun β α => Some (α <| sh_info := β |>)).
        Definition Get_sh_addralign :=
          Ref.map
            (fun α => Some α.(sh_addralign))
            (fun β α => Some (α <| sh_addralign := β |>)).
        Definition Get_sh_entsize :=
          Ref.map
            (fun α => Some α.(sh_entsize))
            (fun β α => Some (α <| sh_entsize := β |>)).
      End Elf64_Shdr.
      End Elf64_Shdr.
      
      Module  Impl_core_marker_Copy_for_libc_unix_linux_like_linux_Elf64_Shdr_t.
      Section Impl_core_marker_Copy_for_libc_unix_linux_like_linux_Elf64_Shdr_t.
        Definition Self : Set := libc.unix.linux_like.linux.Elf64_Shdr.t.
        
        Global Instance ℐ : core.marker.Copy.Trait Self := {
        }.
      End Impl_core_marker_Copy_for_libc_unix_linux_like_linux_Elf64_Shdr_t.
      End Impl_core_marker_Copy_for_libc_unix_linux_like_linux_Elf64_Shdr_t.
      
      Module  Impl_core_clone_Clone_for_libc_unix_linux_like_linux_Elf64_Shdr_t.
      Section Impl_core_clone_Clone_for_libc_unix_linux_like_linux_Elf64_Shdr_t.
        Definition Self : Set := libc.unix.linux_like.linux.Elf64_Shdr.t.
        
        (*
                    fn clone(&self) -> $i { *self }
        *)
        Definition clone
            (self : ref Self)
            : M libc.unix.linux_like.linux.Elf64_Shdr.t :=
          let* self := M.alloc self in
          let* α0 : ref libc.unix.linux_like.linux.Elf64_Shdr.t :=
            M.read self in
          M.read (deref α0).
        
        Global Instance AssociatedFunction_clone :
          Notations.DoubleColon Self "clone" := {
          Notations.double_colon := clone;
        }.
        
        Global Instance ℐ : core.clone.Clone.Required.Trait Self := {
          core.clone.Clone.clone := clone;
          core.clone.Clone.clone_from := Datatypes.None;
        }.
      End Impl_core_clone_Clone_for_libc_unix_linux_like_linux_Elf64_Shdr_t.
      End Impl_core_clone_Clone_for_libc_unix_linux_like_linux_Elf64_Shdr_t.
      
      Module  __c_anonymous_elf32_rel.
      Section __c_anonymous_elf32_rel.
        Record t : Set := {
          r_offset : ltac:(libc.unix.linux_like.linux.Elf32_Addr);
          r_info : ltac:(libc.unix.linux_like.linux.Elf32_Word);
        }.
        
        Definition Get_r_offset :=
          Ref.map
            (fun α => Some α.(r_offset))
            (fun β α => Some (α <| r_offset := β |>)).
        Definition Get_r_info :=
          Ref.map
            (fun α => Some α.(r_info))
            (fun β α => Some (α <| r_info := β |>)).
      End __c_anonymous_elf32_rel.
      End __c_anonymous_elf32_rel.
      
      Module  Impl_core_marker_Copy_for_libc_unix_linux_like_linux___c_anonymous_elf32_rel_t.
      Section Impl_core_marker_Copy_for_libc_unix_linux_like_linux___c_anonymous_elf32_rel_t.
        Definition Self : Set :=
          libc.unix.linux_like.linux.__c_anonymous_elf32_rel.t.
        
        Global Instance ℐ : core.marker.Copy.Trait Self := {
        }.
      End Impl_core_marker_Copy_for_libc_unix_linux_like_linux___c_anonymous_elf32_rel_t.
      End Impl_core_marker_Copy_for_libc_unix_linux_like_linux___c_anonymous_elf32_rel_t.
      
      Module  Impl_core_clone_Clone_for_libc_unix_linux_like_linux___c_anonymous_elf32_rel_t.
      Section Impl_core_clone_Clone_for_libc_unix_linux_like_linux___c_anonymous_elf32_rel_t.
        Definition Self : Set :=
          libc.unix.linux_like.linux.__c_anonymous_elf32_rel.t.
        
        (*
                    fn clone(&self) -> $i { *self }
        *)
        Definition clone
            (self : ref Self)
            : M libc.unix.linux_like.linux.__c_anonymous_elf32_rel.t :=
          let* self := M.alloc self in
          let* α0 : ref libc.unix.linux_like.linux.__c_anonymous_elf32_rel.t :=
            M.read self in
          M.read (deref α0).
        
        Global Instance AssociatedFunction_clone :
          Notations.DoubleColon Self "clone" := {
          Notations.double_colon := clone;
        }.
        
        Global Instance ℐ : core.clone.Clone.Required.Trait Self := {
          core.clone.Clone.clone := clone;
          core.clone.Clone.clone_from := Datatypes.None;
        }.
      End Impl_core_clone_Clone_for_libc_unix_linux_like_linux___c_anonymous_elf32_rel_t.
      End Impl_core_clone_Clone_for_libc_unix_linux_like_linux___c_anonymous_elf32_rel_t.
      
      Module  __c_anonymous_elf64_rel.
      Section __c_anonymous_elf64_rel.
        Record t : Set := {
          r_offset : ltac:(libc.unix.linux_like.linux.Elf64_Addr);
          r_info : ltac:(libc.unix.linux_like.linux.Elf64_Xword);
        }.
        
        Definition Get_r_offset :=
          Ref.map
            (fun α => Some α.(r_offset))
            (fun β α => Some (α <| r_offset := β |>)).
        Definition Get_r_info :=
          Ref.map
            (fun α => Some α.(r_info))
            (fun β α => Some (α <| r_info := β |>)).
      End __c_anonymous_elf64_rel.
      End __c_anonymous_elf64_rel.
      
      Module  Impl_core_marker_Copy_for_libc_unix_linux_like_linux___c_anonymous_elf64_rel_t.
      Section Impl_core_marker_Copy_for_libc_unix_linux_like_linux___c_anonymous_elf64_rel_t.
        Definition Self : Set :=
          libc.unix.linux_like.linux.__c_anonymous_elf64_rel.t.
        
        Global Instance ℐ : core.marker.Copy.Trait Self := {
        }.
      End Impl_core_marker_Copy_for_libc_unix_linux_like_linux___c_anonymous_elf64_rel_t.
      End Impl_core_marker_Copy_for_libc_unix_linux_like_linux___c_anonymous_elf64_rel_t.
      
      Module  Impl_core_clone_Clone_for_libc_unix_linux_like_linux___c_anonymous_elf64_rel_t.
      Section Impl_core_clone_Clone_for_libc_unix_linux_like_linux___c_anonymous_elf64_rel_t.
        Definition Self : Set :=
          libc.unix.linux_like.linux.__c_anonymous_elf64_rel.t.
        
        (*
                    fn clone(&self) -> $i { *self }
        *)
        Definition clone
            (self : ref Self)
            : M libc.unix.linux_like.linux.__c_anonymous_elf64_rel.t :=
          let* self := M.alloc self in
          let* α0 : ref libc.unix.linux_like.linux.__c_anonymous_elf64_rel.t :=
            M.read self in
          M.read (deref α0).
        
        Global Instance AssociatedFunction_clone :
          Notations.DoubleColon Self "clone" := {
          Notations.double_colon := clone;
        }.
        
        Global Instance ℐ : core.clone.Clone.Required.Trait Self := {
          core.clone.Clone.clone := clone;
          core.clone.Clone.clone_from := Datatypes.None;
        }.
      End Impl_core_clone_Clone_for_libc_unix_linux_like_linux___c_anonymous_elf64_rel_t.
      End Impl_core_clone_Clone_for_libc_unix_linux_like_linux___c_anonymous_elf64_rel_t.
      
      Module  ucred.
      Section ucred.
        Record t : Set := {
          pid : ltac:(libc.unix.pid_t);
          uid : ltac:(libc.unix.uid_t);
          gid : ltac:(libc.unix.gid_t);
        }.
        
        Definition Get_pid :=
          Ref.map (fun α => Some α.(pid)) (fun β α => Some (α <| pid := β |>)).
        Definition Get_uid :=
          Ref.map (fun α => Some α.(uid)) (fun β α => Some (α <| uid := β |>)).
        Definition Get_gid :=
          Ref.map (fun α => Some α.(gid)) (fun β α => Some (α <| gid := β |>)).
      End ucred.
      End ucred.
      
      Module  Impl_core_marker_Copy_for_libc_unix_linux_like_linux_ucred_t.
      Section Impl_core_marker_Copy_for_libc_unix_linux_like_linux_ucred_t.
        Definition Self : Set := libc.unix.linux_like.linux.ucred.t.
        
        Global Instance ℐ : core.marker.Copy.Trait Self := {
        }.
      End Impl_core_marker_Copy_for_libc_unix_linux_like_linux_ucred_t.
      End Impl_core_marker_Copy_for_libc_unix_linux_like_linux_ucred_t.
      
      Module  Impl_core_clone_Clone_for_libc_unix_linux_like_linux_ucred_t.
      Section Impl_core_clone_Clone_for_libc_unix_linux_like_linux_ucred_t.
        Definition Self : Set := libc.unix.linux_like.linux.ucred.t.
        
        (*
                    fn clone(&self) -> $i { *self }
        *)
        Definition clone
            (self : ref Self)
            : M libc.unix.linux_like.linux.ucred.t :=
          let* self := M.alloc self in
          let* α0 : ref libc.unix.linux_like.linux.ucred.t := M.read self in
          M.read (deref α0).
        
        Global Instance AssociatedFunction_clone :
          Notations.DoubleColon Self "clone" := {
          Notations.double_colon := clone;
        }.
        
        Global Instance ℐ : core.clone.Clone.Required.Trait Self := {
          core.clone.Clone.clone := clone;
          core.clone.Clone.clone_from := Datatypes.None;
        }.
      End Impl_core_clone_Clone_for_libc_unix_linux_like_linux_ucred_t.
      End Impl_core_clone_Clone_for_libc_unix_linux_like_linux_ucred_t.
      
      Module  mntent.
      Section mntent.
        Record t : Set := {
          mnt_fsname :
            mut_ref ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.c_char);
          mnt_dir :
            mut_ref ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.c_char);
          mnt_type :
            mut_ref ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.c_char);
          mnt_opts :
            mut_ref ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.c_char);
          mnt_freq : ltac:(libc.unix.c_int);
          mnt_passno : ltac:(libc.unix.c_int);
        }.
        
        Definition Get_mnt_fsname :=
          Ref.map
            (fun α => Some α.(mnt_fsname))
            (fun β α => Some (α <| mnt_fsname := β |>)).
        Definition Get_mnt_dir :=
          Ref.map
            (fun α => Some α.(mnt_dir))
            (fun β α => Some (α <| mnt_dir := β |>)).
        Definition Get_mnt_type :=
          Ref.map
            (fun α => Some α.(mnt_type))
            (fun β α => Some (α <| mnt_type := β |>)).
        Definition Get_mnt_opts :=
          Ref.map
            (fun α => Some α.(mnt_opts))
            (fun β α => Some (α <| mnt_opts := β |>)).
        Definition Get_mnt_freq :=
          Ref.map
            (fun α => Some α.(mnt_freq))
            (fun β α => Some (α <| mnt_freq := β |>)).
        Definition Get_mnt_passno :=
          Ref.map
            (fun α => Some α.(mnt_passno))
            (fun β α => Some (α <| mnt_passno := β |>)).
      End mntent.
      End mntent.
      
      Module  Impl_core_marker_Copy_for_libc_unix_linux_like_linux_mntent_t.
      Section Impl_core_marker_Copy_for_libc_unix_linux_like_linux_mntent_t.
        Definition Self : Set := libc.unix.linux_like.linux.mntent.t.
        
        Global Instance ℐ : core.marker.Copy.Trait Self := {
        }.
      End Impl_core_marker_Copy_for_libc_unix_linux_like_linux_mntent_t.
      End Impl_core_marker_Copy_for_libc_unix_linux_like_linux_mntent_t.
      
      Module  Impl_core_clone_Clone_for_libc_unix_linux_like_linux_mntent_t.
      Section Impl_core_clone_Clone_for_libc_unix_linux_like_linux_mntent_t.
        Definition Self : Set := libc.unix.linux_like.linux.mntent.t.
        
        (*
                    fn clone(&self) -> $i { *self }
        *)
        Definition clone
            (self : ref Self)
            : M libc.unix.linux_like.linux.mntent.t :=
          let* self := M.alloc self in
          let* α0 : ref libc.unix.linux_like.linux.mntent.t := M.read self in
          M.read (deref α0).
        
        Global Instance AssociatedFunction_clone :
          Notations.DoubleColon Self "clone" := {
          Notations.double_colon := clone;
        }.
        
        Global Instance ℐ : core.clone.Clone.Required.Trait Self := {
          core.clone.Clone.clone := clone;
          core.clone.Clone.clone_from := Datatypes.None;
        }.
      End Impl_core_clone_Clone_for_libc_unix_linux_like_linux_mntent_t.
      End Impl_core_clone_Clone_for_libc_unix_linux_like_linux_mntent_t.
      
      Module  posix_spawn_file_actions_t.
      Section posix_spawn_file_actions_t.
        Record t : Set := {
          __allocated : ltac:(libc.unix.c_int);
          __used : ltac:(libc.unix.c_int);
          __actions : mut_ref ltac:(libc.unix.c_int);
          __pad : array ltac:(libc.unix.c_int);
        }.
        
        Definition Get___allocated :=
          Ref.map
            (fun α => Some α.(__allocated))
            (fun β α => Some (α <| __allocated := β |>)).
        Definition Get___used :=
          Ref.map
            (fun α => Some α.(__used))
            (fun β α => Some (α <| __used := β |>)).
        Definition Get___actions :=
          Ref.map
            (fun α => Some α.(__actions))
            (fun β α => Some (α <| __actions := β |>)).
        Definition Get___pad :=
          Ref.map
            (fun α => Some α.(__pad))
            (fun β α => Some (α <| __pad := β |>)).
      End posix_spawn_file_actions_t.
      End posix_spawn_file_actions_t.
      
      Module  Impl_core_marker_Copy_for_libc_unix_linux_like_linux_posix_spawn_file_actions_t_t.
      Section Impl_core_marker_Copy_for_libc_unix_linux_like_linux_posix_spawn_file_actions_t_t.
        Definition Self : Set :=
          libc.unix.linux_like.linux.posix_spawn_file_actions_t.t.
        
        Global Instance ℐ : core.marker.Copy.Trait Self := {
        }.
      End Impl_core_marker_Copy_for_libc_unix_linux_like_linux_posix_spawn_file_actions_t_t.
      End Impl_core_marker_Copy_for_libc_unix_linux_like_linux_posix_spawn_file_actions_t_t.
      
      Module  Impl_core_clone_Clone_for_libc_unix_linux_like_linux_posix_spawn_file_actions_t_t.
      Section Impl_core_clone_Clone_for_libc_unix_linux_like_linux_posix_spawn_file_actions_t_t.
        Definition Self : Set :=
          libc.unix.linux_like.linux.posix_spawn_file_actions_t.t.
        
        (*
                    fn clone(&self) -> $i { *self }
        *)
        Definition clone
            (self : ref Self)
            : M libc.unix.linux_like.linux.posix_spawn_file_actions_t.t :=
          let* self := M.alloc self in
          let* α0 :
              ref libc.unix.linux_like.linux.posix_spawn_file_actions_t.t :=
            M.read self in
          M.read (deref α0).
        
        Global Instance AssociatedFunction_clone :
          Notations.DoubleColon Self "clone" := {
          Notations.double_colon := clone;
        }.
        
        Global Instance ℐ : core.clone.Clone.Required.Trait Self := {
          core.clone.Clone.clone := clone;
          core.clone.Clone.clone_from := Datatypes.None;
        }.
      End Impl_core_clone_Clone_for_libc_unix_linux_like_linux_posix_spawn_file_actions_t_t.
      End Impl_core_clone_Clone_for_libc_unix_linux_like_linux_posix_spawn_file_actions_t_t.
      
      Module  posix_spawnattr_t.
      Section posix_spawnattr_t.
        Record t : Set := {
          __flags : ltac:(libc.unix.c_short);
          __pgrp : ltac:(libc.unix.pid_t);
          __sd : libc.unix.linux_like.linux.gnu.b64.sigset_t.t;
          __ss : libc.unix.linux_like.linux.gnu.b64.sigset_t.t;
          __sp : libc.unix.linux_like.sched_param.t;
          __policy : ltac:(libc.unix.c_int);
          __pad : array ltac:(libc.unix.c_int);
        }.
        
        Definition Get___flags :=
          Ref.map
            (fun α => Some α.(__flags))
            (fun β α => Some (α <| __flags := β |>)).
        Definition Get___pgrp :=
          Ref.map
            (fun α => Some α.(__pgrp))
            (fun β α => Some (α <| __pgrp := β |>)).
        Definition Get___sd :=
          Ref.map
            (fun α => Some α.(__sd))
            (fun β α => Some (α <| __sd := β |>)).
        Definition Get___ss :=
          Ref.map
            (fun α => Some α.(__ss))
            (fun β α => Some (α <| __ss := β |>)).
        Definition Get___sp :=
          Ref.map
            (fun α => Some α.(__sp))
            (fun β α => Some (α <| __sp := β |>)).
        Definition Get___policy :=
          Ref.map
            (fun α => Some α.(__policy))
            (fun β α => Some (α <| __policy := β |>)).
        Definition Get___pad :=
          Ref.map
            (fun α => Some α.(__pad))
            (fun β α => Some (α <| __pad := β |>)).
      End posix_spawnattr_t.
      End posix_spawnattr_t.
      
      Module  Impl_core_marker_Copy_for_libc_unix_linux_like_linux_posix_spawnattr_t_t.
      Section Impl_core_marker_Copy_for_libc_unix_linux_like_linux_posix_spawnattr_t_t.
        Definition Self : Set := libc.unix.linux_like.linux.posix_spawnattr_t.t.
        
        Global Instance ℐ : core.marker.Copy.Trait Self := {
        }.
      End Impl_core_marker_Copy_for_libc_unix_linux_like_linux_posix_spawnattr_t_t.
      End Impl_core_marker_Copy_for_libc_unix_linux_like_linux_posix_spawnattr_t_t.
      
      Module  Impl_core_clone_Clone_for_libc_unix_linux_like_linux_posix_spawnattr_t_t.
      Section Impl_core_clone_Clone_for_libc_unix_linux_like_linux_posix_spawnattr_t_t.
        Definition Self : Set := libc.unix.linux_like.linux.posix_spawnattr_t.t.
        
        (*
                    fn clone(&self) -> $i { *self }
        *)
        Definition clone
            (self : ref Self)
            : M libc.unix.linux_like.linux.posix_spawnattr_t.t :=
          let* self := M.alloc self in
          let* α0 : ref libc.unix.linux_like.linux.posix_spawnattr_t.t :=
            M.read self in
          M.read (deref α0).
        
        Global Instance AssociatedFunction_clone :
          Notations.DoubleColon Self "clone" := {
          Notations.double_colon := clone;
        }.
        
        Global Instance ℐ : core.clone.Clone.Required.Trait Self := {
          core.clone.Clone.clone := clone;
          core.clone.Clone.clone_from := Datatypes.None;
        }.
      End Impl_core_clone_Clone_for_libc_unix_linux_like_linux_posix_spawnattr_t_t.
      End Impl_core_clone_Clone_for_libc_unix_linux_like_linux_posix_spawnattr_t_t.
      
      Module  genlmsghdr.
      Section genlmsghdr.
        Record t : Set := {
          cmd : u8.t;
          version : u8.t;
          reserved : u16.t;
        }.
        
        Definition Get_cmd :=
          Ref.map (fun α => Some α.(cmd)) (fun β α => Some (α <| cmd := β |>)).
        Definition Get_version :=
          Ref.map
            (fun α => Some α.(version))
            (fun β α => Some (α <| version := β |>)).
        Definition Get_reserved :=
          Ref.map
            (fun α => Some α.(reserved))
            (fun β α => Some (α <| reserved := β |>)).
      End genlmsghdr.
      End genlmsghdr.
      
      Module  Impl_core_marker_Copy_for_libc_unix_linux_like_linux_genlmsghdr_t.
      Section Impl_core_marker_Copy_for_libc_unix_linux_like_linux_genlmsghdr_t.
        Definition Self : Set := libc.unix.linux_like.linux.genlmsghdr.t.
        
        Global Instance ℐ : core.marker.Copy.Trait Self := {
        }.
      End Impl_core_marker_Copy_for_libc_unix_linux_like_linux_genlmsghdr_t.
      End Impl_core_marker_Copy_for_libc_unix_linux_like_linux_genlmsghdr_t.
      
      Module  Impl_core_clone_Clone_for_libc_unix_linux_like_linux_genlmsghdr_t.
      Section Impl_core_clone_Clone_for_libc_unix_linux_like_linux_genlmsghdr_t.
        Definition Self : Set := libc.unix.linux_like.linux.genlmsghdr.t.
        
        (*
                    fn clone(&self) -> $i { *self }
        *)
        Definition clone
            (self : ref Self)
            : M libc.unix.linux_like.linux.genlmsghdr.t :=
          let* self := M.alloc self in
          let* α0 : ref libc.unix.linux_like.linux.genlmsghdr.t :=
            M.read self in
          M.read (deref α0).
        
        Global Instance AssociatedFunction_clone :
          Notations.DoubleColon Self "clone" := {
          Notations.double_colon := clone;
        }.
        
        Global Instance ℐ : core.clone.Clone.Required.Trait Self := {
          core.clone.Clone.clone := clone;
          core.clone.Clone.clone_from := Datatypes.None;
        }.
      End Impl_core_clone_Clone_for_libc_unix_linux_like_linux_genlmsghdr_t.
      End Impl_core_clone_Clone_for_libc_unix_linux_like_linux_genlmsghdr_t.
      
      Module  in6_pktinfo.
      Section in6_pktinfo.
        Record t : Set := {
          ipi6_addr : libc.unix.align.in6_addr.t;
          ipi6_ifindex : ltac:(libc.unix.c_uint);
        }.
        
        Definition Get_ipi6_addr :=
          Ref.map
            (fun α => Some α.(ipi6_addr))
            (fun β α => Some (α <| ipi6_addr := β |>)).
        Definition Get_ipi6_ifindex :=
          Ref.map
            (fun α => Some α.(ipi6_ifindex))
            (fun β α => Some (α <| ipi6_ifindex := β |>)).
      End in6_pktinfo.
      End in6_pktinfo.
      
      Module  Impl_core_marker_Copy_for_libc_unix_linux_like_linux_in6_pktinfo_t.
      Section Impl_core_marker_Copy_for_libc_unix_linux_like_linux_in6_pktinfo_t.
        Definition Self : Set := libc.unix.linux_like.linux.in6_pktinfo.t.
        
        Global Instance ℐ : core.marker.Copy.Trait Self := {
        }.
      End Impl_core_marker_Copy_for_libc_unix_linux_like_linux_in6_pktinfo_t.
      End Impl_core_marker_Copy_for_libc_unix_linux_like_linux_in6_pktinfo_t.
      
      Module  Impl_core_clone_Clone_for_libc_unix_linux_like_linux_in6_pktinfo_t.
      Section Impl_core_clone_Clone_for_libc_unix_linux_like_linux_in6_pktinfo_t.
        Definition Self : Set := libc.unix.linux_like.linux.in6_pktinfo.t.
        
        (*
                    fn clone(&self) -> $i { *self }
        *)
        Definition clone
            (self : ref Self)
            : M libc.unix.linux_like.linux.in6_pktinfo.t :=
          let* self := M.alloc self in
          let* α0 : ref libc.unix.linux_like.linux.in6_pktinfo.t :=
            M.read self in
          M.read (deref α0).
        
        Global Instance AssociatedFunction_clone :
          Notations.DoubleColon Self "clone" := {
          Notations.double_colon := clone;
        }.
        
        Global Instance ℐ : core.clone.Clone.Required.Trait Self := {
          core.clone.Clone.clone := clone;
          core.clone.Clone.clone_from := Datatypes.None;
        }.
      End Impl_core_clone_Clone_for_libc_unix_linux_like_linux_in6_pktinfo_t.
      End Impl_core_clone_Clone_for_libc_unix_linux_like_linux_in6_pktinfo_t.
      
      Module  arpd_request.
      Section arpd_request.
        Record t : Set := {
          req : ltac:(libc.unix.c_ushort);
          ip : u32.t;
          dev :
            ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_ulong);
          stamp :
            ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_ulong);
          updated :
            ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_ulong);
          ha : array ltac:(libc.unix.c_uchar);
        }.
        
        Definition Get_req :=
          Ref.map (fun α => Some α.(req)) (fun β α => Some (α <| req := β |>)).
        Definition Get_ip :=
          Ref.map (fun α => Some α.(ip)) (fun β α => Some (α <| ip := β |>)).
        Definition Get_dev :=
          Ref.map (fun α => Some α.(dev)) (fun β α => Some (α <| dev := β |>)).
        Definition Get_stamp :=
          Ref.map
            (fun α => Some α.(stamp))
            (fun β α => Some (α <| stamp := β |>)).
        Definition Get_updated :=
          Ref.map
            (fun α => Some α.(updated))
            (fun β α => Some (α <| updated := β |>)).
        Definition Get_ha :=
          Ref.map (fun α => Some α.(ha)) (fun β α => Some (α <| ha := β |>)).
      End arpd_request.
      End arpd_request.
      
      Module  Impl_core_marker_Copy_for_libc_unix_linux_like_linux_arpd_request_t.
      Section Impl_core_marker_Copy_for_libc_unix_linux_like_linux_arpd_request_t.
        Definition Self : Set := libc.unix.linux_like.linux.arpd_request.t.
        
        Global Instance ℐ : core.marker.Copy.Trait Self := {
        }.
      End Impl_core_marker_Copy_for_libc_unix_linux_like_linux_arpd_request_t.
      End Impl_core_marker_Copy_for_libc_unix_linux_like_linux_arpd_request_t.
      
      Module  Impl_core_clone_Clone_for_libc_unix_linux_like_linux_arpd_request_t.
      Section Impl_core_clone_Clone_for_libc_unix_linux_like_linux_arpd_request_t.
        Definition Self : Set := libc.unix.linux_like.linux.arpd_request.t.
        
        (*
                    fn clone(&self) -> $i { *self }
        *)
        Definition clone
            (self : ref Self)
            : M libc.unix.linux_like.linux.arpd_request.t :=
          let* self := M.alloc self in
          let* α0 : ref libc.unix.linux_like.linux.arpd_request.t :=
            M.read self in
          M.read (deref α0).
        
        Global Instance AssociatedFunction_clone :
          Notations.DoubleColon Self "clone" := {
          Notations.double_colon := clone;
        }.
        
        Global Instance ℐ : core.clone.Clone.Required.Trait Self := {
          core.clone.Clone.clone := clone;
          core.clone.Clone.clone_from := Datatypes.None;
        }.
      End Impl_core_clone_Clone_for_libc_unix_linux_like_linux_arpd_request_t.
      End Impl_core_clone_Clone_for_libc_unix_linux_like_linux_arpd_request_t.
      
      Module  inotify_event.
      Section inotify_event.
        Record t : Set := {
          wd : ltac:(libc.unix.c_int);
          mask : u32.t;
          cookie : u32.t;
          len : u32.t;
        }.
        
        Definition Get_wd :=
          Ref.map (fun α => Some α.(wd)) (fun β α => Some (α <| wd := β |>)).
        Definition Get_mask :=
          Ref.map
            (fun α => Some α.(mask))
            (fun β α => Some (α <| mask := β |>)).
        Definition Get_cookie :=
          Ref.map
            (fun α => Some α.(cookie))
            (fun β α => Some (α <| cookie := β |>)).
        Definition Get_len :=
          Ref.map (fun α => Some α.(len)) (fun β α => Some (α <| len := β |>)).
      End inotify_event.
      End inotify_event.
      
      Module  Impl_core_marker_Copy_for_libc_unix_linux_like_linux_inotify_event_t.
      Section Impl_core_marker_Copy_for_libc_unix_linux_like_linux_inotify_event_t.
        Definition Self : Set := libc.unix.linux_like.linux.inotify_event.t.
        
        Global Instance ℐ : core.marker.Copy.Trait Self := {
        }.
      End Impl_core_marker_Copy_for_libc_unix_linux_like_linux_inotify_event_t.
      End Impl_core_marker_Copy_for_libc_unix_linux_like_linux_inotify_event_t.
      
      Module  Impl_core_clone_Clone_for_libc_unix_linux_like_linux_inotify_event_t.
      Section Impl_core_clone_Clone_for_libc_unix_linux_like_linux_inotify_event_t.
        Definition Self : Set := libc.unix.linux_like.linux.inotify_event.t.
        
        (*
                    fn clone(&self) -> $i { *self }
        *)
        Definition clone
            (self : ref Self)
            : M libc.unix.linux_like.linux.inotify_event.t :=
          let* self := M.alloc self in
          let* α0 : ref libc.unix.linux_like.linux.inotify_event.t :=
            M.read self in
          M.read (deref α0).
        
        Global Instance AssociatedFunction_clone :
          Notations.DoubleColon Self "clone" := {
          Notations.double_colon := clone;
        }.
        
        Global Instance ℐ : core.clone.Clone.Required.Trait Self := {
          core.clone.Clone.clone := clone;
          core.clone.Clone.clone_from := Datatypes.None;
        }.
      End Impl_core_clone_Clone_for_libc_unix_linux_like_linux_inotify_event_t.
      End Impl_core_clone_Clone_for_libc_unix_linux_like_linux_inotify_event_t.
      
      Module  fanotify_response.
      Section fanotify_response.
        Record t : Set := {
          fd : ltac:(libc.unix.c_int);
          response : ltac:(libc.unix.linux_like.linux.__u32);
        }.
        
        Definition Get_fd :=
          Ref.map (fun α => Some α.(fd)) (fun β α => Some (α <| fd := β |>)).
        Definition Get_response :=
          Ref.map
            (fun α => Some α.(response))
            (fun β α => Some (α <| response := β |>)).
      End fanotify_response.
      End fanotify_response.
      
      Module  Impl_core_marker_Copy_for_libc_unix_linux_like_linux_fanotify_response_t.
      Section Impl_core_marker_Copy_for_libc_unix_linux_like_linux_fanotify_response_t.
        Definition Self : Set := libc.unix.linux_like.linux.fanotify_response.t.
        
        Global Instance ℐ : core.marker.Copy.Trait Self := {
        }.
      End Impl_core_marker_Copy_for_libc_unix_linux_like_linux_fanotify_response_t.
      End Impl_core_marker_Copy_for_libc_unix_linux_like_linux_fanotify_response_t.
      
      Module  Impl_core_clone_Clone_for_libc_unix_linux_like_linux_fanotify_response_t.
      Section Impl_core_clone_Clone_for_libc_unix_linux_like_linux_fanotify_response_t.
        Definition Self : Set := libc.unix.linux_like.linux.fanotify_response.t.
        
        (*
                    fn clone(&self) -> $i { *self }
        *)
        Definition clone
            (self : ref Self)
            : M libc.unix.linux_like.linux.fanotify_response.t :=
          let* self := M.alloc self in
          let* α0 : ref libc.unix.linux_like.linux.fanotify_response.t :=
            M.read self in
          M.read (deref α0).
        
        Global Instance AssociatedFunction_clone :
          Notations.DoubleColon Self "clone" := {
          Notations.double_colon := clone;
        }.
        
        Global Instance ℐ : core.clone.Clone.Required.Trait Self := {
          core.clone.Clone.clone := clone;
          core.clone.Clone.clone_from := Datatypes.None;
        }.
      End Impl_core_clone_Clone_for_libc_unix_linux_like_linux_fanotify_response_t.
      End Impl_core_clone_Clone_for_libc_unix_linux_like_linux_fanotify_response_t.
      
      Module  sockaddr_vm.
      Section sockaddr_vm.
        Record t : Set := {
          svm_family : ltac:(libc.unix.linux_like.sa_family_t);
          svm_reserved1 : ltac:(libc.unix.c_ushort);
          svm_port : ltac:(libc.unix.c_uint);
          svm_cid : ltac:(libc.unix.c_uint);
          svm_flags : u8.t;
          svm_zero : array u8.t;
        }.
        
        Definition Get_svm_family :=
          Ref.map
            (fun α => Some α.(svm_family))
            (fun β α => Some (α <| svm_family := β |>)).
        Definition Get_svm_reserved1 :=
          Ref.map
            (fun α => Some α.(svm_reserved1))
            (fun β α => Some (α <| svm_reserved1 := β |>)).
        Definition Get_svm_port :=
          Ref.map
            (fun α => Some α.(svm_port))
            (fun β α => Some (α <| svm_port := β |>)).
        Definition Get_svm_cid :=
          Ref.map
            (fun α => Some α.(svm_cid))
            (fun β α => Some (α <| svm_cid := β |>)).
        Definition Get_svm_flags :=
          Ref.map
            (fun α => Some α.(svm_flags))
            (fun β α => Some (α <| svm_flags := β |>)).
        Definition Get_svm_zero :=
          Ref.map
            (fun α => Some α.(svm_zero))
            (fun β α => Some (α <| svm_zero := β |>)).
      End sockaddr_vm.
      End sockaddr_vm.
      
      Module  Impl_core_marker_Copy_for_libc_unix_linux_like_linux_sockaddr_vm_t.
      Section Impl_core_marker_Copy_for_libc_unix_linux_like_linux_sockaddr_vm_t.
        Definition Self : Set := libc.unix.linux_like.linux.sockaddr_vm.t.
        
        Global Instance ℐ : core.marker.Copy.Trait Self := {
        }.
      End Impl_core_marker_Copy_for_libc_unix_linux_like_linux_sockaddr_vm_t.
      End Impl_core_marker_Copy_for_libc_unix_linux_like_linux_sockaddr_vm_t.
      
      Module  Impl_core_clone_Clone_for_libc_unix_linux_like_linux_sockaddr_vm_t.
      Section Impl_core_clone_Clone_for_libc_unix_linux_like_linux_sockaddr_vm_t.
        Definition Self : Set := libc.unix.linux_like.linux.sockaddr_vm.t.
        
        (*
                    fn clone(&self) -> $i { *self }
        *)
        Definition clone
            (self : ref Self)
            : M libc.unix.linux_like.linux.sockaddr_vm.t :=
          let* self := M.alloc self in
          let* α0 : ref libc.unix.linux_like.linux.sockaddr_vm.t :=
            M.read self in
          M.read (deref α0).
        
        Global Instance AssociatedFunction_clone :
          Notations.DoubleColon Self "clone" := {
          Notations.double_colon := clone;
        }.
        
        Global Instance ℐ : core.clone.Clone.Required.Trait Self := {
          core.clone.Clone.clone := clone;
          core.clone.Clone.clone_from := Datatypes.None;
        }.
      End Impl_core_clone_Clone_for_libc_unix_linux_like_linux_sockaddr_vm_t.
      End Impl_core_clone_Clone_for_libc_unix_linux_like_linux_sockaddr_vm_t.
      
      Module  regmatch_t.
      Section regmatch_t.
        Record t : Set := {
          rm_so : ltac:(libc.unix.linux_like.linux.gnu.regoff_t);
          rm_eo : ltac:(libc.unix.linux_like.linux.gnu.regoff_t);
        }.
        
        Definition Get_rm_so :=
          Ref.map
            (fun α => Some α.(rm_so))
            (fun β α => Some (α <| rm_so := β |>)).
        Definition Get_rm_eo :=
          Ref.map
            (fun α => Some α.(rm_eo))
            (fun β α => Some (α <| rm_eo := β |>)).
      End regmatch_t.
      End regmatch_t.
      
      Module  Impl_core_marker_Copy_for_libc_unix_linux_like_linux_regmatch_t_t.
      Section Impl_core_marker_Copy_for_libc_unix_linux_like_linux_regmatch_t_t.
        Definition Self : Set := libc.unix.linux_like.linux.regmatch_t.t.
        
        Global Instance ℐ : core.marker.Copy.Trait Self := {
        }.
      End Impl_core_marker_Copy_for_libc_unix_linux_like_linux_regmatch_t_t.
      End Impl_core_marker_Copy_for_libc_unix_linux_like_linux_regmatch_t_t.
      
      Module  Impl_core_clone_Clone_for_libc_unix_linux_like_linux_regmatch_t_t.
      Section Impl_core_clone_Clone_for_libc_unix_linux_like_linux_regmatch_t_t.
        Definition Self : Set := libc.unix.linux_like.linux.regmatch_t.t.
        
        (*
                    fn clone(&self) -> $i { *self }
        *)
        Definition clone
            (self : ref Self)
            : M libc.unix.linux_like.linux.regmatch_t.t :=
          let* self := M.alloc self in
          let* α0 : ref libc.unix.linux_like.linux.regmatch_t.t :=
            M.read self in
          M.read (deref α0).
        
        Global Instance AssociatedFunction_clone :
          Notations.DoubleColon Self "clone" := {
          Notations.double_colon := clone;
        }.
        
        Global Instance ℐ : core.clone.Clone.Required.Trait Self := {
          core.clone.Clone.clone := clone;
          core.clone.Clone.clone_from := Datatypes.None;
        }.
      End Impl_core_clone_Clone_for_libc_unix_linux_like_linux_regmatch_t_t.
      End Impl_core_clone_Clone_for_libc_unix_linux_like_linux_regmatch_t_t.
      
      Module  sock_extended_err.
      Section sock_extended_err.
        Record t : Set := {
          ee_errno : u32.t;
          ee_origin : u8.t;
          ee_type : u8.t;
          ee_code : u8.t;
          ee_pad : u8.t;
          ee_info : u32.t;
          ee_data : u32.t;
        }.
        
        Definition Get_ee_errno :=
          Ref.map
            (fun α => Some α.(ee_errno))
            (fun β α => Some (α <| ee_errno := β |>)).
        Definition Get_ee_origin :=
          Ref.map
            (fun α => Some α.(ee_origin))
            (fun β α => Some (α <| ee_origin := β |>)).
        Definition Get_ee_type :=
          Ref.map
            (fun α => Some α.(ee_type))
            (fun β α => Some (α <| ee_type := β |>)).
        Definition Get_ee_code :=
          Ref.map
            (fun α => Some α.(ee_code))
            (fun β α => Some (α <| ee_code := β |>)).
        Definition Get_ee_pad :=
          Ref.map
            (fun α => Some α.(ee_pad))
            (fun β α => Some (α <| ee_pad := β |>)).
        Definition Get_ee_info :=
          Ref.map
            (fun α => Some α.(ee_info))
            (fun β α => Some (α <| ee_info := β |>)).
        Definition Get_ee_data :=
          Ref.map
            (fun α => Some α.(ee_data))
            (fun β α => Some (α <| ee_data := β |>)).
      End sock_extended_err.
      End sock_extended_err.
      
      Module  Impl_core_marker_Copy_for_libc_unix_linux_like_linux_sock_extended_err_t.
      Section Impl_core_marker_Copy_for_libc_unix_linux_like_linux_sock_extended_err_t.
        Definition Self : Set := libc.unix.linux_like.linux.sock_extended_err.t.
        
        Global Instance ℐ : core.marker.Copy.Trait Self := {
        }.
      End Impl_core_marker_Copy_for_libc_unix_linux_like_linux_sock_extended_err_t.
      End Impl_core_marker_Copy_for_libc_unix_linux_like_linux_sock_extended_err_t.
      
      Module  Impl_core_clone_Clone_for_libc_unix_linux_like_linux_sock_extended_err_t.
      Section Impl_core_clone_Clone_for_libc_unix_linux_like_linux_sock_extended_err_t.
        Definition Self : Set := libc.unix.linux_like.linux.sock_extended_err.t.
        
        (*
                    fn clone(&self) -> $i { *self }
        *)
        Definition clone
            (self : ref Self)
            : M libc.unix.linux_like.linux.sock_extended_err.t :=
          let* self := M.alloc self in
          let* α0 : ref libc.unix.linux_like.linux.sock_extended_err.t :=
            M.read self in
          M.read (deref α0).
        
        Global Instance AssociatedFunction_clone :
          Notations.DoubleColon Self "clone" := {
          Notations.double_colon := clone;
        }.
        
        Global Instance ℐ : core.clone.Clone.Required.Trait Self := {
          core.clone.Clone.clone := clone;
          core.clone.Clone.clone_from := Datatypes.None;
        }.
      End Impl_core_clone_Clone_for_libc_unix_linux_like_linux_sock_extended_err_t.
      End Impl_core_clone_Clone_for_libc_unix_linux_like_linux_sock_extended_err_t.
      
      Module  __c_anonymous_sockaddr_can_tp.
      Section __c_anonymous_sockaddr_can_tp.
        Record t : Set := {
          rx_id : ltac:(libc.unix.linux_like.linux.canid_t);
          tx_id : ltac:(libc.unix.linux_like.linux.canid_t);
        }.
        
        Definition Get_rx_id :=
          Ref.map
            (fun α => Some α.(rx_id))
            (fun β α => Some (α <| rx_id := β |>)).
        Definition Get_tx_id :=
          Ref.map
            (fun α => Some α.(tx_id))
            (fun β α => Some (α <| tx_id := β |>)).
      End __c_anonymous_sockaddr_can_tp.
      End __c_anonymous_sockaddr_can_tp.
      
      Module  Impl_core_marker_Copy_for_libc_unix_linux_like_linux___c_anonymous_sockaddr_can_tp_t.
      Section Impl_core_marker_Copy_for_libc_unix_linux_like_linux___c_anonymous_sockaddr_can_tp_t.
        Definition Self : Set :=
          libc.unix.linux_like.linux.__c_anonymous_sockaddr_can_tp.t.
        
        Global Instance ℐ : core.marker.Copy.Trait Self := {
        }.
      End Impl_core_marker_Copy_for_libc_unix_linux_like_linux___c_anonymous_sockaddr_can_tp_t.
      End Impl_core_marker_Copy_for_libc_unix_linux_like_linux___c_anonymous_sockaddr_can_tp_t.
      
      Module  Impl_core_clone_Clone_for_libc_unix_linux_like_linux___c_anonymous_sockaddr_can_tp_t.
      Section Impl_core_clone_Clone_for_libc_unix_linux_like_linux___c_anonymous_sockaddr_can_tp_t.
        Definition Self : Set :=
          libc.unix.linux_like.linux.__c_anonymous_sockaddr_can_tp.t.
        
        (*
                    fn clone(&self) -> $i { *self }
        *)
        Definition clone
            (self : ref Self)
            : M libc.unix.linux_like.linux.__c_anonymous_sockaddr_can_tp.t :=
          let* self := M.alloc self in
          let* α0 :
              ref libc.unix.linux_like.linux.__c_anonymous_sockaddr_can_tp.t :=
            M.read self in
          M.read (deref α0).
        
        Global Instance AssociatedFunction_clone :
          Notations.DoubleColon Self "clone" := {
          Notations.double_colon := clone;
        }.
        
        Global Instance ℐ : core.clone.Clone.Required.Trait Self := {
          core.clone.Clone.clone := clone;
          core.clone.Clone.clone_from := Datatypes.None;
        }.
      End Impl_core_clone_Clone_for_libc_unix_linux_like_linux___c_anonymous_sockaddr_can_tp_t.
      End Impl_core_clone_Clone_for_libc_unix_linux_like_linux___c_anonymous_sockaddr_can_tp_t.
      
      Module  __c_anonymous_sockaddr_can_j1939.
      Section __c_anonymous_sockaddr_can_j1939.
        Record t : Set := {
          name : u64.t;
          pgn : u32.t;
          addr : u8.t;
        }.
        
        Definition Get_name :=
          Ref.map
            (fun α => Some α.(name))
            (fun β α => Some (α <| name := β |>)).
        Definition Get_pgn :=
          Ref.map (fun α => Some α.(pgn)) (fun β α => Some (α <| pgn := β |>)).
        Definition Get_addr :=
          Ref.map
            (fun α => Some α.(addr))
            (fun β α => Some (α <| addr := β |>)).
      End __c_anonymous_sockaddr_can_j1939.
      End __c_anonymous_sockaddr_can_j1939.
      
      Module  Impl_core_marker_Copy_for_libc_unix_linux_like_linux___c_anonymous_sockaddr_can_j1939_t.
      Section Impl_core_marker_Copy_for_libc_unix_linux_like_linux___c_anonymous_sockaddr_can_j1939_t.
        Definition Self : Set :=
          libc.unix.linux_like.linux.__c_anonymous_sockaddr_can_j1939.t.
        
        Global Instance ℐ : core.marker.Copy.Trait Self := {
        }.
      End Impl_core_marker_Copy_for_libc_unix_linux_like_linux___c_anonymous_sockaddr_can_j1939_t.
      End Impl_core_marker_Copy_for_libc_unix_linux_like_linux___c_anonymous_sockaddr_can_j1939_t.
      
      Module  Impl_core_clone_Clone_for_libc_unix_linux_like_linux___c_anonymous_sockaddr_can_j1939_t.
      Section Impl_core_clone_Clone_for_libc_unix_linux_like_linux___c_anonymous_sockaddr_can_j1939_t.
        Definition Self : Set :=
          libc.unix.linux_like.linux.__c_anonymous_sockaddr_can_j1939.t.
        
        (*
                    fn clone(&self) -> $i { *self }
        *)
        Definition clone
            (self : ref Self)
            : M libc.unix.linux_like.linux.__c_anonymous_sockaddr_can_j1939.t :=
          let* self := M.alloc self in
          let* α0 :
              ref
                libc.unix.linux_like.linux.__c_anonymous_sockaddr_can_j1939.t :=
            M.read self in
          M.read (deref α0).
        
        Global Instance AssociatedFunction_clone :
          Notations.DoubleColon Self "clone" := {
          Notations.double_colon := clone;
        }.
        
        Global Instance ℐ : core.clone.Clone.Required.Trait Self := {
          core.clone.Clone.clone := clone;
          core.clone.Clone.clone_from := Datatypes.None;
        }.
      End Impl_core_clone_Clone_for_libc_unix_linux_like_linux___c_anonymous_sockaddr_can_j1939_t.
      End Impl_core_clone_Clone_for_libc_unix_linux_like_linux___c_anonymous_sockaddr_can_j1939_t.
      
      Module  can_filter.
      Section can_filter.
        Record t : Set := {
          can_id : ltac:(libc.unix.linux_like.linux.canid_t);
          can_mask : ltac:(libc.unix.linux_like.linux.canid_t);
        }.
        
        Definition Get_can_id :=
          Ref.map
            (fun α => Some α.(can_id))
            (fun β α => Some (α <| can_id := β |>)).
        Definition Get_can_mask :=
          Ref.map
            (fun α => Some α.(can_mask))
            (fun β α => Some (α <| can_mask := β |>)).
      End can_filter.
      End can_filter.
      
      Module  Impl_core_marker_Copy_for_libc_unix_linux_like_linux_can_filter_t.
      Section Impl_core_marker_Copy_for_libc_unix_linux_like_linux_can_filter_t.
        Definition Self : Set := libc.unix.linux_like.linux.can_filter.t.
        
        Global Instance ℐ : core.marker.Copy.Trait Self := {
        }.
      End Impl_core_marker_Copy_for_libc_unix_linux_like_linux_can_filter_t.
      End Impl_core_marker_Copy_for_libc_unix_linux_like_linux_can_filter_t.
      
      Module  Impl_core_clone_Clone_for_libc_unix_linux_like_linux_can_filter_t.
      Section Impl_core_clone_Clone_for_libc_unix_linux_like_linux_can_filter_t.
        Definition Self : Set := libc.unix.linux_like.linux.can_filter.t.
        
        (*
                    fn clone(&self) -> $i { *self }
        *)
        Definition clone
            (self : ref Self)
            : M libc.unix.linux_like.linux.can_filter.t :=
          let* self := M.alloc self in
          let* α0 : ref libc.unix.linux_like.linux.can_filter.t :=
            M.read self in
          M.read (deref α0).
        
        Global Instance AssociatedFunction_clone :
          Notations.DoubleColon Self "clone" := {
          Notations.double_colon := clone;
        }.
        
        Global Instance ℐ : core.clone.Clone.Required.Trait Self := {
          core.clone.Clone.clone := clone;
          core.clone.Clone.clone_from := Datatypes.None;
        }.
      End Impl_core_clone_Clone_for_libc_unix_linux_like_linux_can_filter_t.
      End Impl_core_clone_Clone_for_libc_unix_linux_like_linux_can_filter_t.
      
      Module  j1939_filter.
      Section j1939_filter.
        Record t : Set := {
          name : ltac:(libc.unix.linux_like.linux.name_t);
          name_mask : ltac:(libc.unix.linux_like.linux.name_t);
          pgn : ltac:(libc.unix.linux_like.linux.pgn_t);
          pgn_mask : ltac:(libc.unix.linux_like.linux.pgn_t);
          addr : u8.t;
          addr_mask : u8.t;
        }.
        
        Definition Get_name :=
          Ref.map
            (fun α => Some α.(name))
            (fun β α => Some (α <| name := β |>)).
        Definition Get_name_mask :=
          Ref.map
            (fun α => Some α.(name_mask))
            (fun β α => Some (α <| name_mask := β |>)).
        Definition Get_pgn :=
          Ref.map (fun α => Some α.(pgn)) (fun β α => Some (α <| pgn := β |>)).
        Definition Get_pgn_mask :=
          Ref.map
            (fun α => Some α.(pgn_mask))
            (fun β α => Some (α <| pgn_mask := β |>)).
        Definition Get_addr :=
          Ref.map
            (fun α => Some α.(addr))
            (fun β α => Some (α <| addr := β |>)).
        Definition Get_addr_mask :=
          Ref.map
            (fun α => Some α.(addr_mask))
            (fun β α => Some (α <| addr_mask := β |>)).
      End j1939_filter.
      End j1939_filter.
      
      Module  Impl_core_marker_Copy_for_libc_unix_linux_like_linux_j1939_filter_t.
      Section Impl_core_marker_Copy_for_libc_unix_linux_like_linux_j1939_filter_t.
        Definition Self : Set := libc.unix.linux_like.linux.j1939_filter.t.
        
        Global Instance ℐ : core.marker.Copy.Trait Self := {
        }.
      End Impl_core_marker_Copy_for_libc_unix_linux_like_linux_j1939_filter_t.
      End Impl_core_marker_Copy_for_libc_unix_linux_like_linux_j1939_filter_t.
      
      Module  Impl_core_clone_Clone_for_libc_unix_linux_like_linux_j1939_filter_t.
      Section Impl_core_clone_Clone_for_libc_unix_linux_like_linux_j1939_filter_t.
        Definition Self : Set := libc.unix.linux_like.linux.j1939_filter.t.
        
        (*
                    fn clone(&self) -> $i { *self }
        *)
        Definition clone
            (self : ref Self)
            : M libc.unix.linux_like.linux.j1939_filter.t :=
          let* self := M.alloc self in
          let* α0 : ref libc.unix.linux_like.linux.j1939_filter.t :=
            M.read self in
          M.read (deref α0).
        
        Global Instance AssociatedFunction_clone :
          Notations.DoubleColon Self "clone" := {
          Notations.double_colon := clone;
        }.
        
        Global Instance ℐ : core.clone.Clone.Required.Trait Self := {
          core.clone.Clone.clone := clone;
          core.clone.Clone.clone_from := Datatypes.None;
        }.
      End Impl_core_clone_Clone_for_libc_unix_linux_like_linux_j1939_filter_t.
      End Impl_core_clone_Clone_for_libc_unix_linux_like_linux_j1939_filter_t.
      
      Module  sock_filter.
      Section sock_filter.
        Record t : Set := {
          code : ltac:(libc.unix.linux_like.linux.__u16);
          jt : ltac:(libc.unix.linux_like.linux.__u8);
          jf : ltac:(libc.unix.linux_like.linux.__u8);
          k : ltac:(libc.unix.linux_like.linux.__u32);
        }.
        
        Definition Get_code :=
          Ref.map
            (fun α => Some α.(code))
            (fun β α => Some (α <| code := β |>)).
        Definition Get_jt :=
          Ref.map (fun α => Some α.(jt)) (fun β α => Some (α <| jt := β |>)).
        Definition Get_jf :=
          Ref.map (fun α => Some α.(jf)) (fun β α => Some (α <| jf := β |>)).
        Definition Get_k :=
          Ref.map (fun α => Some α.(k)) (fun β α => Some (α <| k := β |>)).
      End sock_filter.
      End sock_filter.
      
      Module  Impl_core_marker_Copy_for_libc_unix_linux_like_linux_sock_filter_t.
      Section Impl_core_marker_Copy_for_libc_unix_linux_like_linux_sock_filter_t.
        Definition Self : Set := libc.unix.linux_like.linux.sock_filter.t.
        
        Global Instance ℐ : core.marker.Copy.Trait Self := {
        }.
      End Impl_core_marker_Copy_for_libc_unix_linux_like_linux_sock_filter_t.
      End Impl_core_marker_Copy_for_libc_unix_linux_like_linux_sock_filter_t.
      
      Module  Impl_core_clone_Clone_for_libc_unix_linux_like_linux_sock_filter_t.
      Section Impl_core_clone_Clone_for_libc_unix_linux_like_linux_sock_filter_t.
        Definition Self : Set := libc.unix.linux_like.linux.sock_filter.t.
        
        (*
                    fn clone(&self) -> $i { *self }
        *)
        Definition clone
            (self : ref Self)
            : M libc.unix.linux_like.linux.sock_filter.t :=
          let* self := M.alloc self in
          let* α0 : ref libc.unix.linux_like.linux.sock_filter.t :=
            M.read self in
          M.read (deref α0).
        
        Global Instance AssociatedFunction_clone :
          Notations.DoubleColon Self "clone" := {
          Notations.double_colon := clone;
        }.
        
        Global Instance ℐ : core.clone.Clone.Required.Trait Self := {
          core.clone.Clone.clone := clone;
          core.clone.Clone.clone_from := Datatypes.None;
        }.
      End Impl_core_clone_Clone_for_libc_unix_linux_like_linux_sock_filter_t.
      End Impl_core_clone_Clone_for_libc_unix_linux_like_linux_sock_filter_t.
      
      Module  sock_fprog.
      Section sock_fprog.
        Record t : Set := {
          len : ltac:(libc.unix.c_ushort);
          filter : mut_ref libc.unix.linux_like.linux.sock_filter.t;
        }.
        
        Definition Get_len :=
          Ref.map (fun α => Some α.(len)) (fun β α => Some (α <| len := β |>)).
        Definition Get_filter :=
          Ref.map
            (fun α => Some α.(filter))
            (fun β α => Some (α <| filter := β |>)).
      End sock_fprog.
      End sock_fprog.
      
      Module  Impl_core_marker_Copy_for_libc_unix_linux_like_linux_sock_fprog_t.
      Section Impl_core_marker_Copy_for_libc_unix_linux_like_linux_sock_fprog_t.
        Definition Self : Set := libc.unix.linux_like.linux.sock_fprog.t.
        
        Global Instance ℐ : core.marker.Copy.Trait Self := {
        }.
      End Impl_core_marker_Copy_for_libc_unix_linux_like_linux_sock_fprog_t.
      End Impl_core_marker_Copy_for_libc_unix_linux_like_linux_sock_fprog_t.
      
      Module  Impl_core_clone_Clone_for_libc_unix_linux_like_linux_sock_fprog_t.
      Section Impl_core_clone_Clone_for_libc_unix_linux_like_linux_sock_fprog_t.
        Definition Self : Set := libc.unix.linux_like.linux.sock_fprog.t.
        
        (*
                    fn clone(&self) -> $i { *self }
        *)
        Definition clone
            (self : ref Self)
            : M libc.unix.linux_like.linux.sock_fprog.t :=
          let* self := M.alloc self in
          let* α0 : ref libc.unix.linux_like.linux.sock_fprog.t :=
            M.read self in
          M.read (deref α0).
        
        Global Instance AssociatedFunction_clone :
          Notations.DoubleColon Self "clone" := {
          Notations.double_colon := clone;
        }.
        
        Global Instance ℐ : core.clone.Clone.Required.Trait Self := {
          core.clone.Clone.clone := clone;
          core.clone.Clone.clone_from := Datatypes.None;
        }.
      End Impl_core_clone_Clone_for_libc_unix_linux_like_linux_sock_fprog_t.
      End Impl_core_clone_Clone_for_libc_unix_linux_like_linux_sock_fprog_t.
      
      Module  seccomp_data.
      Section seccomp_data.
        Record t : Set := {
          nr : ltac:(libc.unix.c_int);
          arch : ltac:(libc.unix.linux_like.linux.__u32);
          instruction_pointer :
            ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.__u64);
          args : array ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.__u64);
        }.
        
        Definition Get_nr :=
          Ref.map (fun α => Some α.(nr)) (fun β α => Some (α <| nr := β |>)).
        Definition Get_arch :=
          Ref.map
            (fun α => Some α.(arch))
            (fun β α => Some (α <| arch := β |>)).
        Definition Get_instruction_pointer :=
          Ref.map
            (fun α => Some α.(instruction_pointer))
            (fun β α => Some (α <| instruction_pointer := β |>)).
        Definition Get_args :=
          Ref.map
            (fun α => Some α.(args))
            (fun β α => Some (α <| args := β |>)).
      End seccomp_data.
      End seccomp_data.
      
      Module  Impl_core_marker_Copy_for_libc_unix_linux_like_linux_seccomp_data_t.
      Section Impl_core_marker_Copy_for_libc_unix_linux_like_linux_seccomp_data_t.
        Definition Self : Set := libc.unix.linux_like.linux.seccomp_data.t.
        
        Global Instance ℐ : core.marker.Copy.Trait Self := {
        }.
      End Impl_core_marker_Copy_for_libc_unix_linux_like_linux_seccomp_data_t.
      End Impl_core_marker_Copy_for_libc_unix_linux_like_linux_seccomp_data_t.
      
      Module  Impl_core_clone_Clone_for_libc_unix_linux_like_linux_seccomp_data_t.
      Section Impl_core_clone_Clone_for_libc_unix_linux_like_linux_seccomp_data_t.
        Definition Self : Set := libc.unix.linux_like.linux.seccomp_data.t.
        
        (*
                    fn clone(&self) -> $i { *self }
        *)
        Definition clone
            (self : ref Self)
            : M libc.unix.linux_like.linux.seccomp_data.t :=
          let* self := M.alloc self in
          let* α0 : ref libc.unix.linux_like.linux.seccomp_data.t :=
            M.read self in
          M.read (deref α0).
        
        Global Instance AssociatedFunction_clone :
          Notations.DoubleColon Self "clone" := {
          Notations.double_colon := clone;
        }.
        
        Global Instance ℐ : core.clone.Clone.Required.Trait Self := {
          core.clone.Clone.clone := clone;
          core.clone.Clone.clone_from := Datatypes.None;
        }.
      End Impl_core_clone_Clone_for_libc_unix_linux_like_linux_seccomp_data_t.
      End Impl_core_clone_Clone_for_libc_unix_linux_like_linux_seccomp_data_t.
      
      Module  seccomp_notif_sizes.
      Section seccomp_notif_sizes.
        Record t : Set := {
          seccomp_notif : ltac:(libc.unix.linux_like.linux.__u16);
          seccomp_notif_resp : ltac:(libc.unix.linux_like.linux.__u16);
          seccomp_data : ltac:(libc.unix.linux_like.linux.__u16);
        }.
        
        Definition Get_seccomp_notif :=
          Ref.map
            (fun α => Some α.(seccomp_notif))
            (fun β α => Some (α <| seccomp_notif := β |>)).
        Definition Get_seccomp_notif_resp :=
          Ref.map
            (fun α => Some α.(seccomp_notif_resp))
            (fun β α => Some (α <| seccomp_notif_resp := β |>)).
        Definition Get_seccomp_data :=
          Ref.map
            (fun α => Some α.(seccomp_data))
            (fun β α => Some (α <| seccomp_data := β |>)).
      End seccomp_notif_sizes.
      End seccomp_notif_sizes.
      
      Module  Impl_core_marker_Copy_for_libc_unix_linux_like_linux_seccomp_notif_sizes_t.
      Section Impl_core_marker_Copy_for_libc_unix_linux_like_linux_seccomp_notif_sizes_t.
        Definition Self : Set :=
          libc.unix.linux_like.linux.seccomp_notif_sizes.t.
        
        Global Instance ℐ : core.marker.Copy.Trait Self := {
        }.
      End Impl_core_marker_Copy_for_libc_unix_linux_like_linux_seccomp_notif_sizes_t.
      End Impl_core_marker_Copy_for_libc_unix_linux_like_linux_seccomp_notif_sizes_t.
      
      Module  Impl_core_clone_Clone_for_libc_unix_linux_like_linux_seccomp_notif_sizes_t.
      Section Impl_core_clone_Clone_for_libc_unix_linux_like_linux_seccomp_notif_sizes_t.
        Definition Self : Set :=
          libc.unix.linux_like.linux.seccomp_notif_sizes.t.
        
        (*
                    fn clone(&self) -> $i { *self }
        *)
        Definition clone
            (self : ref Self)
            : M libc.unix.linux_like.linux.seccomp_notif_sizes.t :=
          let* self := M.alloc self in
          let* α0 : ref libc.unix.linux_like.linux.seccomp_notif_sizes.t :=
            M.read self in
          M.read (deref α0).
        
        Global Instance AssociatedFunction_clone :
          Notations.DoubleColon Self "clone" := {
          Notations.double_colon := clone;
        }.
        
        Global Instance ℐ : core.clone.Clone.Required.Trait Self := {
          core.clone.Clone.clone := clone;
          core.clone.Clone.clone_from := Datatypes.None;
        }.
      End Impl_core_clone_Clone_for_libc_unix_linux_like_linux_seccomp_notif_sizes_t.
      End Impl_core_clone_Clone_for_libc_unix_linux_like_linux_seccomp_notif_sizes_t.
      
      Module  seccomp_notif.
      Section seccomp_notif.
        Record t : Set := {
          id : ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.__u64);
          pid : ltac:(libc.unix.linux_like.linux.__u32);
          flags : ltac:(libc.unix.linux_like.linux.__u32);
          data : libc.unix.linux_like.linux.seccomp_data.t;
        }.
        
        Definition Get_id :=
          Ref.map (fun α => Some α.(id)) (fun β α => Some (α <| id := β |>)).
        Definition Get_pid :=
          Ref.map (fun α => Some α.(pid)) (fun β α => Some (α <| pid := β |>)).
        Definition Get_flags :=
          Ref.map
            (fun α => Some α.(flags))
            (fun β α => Some (α <| flags := β |>)).
        Definition Get_data :=
          Ref.map
            (fun α => Some α.(data))
            (fun β α => Some (α <| data := β |>)).
      End seccomp_notif.
      End seccomp_notif.
      
      Module  Impl_core_marker_Copy_for_libc_unix_linux_like_linux_seccomp_notif_t.
      Section Impl_core_marker_Copy_for_libc_unix_linux_like_linux_seccomp_notif_t.
        Definition Self : Set := libc.unix.linux_like.linux.seccomp_notif.t.
        
        Global Instance ℐ : core.marker.Copy.Trait Self := {
        }.
      End Impl_core_marker_Copy_for_libc_unix_linux_like_linux_seccomp_notif_t.
      End Impl_core_marker_Copy_for_libc_unix_linux_like_linux_seccomp_notif_t.
      
      Module  Impl_core_clone_Clone_for_libc_unix_linux_like_linux_seccomp_notif_t.
      Section Impl_core_clone_Clone_for_libc_unix_linux_like_linux_seccomp_notif_t.
        Definition Self : Set := libc.unix.linux_like.linux.seccomp_notif.t.
        
        (*
                    fn clone(&self) -> $i { *self }
        *)
        Definition clone
            (self : ref Self)
            : M libc.unix.linux_like.linux.seccomp_notif.t :=
          let* self := M.alloc self in
          let* α0 : ref libc.unix.linux_like.linux.seccomp_notif.t :=
            M.read self in
          M.read (deref α0).
        
        Global Instance AssociatedFunction_clone :
          Notations.DoubleColon Self "clone" := {
          Notations.double_colon := clone;
        }.
        
        Global Instance ℐ : core.clone.Clone.Required.Trait Self := {
          core.clone.Clone.clone := clone;
          core.clone.Clone.clone_from := Datatypes.None;
        }.
      End Impl_core_clone_Clone_for_libc_unix_linux_like_linux_seccomp_notif_t.
      End Impl_core_clone_Clone_for_libc_unix_linux_like_linux_seccomp_notif_t.
      
      Module  seccomp_notif_resp.
      Section seccomp_notif_resp.
        Record t : Set := {
          id : ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.__u64);
          val : ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.__s64);
          error : ltac:(libc.unix.linux_like.linux.__s32);
          flags : ltac:(libc.unix.linux_like.linux.__u32);
        }.
        
        Definition Get_id :=
          Ref.map (fun α => Some α.(id)) (fun β α => Some (α <| id := β |>)).
        Definition Get_val :=
          Ref.map (fun α => Some α.(val)) (fun β α => Some (α <| val := β |>)).
        Definition Get_error :=
          Ref.map
            (fun α => Some α.(error))
            (fun β α => Some (α <| error := β |>)).
        Definition Get_flags :=
          Ref.map
            (fun α => Some α.(flags))
            (fun β α => Some (α <| flags := β |>)).
      End seccomp_notif_resp.
      End seccomp_notif_resp.
      
      Module  Impl_core_marker_Copy_for_libc_unix_linux_like_linux_seccomp_notif_resp_t.
      Section Impl_core_marker_Copy_for_libc_unix_linux_like_linux_seccomp_notif_resp_t.
        Definition Self : Set :=
          libc.unix.linux_like.linux.seccomp_notif_resp.t.
        
        Global Instance ℐ : core.marker.Copy.Trait Self := {
        }.
      End Impl_core_marker_Copy_for_libc_unix_linux_like_linux_seccomp_notif_resp_t.
      End Impl_core_marker_Copy_for_libc_unix_linux_like_linux_seccomp_notif_resp_t.
      
      Module  Impl_core_clone_Clone_for_libc_unix_linux_like_linux_seccomp_notif_resp_t.
      Section Impl_core_clone_Clone_for_libc_unix_linux_like_linux_seccomp_notif_resp_t.
        Definition Self : Set :=
          libc.unix.linux_like.linux.seccomp_notif_resp.t.
        
        (*
                    fn clone(&self) -> $i { *self }
        *)
        Definition clone
            (self : ref Self)
            : M libc.unix.linux_like.linux.seccomp_notif_resp.t :=
          let* self := M.alloc self in
          let* α0 : ref libc.unix.linux_like.linux.seccomp_notif_resp.t :=
            M.read self in
          M.read (deref α0).
        
        Global Instance AssociatedFunction_clone :
          Notations.DoubleColon Self "clone" := {
          Notations.double_colon := clone;
        }.
        
        Global Instance ℐ : core.clone.Clone.Required.Trait Self := {
          core.clone.Clone.clone := clone;
          core.clone.Clone.clone_from := Datatypes.None;
        }.
      End Impl_core_clone_Clone_for_libc_unix_linux_like_linux_seccomp_notif_resp_t.
      End Impl_core_clone_Clone_for_libc_unix_linux_like_linux_seccomp_notif_resp_t.
      
      Module  seccomp_notif_addfd.
      Section seccomp_notif_addfd.
        Record t : Set := {
          id : ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.__u64);
          flags : ltac:(libc.unix.linux_like.linux.__u32);
          srcfd : ltac:(libc.unix.linux_like.linux.__u32);
          newfd : ltac:(libc.unix.linux_like.linux.__u32);
          newfd_flags : ltac:(libc.unix.linux_like.linux.__u32);
        }.
        
        Definition Get_id :=
          Ref.map (fun α => Some α.(id)) (fun β α => Some (α <| id := β |>)).
        Definition Get_flags :=
          Ref.map
            (fun α => Some α.(flags))
            (fun β α => Some (α <| flags := β |>)).
        Definition Get_srcfd :=
          Ref.map
            (fun α => Some α.(srcfd))
            (fun β α => Some (α <| srcfd := β |>)).
        Definition Get_newfd :=
          Ref.map
            (fun α => Some α.(newfd))
            (fun β α => Some (α <| newfd := β |>)).
        Definition Get_newfd_flags :=
          Ref.map
            (fun α => Some α.(newfd_flags))
            (fun β α => Some (α <| newfd_flags := β |>)).
      End seccomp_notif_addfd.
      End seccomp_notif_addfd.
      
      Module  Impl_core_marker_Copy_for_libc_unix_linux_like_linux_seccomp_notif_addfd_t.
      Section Impl_core_marker_Copy_for_libc_unix_linux_like_linux_seccomp_notif_addfd_t.
        Definition Self : Set :=
          libc.unix.linux_like.linux.seccomp_notif_addfd.t.
        
        Global Instance ℐ : core.marker.Copy.Trait Self := {
        }.
      End Impl_core_marker_Copy_for_libc_unix_linux_like_linux_seccomp_notif_addfd_t.
      End Impl_core_marker_Copy_for_libc_unix_linux_like_linux_seccomp_notif_addfd_t.
      
      Module  Impl_core_clone_Clone_for_libc_unix_linux_like_linux_seccomp_notif_addfd_t.
      Section Impl_core_clone_Clone_for_libc_unix_linux_like_linux_seccomp_notif_addfd_t.
        Definition Self : Set :=
          libc.unix.linux_like.linux.seccomp_notif_addfd.t.
        
        (*
                    fn clone(&self) -> $i { *self }
        *)
        Definition clone
            (self : ref Self)
            : M libc.unix.linux_like.linux.seccomp_notif_addfd.t :=
          let* self := M.alloc self in
          let* α0 : ref libc.unix.linux_like.linux.seccomp_notif_addfd.t :=
            M.read self in
          M.read (deref α0).
        
        Global Instance AssociatedFunction_clone :
          Notations.DoubleColon Self "clone" := {
          Notations.double_colon := clone;
        }.
        
        Global Instance ℐ : core.clone.Clone.Required.Trait Self := {
          core.clone.Clone.clone := clone;
          core.clone.Clone.clone_from := Datatypes.None;
        }.
      End Impl_core_clone_Clone_for_libc_unix_linux_like_linux_seccomp_notif_addfd_t.
      End Impl_core_clone_Clone_for_libc_unix_linux_like_linux_seccomp_notif_addfd_t.
      
      Module  nlmsghdr.
      Section nlmsghdr.
        Record t : Set := {
          nlmsg_len : u32.t;
          nlmsg_type : u16.t;
          nlmsg_flags : u16.t;
          nlmsg_seq : u32.t;
          nlmsg_pid : u32.t;
        }.
        
        Definition Get_nlmsg_len :=
          Ref.map
            (fun α => Some α.(nlmsg_len))
            (fun β α => Some (α <| nlmsg_len := β |>)).
        Definition Get_nlmsg_type :=
          Ref.map
            (fun α => Some α.(nlmsg_type))
            (fun β α => Some (α <| nlmsg_type := β |>)).
        Definition Get_nlmsg_flags :=
          Ref.map
            (fun α => Some α.(nlmsg_flags))
            (fun β α => Some (α <| nlmsg_flags := β |>)).
        Definition Get_nlmsg_seq :=
          Ref.map
            (fun α => Some α.(nlmsg_seq))
            (fun β α => Some (α <| nlmsg_seq := β |>)).
        Definition Get_nlmsg_pid :=
          Ref.map
            (fun α => Some α.(nlmsg_pid))
            (fun β α => Some (α <| nlmsg_pid := β |>)).
      End nlmsghdr.
      End nlmsghdr.
      
      Module  Impl_core_marker_Copy_for_libc_unix_linux_like_linux_nlmsghdr_t.
      Section Impl_core_marker_Copy_for_libc_unix_linux_like_linux_nlmsghdr_t.
        Definition Self : Set := libc.unix.linux_like.linux.nlmsghdr.t.
        
        Global Instance ℐ : core.marker.Copy.Trait Self := {
        }.
      End Impl_core_marker_Copy_for_libc_unix_linux_like_linux_nlmsghdr_t.
      End Impl_core_marker_Copy_for_libc_unix_linux_like_linux_nlmsghdr_t.
      
      Module  Impl_core_clone_Clone_for_libc_unix_linux_like_linux_nlmsghdr_t.
      Section Impl_core_clone_Clone_for_libc_unix_linux_like_linux_nlmsghdr_t.
        Definition Self : Set := libc.unix.linux_like.linux.nlmsghdr.t.
        
        (*
                    fn clone(&self) -> $i { *self }
        *)
        Definition clone
            (self : ref Self)
            : M libc.unix.linux_like.linux.nlmsghdr.t :=
          let* self := M.alloc self in
          let* α0 : ref libc.unix.linux_like.linux.nlmsghdr.t := M.read self in
          M.read (deref α0).
        
        Global Instance AssociatedFunction_clone :
          Notations.DoubleColon Self "clone" := {
          Notations.double_colon := clone;
        }.
        
        Global Instance ℐ : core.clone.Clone.Required.Trait Self := {
          core.clone.Clone.clone := clone;
          core.clone.Clone.clone_from := Datatypes.None;
        }.
      End Impl_core_clone_Clone_for_libc_unix_linux_like_linux_nlmsghdr_t.
      End Impl_core_clone_Clone_for_libc_unix_linux_like_linux_nlmsghdr_t.
      
      Module  nlmsgerr.
      Section nlmsgerr.
        Record t : Set := {
          error : ltac:(libc.unix.c_int);
          msg : libc.unix.linux_like.linux.nlmsghdr.t;
        }.
        
        Definition Get_error :=
          Ref.map
            (fun α => Some α.(error))
            (fun β α => Some (α <| error := β |>)).
        Definition Get_msg :=
          Ref.map (fun α => Some α.(msg)) (fun β α => Some (α <| msg := β |>)).
      End nlmsgerr.
      End nlmsgerr.
      
      Module  Impl_core_marker_Copy_for_libc_unix_linux_like_linux_nlmsgerr_t.
      Section Impl_core_marker_Copy_for_libc_unix_linux_like_linux_nlmsgerr_t.
        Definition Self : Set := libc.unix.linux_like.linux.nlmsgerr.t.
        
        Global Instance ℐ : core.marker.Copy.Trait Self := {
        }.
      End Impl_core_marker_Copy_for_libc_unix_linux_like_linux_nlmsgerr_t.
      End Impl_core_marker_Copy_for_libc_unix_linux_like_linux_nlmsgerr_t.
      
      Module  Impl_core_clone_Clone_for_libc_unix_linux_like_linux_nlmsgerr_t.
      Section Impl_core_clone_Clone_for_libc_unix_linux_like_linux_nlmsgerr_t.
        Definition Self : Set := libc.unix.linux_like.linux.nlmsgerr.t.
        
        (*
                    fn clone(&self) -> $i { *self }
        *)
        Definition clone
            (self : ref Self)
            : M libc.unix.linux_like.linux.nlmsgerr.t :=
          let* self := M.alloc self in
          let* α0 : ref libc.unix.linux_like.linux.nlmsgerr.t := M.read self in
          M.read (deref α0).
        
        Global Instance AssociatedFunction_clone :
          Notations.DoubleColon Self "clone" := {
          Notations.double_colon := clone;
        }.
        
        Global Instance ℐ : core.clone.Clone.Required.Trait Self := {
          core.clone.Clone.clone := clone;
          core.clone.Clone.clone_from := Datatypes.None;
        }.
      End Impl_core_clone_Clone_for_libc_unix_linux_like_linux_nlmsgerr_t.
      End Impl_core_clone_Clone_for_libc_unix_linux_like_linux_nlmsgerr_t.
      
      Module  nlattr.
      Section nlattr.
        Record t : Set := {
          nla_len : u16.t;
          nla_type : u16.t;
        }.
        
        Definition Get_nla_len :=
          Ref.map
            (fun α => Some α.(nla_len))
            (fun β α => Some (α <| nla_len := β |>)).
        Definition Get_nla_type :=
          Ref.map
            (fun α => Some α.(nla_type))
            (fun β α => Some (α <| nla_type := β |>)).
      End nlattr.
      End nlattr.
      
      Module  Impl_core_marker_Copy_for_libc_unix_linux_like_linux_nlattr_t.
      Section Impl_core_marker_Copy_for_libc_unix_linux_like_linux_nlattr_t.
        Definition Self : Set := libc.unix.linux_like.linux.nlattr.t.
        
        Global Instance ℐ : core.marker.Copy.Trait Self := {
        }.
      End Impl_core_marker_Copy_for_libc_unix_linux_like_linux_nlattr_t.
      End Impl_core_marker_Copy_for_libc_unix_linux_like_linux_nlattr_t.
      
      Module  Impl_core_clone_Clone_for_libc_unix_linux_like_linux_nlattr_t.
      Section Impl_core_clone_Clone_for_libc_unix_linux_like_linux_nlattr_t.
        Definition Self : Set := libc.unix.linux_like.linux.nlattr.t.
        
        (*
                    fn clone(&self) -> $i { *self }
        *)
        Definition clone
            (self : ref Self)
            : M libc.unix.linux_like.linux.nlattr.t :=
          let* self := M.alloc self in
          let* α0 : ref libc.unix.linux_like.linux.nlattr.t := M.read self in
          M.read (deref α0).
        
        Global Instance AssociatedFunction_clone :
          Notations.DoubleColon Self "clone" := {
          Notations.double_colon := clone;
        }.
        
        Global Instance ℐ : core.clone.Clone.Required.Trait Self := {
          core.clone.Clone.clone := clone;
          core.clone.Clone.clone_from := Datatypes.None;
        }.
      End Impl_core_clone_Clone_for_libc_unix_linux_like_linux_nlattr_t.
      End Impl_core_clone_Clone_for_libc_unix_linux_like_linux_nlattr_t.
      
      Module  file_clone_range.
      Section file_clone_range.
        Record t : Set := {
          src_fd : ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.__s64);
          src_offset : ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.__u64);
          src_length : ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.__u64);
          dest_offset : ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.__u64);
        }.
        
        Definition Get_src_fd :=
          Ref.map
            (fun α => Some α.(src_fd))
            (fun β α => Some (α <| src_fd := β |>)).
        Definition Get_src_offset :=
          Ref.map
            (fun α => Some α.(src_offset))
            (fun β α => Some (α <| src_offset := β |>)).
        Definition Get_src_length :=
          Ref.map
            (fun α => Some α.(src_length))
            (fun β α => Some (α <| src_length := β |>)).
        Definition Get_dest_offset :=
          Ref.map
            (fun α => Some α.(dest_offset))
            (fun β α => Some (α <| dest_offset := β |>)).
      End file_clone_range.
      End file_clone_range.
      
      Module  Impl_core_marker_Copy_for_libc_unix_linux_like_linux_file_clone_range_t.
      Section Impl_core_marker_Copy_for_libc_unix_linux_like_linux_file_clone_range_t.
        Definition Self : Set := libc.unix.linux_like.linux.file_clone_range.t.
        
        Global Instance ℐ : core.marker.Copy.Trait Self := {
        }.
      End Impl_core_marker_Copy_for_libc_unix_linux_like_linux_file_clone_range_t.
      End Impl_core_marker_Copy_for_libc_unix_linux_like_linux_file_clone_range_t.
      
      Module  Impl_core_clone_Clone_for_libc_unix_linux_like_linux_file_clone_range_t.
      Section Impl_core_clone_Clone_for_libc_unix_linux_like_linux_file_clone_range_t.
        Definition Self : Set := libc.unix.linux_like.linux.file_clone_range.t.
        
        (*
                    fn clone(&self) -> $i { *self }
        *)
        Definition clone
            (self : ref Self)
            : M libc.unix.linux_like.linux.file_clone_range.t :=
          let* self := M.alloc self in
          let* α0 : ref libc.unix.linux_like.linux.file_clone_range.t :=
            M.read self in
          M.read (deref α0).
        
        Global Instance AssociatedFunction_clone :
          Notations.DoubleColon Self "clone" := {
          Notations.double_colon := clone;
        }.
        
        Global Instance ℐ : core.clone.Clone.Required.Trait Self := {
          core.clone.Clone.clone := clone;
          core.clone.Clone.clone_from := Datatypes.None;
        }.
      End Impl_core_clone_Clone_for_libc_unix_linux_like_linux_file_clone_range_t.
      End Impl_core_clone_Clone_for_libc_unix_linux_like_linux_file_clone_range_t.
      
      Module  __c_anonymous_ifru_map.
      Section __c_anonymous_ifru_map.
        Record t : Set := {
          mem_start :
            ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_ulong);
          mem_end :
            ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_ulong);
          base_addr : ltac:(libc.unix.c_ushort);
          irq : ltac:(libc.unix.c_uchar);
          dma : ltac:(libc.unix.c_uchar);
          port : ltac:(libc.unix.c_uchar);
        }.
        
        Definition Get_mem_start :=
          Ref.map
            (fun α => Some α.(mem_start))
            (fun β α => Some (α <| mem_start := β |>)).
        Definition Get_mem_end :=
          Ref.map
            (fun α => Some α.(mem_end))
            (fun β α => Some (α <| mem_end := β |>)).
        Definition Get_base_addr :=
          Ref.map
            (fun α => Some α.(base_addr))
            (fun β α => Some (α <| base_addr := β |>)).
        Definition Get_irq :=
          Ref.map (fun α => Some α.(irq)) (fun β α => Some (α <| irq := β |>)).
        Definition Get_dma :=
          Ref.map (fun α => Some α.(dma)) (fun β α => Some (α <| dma := β |>)).
        Definition Get_port :=
          Ref.map
            (fun α => Some α.(port))
            (fun β α => Some (α <| port := β |>)).
      End __c_anonymous_ifru_map.
      End __c_anonymous_ifru_map.
      
      Module  Impl_core_marker_Copy_for_libc_unix_linux_like_linux___c_anonymous_ifru_map_t.
      Section Impl_core_marker_Copy_for_libc_unix_linux_like_linux___c_anonymous_ifru_map_t.
        Definition Self : Set :=
          libc.unix.linux_like.linux.__c_anonymous_ifru_map.t.
        
        Global Instance ℐ : core.marker.Copy.Trait Self := {
        }.
      End Impl_core_marker_Copy_for_libc_unix_linux_like_linux___c_anonymous_ifru_map_t.
      End Impl_core_marker_Copy_for_libc_unix_linux_like_linux___c_anonymous_ifru_map_t.
      
      Module  Impl_core_clone_Clone_for_libc_unix_linux_like_linux___c_anonymous_ifru_map_t.
      Section Impl_core_clone_Clone_for_libc_unix_linux_like_linux___c_anonymous_ifru_map_t.
        Definition Self : Set :=
          libc.unix.linux_like.linux.__c_anonymous_ifru_map.t.
        
        (*
                    fn clone(&self) -> $i { *self }
        *)
        Definition clone
            (self : ref Self)
            : M libc.unix.linux_like.linux.__c_anonymous_ifru_map.t :=
          let* self := M.alloc self in
          let* α0 : ref libc.unix.linux_like.linux.__c_anonymous_ifru_map.t :=
            M.read self in
          M.read (deref α0).
        
        Global Instance AssociatedFunction_clone :
          Notations.DoubleColon Self "clone" := {
          Notations.double_colon := clone;
        }.
        
        Global Instance ℐ : core.clone.Clone.Required.Trait Self := {
          core.clone.Clone.clone := clone;
          core.clone.Clone.clone_from := Datatypes.None;
        }.
      End Impl_core_clone_Clone_for_libc_unix_linux_like_linux___c_anonymous_ifru_map_t.
      End Impl_core_clone_Clone_for_libc_unix_linux_like_linux___c_anonymous_ifru_map_t.
      
      Module  in6_ifreq.
      Section in6_ifreq.
        Record t : Set := {
          ifr6_addr : libc.unix.align.in6_addr.t;
          ifr6_prefixlen : u32.t;
          ifr6_ifindex : ltac:(libc.unix.c_int);
        }.
        
        Definition Get_ifr6_addr :=
          Ref.map
            (fun α => Some α.(ifr6_addr))
            (fun β α => Some (α <| ifr6_addr := β |>)).
        Definition Get_ifr6_prefixlen :=
          Ref.map
            (fun α => Some α.(ifr6_prefixlen))
            (fun β α => Some (α <| ifr6_prefixlen := β |>)).
        Definition Get_ifr6_ifindex :=
          Ref.map
            (fun α => Some α.(ifr6_ifindex))
            (fun β α => Some (α <| ifr6_ifindex := β |>)).
      End in6_ifreq.
      End in6_ifreq.
      
      Module  Impl_core_marker_Copy_for_libc_unix_linux_like_linux_in6_ifreq_t.
      Section Impl_core_marker_Copy_for_libc_unix_linux_like_linux_in6_ifreq_t.
        Definition Self : Set := libc.unix.linux_like.linux.in6_ifreq.t.
        
        Global Instance ℐ : core.marker.Copy.Trait Self := {
        }.
      End Impl_core_marker_Copy_for_libc_unix_linux_like_linux_in6_ifreq_t.
      End Impl_core_marker_Copy_for_libc_unix_linux_like_linux_in6_ifreq_t.
      
      Module  Impl_core_clone_Clone_for_libc_unix_linux_like_linux_in6_ifreq_t.
      Section Impl_core_clone_Clone_for_libc_unix_linux_like_linux_in6_ifreq_t.
        Definition Self : Set := libc.unix.linux_like.linux.in6_ifreq.t.
        
        (*
                    fn clone(&self) -> $i { *self }
        *)
        Definition clone
            (self : ref Self)
            : M libc.unix.linux_like.linux.in6_ifreq.t :=
          let* self := M.alloc self in
          let* α0 : ref libc.unix.linux_like.linux.in6_ifreq.t := M.read self in
          M.read (deref α0).
        
        Global Instance AssociatedFunction_clone :
          Notations.DoubleColon Self "clone" := {
          Notations.double_colon := clone;
        }.
        
        Global Instance ℐ : core.clone.Clone.Required.Trait Self := {
          core.clone.Clone.clone := clone;
          core.clone.Clone.clone_from := Datatypes.None;
        }.
      End Impl_core_clone_Clone_for_libc_unix_linux_like_linux_in6_ifreq_t.
      End Impl_core_clone_Clone_for_libc_unix_linux_like_linux_in6_ifreq_t.
      
      Module  option.
      Section option.
        Record t : Set := {
          name : ref ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.c_char);
          has_arg : ltac:(libc.unix.c_int);
          flag : mut_ref ltac:(libc.unix.c_int);
          val : ltac:(libc.unix.c_int);
        }.
        
        Definition Get_name :=
          Ref.map
            (fun α => Some α.(name))
            (fun β α => Some (α <| name := β |>)).
        Definition Get_has_arg :=
          Ref.map
            (fun α => Some α.(has_arg))
            (fun β α => Some (α <| has_arg := β |>)).
        Definition Get_flag :=
          Ref.map
            (fun α => Some α.(flag))
            (fun β α => Some (α <| flag := β |>)).
        Definition Get_val :=
          Ref.map (fun α => Some α.(val)) (fun β α => Some (α <| val := β |>)).
      End option.
      End option.
      
      Module  Impl_core_marker_Copy_for_libc_unix_linux_like_linux_option_t.
      Section Impl_core_marker_Copy_for_libc_unix_linux_like_linux_option_t.
        Definition Self : Set := libc.unix.linux_like.linux.option.t.
        
        Global Instance ℐ : core.marker.Copy.Trait Self := {
        }.
      End Impl_core_marker_Copy_for_libc_unix_linux_like_linux_option_t.
      End Impl_core_marker_Copy_for_libc_unix_linux_like_linux_option_t.
      
      Module  Impl_core_clone_Clone_for_libc_unix_linux_like_linux_option_t.
      Section Impl_core_clone_Clone_for_libc_unix_linux_like_linux_option_t.
        Definition Self : Set := libc.unix.linux_like.linux.option.t.
        
        (*
                    fn clone(&self) -> $i { *self }
        *)
        Definition clone
            (self : ref Self)
            : M libc.unix.linux_like.linux.option.t :=
          let* self := M.alloc self in
          let* α0 : ref libc.unix.linux_like.linux.option.t := M.read self in
          M.read (deref α0).
        
        Global Instance AssociatedFunction_clone :
          Notations.DoubleColon Self "clone" := {
          Notations.double_colon := clone;
        }.
        
        Global Instance ℐ : core.clone.Clone.Required.Trait Self := {
          core.clone.Clone.clone := clone;
          core.clone.Clone.clone_from := Datatypes.None;
        }.
      End Impl_core_clone_Clone_for_libc_unix_linux_like_linux_option_t.
      End Impl_core_clone_Clone_for_libc_unix_linux_like_linux_option_t.
      
      Module  sctp_initmsg.
      Section sctp_initmsg.
        Record t : Set := {
          sinit_num_ostreams : ltac:(libc.unix.linux_like.linux.__u16);
          sinit_max_instreams : ltac:(libc.unix.linux_like.linux.__u16);
          sinit_max_attempts : ltac:(libc.unix.linux_like.linux.__u16);
          sinit_max_init_timeo : ltac:(libc.unix.linux_like.linux.__u16);
        }.
        
        Definition Get_sinit_num_ostreams :=
          Ref.map
            (fun α => Some α.(sinit_num_ostreams))
            (fun β α => Some (α <| sinit_num_ostreams := β |>)).
        Definition Get_sinit_max_instreams :=
          Ref.map
            (fun α => Some α.(sinit_max_instreams))
            (fun β α => Some (α <| sinit_max_instreams := β |>)).
        Definition Get_sinit_max_attempts :=
          Ref.map
            (fun α => Some α.(sinit_max_attempts))
            (fun β α => Some (α <| sinit_max_attempts := β |>)).
        Definition Get_sinit_max_init_timeo :=
          Ref.map
            (fun α => Some α.(sinit_max_init_timeo))
            (fun β α => Some (α <| sinit_max_init_timeo := β |>)).
      End sctp_initmsg.
      End sctp_initmsg.
      
      Module  Impl_core_marker_Copy_for_libc_unix_linux_like_linux_sctp_initmsg_t.
      Section Impl_core_marker_Copy_for_libc_unix_linux_like_linux_sctp_initmsg_t.
        Definition Self : Set := libc.unix.linux_like.linux.sctp_initmsg.t.
        
        Global Instance ℐ : core.marker.Copy.Trait Self := {
        }.
      End Impl_core_marker_Copy_for_libc_unix_linux_like_linux_sctp_initmsg_t.
      End Impl_core_marker_Copy_for_libc_unix_linux_like_linux_sctp_initmsg_t.
      
      Module  Impl_core_clone_Clone_for_libc_unix_linux_like_linux_sctp_initmsg_t.
      Section Impl_core_clone_Clone_for_libc_unix_linux_like_linux_sctp_initmsg_t.
        Definition Self : Set := libc.unix.linux_like.linux.sctp_initmsg.t.
        
        (*
                    fn clone(&self) -> $i { *self }
        *)
        Definition clone
            (self : ref Self)
            : M libc.unix.linux_like.linux.sctp_initmsg.t :=
          let* self := M.alloc self in
          let* α0 : ref libc.unix.linux_like.linux.sctp_initmsg.t :=
            M.read self in
          M.read (deref α0).
        
        Global Instance AssociatedFunction_clone :
          Notations.DoubleColon Self "clone" := {
          Notations.double_colon := clone;
        }.
        
        Global Instance ℐ : core.clone.Clone.Required.Trait Self := {
          core.clone.Clone.clone := clone;
          core.clone.Clone.clone_from := Datatypes.None;
        }.
      End Impl_core_clone_Clone_for_libc_unix_linux_like_linux_sctp_initmsg_t.
      End Impl_core_clone_Clone_for_libc_unix_linux_like_linux_sctp_initmsg_t.
      
      Module  sctp_sndrcvinfo.
      Section sctp_sndrcvinfo.
        Record t : Set := {
          sinfo_stream : ltac:(libc.unix.linux_like.linux.__u16);
          sinfo_ssn : ltac:(libc.unix.linux_like.linux.__u16);
          sinfo_flags : ltac:(libc.unix.linux_like.linux.__u16);
          sinfo_ppid : ltac:(libc.unix.linux_like.linux.__u32);
          sinfo_context : ltac:(libc.unix.linux_like.linux.__u32);
          sinfo_timetolive : ltac:(libc.unix.linux_like.linux.__u32);
          sinfo_tsn : ltac:(libc.unix.linux_like.linux.__u32);
          sinfo_cumtsn : ltac:(libc.unix.linux_like.linux.__u32);
          sinfo_assoc_id : ltac:(libc.unix.linux_like.linux.sctp_assoc_t);
        }.
        
        Definition Get_sinfo_stream :=
          Ref.map
            (fun α => Some α.(sinfo_stream))
            (fun β α => Some (α <| sinfo_stream := β |>)).
        Definition Get_sinfo_ssn :=
          Ref.map
            (fun α => Some α.(sinfo_ssn))
            (fun β α => Some (α <| sinfo_ssn := β |>)).
        Definition Get_sinfo_flags :=
          Ref.map
            (fun α => Some α.(sinfo_flags))
            (fun β α => Some (α <| sinfo_flags := β |>)).
        Definition Get_sinfo_ppid :=
          Ref.map
            (fun α => Some α.(sinfo_ppid))
            (fun β α => Some (α <| sinfo_ppid := β |>)).
        Definition Get_sinfo_context :=
          Ref.map
            (fun α => Some α.(sinfo_context))
            (fun β α => Some (α <| sinfo_context := β |>)).
        Definition Get_sinfo_timetolive :=
          Ref.map
            (fun α => Some α.(sinfo_timetolive))
            (fun β α => Some (α <| sinfo_timetolive := β |>)).
        Definition Get_sinfo_tsn :=
          Ref.map
            (fun α => Some α.(sinfo_tsn))
            (fun β α => Some (α <| sinfo_tsn := β |>)).
        Definition Get_sinfo_cumtsn :=
          Ref.map
            (fun α => Some α.(sinfo_cumtsn))
            (fun β α => Some (α <| sinfo_cumtsn := β |>)).
        Definition Get_sinfo_assoc_id :=
          Ref.map
            (fun α => Some α.(sinfo_assoc_id))
            (fun β α => Some (α <| sinfo_assoc_id := β |>)).
      End sctp_sndrcvinfo.
      End sctp_sndrcvinfo.
      
      Module  Impl_core_marker_Copy_for_libc_unix_linux_like_linux_sctp_sndrcvinfo_t.
      Section Impl_core_marker_Copy_for_libc_unix_linux_like_linux_sctp_sndrcvinfo_t.
        Definition Self : Set := libc.unix.linux_like.linux.sctp_sndrcvinfo.t.
        
        Global Instance ℐ : core.marker.Copy.Trait Self := {
        }.
      End Impl_core_marker_Copy_for_libc_unix_linux_like_linux_sctp_sndrcvinfo_t.
      End Impl_core_marker_Copy_for_libc_unix_linux_like_linux_sctp_sndrcvinfo_t.
      
      Module  Impl_core_clone_Clone_for_libc_unix_linux_like_linux_sctp_sndrcvinfo_t.
      Section Impl_core_clone_Clone_for_libc_unix_linux_like_linux_sctp_sndrcvinfo_t.
        Definition Self : Set := libc.unix.linux_like.linux.sctp_sndrcvinfo.t.
        
        (*
                    fn clone(&self) -> $i { *self }
        *)
        Definition clone
            (self : ref Self)
            : M libc.unix.linux_like.linux.sctp_sndrcvinfo.t :=
          let* self := M.alloc self in
          let* α0 : ref libc.unix.linux_like.linux.sctp_sndrcvinfo.t :=
            M.read self in
          M.read (deref α0).
        
        Global Instance AssociatedFunction_clone :
          Notations.DoubleColon Self "clone" := {
          Notations.double_colon := clone;
        }.
        
        Global Instance ℐ : core.clone.Clone.Required.Trait Self := {
          core.clone.Clone.clone := clone;
          core.clone.Clone.clone_from := Datatypes.None;
        }.
      End Impl_core_clone_Clone_for_libc_unix_linux_like_linux_sctp_sndrcvinfo_t.
      End Impl_core_clone_Clone_for_libc_unix_linux_like_linux_sctp_sndrcvinfo_t.
      
      Module  sctp_sndinfo.
      Section sctp_sndinfo.
        Record t : Set := {
          snd_sid : ltac:(libc.unix.linux_like.linux.__u16);
          snd_flags : ltac:(libc.unix.linux_like.linux.__u16);
          snd_ppid : ltac:(libc.unix.linux_like.linux.__u32);
          snd_context : ltac:(libc.unix.linux_like.linux.__u32);
          snd_assoc_id : ltac:(libc.unix.linux_like.linux.sctp_assoc_t);
        }.
        
        Definition Get_snd_sid :=
          Ref.map
            (fun α => Some α.(snd_sid))
            (fun β α => Some (α <| snd_sid := β |>)).
        Definition Get_snd_flags :=
          Ref.map
            (fun α => Some α.(snd_flags))
            (fun β α => Some (α <| snd_flags := β |>)).
        Definition Get_snd_ppid :=
          Ref.map
            (fun α => Some α.(snd_ppid))
            (fun β α => Some (α <| snd_ppid := β |>)).
        Definition Get_snd_context :=
          Ref.map
            (fun α => Some α.(snd_context))
            (fun β α => Some (α <| snd_context := β |>)).
        Definition Get_snd_assoc_id :=
          Ref.map
            (fun α => Some α.(snd_assoc_id))
            (fun β α => Some (α <| snd_assoc_id := β |>)).
      End sctp_sndinfo.
      End sctp_sndinfo.
      
      Module  Impl_core_marker_Copy_for_libc_unix_linux_like_linux_sctp_sndinfo_t.
      Section Impl_core_marker_Copy_for_libc_unix_linux_like_linux_sctp_sndinfo_t.
        Definition Self : Set := libc.unix.linux_like.linux.sctp_sndinfo.t.
        
        Global Instance ℐ : core.marker.Copy.Trait Self := {
        }.
      End Impl_core_marker_Copy_for_libc_unix_linux_like_linux_sctp_sndinfo_t.
      End Impl_core_marker_Copy_for_libc_unix_linux_like_linux_sctp_sndinfo_t.
      
      Module  Impl_core_clone_Clone_for_libc_unix_linux_like_linux_sctp_sndinfo_t.
      Section Impl_core_clone_Clone_for_libc_unix_linux_like_linux_sctp_sndinfo_t.
        Definition Self : Set := libc.unix.linux_like.linux.sctp_sndinfo.t.
        
        (*
                    fn clone(&self) -> $i { *self }
        *)
        Definition clone
            (self : ref Self)
            : M libc.unix.linux_like.linux.sctp_sndinfo.t :=
          let* self := M.alloc self in
          let* α0 : ref libc.unix.linux_like.linux.sctp_sndinfo.t :=
            M.read self in
          M.read (deref α0).
        
        Global Instance AssociatedFunction_clone :
          Notations.DoubleColon Self "clone" := {
          Notations.double_colon := clone;
        }.
        
        Global Instance ℐ : core.clone.Clone.Required.Trait Self := {
          core.clone.Clone.clone := clone;
          core.clone.Clone.clone_from := Datatypes.None;
        }.
      End Impl_core_clone_Clone_for_libc_unix_linux_like_linux_sctp_sndinfo_t.
      End Impl_core_clone_Clone_for_libc_unix_linux_like_linux_sctp_sndinfo_t.
      
      Module  sctp_rcvinfo.
      Section sctp_rcvinfo.
        Record t : Set := {
          rcv_sid : ltac:(libc.unix.linux_like.linux.__u16);
          rcv_ssn : ltac:(libc.unix.linux_like.linux.__u16);
          rcv_flags : ltac:(libc.unix.linux_like.linux.__u16);
          rcv_ppid : ltac:(libc.unix.linux_like.linux.__u32);
          rcv_tsn : ltac:(libc.unix.linux_like.linux.__u32);
          rcv_cumtsn : ltac:(libc.unix.linux_like.linux.__u32);
          rcv_context : ltac:(libc.unix.linux_like.linux.__u32);
          rcv_assoc_id : ltac:(libc.unix.linux_like.linux.sctp_assoc_t);
        }.
        
        Definition Get_rcv_sid :=
          Ref.map
            (fun α => Some α.(rcv_sid))
            (fun β α => Some (α <| rcv_sid := β |>)).
        Definition Get_rcv_ssn :=
          Ref.map
            (fun α => Some α.(rcv_ssn))
            (fun β α => Some (α <| rcv_ssn := β |>)).
        Definition Get_rcv_flags :=
          Ref.map
            (fun α => Some α.(rcv_flags))
            (fun β α => Some (α <| rcv_flags := β |>)).
        Definition Get_rcv_ppid :=
          Ref.map
            (fun α => Some α.(rcv_ppid))
            (fun β α => Some (α <| rcv_ppid := β |>)).
        Definition Get_rcv_tsn :=
          Ref.map
            (fun α => Some α.(rcv_tsn))
            (fun β α => Some (α <| rcv_tsn := β |>)).
        Definition Get_rcv_cumtsn :=
          Ref.map
            (fun α => Some α.(rcv_cumtsn))
            (fun β α => Some (α <| rcv_cumtsn := β |>)).
        Definition Get_rcv_context :=
          Ref.map
            (fun α => Some α.(rcv_context))
            (fun β α => Some (α <| rcv_context := β |>)).
        Definition Get_rcv_assoc_id :=
          Ref.map
            (fun α => Some α.(rcv_assoc_id))
            (fun β α => Some (α <| rcv_assoc_id := β |>)).
      End sctp_rcvinfo.
      End sctp_rcvinfo.
      
      Module  Impl_core_marker_Copy_for_libc_unix_linux_like_linux_sctp_rcvinfo_t.
      Section Impl_core_marker_Copy_for_libc_unix_linux_like_linux_sctp_rcvinfo_t.
        Definition Self : Set := libc.unix.linux_like.linux.sctp_rcvinfo.t.
        
        Global Instance ℐ : core.marker.Copy.Trait Self := {
        }.
      End Impl_core_marker_Copy_for_libc_unix_linux_like_linux_sctp_rcvinfo_t.
      End Impl_core_marker_Copy_for_libc_unix_linux_like_linux_sctp_rcvinfo_t.
      
      Module  Impl_core_clone_Clone_for_libc_unix_linux_like_linux_sctp_rcvinfo_t.
      Section Impl_core_clone_Clone_for_libc_unix_linux_like_linux_sctp_rcvinfo_t.
        Definition Self : Set := libc.unix.linux_like.linux.sctp_rcvinfo.t.
        
        (*
                    fn clone(&self) -> $i { *self }
        *)
        Definition clone
            (self : ref Self)
            : M libc.unix.linux_like.linux.sctp_rcvinfo.t :=
          let* self := M.alloc self in
          let* α0 : ref libc.unix.linux_like.linux.sctp_rcvinfo.t :=
            M.read self in
          M.read (deref α0).
        
        Global Instance AssociatedFunction_clone :
          Notations.DoubleColon Self "clone" := {
          Notations.double_colon := clone;
        }.
        
        Global Instance ℐ : core.clone.Clone.Required.Trait Self := {
          core.clone.Clone.clone := clone;
          core.clone.Clone.clone_from := Datatypes.None;
        }.
      End Impl_core_clone_Clone_for_libc_unix_linux_like_linux_sctp_rcvinfo_t.
      End Impl_core_clone_Clone_for_libc_unix_linux_like_linux_sctp_rcvinfo_t.
      
      Module  sctp_nxtinfo.
      Section sctp_nxtinfo.
        Record t : Set := {
          nxt_sid : ltac:(libc.unix.linux_like.linux.__u16);
          nxt_flags : ltac:(libc.unix.linux_like.linux.__u16);
          nxt_ppid : ltac:(libc.unix.linux_like.linux.__u32);
          nxt_length : ltac:(libc.unix.linux_like.linux.__u32);
          nxt_assoc_id : ltac:(libc.unix.linux_like.linux.sctp_assoc_t);
        }.
        
        Definition Get_nxt_sid :=
          Ref.map
            (fun α => Some α.(nxt_sid))
            (fun β α => Some (α <| nxt_sid := β |>)).
        Definition Get_nxt_flags :=
          Ref.map
            (fun α => Some α.(nxt_flags))
            (fun β α => Some (α <| nxt_flags := β |>)).
        Definition Get_nxt_ppid :=
          Ref.map
            (fun α => Some α.(nxt_ppid))
            (fun β α => Some (α <| nxt_ppid := β |>)).
        Definition Get_nxt_length :=
          Ref.map
            (fun α => Some α.(nxt_length))
            (fun β α => Some (α <| nxt_length := β |>)).
        Definition Get_nxt_assoc_id :=
          Ref.map
            (fun α => Some α.(nxt_assoc_id))
            (fun β α => Some (α <| nxt_assoc_id := β |>)).
      End sctp_nxtinfo.
      End sctp_nxtinfo.
      
      Module  Impl_core_marker_Copy_for_libc_unix_linux_like_linux_sctp_nxtinfo_t.
      Section Impl_core_marker_Copy_for_libc_unix_linux_like_linux_sctp_nxtinfo_t.
        Definition Self : Set := libc.unix.linux_like.linux.sctp_nxtinfo.t.
        
        Global Instance ℐ : core.marker.Copy.Trait Self := {
        }.
      End Impl_core_marker_Copy_for_libc_unix_linux_like_linux_sctp_nxtinfo_t.
      End Impl_core_marker_Copy_for_libc_unix_linux_like_linux_sctp_nxtinfo_t.
      
      Module  Impl_core_clone_Clone_for_libc_unix_linux_like_linux_sctp_nxtinfo_t.
      Section Impl_core_clone_Clone_for_libc_unix_linux_like_linux_sctp_nxtinfo_t.
        Definition Self : Set := libc.unix.linux_like.linux.sctp_nxtinfo.t.
        
        (*
                    fn clone(&self) -> $i { *self }
        *)
        Definition clone
            (self : ref Self)
            : M libc.unix.linux_like.linux.sctp_nxtinfo.t :=
          let* self := M.alloc self in
          let* α0 : ref libc.unix.linux_like.linux.sctp_nxtinfo.t :=
            M.read self in
          M.read (deref α0).
        
        Global Instance AssociatedFunction_clone :
          Notations.DoubleColon Self "clone" := {
          Notations.double_colon := clone;
        }.
        
        Global Instance ℐ : core.clone.Clone.Required.Trait Self := {
          core.clone.Clone.clone := clone;
          core.clone.Clone.clone_from := Datatypes.None;
        }.
      End Impl_core_clone_Clone_for_libc_unix_linux_like_linux_sctp_nxtinfo_t.
      End Impl_core_clone_Clone_for_libc_unix_linux_like_linux_sctp_nxtinfo_t.
      
      Module  sctp_prinfo.
      Section sctp_prinfo.
        Record t : Set := {
          pr_policy : ltac:(libc.unix.linux_like.linux.__u16);
          pr_value : ltac:(libc.unix.linux_like.linux.__u32);
        }.
        
        Definition Get_pr_policy :=
          Ref.map
            (fun α => Some α.(pr_policy))
            (fun β α => Some (α <| pr_policy := β |>)).
        Definition Get_pr_value :=
          Ref.map
            (fun α => Some α.(pr_value))
            (fun β α => Some (α <| pr_value := β |>)).
      End sctp_prinfo.
      End sctp_prinfo.
      
      Module  Impl_core_marker_Copy_for_libc_unix_linux_like_linux_sctp_prinfo_t.
      Section Impl_core_marker_Copy_for_libc_unix_linux_like_linux_sctp_prinfo_t.
        Definition Self : Set := libc.unix.linux_like.linux.sctp_prinfo.t.
        
        Global Instance ℐ : core.marker.Copy.Trait Self := {
        }.
      End Impl_core_marker_Copy_for_libc_unix_linux_like_linux_sctp_prinfo_t.
      End Impl_core_marker_Copy_for_libc_unix_linux_like_linux_sctp_prinfo_t.
      
      Module  Impl_core_clone_Clone_for_libc_unix_linux_like_linux_sctp_prinfo_t.
      Section Impl_core_clone_Clone_for_libc_unix_linux_like_linux_sctp_prinfo_t.
        Definition Self : Set := libc.unix.linux_like.linux.sctp_prinfo.t.
        
        (*
                    fn clone(&self) -> $i { *self }
        *)
        Definition clone
            (self : ref Self)
            : M libc.unix.linux_like.linux.sctp_prinfo.t :=
          let* self := M.alloc self in
          let* α0 : ref libc.unix.linux_like.linux.sctp_prinfo.t :=
            M.read self in
          M.read (deref α0).
        
        Global Instance AssociatedFunction_clone :
          Notations.DoubleColon Self "clone" := {
          Notations.double_colon := clone;
        }.
        
        Global Instance ℐ : core.clone.Clone.Required.Trait Self := {
          core.clone.Clone.clone := clone;
          core.clone.Clone.clone_from := Datatypes.None;
        }.
      End Impl_core_clone_Clone_for_libc_unix_linux_like_linux_sctp_prinfo_t.
      End Impl_core_clone_Clone_for_libc_unix_linux_like_linux_sctp_prinfo_t.
      
      Module  sctp_authinfo.
      Section sctp_authinfo.
        Record t : Set := {
          auth_keynumber : ltac:(libc.unix.linux_like.linux.__u16);
        }.
        
        Definition Get_auth_keynumber :=
          Ref.map
            (fun α => Some α.(auth_keynumber))
            (fun β α => Some (α <| auth_keynumber := β |>)).
      End sctp_authinfo.
      End sctp_authinfo.
      
      Module  Impl_core_marker_Copy_for_libc_unix_linux_like_linux_sctp_authinfo_t.
      Section Impl_core_marker_Copy_for_libc_unix_linux_like_linux_sctp_authinfo_t.
        Definition Self : Set := libc.unix.linux_like.linux.sctp_authinfo.t.
        
        Global Instance ℐ : core.marker.Copy.Trait Self := {
        }.
      End Impl_core_marker_Copy_for_libc_unix_linux_like_linux_sctp_authinfo_t.
      End Impl_core_marker_Copy_for_libc_unix_linux_like_linux_sctp_authinfo_t.
      
      Module  Impl_core_clone_Clone_for_libc_unix_linux_like_linux_sctp_authinfo_t.
      Section Impl_core_clone_Clone_for_libc_unix_linux_like_linux_sctp_authinfo_t.
        Definition Self : Set := libc.unix.linux_like.linux.sctp_authinfo.t.
        
        (*
                    fn clone(&self) -> $i { *self }
        *)
        Definition clone
            (self : ref Self)
            : M libc.unix.linux_like.linux.sctp_authinfo.t :=
          let* self := M.alloc self in
          let* α0 : ref libc.unix.linux_like.linux.sctp_authinfo.t :=
            M.read self in
          M.read (deref α0).
        
        Global Instance AssociatedFunction_clone :
          Notations.DoubleColon Self "clone" := {
          Notations.double_colon := clone;
        }.
        
        Global Instance ℐ : core.clone.Clone.Required.Trait Self := {
          core.clone.Clone.clone := clone;
          core.clone.Clone.clone_from := Datatypes.None;
        }.
      End Impl_core_clone_Clone_for_libc_unix_linux_like_linux_sctp_authinfo_t.
      End Impl_core_clone_Clone_for_libc_unix_linux_like_linux_sctp_authinfo_t.
      
      Module  rlimit64.
      Section rlimit64.
        Record t : Set := {
          rlim_cur : ltac:(libc.unix.linux_like.linux.rlim64_t);
          rlim_max : ltac:(libc.unix.linux_like.linux.rlim64_t);
        }.
        
        Definition Get_rlim_cur :=
          Ref.map
            (fun α => Some α.(rlim_cur))
            (fun β α => Some (α <| rlim_cur := β |>)).
        Definition Get_rlim_max :=
          Ref.map
            (fun α => Some α.(rlim_max))
            (fun β α => Some (α <| rlim_max := β |>)).
      End rlimit64.
      End rlimit64.
      
      Module  Impl_core_marker_Copy_for_libc_unix_linux_like_linux_rlimit64_t.
      Section Impl_core_marker_Copy_for_libc_unix_linux_like_linux_rlimit64_t.
        Definition Self : Set := libc.unix.linux_like.linux.rlimit64.t.
        
        Global Instance ℐ : core.marker.Copy.Trait Self := {
        }.
      End Impl_core_marker_Copy_for_libc_unix_linux_like_linux_rlimit64_t.
      End Impl_core_marker_Copy_for_libc_unix_linux_like_linux_rlimit64_t.
      
      Module  Impl_core_clone_Clone_for_libc_unix_linux_like_linux_rlimit64_t.
      Section Impl_core_clone_Clone_for_libc_unix_linux_like_linux_rlimit64_t.
        Definition Self : Set := libc.unix.linux_like.linux.rlimit64.t.
        
        (*
                    fn clone(&self) -> $i { *self }
        *)
        Definition clone
            (self : ref Self)
            : M libc.unix.linux_like.linux.rlimit64.t :=
          let* self := M.alloc self in
          let* α0 : ref libc.unix.linux_like.linux.rlimit64.t := M.read self in
          M.read (deref α0).
        
        Global Instance AssociatedFunction_clone :
          Notations.DoubleColon Self "clone" := {
          Notations.double_colon := clone;
        }.
        
        Global Instance ℐ : core.clone.Clone.Required.Trait Self := {
          core.clone.Clone.clone := clone;
          core.clone.Clone.clone_from := Datatypes.None;
        }.
      End Impl_core_clone_Clone_for_libc_unix_linux_like_linux_rlimit64_t.
      End Impl_core_clone_Clone_for_libc_unix_linux_like_linux_rlimit64_t.
      
      Module  tls_crypto_info.
      Section tls_crypto_info.
        Record t : Set := {
          version : ltac:(libc.unix.linux_like.linux.__u16);
          cipher_type : ltac:(libc.unix.linux_like.linux.__u16);
        }.
        
        Definition Get_version :=
          Ref.map
            (fun α => Some α.(version))
            (fun β α => Some (α <| version := β |>)).
        Definition Get_cipher_type :=
          Ref.map
            (fun α => Some α.(cipher_type))
            (fun β α => Some (α <| cipher_type := β |>)).
      End tls_crypto_info.
      End tls_crypto_info.
      
      Module  Impl_core_marker_Copy_for_libc_unix_linux_like_linux_tls_crypto_info_t.
      Section Impl_core_marker_Copy_for_libc_unix_linux_like_linux_tls_crypto_info_t.
        Definition Self : Set := libc.unix.linux_like.linux.tls_crypto_info.t.
        
        Global Instance ℐ : core.marker.Copy.Trait Self := {
        }.
      End Impl_core_marker_Copy_for_libc_unix_linux_like_linux_tls_crypto_info_t.
      End Impl_core_marker_Copy_for_libc_unix_linux_like_linux_tls_crypto_info_t.
      
      Module  Impl_core_clone_Clone_for_libc_unix_linux_like_linux_tls_crypto_info_t.
      Section Impl_core_clone_Clone_for_libc_unix_linux_like_linux_tls_crypto_info_t.
        Definition Self : Set := libc.unix.linux_like.linux.tls_crypto_info.t.
        
        (*
                    fn clone(&self) -> $i { *self }
        *)
        Definition clone
            (self : ref Self)
            : M libc.unix.linux_like.linux.tls_crypto_info.t :=
          let* self := M.alloc self in
          let* α0 : ref libc.unix.linux_like.linux.tls_crypto_info.t :=
            M.read self in
          M.read (deref α0).
        
        Global Instance AssociatedFunction_clone :
          Notations.DoubleColon Self "clone" := {
          Notations.double_colon := clone;
        }.
        
        Global Instance ℐ : core.clone.Clone.Required.Trait Self := {
          core.clone.Clone.clone := clone;
          core.clone.Clone.clone_from := Datatypes.None;
        }.
      End Impl_core_clone_Clone_for_libc_unix_linux_like_linux_tls_crypto_info_t.
      End Impl_core_clone_Clone_for_libc_unix_linux_like_linux_tls_crypto_info_t.
      
      Module  tls12_crypto_info_aes_gcm_128.
      Section tls12_crypto_info_aes_gcm_128.
        Record t : Set := {
          info : libc.unix.linux_like.linux.tls_crypto_info.t;
          iv : array ltac:(libc.unix.c_uchar);
          key : array ltac:(libc.unix.c_uchar);
          salt : array ltac:(libc.unix.c_uchar);
          rec_seq : array ltac:(libc.unix.c_uchar);
        }.
        
        Definition Get_info :=
          Ref.map
            (fun α => Some α.(info))
            (fun β α => Some (α <| info := β |>)).
        Definition Get_iv :=
          Ref.map (fun α => Some α.(iv)) (fun β α => Some (α <| iv := β |>)).
        Definition Get_key :=
          Ref.map (fun α => Some α.(key)) (fun β α => Some (α <| key := β |>)).
        Definition Get_salt :=
          Ref.map
            (fun α => Some α.(salt))
            (fun β α => Some (α <| salt := β |>)).
        Definition Get_rec_seq :=
          Ref.map
            (fun α => Some α.(rec_seq))
            (fun β α => Some (α <| rec_seq := β |>)).
      End tls12_crypto_info_aes_gcm_128.
      End tls12_crypto_info_aes_gcm_128.
      
      Module  Impl_core_marker_Copy_for_libc_unix_linux_like_linux_tls12_crypto_info_aes_gcm_128_t.
      Section Impl_core_marker_Copy_for_libc_unix_linux_like_linux_tls12_crypto_info_aes_gcm_128_t.
        Definition Self : Set :=
          libc.unix.linux_like.linux.tls12_crypto_info_aes_gcm_128.t.
        
        Global Instance ℐ : core.marker.Copy.Trait Self := {
        }.
      End Impl_core_marker_Copy_for_libc_unix_linux_like_linux_tls12_crypto_info_aes_gcm_128_t.
      End Impl_core_marker_Copy_for_libc_unix_linux_like_linux_tls12_crypto_info_aes_gcm_128_t.
      
      Module  Impl_core_clone_Clone_for_libc_unix_linux_like_linux_tls12_crypto_info_aes_gcm_128_t.
      Section Impl_core_clone_Clone_for_libc_unix_linux_like_linux_tls12_crypto_info_aes_gcm_128_t.
        Definition Self : Set :=
          libc.unix.linux_like.linux.tls12_crypto_info_aes_gcm_128.t.
        
        (*
                    fn clone(&self) -> $i { *self }
        *)
        Definition clone
            (self : ref Self)
            : M libc.unix.linux_like.linux.tls12_crypto_info_aes_gcm_128.t :=
          let* self := M.alloc self in
          let* α0 :
              ref libc.unix.linux_like.linux.tls12_crypto_info_aes_gcm_128.t :=
            M.read self in
          M.read (deref α0).
        
        Global Instance AssociatedFunction_clone :
          Notations.DoubleColon Self "clone" := {
          Notations.double_colon := clone;
        }.
        
        Global Instance ℐ : core.clone.Clone.Required.Trait Self := {
          core.clone.Clone.clone := clone;
          core.clone.Clone.clone_from := Datatypes.None;
        }.
      End Impl_core_clone_Clone_for_libc_unix_linux_like_linux_tls12_crypto_info_aes_gcm_128_t.
      End Impl_core_clone_Clone_for_libc_unix_linux_like_linux_tls12_crypto_info_aes_gcm_128_t.
      
      Module  tls12_crypto_info_aes_gcm_256.
      Section tls12_crypto_info_aes_gcm_256.
        Record t : Set := {
          info : libc.unix.linux_like.linux.tls_crypto_info.t;
          iv : array ltac:(libc.unix.c_uchar);
          key : array ltac:(libc.unix.c_uchar);
          salt : array ltac:(libc.unix.c_uchar);
          rec_seq : array ltac:(libc.unix.c_uchar);
        }.
        
        Definition Get_info :=
          Ref.map
            (fun α => Some α.(info))
            (fun β α => Some (α <| info := β |>)).
        Definition Get_iv :=
          Ref.map (fun α => Some α.(iv)) (fun β α => Some (α <| iv := β |>)).
        Definition Get_key :=
          Ref.map (fun α => Some α.(key)) (fun β α => Some (α <| key := β |>)).
        Definition Get_salt :=
          Ref.map
            (fun α => Some α.(salt))
            (fun β α => Some (α <| salt := β |>)).
        Definition Get_rec_seq :=
          Ref.map
            (fun α => Some α.(rec_seq))
            (fun β α => Some (α <| rec_seq := β |>)).
      End tls12_crypto_info_aes_gcm_256.
      End tls12_crypto_info_aes_gcm_256.
      
      Module  Impl_core_marker_Copy_for_libc_unix_linux_like_linux_tls12_crypto_info_aes_gcm_256_t.
      Section Impl_core_marker_Copy_for_libc_unix_linux_like_linux_tls12_crypto_info_aes_gcm_256_t.
        Definition Self : Set :=
          libc.unix.linux_like.linux.tls12_crypto_info_aes_gcm_256.t.
        
        Global Instance ℐ : core.marker.Copy.Trait Self := {
        }.
      End Impl_core_marker_Copy_for_libc_unix_linux_like_linux_tls12_crypto_info_aes_gcm_256_t.
      End Impl_core_marker_Copy_for_libc_unix_linux_like_linux_tls12_crypto_info_aes_gcm_256_t.
      
      Module  Impl_core_clone_Clone_for_libc_unix_linux_like_linux_tls12_crypto_info_aes_gcm_256_t.
      Section Impl_core_clone_Clone_for_libc_unix_linux_like_linux_tls12_crypto_info_aes_gcm_256_t.
        Definition Self : Set :=
          libc.unix.linux_like.linux.tls12_crypto_info_aes_gcm_256.t.
        
        (*
                    fn clone(&self) -> $i { *self }
        *)
        Definition clone
            (self : ref Self)
            : M libc.unix.linux_like.linux.tls12_crypto_info_aes_gcm_256.t :=
          let* self := M.alloc self in
          let* α0 :
              ref libc.unix.linux_like.linux.tls12_crypto_info_aes_gcm_256.t :=
            M.read self in
          M.read (deref α0).
        
        Global Instance AssociatedFunction_clone :
          Notations.DoubleColon Self "clone" := {
          Notations.double_colon := clone;
        }.
        
        Global Instance ℐ : core.clone.Clone.Required.Trait Self := {
          core.clone.Clone.clone := clone;
          core.clone.Clone.clone_from := Datatypes.None;
        }.
      End Impl_core_clone_Clone_for_libc_unix_linux_like_linux_tls12_crypto_info_aes_gcm_256_t.
      End Impl_core_clone_Clone_for_libc_unix_linux_like_linux_tls12_crypto_info_aes_gcm_256_t.
      
      Module  tls12_crypto_info_chacha20_poly1305.
      Section tls12_crypto_info_chacha20_poly1305.
        Record t : Set := {
          info : libc.unix.linux_like.linux.tls_crypto_info.t;
          iv : array ltac:(libc.unix.c_uchar);
          key : array ltac:(libc.unix.c_uchar);
          salt : array ltac:(libc.unix.c_uchar);
          rec_seq : array ltac:(libc.unix.c_uchar);
        }.
        
        Definition Get_info :=
          Ref.map
            (fun α => Some α.(info))
            (fun β α => Some (α <| info := β |>)).
        Definition Get_iv :=
          Ref.map (fun α => Some α.(iv)) (fun β α => Some (α <| iv := β |>)).
        Definition Get_key :=
          Ref.map (fun α => Some α.(key)) (fun β α => Some (α <| key := β |>)).
        Definition Get_salt :=
          Ref.map
            (fun α => Some α.(salt))
            (fun β α => Some (α <| salt := β |>)).
        Definition Get_rec_seq :=
          Ref.map
            (fun α => Some α.(rec_seq))
            (fun β α => Some (α <| rec_seq := β |>)).
      End tls12_crypto_info_chacha20_poly1305.
      End tls12_crypto_info_chacha20_poly1305.
      
      Module  Impl_core_marker_Copy_for_libc_unix_linux_like_linux_tls12_crypto_info_chacha20_poly1305_t.
      Section Impl_core_marker_Copy_for_libc_unix_linux_like_linux_tls12_crypto_info_chacha20_poly1305_t.
        Definition Self : Set :=
          libc.unix.linux_like.linux.tls12_crypto_info_chacha20_poly1305.t.
        
        Global Instance ℐ : core.marker.Copy.Trait Self := {
        }.
      End Impl_core_marker_Copy_for_libc_unix_linux_like_linux_tls12_crypto_info_chacha20_poly1305_t.
      End Impl_core_marker_Copy_for_libc_unix_linux_like_linux_tls12_crypto_info_chacha20_poly1305_t.
      
      Module  Impl_core_clone_Clone_for_libc_unix_linux_like_linux_tls12_crypto_info_chacha20_poly1305_t.
      Section Impl_core_clone_Clone_for_libc_unix_linux_like_linux_tls12_crypto_info_chacha20_poly1305_t.
        Definition Self : Set :=
          libc.unix.linux_like.linux.tls12_crypto_info_chacha20_poly1305.t.
        
        (*
                    fn clone(&self) -> $i { *self }
        *)
        Definition clone
            (self : ref Self)
            :
              M
                libc.unix.linux_like.linux.tls12_crypto_info_chacha20_poly1305.t :=
          let* self := M.alloc self in
          let* α0 :
              ref
                libc.unix.linux_like.linux.tls12_crypto_info_chacha20_poly1305.t :=
            M.read self in
          M.read (deref α0).
        
        Global Instance AssociatedFunction_clone :
          Notations.DoubleColon Self "clone" := {
          Notations.double_colon := clone;
        }.
        
        Global Instance ℐ : core.clone.Clone.Required.Trait Self := {
          core.clone.Clone.clone := clone;
          core.clone.Clone.clone_from := Datatypes.None;
        }.
      End Impl_core_clone_Clone_for_libc_unix_linux_like_linux_tls12_crypto_info_chacha20_poly1305_t.
      End Impl_core_clone_Clone_for_libc_unix_linux_like_linux_tls12_crypto_info_chacha20_poly1305_t.
      
      Module  iw_param.
      Section iw_param.
        Record t : Set := {
          value : ltac:(libc.unix.linux_like.linux.__s32);
          fixed : ltac:(libc.unix.linux_like.linux.__u8);
          disabled : ltac:(libc.unix.linux_like.linux.__u8);
          flags : ltac:(libc.unix.linux_like.linux.__u16);
        }.
        
        Definition Get_value :=
          Ref.map
            (fun α => Some α.(value))
            (fun β α => Some (α <| value := β |>)).
        Definition Get_fixed :=
          Ref.map
            (fun α => Some α.(fixed))
            (fun β α => Some (α <| fixed := β |>)).
        Definition Get_disabled :=
          Ref.map
            (fun α => Some α.(disabled))
            (fun β α => Some (α <| disabled := β |>)).
        Definition Get_flags :=
          Ref.map
            (fun α => Some α.(flags))
            (fun β α => Some (α <| flags := β |>)).
      End iw_param.
      End iw_param.
      
      Module  Impl_core_marker_Copy_for_libc_unix_linux_like_linux_iw_param_t.
      Section Impl_core_marker_Copy_for_libc_unix_linux_like_linux_iw_param_t.
        Definition Self : Set := libc.unix.linux_like.linux.iw_param.t.
        
        Global Instance ℐ : core.marker.Copy.Trait Self := {
        }.
      End Impl_core_marker_Copy_for_libc_unix_linux_like_linux_iw_param_t.
      End Impl_core_marker_Copy_for_libc_unix_linux_like_linux_iw_param_t.
      
      Module  Impl_core_clone_Clone_for_libc_unix_linux_like_linux_iw_param_t.
      Section Impl_core_clone_Clone_for_libc_unix_linux_like_linux_iw_param_t.
        Definition Self : Set := libc.unix.linux_like.linux.iw_param.t.
        
        (*
                    fn clone(&self) -> $i { *self }
        *)
        Definition clone
            (self : ref Self)
            : M libc.unix.linux_like.linux.iw_param.t :=
          let* self := M.alloc self in
          let* α0 : ref libc.unix.linux_like.linux.iw_param.t := M.read self in
          M.read (deref α0).
        
        Global Instance AssociatedFunction_clone :
          Notations.DoubleColon Self "clone" := {
          Notations.double_colon := clone;
        }.
        
        Global Instance ℐ : core.clone.Clone.Required.Trait Self := {
          core.clone.Clone.clone := clone;
          core.clone.Clone.clone_from := Datatypes.None;
        }.
      End Impl_core_clone_Clone_for_libc_unix_linux_like_linux_iw_param_t.
      End Impl_core_clone_Clone_for_libc_unix_linux_like_linux_iw_param_t.
      
      Module  iw_point.
      Section iw_point.
        Record t : Set := {
          pointer : mut_ref core.ffi.c_void.t;
          length : ltac:(libc.unix.linux_like.linux.__u16);
          flags : ltac:(libc.unix.linux_like.linux.__u16);
        }.
        
        Definition Get_pointer :=
          Ref.map
            (fun α => Some α.(pointer))
            (fun β α => Some (α <| pointer := β |>)).
        Definition Get_length :=
          Ref.map
            (fun α => Some α.(length))
            (fun β α => Some (α <| length := β |>)).
        Definition Get_flags :=
          Ref.map
            (fun α => Some α.(flags))
            (fun β α => Some (α <| flags := β |>)).
      End iw_point.
      End iw_point.
      
      Module  Impl_core_marker_Copy_for_libc_unix_linux_like_linux_iw_point_t.
      Section Impl_core_marker_Copy_for_libc_unix_linux_like_linux_iw_point_t.
        Definition Self : Set := libc.unix.linux_like.linux.iw_point.t.
        
        Global Instance ℐ : core.marker.Copy.Trait Self := {
        }.
      End Impl_core_marker_Copy_for_libc_unix_linux_like_linux_iw_point_t.
      End Impl_core_marker_Copy_for_libc_unix_linux_like_linux_iw_point_t.
      
      Module  Impl_core_clone_Clone_for_libc_unix_linux_like_linux_iw_point_t.
      Section Impl_core_clone_Clone_for_libc_unix_linux_like_linux_iw_point_t.
        Definition Self : Set := libc.unix.linux_like.linux.iw_point.t.
        
        (*
                    fn clone(&self) -> $i { *self }
        *)
        Definition clone
            (self : ref Self)
            : M libc.unix.linux_like.linux.iw_point.t :=
          let* self := M.alloc self in
          let* α0 : ref libc.unix.linux_like.linux.iw_point.t := M.read self in
          M.read (deref α0).
        
        Global Instance AssociatedFunction_clone :
          Notations.DoubleColon Self "clone" := {
          Notations.double_colon := clone;
        }.
        
        Global Instance ℐ : core.clone.Clone.Required.Trait Self := {
          core.clone.Clone.clone := clone;
          core.clone.Clone.clone_from := Datatypes.None;
        }.
      End Impl_core_clone_Clone_for_libc_unix_linux_like_linux_iw_point_t.
      End Impl_core_clone_Clone_for_libc_unix_linux_like_linux_iw_point_t.
      
      Module  iw_freq.
      Section iw_freq.
        Record t : Set := {
          m : ltac:(libc.unix.linux_like.linux.__s32);
          e : ltac:(libc.unix.linux_like.linux.__s16);
          i : ltac:(libc.unix.linux_like.linux.__u8);
          flags : ltac:(libc.unix.linux_like.linux.__u8);
        }.
        
        Definition Get_m :=
          Ref.map (fun α => Some α.(m)) (fun β α => Some (α <| m := β |>)).
        Definition Get_e :=
          Ref.map (fun α => Some α.(e)) (fun β α => Some (α <| e := β |>)).
        Definition Get_i :=
          Ref.map (fun α => Some α.(i)) (fun β α => Some (α <| i := β |>)).
        Definition Get_flags :=
          Ref.map
            (fun α => Some α.(flags))
            (fun β α => Some (α <| flags := β |>)).
      End iw_freq.
      End iw_freq.
      
      Module  Impl_core_marker_Copy_for_libc_unix_linux_like_linux_iw_freq_t.
      Section Impl_core_marker_Copy_for_libc_unix_linux_like_linux_iw_freq_t.
        Definition Self : Set := libc.unix.linux_like.linux.iw_freq.t.
        
        Global Instance ℐ : core.marker.Copy.Trait Self := {
        }.
      End Impl_core_marker_Copy_for_libc_unix_linux_like_linux_iw_freq_t.
      End Impl_core_marker_Copy_for_libc_unix_linux_like_linux_iw_freq_t.
      
      Module  Impl_core_clone_Clone_for_libc_unix_linux_like_linux_iw_freq_t.
      Section Impl_core_clone_Clone_for_libc_unix_linux_like_linux_iw_freq_t.
        Definition Self : Set := libc.unix.linux_like.linux.iw_freq.t.
        
        (*
                    fn clone(&self) -> $i { *self }
        *)
        Definition clone
            (self : ref Self)
            : M libc.unix.linux_like.linux.iw_freq.t :=
          let* self := M.alloc self in
          let* α0 : ref libc.unix.linux_like.linux.iw_freq.t := M.read self in
          M.read (deref α0).
        
        Global Instance AssociatedFunction_clone :
          Notations.DoubleColon Self "clone" := {
          Notations.double_colon := clone;
        }.
        
        Global Instance ℐ : core.clone.Clone.Required.Trait Self := {
          core.clone.Clone.clone := clone;
          core.clone.Clone.clone_from := Datatypes.None;
        }.
      End Impl_core_clone_Clone_for_libc_unix_linux_like_linux_iw_freq_t.
      End Impl_core_clone_Clone_for_libc_unix_linux_like_linux_iw_freq_t.
      
      Module  iw_quality.
      Section iw_quality.
        Record t : Set := {
          qual : ltac:(libc.unix.linux_like.linux.__u8);
          level : ltac:(libc.unix.linux_like.linux.__u8);
          noise : ltac:(libc.unix.linux_like.linux.__u8);
          updated : ltac:(libc.unix.linux_like.linux.__u8);
        }.
        
        Definition Get_qual :=
          Ref.map
            (fun α => Some α.(qual))
            (fun β α => Some (α <| qual := β |>)).
        Definition Get_level :=
          Ref.map
            (fun α => Some α.(level))
            (fun β α => Some (α <| level := β |>)).
        Definition Get_noise :=
          Ref.map
            (fun α => Some α.(noise))
            (fun β α => Some (α <| noise := β |>)).
        Definition Get_updated :=
          Ref.map
            (fun α => Some α.(updated))
            (fun β α => Some (α <| updated := β |>)).
      End iw_quality.
      End iw_quality.
      
      Module  Impl_core_marker_Copy_for_libc_unix_linux_like_linux_iw_quality_t.
      Section Impl_core_marker_Copy_for_libc_unix_linux_like_linux_iw_quality_t.
        Definition Self : Set := libc.unix.linux_like.linux.iw_quality.t.
        
        Global Instance ℐ : core.marker.Copy.Trait Self := {
        }.
      End Impl_core_marker_Copy_for_libc_unix_linux_like_linux_iw_quality_t.
      End Impl_core_marker_Copy_for_libc_unix_linux_like_linux_iw_quality_t.
      
      Module  Impl_core_clone_Clone_for_libc_unix_linux_like_linux_iw_quality_t.
      Section Impl_core_clone_Clone_for_libc_unix_linux_like_linux_iw_quality_t.
        Definition Self : Set := libc.unix.linux_like.linux.iw_quality.t.
        
        (*
                    fn clone(&self) -> $i { *self }
        *)
        Definition clone
            (self : ref Self)
            : M libc.unix.linux_like.linux.iw_quality.t :=
          let* self := M.alloc self in
          let* α0 : ref libc.unix.linux_like.linux.iw_quality.t :=
            M.read self in
          M.read (deref α0).
        
        Global Instance AssociatedFunction_clone :
          Notations.DoubleColon Self "clone" := {
          Notations.double_colon := clone;
        }.
        
        Global Instance ℐ : core.clone.Clone.Required.Trait Self := {
          core.clone.Clone.clone := clone;
          core.clone.Clone.clone_from := Datatypes.None;
        }.
      End Impl_core_clone_Clone_for_libc_unix_linux_like_linux_iw_quality_t.
      End Impl_core_clone_Clone_for_libc_unix_linux_like_linux_iw_quality_t.
      
      Module  iw_discarded.
      Section iw_discarded.
        Record t : Set := {
          nwid : ltac:(libc.unix.linux_like.linux.__u32);
          code : ltac:(libc.unix.linux_like.linux.__u32);
          fragment : ltac:(libc.unix.linux_like.linux.__u32);
          retries : ltac:(libc.unix.linux_like.linux.__u32);
          pubmisc : ltac:(libc.unix.linux_like.linux.__u32);
        }.
        
        Definition Get_nwid :=
          Ref.map
            (fun α => Some α.(nwid))
            (fun β α => Some (α <| nwid := β |>)).
        Definition Get_code :=
          Ref.map
            (fun α => Some α.(code))
            (fun β α => Some (α <| code := β |>)).
        Definition Get_fragment :=
          Ref.map
            (fun α => Some α.(fragment))
            (fun β α => Some (α <| fragment := β |>)).
        Definition Get_retries :=
          Ref.map
            (fun α => Some α.(retries))
            (fun β α => Some (α <| retries := β |>)).
        Definition Get_pubmisc :=
          Ref.map
            (fun α => Some α.(pubmisc))
            (fun β α => Some (α <| pubmisc := β |>)).
      End iw_discarded.
      End iw_discarded.
      
      Module  Impl_core_marker_Copy_for_libc_unix_linux_like_linux_iw_discarded_t.
      Section Impl_core_marker_Copy_for_libc_unix_linux_like_linux_iw_discarded_t.
        Definition Self : Set := libc.unix.linux_like.linux.iw_discarded.t.
        
        Global Instance ℐ : core.marker.Copy.Trait Self := {
        }.
      End Impl_core_marker_Copy_for_libc_unix_linux_like_linux_iw_discarded_t.
      End Impl_core_marker_Copy_for_libc_unix_linux_like_linux_iw_discarded_t.
      
      Module  Impl_core_clone_Clone_for_libc_unix_linux_like_linux_iw_discarded_t.
      Section Impl_core_clone_Clone_for_libc_unix_linux_like_linux_iw_discarded_t.
        Definition Self : Set := libc.unix.linux_like.linux.iw_discarded.t.
        
        (*
                    fn clone(&self) -> $i { *self }
        *)
        Definition clone
            (self : ref Self)
            : M libc.unix.linux_like.linux.iw_discarded.t :=
          let* self := M.alloc self in
          let* α0 : ref libc.unix.linux_like.linux.iw_discarded.t :=
            M.read self in
          M.read (deref α0).
        
        Global Instance AssociatedFunction_clone :
          Notations.DoubleColon Self "clone" := {
          Notations.double_colon := clone;
        }.
        
        Global Instance ℐ : core.clone.Clone.Required.Trait Self := {
          core.clone.Clone.clone := clone;
          core.clone.Clone.clone_from := Datatypes.None;
        }.
      End Impl_core_clone_Clone_for_libc_unix_linux_like_linux_iw_discarded_t.
      End Impl_core_clone_Clone_for_libc_unix_linux_like_linux_iw_discarded_t.
      
      Module  iw_missed.
      Section iw_missed.
        Record t : Set := {
          beacon : ltac:(libc.unix.linux_like.linux.__u32);
        }.
        
        Definition Get_beacon :=
          Ref.map
            (fun α => Some α.(beacon))
            (fun β α => Some (α <| beacon := β |>)).
      End iw_missed.
      End iw_missed.
      
      Module  Impl_core_marker_Copy_for_libc_unix_linux_like_linux_iw_missed_t.
      Section Impl_core_marker_Copy_for_libc_unix_linux_like_linux_iw_missed_t.
        Definition Self : Set := libc.unix.linux_like.linux.iw_missed.t.
        
        Global Instance ℐ : core.marker.Copy.Trait Self := {
        }.
      End Impl_core_marker_Copy_for_libc_unix_linux_like_linux_iw_missed_t.
      End Impl_core_marker_Copy_for_libc_unix_linux_like_linux_iw_missed_t.
      
      Module  Impl_core_clone_Clone_for_libc_unix_linux_like_linux_iw_missed_t.
      Section Impl_core_clone_Clone_for_libc_unix_linux_like_linux_iw_missed_t.
        Definition Self : Set := libc.unix.linux_like.linux.iw_missed.t.
        
        (*
                    fn clone(&self) -> $i { *self }
        *)
        Definition clone
            (self : ref Self)
            : M libc.unix.linux_like.linux.iw_missed.t :=
          let* self := M.alloc self in
          let* α0 : ref libc.unix.linux_like.linux.iw_missed.t := M.read self in
          M.read (deref α0).
        
        Global Instance AssociatedFunction_clone :
          Notations.DoubleColon Self "clone" := {
          Notations.double_colon := clone;
        }.
        
        Global Instance ℐ : core.clone.Clone.Required.Trait Self := {
          core.clone.Clone.clone := clone;
          core.clone.Clone.clone_from := Datatypes.None;
        }.
      End Impl_core_clone_Clone_for_libc_unix_linux_like_linux_iw_missed_t.
      End Impl_core_clone_Clone_for_libc_unix_linux_like_linux_iw_missed_t.
      
      Module  iw_scan_req.
      Section iw_scan_req.
        Record t : Set := {
          scan_type : ltac:(libc.unix.linux_like.linux.__u8);
          essid_len : ltac:(libc.unix.linux_like.linux.__u8);
          num_channels : ltac:(libc.unix.linux_like.linux.__u8);
          flags : ltac:(libc.unix.linux_like.linux.__u8);
          bssid : libc.unix.linux_like.sockaddr.t;
          essid : array ltac:(libc.unix.linux_like.linux.__u8);
          min_channel_time : ltac:(libc.unix.linux_like.linux.__u32);
          max_channel_time : ltac:(libc.unix.linux_like.linux.__u32);
          channel_list : array libc.unix.linux_like.linux.iw_freq.t;
        }.
        
        Definition Get_scan_type :=
          Ref.map
            (fun α => Some α.(scan_type))
            (fun β α => Some (α <| scan_type := β |>)).
        Definition Get_essid_len :=
          Ref.map
            (fun α => Some α.(essid_len))
            (fun β α => Some (α <| essid_len := β |>)).
        Definition Get_num_channels :=
          Ref.map
            (fun α => Some α.(num_channels))
            (fun β α => Some (α <| num_channels := β |>)).
        Definition Get_flags :=
          Ref.map
            (fun α => Some α.(flags))
            (fun β α => Some (α <| flags := β |>)).
        Definition Get_bssid :=
          Ref.map
            (fun α => Some α.(bssid))
            (fun β α => Some (α <| bssid := β |>)).
        Definition Get_essid :=
          Ref.map
            (fun α => Some α.(essid))
            (fun β α => Some (α <| essid := β |>)).
        Definition Get_min_channel_time :=
          Ref.map
            (fun α => Some α.(min_channel_time))
            (fun β α => Some (α <| min_channel_time := β |>)).
        Definition Get_max_channel_time :=
          Ref.map
            (fun α => Some α.(max_channel_time))
            (fun β α => Some (α <| max_channel_time := β |>)).
        Definition Get_channel_list :=
          Ref.map
            (fun α => Some α.(channel_list))
            (fun β α => Some (α <| channel_list := β |>)).
      End iw_scan_req.
      End iw_scan_req.
      
      Module  Impl_core_marker_Copy_for_libc_unix_linux_like_linux_iw_scan_req_t.
      Section Impl_core_marker_Copy_for_libc_unix_linux_like_linux_iw_scan_req_t.
        Definition Self : Set := libc.unix.linux_like.linux.iw_scan_req.t.
        
        Global Instance ℐ : core.marker.Copy.Trait Self := {
        }.
      End Impl_core_marker_Copy_for_libc_unix_linux_like_linux_iw_scan_req_t.
      End Impl_core_marker_Copy_for_libc_unix_linux_like_linux_iw_scan_req_t.
      
      Module  Impl_core_clone_Clone_for_libc_unix_linux_like_linux_iw_scan_req_t.
      Section Impl_core_clone_Clone_for_libc_unix_linux_like_linux_iw_scan_req_t.
        Definition Self : Set := libc.unix.linux_like.linux.iw_scan_req.t.
        
        (*
                    fn clone(&self) -> $i { *self }
        *)
        Definition clone
            (self : ref Self)
            : M libc.unix.linux_like.linux.iw_scan_req.t :=
          let* self := M.alloc self in
          let* α0 : ref libc.unix.linux_like.linux.iw_scan_req.t :=
            M.read self in
          M.read (deref α0).
        
        Global Instance AssociatedFunction_clone :
          Notations.DoubleColon Self "clone" := {
          Notations.double_colon := clone;
        }.
        
        Global Instance ℐ : core.clone.Clone.Required.Trait Self := {
          core.clone.Clone.clone := clone;
          core.clone.Clone.clone_from := Datatypes.None;
        }.
      End Impl_core_clone_Clone_for_libc_unix_linux_like_linux_iw_scan_req_t.
      End Impl_core_clone_Clone_for_libc_unix_linux_like_linux_iw_scan_req_t.
      
      Module  iw_encode_ext.
      Section iw_encode_ext.
        Record t : Set := {
          ext_flags : ltac:(libc.unix.linux_like.linux.__u32);
          tx_seq : array ltac:(libc.unix.linux_like.linux.__u8);
          rx_seq : array ltac:(libc.unix.linux_like.linux.__u8);
          addr : libc.unix.linux_like.sockaddr.t;
          alg : ltac:(libc.unix.linux_like.linux.__u16);
          key_len : ltac:(libc.unix.linux_like.linux.__u16);
          key : array ltac:(libc.unix.linux_like.linux.__u8);
        }.
        
        Definition Get_ext_flags :=
          Ref.map
            (fun α => Some α.(ext_flags))
            (fun β α => Some (α <| ext_flags := β |>)).
        Definition Get_tx_seq :=
          Ref.map
            (fun α => Some α.(tx_seq))
            (fun β α => Some (α <| tx_seq := β |>)).
        Definition Get_rx_seq :=
          Ref.map
            (fun α => Some α.(rx_seq))
            (fun β α => Some (α <| rx_seq := β |>)).
        Definition Get_addr :=
          Ref.map
            (fun α => Some α.(addr))
            (fun β α => Some (α <| addr := β |>)).
        Definition Get_alg :=
          Ref.map (fun α => Some α.(alg)) (fun β α => Some (α <| alg := β |>)).
        Definition Get_key_len :=
          Ref.map
            (fun α => Some α.(key_len))
            (fun β α => Some (α <| key_len := β |>)).
        Definition Get_key :=
          Ref.map (fun α => Some α.(key)) (fun β α => Some (α <| key := β |>)).
      End iw_encode_ext.
      End iw_encode_ext.
      
      Module  Impl_core_marker_Copy_for_libc_unix_linux_like_linux_iw_encode_ext_t.
      Section Impl_core_marker_Copy_for_libc_unix_linux_like_linux_iw_encode_ext_t.
        Definition Self : Set := libc.unix.linux_like.linux.iw_encode_ext.t.
        
        Global Instance ℐ : core.marker.Copy.Trait Self := {
        }.
      End Impl_core_marker_Copy_for_libc_unix_linux_like_linux_iw_encode_ext_t.
      End Impl_core_marker_Copy_for_libc_unix_linux_like_linux_iw_encode_ext_t.
      
      Module  Impl_core_clone_Clone_for_libc_unix_linux_like_linux_iw_encode_ext_t.
      Section Impl_core_clone_Clone_for_libc_unix_linux_like_linux_iw_encode_ext_t.
        Definition Self : Set := libc.unix.linux_like.linux.iw_encode_ext.t.
        
        (*
                    fn clone(&self) -> $i { *self }
        *)
        Definition clone
            (self : ref Self)
            : M libc.unix.linux_like.linux.iw_encode_ext.t :=
          let* self := M.alloc self in
          let* α0 : ref libc.unix.linux_like.linux.iw_encode_ext.t :=
            M.read self in
          M.read (deref α0).
        
        Global Instance AssociatedFunction_clone :
          Notations.DoubleColon Self "clone" := {
          Notations.double_colon := clone;
        }.
        
        Global Instance ℐ : core.clone.Clone.Required.Trait Self := {
          core.clone.Clone.clone := clone;
          core.clone.Clone.clone_from := Datatypes.None;
        }.
      End Impl_core_clone_Clone_for_libc_unix_linux_like_linux_iw_encode_ext_t.
      End Impl_core_clone_Clone_for_libc_unix_linux_like_linux_iw_encode_ext_t.
      
      Module  iw_pmksa.
      Section iw_pmksa.
        Record t : Set := {
          cmd : ltac:(libc.unix.linux_like.linux.__u32);
          bssid : libc.unix.linux_like.sockaddr.t;
          pmkid : array ltac:(libc.unix.linux_like.linux.__u8);
        }.
        
        Definition Get_cmd :=
          Ref.map (fun α => Some α.(cmd)) (fun β α => Some (α <| cmd := β |>)).
        Definition Get_bssid :=
          Ref.map
            (fun α => Some α.(bssid))
            (fun β α => Some (α <| bssid := β |>)).
        Definition Get_pmkid :=
          Ref.map
            (fun α => Some α.(pmkid))
            (fun β α => Some (α <| pmkid := β |>)).
      End iw_pmksa.
      End iw_pmksa.
      
      Module  Impl_core_marker_Copy_for_libc_unix_linux_like_linux_iw_pmksa_t.
      Section Impl_core_marker_Copy_for_libc_unix_linux_like_linux_iw_pmksa_t.
        Definition Self : Set := libc.unix.linux_like.linux.iw_pmksa.t.
        
        Global Instance ℐ : core.marker.Copy.Trait Self := {
        }.
      End Impl_core_marker_Copy_for_libc_unix_linux_like_linux_iw_pmksa_t.
      End Impl_core_marker_Copy_for_libc_unix_linux_like_linux_iw_pmksa_t.
      
      Module  Impl_core_clone_Clone_for_libc_unix_linux_like_linux_iw_pmksa_t.
      Section Impl_core_clone_Clone_for_libc_unix_linux_like_linux_iw_pmksa_t.
        Definition Self : Set := libc.unix.linux_like.linux.iw_pmksa.t.
        
        (*
                    fn clone(&self) -> $i { *self }
        *)
        Definition clone
            (self : ref Self)
            : M libc.unix.linux_like.linux.iw_pmksa.t :=
          let* self := M.alloc self in
          let* α0 : ref libc.unix.linux_like.linux.iw_pmksa.t := M.read self in
          M.read (deref α0).
        
        Global Instance AssociatedFunction_clone :
          Notations.DoubleColon Self "clone" := {
          Notations.double_colon := clone;
        }.
        
        Global Instance ℐ : core.clone.Clone.Required.Trait Self := {
          core.clone.Clone.clone := clone;
          core.clone.Clone.clone_from := Datatypes.None;
        }.
      End Impl_core_clone_Clone_for_libc_unix_linux_like_linux_iw_pmksa_t.
      End Impl_core_clone_Clone_for_libc_unix_linux_like_linux_iw_pmksa_t.
      
      Module  iw_pmkid_cand.
      Section iw_pmkid_cand.
        Record t : Set := {
          flags : ltac:(libc.unix.linux_like.linux.__u32);
          index : ltac:(libc.unix.linux_like.linux.__u32);
          bssid : libc.unix.linux_like.sockaddr.t;
        }.
        
        Definition Get_flags :=
          Ref.map
            (fun α => Some α.(flags))
            (fun β α => Some (α <| flags := β |>)).
        Definition Get_index :=
          Ref.map
            (fun α => Some α.(index))
            (fun β α => Some (α <| index := β |>)).
        Definition Get_bssid :=
          Ref.map
            (fun α => Some α.(bssid))
            (fun β α => Some (α <| bssid := β |>)).
      End iw_pmkid_cand.
      End iw_pmkid_cand.
      
      Module  Impl_core_marker_Copy_for_libc_unix_linux_like_linux_iw_pmkid_cand_t.
      Section Impl_core_marker_Copy_for_libc_unix_linux_like_linux_iw_pmkid_cand_t.
        Definition Self : Set := libc.unix.linux_like.linux.iw_pmkid_cand.t.
        
        Global Instance ℐ : core.marker.Copy.Trait Self := {
        }.
      End Impl_core_marker_Copy_for_libc_unix_linux_like_linux_iw_pmkid_cand_t.
      End Impl_core_marker_Copy_for_libc_unix_linux_like_linux_iw_pmkid_cand_t.
      
      Module  Impl_core_clone_Clone_for_libc_unix_linux_like_linux_iw_pmkid_cand_t.
      Section Impl_core_clone_Clone_for_libc_unix_linux_like_linux_iw_pmkid_cand_t.
        Definition Self : Set := libc.unix.linux_like.linux.iw_pmkid_cand.t.
        
        (*
                    fn clone(&self) -> $i { *self }
        *)
        Definition clone
            (self : ref Self)
            : M libc.unix.linux_like.linux.iw_pmkid_cand.t :=
          let* self := M.alloc self in
          let* α0 : ref libc.unix.linux_like.linux.iw_pmkid_cand.t :=
            M.read self in
          M.read (deref α0).
        
        Global Instance AssociatedFunction_clone :
          Notations.DoubleColon Self "clone" := {
          Notations.double_colon := clone;
        }.
        
        Global Instance ℐ : core.clone.Clone.Required.Trait Self := {
          core.clone.Clone.clone := clone;
          core.clone.Clone.clone_from := Datatypes.None;
        }.
      End Impl_core_clone_Clone_for_libc_unix_linux_like_linux_iw_pmkid_cand_t.
      End Impl_core_clone_Clone_for_libc_unix_linux_like_linux_iw_pmkid_cand_t.
      
      Module  iw_statistics.
      Section iw_statistics.
        Record t : Set := {
          status : ltac:(libc.unix.linux_like.linux.__u16);
          qual : libc.unix.linux_like.linux.iw_quality.t;
          discard : libc.unix.linux_like.linux.iw_discarded.t;
          miss : libc.unix.linux_like.linux.iw_missed.t;
        }.
        
        Definition Get_status :=
          Ref.map
            (fun α => Some α.(status))
            (fun β α => Some (α <| status := β |>)).
        Definition Get_qual :=
          Ref.map
            (fun α => Some α.(qual))
            (fun β α => Some (α <| qual := β |>)).
        Definition Get_discard :=
          Ref.map
            (fun α => Some α.(discard))
            (fun β α => Some (α <| discard := β |>)).
        Definition Get_miss :=
          Ref.map
            (fun α => Some α.(miss))
            (fun β α => Some (α <| miss := β |>)).
      End iw_statistics.
      End iw_statistics.
      
      Module  Impl_core_marker_Copy_for_libc_unix_linux_like_linux_iw_statistics_t.
      Section Impl_core_marker_Copy_for_libc_unix_linux_like_linux_iw_statistics_t.
        Definition Self : Set := libc.unix.linux_like.linux.iw_statistics.t.
        
        Global Instance ℐ : core.marker.Copy.Trait Self := {
        }.
      End Impl_core_marker_Copy_for_libc_unix_linux_like_linux_iw_statistics_t.
      End Impl_core_marker_Copy_for_libc_unix_linux_like_linux_iw_statistics_t.
      
      Module  Impl_core_clone_Clone_for_libc_unix_linux_like_linux_iw_statistics_t.
      Section Impl_core_clone_Clone_for_libc_unix_linux_like_linux_iw_statistics_t.
        Definition Self : Set := libc.unix.linux_like.linux.iw_statistics.t.
        
        (*
                    fn clone(&self) -> $i { *self }
        *)
        Definition clone
            (self : ref Self)
            : M libc.unix.linux_like.linux.iw_statistics.t :=
          let* self := M.alloc self in
          let* α0 : ref libc.unix.linux_like.linux.iw_statistics.t :=
            M.read self in
          M.read (deref α0).
        
        Global Instance AssociatedFunction_clone :
          Notations.DoubleColon Self "clone" := {
          Notations.double_colon := clone;
        }.
        
        Global Instance ℐ : core.clone.Clone.Required.Trait Self := {
          core.clone.Clone.clone := clone;
          core.clone.Clone.clone_from := Datatypes.None;
        }.
      End Impl_core_clone_Clone_for_libc_unix_linux_like_linux_iw_statistics_t.
      End Impl_core_clone_Clone_for_libc_unix_linux_like_linux_iw_statistics_t.
      
      Module  iw_range.
      Section iw_range.
        Record t : Set := {
          throughput : ltac:(libc.unix.linux_like.linux.__u32);
          min_nwid : ltac:(libc.unix.linux_like.linux.__u32);
          max_nwid : ltac:(libc.unix.linux_like.linux.__u32);
          old_num_channels : ltac:(libc.unix.linux_like.linux.__u16);
          old_num_frequency : ltac:(libc.unix.linux_like.linux.__u8);
          scan_capa : ltac:(libc.unix.linux_like.linux.__u8);
          event_capa : array ltac:(libc.unix.linux_like.linux.__u32);
          sensitivity : ltac:(libc.unix.linux_like.linux.__s32);
          max_qual : libc.unix.linux_like.linux.iw_quality.t;
          avg_qual : libc.unix.linux_like.linux.iw_quality.t;
          num_bitrates : ltac:(libc.unix.linux_like.linux.__u8);
          bitrate : array ltac:(libc.unix.linux_like.linux.__s32);
          min_rts : ltac:(libc.unix.linux_like.linux.__s32);
          max_rts : ltac:(libc.unix.linux_like.linux.__s32);
          min_frag : ltac:(libc.unix.linux_like.linux.__s32);
          max_frag : ltac:(libc.unix.linux_like.linux.__s32);
          min_pmp : ltac:(libc.unix.linux_like.linux.__s32);
          max_pmp : ltac:(libc.unix.linux_like.linux.__s32);
          min_pmt : ltac:(libc.unix.linux_like.linux.__s32);
          max_pmt : ltac:(libc.unix.linux_like.linux.__s32);
          pmp_flags : ltac:(libc.unix.linux_like.linux.__u16);
          pmt_flags : ltac:(libc.unix.linux_like.linux.__u16);
          pm_capa : ltac:(libc.unix.linux_like.linux.__u16);
          encoding_size : array ltac:(libc.unix.linux_like.linux.__u16);
          num_encoding_sizes : ltac:(libc.unix.linux_like.linux.__u8);
          max_encoding_tokens : ltac:(libc.unix.linux_like.linux.__u8);
          encoding_login_index : ltac:(libc.unix.linux_like.linux.__u8);
          txpower_capa : ltac:(libc.unix.linux_like.linux.__u16);
          num_txpower : ltac:(libc.unix.linux_like.linux.__u8);
          txpower : array ltac:(libc.unix.linux_like.linux.__s32);
          we_version_compiled : ltac:(libc.unix.linux_like.linux.__u8);
          we_version_source : ltac:(libc.unix.linux_like.linux.__u8);
          retry_capa : ltac:(libc.unix.linux_like.linux.__u16);
          retry_flags : ltac:(libc.unix.linux_like.linux.__u16);
          r_time_flags : ltac:(libc.unix.linux_like.linux.__u16);
          min_retry : ltac:(libc.unix.linux_like.linux.__s32);
          max_retry : ltac:(libc.unix.linux_like.linux.__s32);
          min_r_time : ltac:(libc.unix.linux_like.linux.__s32);
          max_r_time : ltac:(libc.unix.linux_like.linux.__s32);
          num_channels : ltac:(libc.unix.linux_like.linux.__u16);
          num_frequency : ltac:(libc.unix.linux_like.linux.__u8);
          freq : array libc.unix.linux_like.linux.iw_freq.t;
          enc_capa : ltac:(libc.unix.linux_like.linux.__u32);
        }.
        
        Definition Get_throughput :=
          Ref.map
            (fun α => Some α.(throughput))
            (fun β α => Some (α <| throughput := β |>)).
        Definition Get_min_nwid :=
          Ref.map
            (fun α => Some α.(min_nwid))
            (fun β α => Some (α <| min_nwid := β |>)).
        Definition Get_max_nwid :=
          Ref.map
            (fun α => Some α.(max_nwid))
            (fun β α => Some (α <| max_nwid := β |>)).
        Definition Get_old_num_channels :=
          Ref.map
            (fun α => Some α.(old_num_channels))
            (fun β α => Some (α <| old_num_channels := β |>)).
        Definition Get_old_num_frequency :=
          Ref.map
            (fun α => Some α.(old_num_frequency))
            (fun β α => Some (α <| old_num_frequency := β |>)).
        Definition Get_scan_capa :=
          Ref.map
            (fun α => Some α.(scan_capa))
            (fun β α => Some (α <| scan_capa := β |>)).
        Definition Get_event_capa :=
          Ref.map
            (fun α => Some α.(event_capa))
            (fun β α => Some (α <| event_capa := β |>)).
        Definition Get_sensitivity :=
          Ref.map
            (fun α => Some α.(sensitivity))
            (fun β α => Some (α <| sensitivity := β |>)).
        Definition Get_max_qual :=
          Ref.map
            (fun α => Some α.(max_qual))
            (fun β α => Some (α <| max_qual := β |>)).
        Definition Get_avg_qual :=
          Ref.map
            (fun α => Some α.(avg_qual))
            (fun β α => Some (α <| avg_qual := β |>)).
        Definition Get_num_bitrates :=
          Ref.map
            (fun α => Some α.(num_bitrates))
            (fun β α => Some (α <| num_bitrates := β |>)).
        Definition Get_bitrate :=
          Ref.map
            (fun α => Some α.(bitrate))
            (fun β α => Some (α <| bitrate := β |>)).
        Definition Get_min_rts :=
          Ref.map
            (fun α => Some α.(min_rts))
            (fun β α => Some (α <| min_rts := β |>)).
        Definition Get_max_rts :=
          Ref.map
            (fun α => Some α.(max_rts))
            (fun β α => Some (α <| max_rts := β |>)).
        Definition Get_min_frag :=
          Ref.map
            (fun α => Some α.(min_frag))
            (fun β α => Some (α <| min_frag := β |>)).
        Definition Get_max_frag :=
          Ref.map
            (fun α => Some α.(max_frag))
            (fun β α => Some (α <| max_frag := β |>)).
        Definition Get_min_pmp :=
          Ref.map
            (fun α => Some α.(min_pmp))
            (fun β α => Some (α <| min_pmp := β |>)).
        Definition Get_max_pmp :=
          Ref.map
            (fun α => Some α.(max_pmp))
            (fun β α => Some (α <| max_pmp := β |>)).
        Definition Get_min_pmt :=
          Ref.map
            (fun α => Some α.(min_pmt))
            (fun β α => Some (α <| min_pmt := β |>)).
        Definition Get_max_pmt :=
          Ref.map
            (fun α => Some α.(max_pmt))
            (fun β α => Some (α <| max_pmt := β |>)).
        Definition Get_pmp_flags :=
          Ref.map
            (fun α => Some α.(pmp_flags))
            (fun β α => Some (α <| pmp_flags := β |>)).
        Definition Get_pmt_flags :=
          Ref.map
            (fun α => Some α.(pmt_flags))
            (fun β α => Some (α <| pmt_flags := β |>)).
        Definition Get_pm_capa :=
          Ref.map
            (fun α => Some α.(pm_capa))
            (fun β α => Some (α <| pm_capa := β |>)).
        Definition Get_encoding_size :=
          Ref.map
            (fun α => Some α.(encoding_size))
            (fun β α => Some (α <| encoding_size := β |>)).
        Definition Get_num_encoding_sizes :=
          Ref.map
            (fun α => Some α.(num_encoding_sizes))
            (fun β α => Some (α <| num_encoding_sizes := β |>)).
        Definition Get_max_encoding_tokens :=
          Ref.map
            (fun α => Some α.(max_encoding_tokens))
            (fun β α => Some (α <| max_encoding_tokens := β |>)).
        Definition Get_encoding_login_index :=
          Ref.map
            (fun α => Some α.(encoding_login_index))
            (fun β α => Some (α <| encoding_login_index := β |>)).
        Definition Get_txpower_capa :=
          Ref.map
            (fun α => Some α.(txpower_capa))
            (fun β α => Some (α <| txpower_capa := β |>)).
        Definition Get_num_txpower :=
          Ref.map
            (fun α => Some α.(num_txpower))
            (fun β α => Some (α <| num_txpower := β |>)).
        Definition Get_txpower :=
          Ref.map
            (fun α => Some α.(txpower))
            (fun β α => Some (α <| txpower := β |>)).
        Definition Get_we_version_compiled :=
          Ref.map
            (fun α => Some α.(we_version_compiled))
            (fun β α => Some (α <| we_version_compiled := β |>)).
        Definition Get_we_version_source :=
          Ref.map
            (fun α => Some α.(we_version_source))
            (fun β α => Some (α <| we_version_source := β |>)).
        Definition Get_retry_capa :=
          Ref.map
            (fun α => Some α.(retry_capa))
            (fun β α => Some (α <| retry_capa := β |>)).
        Definition Get_retry_flags :=
          Ref.map
            (fun α => Some α.(retry_flags))
            (fun β α => Some (α <| retry_flags := β |>)).
        Definition Get_r_time_flags :=
          Ref.map
            (fun α => Some α.(r_time_flags))
            (fun β α => Some (α <| r_time_flags := β |>)).
        Definition Get_min_retry :=
          Ref.map
            (fun α => Some α.(min_retry))
            (fun β α => Some (α <| min_retry := β |>)).
        Definition Get_max_retry :=
          Ref.map
            (fun α => Some α.(max_retry))
            (fun β α => Some (α <| max_retry := β |>)).
        Definition Get_min_r_time :=
          Ref.map
            (fun α => Some α.(min_r_time))
            (fun β α => Some (α <| min_r_time := β |>)).
        Definition Get_max_r_time :=
          Ref.map
            (fun α => Some α.(max_r_time))
            (fun β α => Some (α <| max_r_time := β |>)).
        Definition Get_num_channels :=
          Ref.map
            (fun α => Some α.(num_channels))
            (fun β α => Some (α <| num_channels := β |>)).
        Definition Get_num_frequency :=
          Ref.map
            (fun α => Some α.(num_frequency))
            (fun β α => Some (α <| num_frequency := β |>)).
        Definition Get_freq :=
          Ref.map
            (fun α => Some α.(freq))
            (fun β α => Some (α <| freq := β |>)).
        Definition Get_enc_capa :=
          Ref.map
            (fun α => Some α.(enc_capa))
            (fun β α => Some (α <| enc_capa := β |>)).
      End iw_range.
      End iw_range.
      
      Module  Impl_core_marker_Copy_for_libc_unix_linux_like_linux_iw_range_t.
      Section Impl_core_marker_Copy_for_libc_unix_linux_like_linux_iw_range_t.
        Definition Self : Set := libc.unix.linux_like.linux.iw_range.t.
        
        Global Instance ℐ : core.marker.Copy.Trait Self := {
        }.
      End Impl_core_marker_Copy_for_libc_unix_linux_like_linux_iw_range_t.
      End Impl_core_marker_Copy_for_libc_unix_linux_like_linux_iw_range_t.
      
      Module  Impl_core_clone_Clone_for_libc_unix_linux_like_linux_iw_range_t.
      Section Impl_core_clone_Clone_for_libc_unix_linux_like_linux_iw_range_t.
        Definition Self : Set := libc.unix.linux_like.linux.iw_range.t.
        
        (*
                    fn clone(&self) -> $i { *self }
        *)
        Definition clone
            (self : ref Self)
            : M libc.unix.linux_like.linux.iw_range.t :=
          let* self := M.alloc self in
          let* α0 : ref libc.unix.linux_like.linux.iw_range.t := M.read self in
          M.read (deref α0).
        
        Global Instance AssociatedFunction_clone :
          Notations.DoubleColon Self "clone" := {
          Notations.double_colon := clone;
        }.
        
        Global Instance ℐ : core.clone.Clone.Required.Trait Self := {
          core.clone.Clone.clone := clone;
          core.clone.Clone.clone_from := Datatypes.None;
        }.
      End Impl_core_clone_Clone_for_libc_unix_linux_like_linux_iw_range_t.
      End Impl_core_clone_Clone_for_libc_unix_linux_like_linux_iw_range_t.
      
      Module  iw_priv_args.
      Section iw_priv_args.
        Record t : Set := {
          cmd : ltac:(libc.unix.linux_like.linux.__u32);
          set_args : ltac:(libc.unix.linux_like.linux.__u16);
          get_args : ltac:(libc.unix.linux_like.linux.__u16);
          name : array ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.c_char);
        }.
        
        Definition Get_cmd :=
          Ref.map (fun α => Some α.(cmd)) (fun β α => Some (α <| cmd := β |>)).
        Definition Get_set_args :=
          Ref.map
            (fun α => Some α.(set_args))
            (fun β α => Some (α <| set_args := β |>)).
        Definition Get_get_args :=
          Ref.map
            (fun α => Some α.(get_args))
            (fun β α => Some (α <| get_args := β |>)).
        Definition Get_name :=
          Ref.map
            (fun α => Some α.(name))
            (fun β α => Some (α <| name := β |>)).
      End iw_priv_args.
      End iw_priv_args.
      
      Module  Impl_core_marker_Copy_for_libc_unix_linux_like_linux_iw_priv_args_t.
      Section Impl_core_marker_Copy_for_libc_unix_linux_like_linux_iw_priv_args_t.
        Definition Self : Set := libc.unix.linux_like.linux.iw_priv_args.t.
        
        Global Instance ℐ : core.marker.Copy.Trait Self := {
        }.
      End Impl_core_marker_Copy_for_libc_unix_linux_like_linux_iw_priv_args_t.
      End Impl_core_marker_Copy_for_libc_unix_linux_like_linux_iw_priv_args_t.
      
      Module  Impl_core_clone_Clone_for_libc_unix_linux_like_linux_iw_priv_args_t.
      Section Impl_core_clone_Clone_for_libc_unix_linux_like_linux_iw_priv_args_t.
        Definition Self : Set := libc.unix.linux_like.linux.iw_priv_args.t.
        
        (*
                    fn clone(&self) -> $i { *self }
        *)
        Definition clone
            (self : ref Self)
            : M libc.unix.linux_like.linux.iw_priv_args.t :=
          let* self := M.alloc self in
          let* α0 : ref libc.unix.linux_like.linux.iw_priv_args.t :=
            M.read self in
          M.read (deref α0).
        
        Global Instance AssociatedFunction_clone :
          Notations.DoubleColon Self "clone" := {
          Notations.double_colon := clone;
        }.
        
        Global Instance ℐ : core.clone.Clone.Required.Trait Self := {
          core.clone.Clone.clone := clone;
          core.clone.Clone.clone_from := Datatypes.None;
        }.
      End Impl_core_clone_Clone_for_libc_unix_linux_like_linux_iw_priv_args_t.
      End Impl_core_clone_Clone_for_libc_unix_linux_like_linux_iw_priv_args_t.
      
      Module  iw_thrspy.
      Section iw_thrspy.
        Record t : Set := {
          addr : libc.unix.linux_like.sockaddr.t;
          qual : libc.unix.linux_like.linux.iw_quality.t;
          low : libc.unix.linux_like.linux.iw_quality.t;
          high : libc.unix.linux_like.linux.iw_quality.t;
        }.
        
        Definition Get_addr :=
          Ref.map
            (fun α => Some α.(addr))
            (fun β α => Some (α <| addr := β |>)).
        Definition Get_qual :=
          Ref.map
            (fun α => Some α.(qual))
            (fun β α => Some (α <| qual := β |>)).
        Definition Get_low :=
          Ref.map (fun α => Some α.(low)) (fun β α => Some (α <| low := β |>)).
        Definition Get_high :=
          Ref.map
            (fun α => Some α.(high))
            (fun β α => Some (α <| high := β |>)).
      End iw_thrspy.
      End iw_thrspy.
      
      Module  Impl_core_marker_Copy_for_libc_unix_linux_like_linux_iw_thrspy_t.
      Section Impl_core_marker_Copy_for_libc_unix_linux_like_linux_iw_thrspy_t.
        Definition Self : Set := libc.unix.linux_like.linux.iw_thrspy.t.
        
        Global Instance ℐ : core.marker.Copy.Trait Self := {
        }.
      End Impl_core_marker_Copy_for_libc_unix_linux_like_linux_iw_thrspy_t.
      End Impl_core_marker_Copy_for_libc_unix_linux_like_linux_iw_thrspy_t.
      
      Module  Impl_core_clone_Clone_for_libc_unix_linux_like_linux_iw_thrspy_t.
      Section Impl_core_clone_Clone_for_libc_unix_linux_like_linux_iw_thrspy_t.
        Definition Self : Set := libc.unix.linux_like.linux.iw_thrspy.t.
        
        (*
                    fn clone(&self) -> $i { *self }
        *)
        Definition clone
            (self : ref Self)
            : M libc.unix.linux_like.linux.iw_thrspy.t :=
          let* self := M.alloc self in
          let* α0 : ref libc.unix.linux_like.linux.iw_thrspy.t := M.read self in
          M.read (deref α0).
        
        Global Instance AssociatedFunction_clone :
          Notations.DoubleColon Self "clone" := {
          Notations.double_colon := clone;
        }.
        
        Global Instance ℐ : core.clone.Clone.Required.Trait Self := {
          core.clone.Clone.clone := clone;
          core.clone.Clone.clone_from := Datatypes.None;
        }.
      End Impl_core_clone_Clone_for_libc_unix_linux_like_linux_iw_thrspy_t.
      End Impl_core_clone_Clone_for_libc_unix_linux_like_linux_iw_thrspy_t.
      
      Module  iw_mlme.
      Section iw_mlme.
        Record t : Set := {
          cmd : ltac:(libc.unix.linux_like.linux.__u16);
          reason_code : ltac:(libc.unix.linux_like.linux.__u16);
          addr : libc.unix.linux_like.sockaddr.t;
        }.
        
        Definition Get_cmd :=
          Ref.map (fun α => Some α.(cmd)) (fun β α => Some (α <| cmd := β |>)).
        Definition Get_reason_code :=
          Ref.map
            (fun α => Some α.(reason_code))
            (fun β α => Some (α <| reason_code := β |>)).
        Definition Get_addr :=
          Ref.map
            (fun α => Some α.(addr))
            (fun β α => Some (α <| addr := β |>)).
      End iw_mlme.
      End iw_mlme.
      
      Module  Impl_core_marker_Copy_for_libc_unix_linux_like_linux_iw_mlme_t.
      Section Impl_core_marker_Copy_for_libc_unix_linux_like_linux_iw_mlme_t.
        Definition Self : Set := libc.unix.linux_like.linux.iw_mlme.t.
        
        Global Instance ℐ : core.marker.Copy.Trait Self := {
        }.
      End Impl_core_marker_Copy_for_libc_unix_linux_like_linux_iw_mlme_t.
      End Impl_core_marker_Copy_for_libc_unix_linux_like_linux_iw_mlme_t.
      
      Module  Impl_core_clone_Clone_for_libc_unix_linux_like_linux_iw_mlme_t.
      Section Impl_core_clone_Clone_for_libc_unix_linux_like_linux_iw_mlme_t.
        Definition Self : Set := libc.unix.linux_like.linux.iw_mlme.t.
        
        (*
                    fn clone(&self) -> $i { *self }
        *)
        Definition clone
            (self : ref Self)
            : M libc.unix.linux_like.linux.iw_mlme.t :=
          let* self := M.alloc self in
          let* α0 : ref libc.unix.linux_like.linux.iw_mlme.t := M.read self in
          M.read (deref α0).
        
        Global Instance AssociatedFunction_clone :
          Notations.DoubleColon Self "clone" := {
          Notations.double_colon := clone;
        }.
        
        Global Instance ℐ : core.clone.Clone.Required.Trait Self := {
          core.clone.Clone.clone := clone;
          core.clone.Clone.clone_from := Datatypes.None;
        }.
      End Impl_core_clone_Clone_for_libc_unix_linux_like_linux_iw_mlme_t.
      End Impl_core_clone_Clone_for_libc_unix_linux_like_linux_iw_mlme_t.
      
      Module  iw_michaelmicfailure.
      Section iw_michaelmicfailure.
        Record t : Set := {
          flags : ltac:(libc.unix.linux_like.linux.__u32);
          src_addr : libc.unix.linux_like.sockaddr.t;
          tsc : array ltac:(libc.unix.linux_like.linux.__u8);
        }.
        
        Definition Get_flags :=
          Ref.map
            (fun α => Some α.(flags))
            (fun β α => Some (α <| flags := β |>)).
        Definition Get_src_addr :=
          Ref.map
            (fun α => Some α.(src_addr))
            (fun β α => Some (α <| src_addr := β |>)).
        Definition Get_tsc :=
          Ref.map (fun α => Some α.(tsc)) (fun β α => Some (α <| tsc := β |>)).
      End iw_michaelmicfailure.
      End iw_michaelmicfailure.
      
      Module  Impl_core_marker_Copy_for_libc_unix_linux_like_linux_iw_michaelmicfailure_t.
      Section Impl_core_marker_Copy_for_libc_unix_linux_like_linux_iw_michaelmicfailure_t.
        Definition Self : Set :=
          libc.unix.linux_like.linux.iw_michaelmicfailure.t.
        
        Global Instance ℐ : core.marker.Copy.Trait Self := {
        }.
      End Impl_core_marker_Copy_for_libc_unix_linux_like_linux_iw_michaelmicfailure_t.
      End Impl_core_marker_Copy_for_libc_unix_linux_like_linux_iw_michaelmicfailure_t.
      
      Module  Impl_core_clone_Clone_for_libc_unix_linux_like_linux_iw_michaelmicfailure_t.
      Section Impl_core_clone_Clone_for_libc_unix_linux_like_linux_iw_michaelmicfailure_t.
        Definition Self : Set :=
          libc.unix.linux_like.linux.iw_michaelmicfailure.t.
        
        (*
                    fn clone(&self) -> $i { *self }
        *)
        Definition clone
            (self : ref Self)
            : M libc.unix.linux_like.linux.iw_michaelmicfailure.t :=
          let* self := M.alloc self in
          let* α0 : ref libc.unix.linux_like.linux.iw_michaelmicfailure.t :=
            M.read self in
          M.read (deref α0).
        
        Global Instance AssociatedFunction_clone :
          Notations.DoubleColon Self "clone" := {
          Notations.double_colon := clone;
        }.
        
        Global Instance ℐ : core.clone.Clone.Required.Trait Self := {
          core.clone.Clone.clone := clone;
          core.clone.Clone.clone_from := Datatypes.None;
        }.
      End Impl_core_clone_Clone_for_libc_unix_linux_like_linux_iw_michaelmicfailure_t.
      End Impl_core_clone_Clone_for_libc_unix_linux_like_linux_iw_michaelmicfailure_t.
      
      Module  __c_anonymous_elf32_rela.
      Section __c_anonymous_elf32_rela.
        Record t : Set := {
          r_offset : ltac:(libc.unix.linux_like.linux.Elf32_Addr);
          r_info : ltac:(libc.unix.linux_like.linux.Elf32_Word);
          r_addend : ltac:(libc.unix.linux_like.linux.Elf32_Sword);
        }.
        
        Definition Get_r_offset :=
          Ref.map
            (fun α => Some α.(r_offset))
            (fun β α => Some (α <| r_offset := β |>)).
        Definition Get_r_info :=
          Ref.map
            (fun α => Some α.(r_info))
            (fun β α => Some (α <| r_info := β |>)).
        Definition Get_r_addend :=
          Ref.map
            (fun α => Some α.(r_addend))
            (fun β α => Some (α <| r_addend := β |>)).
      End __c_anonymous_elf32_rela.
      End __c_anonymous_elf32_rela.
      
      Module  Impl_core_marker_Copy_for_libc_unix_linux_like_linux___c_anonymous_elf32_rela_t.
      Section Impl_core_marker_Copy_for_libc_unix_linux_like_linux___c_anonymous_elf32_rela_t.
        Definition Self : Set :=
          libc.unix.linux_like.linux.__c_anonymous_elf32_rela.t.
        
        Global Instance ℐ : core.marker.Copy.Trait Self := {
        }.
      End Impl_core_marker_Copy_for_libc_unix_linux_like_linux___c_anonymous_elf32_rela_t.
      End Impl_core_marker_Copy_for_libc_unix_linux_like_linux___c_anonymous_elf32_rela_t.
      
      Module  Impl_core_clone_Clone_for_libc_unix_linux_like_linux___c_anonymous_elf32_rela_t.
      Section Impl_core_clone_Clone_for_libc_unix_linux_like_linux___c_anonymous_elf32_rela_t.
        Definition Self : Set :=
          libc.unix.linux_like.linux.__c_anonymous_elf32_rela.t.
        
        (*
                    fn clone(&self) -> $i { *self }
        *)
        Definition clone
            (self : ref Self)
            : M libc.unix.linux_like.linux.__c_anonymous_elf32_rela.t :=
          let* self := M.alloc self in
          let* α0 : ref libc.unix.linux_like.linux.__c_anonymous_elf32_rela.t :=
            M.read self in
          M.read (deref α0).
        
        Global Instance AssociatedFunction_clone :
          Notations.DoubleColon Self "clone" := {
          Notations.double_colon := clone;
        }.
        
        Global Instance ℐ : core.clone.Clone.Required.Trait Self := {
          core.clone.Clone.clone := clone;
          core.clone.Clone.clone_from := Datatypes.None;
        }.
      End Impl_core_clone_Clone_for_libc_unix_linux_like_linux___c_anonymous_elf32_rela_t.
      End Impl_core_clone_Clone_for_libc_unix_linux_like_linux___c_anonymous_elf32_rela_t.
      
      Module  __c_anonymous_elf64_rela.
      Section __c_anonymous_elf64_rela.
        Record t : Set := {
          r_offset : ltac:(libc.unix.linux_like.linux.Elf64_Addr);
          r_info : ltac:(libc.unix.linux_like.linux.Elf64_Xword);
          r_addend : ltac:(libc.unix.linux_like.linux.Elf64_Sxword);
        }.
        
        Definition Get_r_offset :=
          Ref.map
            (fun α => Some α.(r_offset))
            (fun β α => Some (α <| r_offset := β |>)).
        Definition Get_r_info :=
          Ref.map
            (fun α => Some α.(r_info))
            (fun β α => Some (α <| r_info := β |>)).
        Definition Get_r_addend :=
          Ref.map
            (fun α => Some α.(r_addend))
            (fun β α => Some (α <| r_addend := β |>)).
      End __c_anonymous_elf64_rela.
      End __c_anonymous_elf64_rela.
      
      Module  Impl_core_marker_Copy_for_libc_unix_linux_like_linux___c_anonymous_elf64_rela_t.
      Section Impl_core_marker_Copy_for_libc_unix_linux_like_linux___c_anonymous_elf64_rela_t.
        Definition Self : Set :=
          libc.unix.linux_like.linux.__c_anonymous_elf64_rela.t.
        
        Global Instance ℐ : core.marker.Copy.Trait Self := {
        }.
      End Impl_core_marker_Copy_for_libc_unix_linux_like_linux___c_anonymous_elf64_rela_t.
      End Impl_core_marker_Copy_for_libc_unix_linux_like_linux___c_anonymous_elf64_rela_t.
      
      Module  Impl_core_clone_Clone_for_libc_unix_linux_like_linux___c_anonymous_elf64_rela_t.
      Section Impl_core_clone_Clone_for_libc_unix_linux_like_linux___c_anonymous_elf64_rela_t.
        Definition Self : Set :=
          libc.unix.linux_like.linux.__c_anonymous_elf64_rela.t.
        
        (*
                    fn clone(&self) -> $i { *self }
        *)
        Definition clone
            (self : ref Self)
            : M libc.unix.linux_like.linux.__c_anonymous_elf64_rela.t :=
          let* self := M.alloc self in
          let* α0 : ref libc.unix.linux_like.linux.__c_anonymous_elf64_rela.t :=
            M.read self in
          M.read (deref α0).
        
        Global Instance AssociatedFunction_clone :
          Notations.DoubleColon Self "clone" := {
          Notations.double_colon := clone;
        }.
        
        Global Instance ℐ : core.clone.Clone.Required.Trait Self := {
          core.clone.Clone.clone := clone;
          core.clone.Clone.clone_from := Datatypes.None;
        }.
      End Impl_core_clone_Clone_for_libc_unix_linux_like_linux___c_anonymous_elf64_rela_t.
      End Impl_core_clone_Clone_for_libc_unix_linux_like_linux___c_anonymous_elf64_rela_t.
      
      Module  sockaddr_nl.
      Section sockaddr_nl.
        Record t : Set := {
          nl_family : ltac:(libc.unix.linux_like.sa_family_t);
          nl_pad : ltac:(libc.unix.c_ushort);
          nl_pid : u32.t;
          nl_groups : u32.t;
        }.
        
        Definition Get_nl_family :=
          Ref.map
            (fun α => Some α.(nl_family))
            (fun β α => Some (α <| nl_family := β |>)).
        Definition Get_nl_pad :=
          Ref.map
            (fun α => Some α.(nl_pad))
            (fun β α => Some (α <| nl_pad := β |>)).
        Definition Get_nl_pid :=
          Ref.map
            (fun α => Some α.(nl_pid))
            (fun β α => Some (α <| nl_pid := β |>)).
        Definition Get_nl_groups :=
          Ref.map
            (fun α => Some α.(nl_groups))
            (fun β α => Some (α <| nl_groups := β |>)).
      End sockaddr_nl.
      End sockaddr_nl.
      
      Module  Impl_core_marker_Copy_for_libc_unix_linux_like_linux_sockaddr_nl_t.
      Section Impl_core_marker_Copy_for_libc_unix_linux_like_linux_sockaddr_nl_t.
        Definition Self : Set := libc.unix.linux_like.linux.sockaddr_nl.t.
        
        Global Instance ℐ : core.marker.Copy.Trait Self := {
        }.
      End Impl_core_marker_Copy_for_libc_unix_linux_like_linux_sockaddr_nl_t.
      End Impl_core_marker_Copy_for_libc_unix_linux_like_linux_sockaddr_nl_t.
      
      Module  Impl_core_clone_Clone_for_libc_unix_linux_like_linux_sockaddr_nl_t.
      Section Impl_core_clone_Clone_for_libc_unix_linux_like_linux_sockaddr_nl_t.
        Definition Self : Set := libc.unix.linux_like.linux.sockaddr_nl.t.
        
        (*
                    fn clone(&self) -> $i { *self }
        *)
        Definition clone
            (self : ref Self)
            : M libc.unix.linux_like.linux.sockaddr_nl.t :=
          let* self := M.alloc self in
          let* α0 : ref libc.unix.linux_like.linux.sockaddr_nl.t :=
            M.read self in
          M.read (deref α0).
        
        Global Instance AssociatedFunction_clone :
          Notations.DoubleColon Self "clone" := {
          Notations.double_colon := clone;
        }.
        
        Global Instance ℐ : core.clone.Clone.Required.Trait Self := {
          core.clone.Clone.clone := clone;
          core.clone.Clone.clone_from := Datatypes.None;
        }.
      End Impl_core_clone_Clone_for_libc_unix_linux_like_linux_sockaddr_nl_t.
      End Impl_core_clone_Clone_for_libc_unix_linux_like_linux_sockaddr_nl_t.
      
      Module  dirent.
      Section dirent.
        Record t : Set := {
          d_ino : ltac:(libc.unix.linux_like.linux.gnu.b64.ino_t);
          d_off : ltac:(libc.unix.linux_like.linux.gnu.b64.off_t);
          d_reclen : ltac:(libc.unix.c_ushort);
          d_type : ltac:(libc.unix.c_uchar);
          d_name :
            array ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.c_char);
        }.
        
        Definition Get_d_ino :=
          Ref.map
            (fun α => Some α.(d_ino))
            (fun β α => Some (α <| d_ino := β |>)).
        Definition Get_d_off :=
          Ref.map
            (fun α => Some α.(d_off))
            (fun β α => Some (α <| d_off := β |>)).
        Definition Get_d_reclen :=
          Ref.map
            (fun α => Some α.(d_reclen))
            (fun β α => Some (α <| d_reclen := β |>)).
        Definition Get_d_type :=
          Ref.map
            (fun α => Some α.(d_type))
            (fun β α => Some (α <| d_type := β |>)).
        Definition Get_d_name :=
          Ref.map
            (fun α => Some α.(d_name))
            (fun β α => Some (α <| d_name := β |>)).
      End dirent.
      End dirent.
      
      Module  Impl_core_marker_Copy_for_libc_unix_linux_like_linux_dirent_t.
      Section Impl_core_marker_Copy_for_libc_unix_linux_like_linux_dirent_t.
        Definition Self : Set := libc.unix.linux_like.linux.dirent.t.
        
        Global Instance ℐ : core.marker.Copy.Trait Self := {
        }.
      End Impl_core_marker_Copy_for_libc_unix_linux_like_linux_dirent_t.
      End Impl_core_marker_Copy_for_libc_unix_linux_like_linux_dirent_t.
      
      Module  Impl_core_clone_Clone_for_libc_unix_linux_like_linux_dirent_t.
      Section Impl_core_clone_Clone_for_libc_unix_linux_like_linux_dirent_t.
        Definition Self : Set := libc.unix.linux_like.linux.dirent.t.
        
        (*
                    fn clone(&self) -> $i { *self }
        *)
        Definition clone
            (self : ref Self)
            : M libc.unix.linux_like.linux.dirent.t :=
          let* self := M.alloc self in
          let* α0 : ref libc.unix.linux_like.linux.dirent.t := M.read self in
          M.read (deref α0).
        
        Global Instance AssociatedFunction_clone :
          Notations.DoubleColon Self "clone" := {
          Notations.double_colon := clone;
        }.
        
        Global Instance ℐ : core.clone.Clone.Required.Trait Self := {
          core.clone.Clone.clone := clone;
          core.clone.Clone.clone_from := Datatypes.None;
        }.
      End Impl_core_clone_Clone_for_libc_unix_linux_like_linux_dirent_t.
      End Impl_core_clone_Clone_for_libc_unix_linux_like_linux_dirent_t.
      
      Module  sockaddr_alg.
      Section sockaddr_alg.
        Record t : Set := {
          salg_family : ltac:(libc.unix.linux_like.sa_family_t);
          salg_type : array ltac:(libc.unix.c_uchar);
          salg_feat : u32.t;
          salg_mask : u32.t;
          salg_name : array ltac:(libc.unix.c_uchar);
        }.
        
        Definition Get_salg_family :=
          Ref.map
            (fun α => Some α.(salg_family))
            (fun β α => Some (α <| salg_family := β |>)).
        Definition Get_salg_type :=
          Ref.map
            (fun α => Some α.(salg_type))
            (fun β α => Some (α <| salg_type := β |>)).
        Definition Get_salg_feat :=
          Ref.map
            (fun α => Some α.(salg_feat))
            (fun β α => Some (α <| salg_feat := β |>)).
        Definition Get_salg_mask :=
          Ref.map
            (fun α => Some α.(salg_mask))
            (fun β α => Some (α <| salg_mask := β |>)).
        Definition Get_salg_name :=
          Ref.map
            (fun α => Some α.(salg_name))
            (fun β α => Some (α <| salg_name := β |>)).
      End sockaddr_alg.
      End sockaddr_alg.
      
      Module  Impl_core_marker_Copy_for_libc_unix_linux_like_linux_sockaddr_alg_t.
      Section Impl_core_marker_Copy_for_libc_unix_linux_like_linux_sockaddr_alg_t.
        Definition Self : Set := libc.unix.linux_like.linux.sockaddr_alg.t.
        
        Global Instance ℐ : core.marker.Copy.Trait Self := {
        }.
      End Impl_core_marker_Copy_for_libc_unix_linux_like_linux_sockaddr_alg_t.
      End Impl_core_marker_Copy_for_libc_unix_linux_like_linux_sockaddr_alg_t.
      
      Module  Impl_core_clone_Clone_for_libc_unix_linux_like_linux_sockaddr_alg_t.
      Section Impl_core_clone_Clone_for_libc_unix_linux_like_linux_sockaddr_alg_t.
        Definition Self : Set := libc.unix.linux_like.linux.sockaddr_alg.t.
        
        (*
                    fn clone(&self) -> $i { *self }
        *)
        Definition clone
            (self : ref Self)
            : M libc.unix.linux_like.linux.sockaddr_alg.t :=
          let* self := M.alloc self in
          let* α0 : ref libc.unix.linux_like.linux.sockaddr_alg.t :=
            M.read self in
          M.read (deref α0).
        
        Global Instance AssociatedFunction_clone :
          Notations.DoubleColon Self "clone" := {
          Notations.double_colon := clone;
        }.
        
        Global Instance ℐ : core.clone.Clone.Required.Trait Self := {
          core.clone.Clone.clone := clone;
          core.clone.Clone.clone_from := Datatypes.None;
        }.
      End Impl_core_clone_Clone_for_libc_unix_linux_like_linux_sockaddr_alg_t.
      End Impl_core_clone_Clone_for_libc_unix_linux_like_linux_sockaddr_alg_t.
      
      Module  uinput_setup.
      Section uinput_setup.
        Record t : Set := {
          id : libc.unix.linux_like.linux.input_id.t;
          name : array ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.c_char);
          ff_effects_max : ltac:(libc.unix.linux_like.linux.__u32);
        }.
        
        Definition Get_id :=
          Ref.map (fun α => Some α.(id)) (fun β α => Some (α <| id := β |>)).
        Definition Get_name :=
          Ref.map
            (fun α => Some α.(name))
            (fun β α => Some (α <| name := β |>)).
        Definition Get_ff_effects_max :=
          Ref.map
            (fun α => Some α.(ff_effects_max))
            (fun β α => Some (α <| ff_effects_max := β |>)).
      End uinput_setup.
      End uinput_setup.
      
      Module  Impl_core_marker_Copy_for_libc_unix_linux_like_linux_uinput_setup_t.
      Section Impl_core_marker_Copy_for_libc_unix_linux_like_linux_uinput_setup_t.
        Definition Self : Set := libc.unix.linux_like.linux.uinput_setup.t.
        
        Global Instance ℐ : core.marker.Copy.Trait Self := {
        }.
      End Impl_core_marker_Copy_for_libc_unix_linux_like_linux_uinput_setup_t.
      End Impl_core_marker_Copy_for_libc_unix_linux_like_linux_uinput_setup_t.
      
      Module  Impl_core_clone_Clone_for_libc_unix_linux_like_linux_uinput_setup_t.
      Section Impl_core_clone_Clone_for_libc_unix_linux_like_linux_uinput_setup_t.
        Definition Self : Set := libc.unix.linux_like.linux.uinput_setup.t.
        
        (*
                    fn clone(&self) -> $i { *self }
        *)
        Definition clone
            (self : ref Self)
            : M libc.unix.linux_like.linux.uinput_setup.t :=
          let* self := M.alloc self in
          let* α0 : ref libc.unix.linux_like.linux.uinput_setup.t :=
            M.read self in
          M.read (deref α0).
        
        Global Instance AssociatedFunction_clone :
          Notations.DoubleColon Self "clone" := {
          Notations.double_colon := clone;
        }.
        
        Global Instance ℐ : core.clone.Clone.Required.Trait Self := {
          core.clone.Clone.clone := clone;
          core.clone.Clone.clone_from := Datatypes.None;
        }.
      End Impl_core_clone_Clone_for_libc_unix_linux_like_linux_uinput_setup_t.
      End Impl_core_clone_Clone_for_libc_unix_linux_like_linux_uinput_setup_t.
      
      Module  uinput_user_dev.
      Section uinput_user_dev.
        Record t : Set := {
          name : array ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.c_char);
          id : libc.unix.linux_like.linux.input_id.t;
          ff_effects_max : ltac:(libc.unix.linux_like.linux.__u32);
          absmax : array ltac:(libc.unix.linux_like.linux.__s32);
          absmin : array ltac:(libc.unix.linux_like.linux.__s32);
          absfuzz : array ltac:(libc.unix.linux_like.linux.__s32);
          absflat : array ltac:(libc.unix.linux_like.linux.__s32);
        }.
        
        Definition Get_name :=
          Ref.map
            (fun α => Some α.(name))
            (fun β α => Some (α <| name := β |>)).
        Definition Get_id :=
          Ref.map (fun α => Some α.(id)) (fun β α => Some (α <| id := β |>)).
        Definition Get_ff_effects_max :=
          Ref.map
            (fun α => Some α.(ff_effects_max))
            (fun β α => Some (α <| ff_effects_max := β |>)).
        Definition Get_absmax :=
          Ref.map
            (fun α => Some α.(absmax))
            (fun β α => Some (α <| absmax := β |>)).
        Definition Get_absmin :=
          Ref.map
            (fun α => Some α.(absmin))
            (fun β α => Some (α <| absmin := β |>)).
        Definition Get_absfuzz :=
          Ref.map
            (fun α => Some α.(absfuzz))
            (fun β α => Some (α <| absfuzz := β |>)).
        Definition Get_absflat :=
          Ref.map
            (fun α => Some α.(absflat))
            (fun β α => Some (α <| absflat := β |>)).
      End uinput_user_dev.
      End uinput_user_dev.
      
      Module  Impl_core_marker_Copy_for_libc_unix_linux_like_linux_uinput_user_dev_t.
      Section Impl_core_marker_Copy_for_libc_unix_linux_like_linux_uinput_user_dev_t.
        Definition Self : Set := libc.unix.linux_like.linux.uinput_user_dev.t.
        
        Global Instance ℐ : core.marker.Copy.Trait Self := {
        }.
      End Impl_core_marker_Copy_for_libc_unix_linux_like_linux_uinput_user_dev_t.
      End Impl_core_marker_Copy_for_libc_unix_linux_like_linux_uinput_user_dev_t.
      
      Module  Impl_core_clone_Clone_for_libc_unix_linux_like_linux_uinput_user_dev_t.
      Section Impl_core_clone_Clone_for_libc_unix_linux_like_linux_uinput_user_dev_t.
        Definition Self : Set := libc.unix.linux_like.linux.uinput_user_dev.t.
        
        (*
                    fn clone(&self) -> $i { *self }
        *)
        Definition clone
            (self : ref Self)
            : M libc.unix.linux_like.linux.uinput_user_dev.t :=
          let* self := M.alloc self in
          let* α0 : ref libc.unix.linux_like.linux.uinput_user_dev.t :=
            M.read self in
          M.read (deref α0).
        
        Global Instance AssociatedFunction_clone :
          Notations.DoubleColon Self "clone" := {
          Notations.double_colon := clone;
        }.
        
        Global Instance ℐ : core.clone.Clone.Required.Trait Self := {
          core.clone.Clone.clone := clone;
          core.clone.Clone.clone_from := Datatypes.None;
        }.
      End Impl_core_clone_Clone_for_libc_unix_linux_like_linux_uinput_user_dev_t.
      End Impl_core_clone_Clone_for_libc_unix_linux_like_linux_uinput_user_dev_t.
      
      Module  af_alg_iv.
      Section af_alg_iv.
        Record t : Set := {
          ivlen : u32.t;
          iv : array ltac:(libc.unix.c_uchar);
        }.
        
        Definition Get_ivlen :=
          Ref.map
            (fun α => Some α.(ivlen))
            (fun β α => Some (α <| ivlen := β |>)).
        Definition Get_iv :=
          Ref.map (fun α => Some α.(iv)) (fun β α => Some (α <| iv := β |>)).
      End af_alg_iv.
      End af_alg_iv.
      
      Module  Impl_core_marker_Copy_for_libc_unix_linux_like_linux_af_alg_iv_t.
      Section Impl_core_marker_Copy_for_libc_unix_linux_like_linux_af_alg_iv_t.
        Definition Self : Set := libc.unix.linux_like.linux.af_alg_iv.t.
        
        Global Instance ℐ : core.marker.Copy.Trait Self := {
        }.
      End Impl_core_marker_Copy_for_libc_unix_linux_like_linux_af_alg_iv_t.
      End Impl_core_marker_Copy_for_libc_unix_linux_like_linux_af_alg_iv_t.
      
      Module  Impl_core_clone_Clone_for_libc_unix_linux_like_linux_af_alg_iv_t.
      Section Impl_core_clone_Clone_for_libc_unix_linux_like_linux_af_alg_iv_t.
        Definition Self : Set := libc.unix.linux_like.linux.af_alg_iv.t.
        
        (*
                    fn clone(&self) -> $i { *self }
        *)
        Definition clone
            (self : ref Self)
            : M libc.unix.linux_like.linux.af_alg_iv.t :=
          let* self := M.alloc self in
          let* α0 : ref libc.unix.linux_like.linux.af_alg_iv.t := M.read self in
          M.read (deref α0).
        
        Global Instance AssociatedFunction_clone :
          Notations.DoubleColon Self "clone" := {
          Notations.double_colon := clone;
        }.
        
        Global Instance ℐ : core.clone.Clone.Required.Trait Self := {
          core.clone.Clone.clone := clone;
          core.clone.Clone.clone_from := Datatypes.None;
        }.
      End Impl_core_clone_Clone_for_libc_unix_linux_like_linux_af_alg_iv_t.
      End Impl_core_clone_Clone_for_libc_unix_linux_like_linux_af_alg_iv_t.
      
      Module  mq_attr.
      Section mq_attr.
        Record t : Set := {
          mq_flags :
            ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_long);
          mq_maxmsg :
            ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_long);
          mq_msgsize :
            ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_long);
          mq_curmsgs :
            ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_long);
          pad :
            array
              ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_long);
        }.
        
        Definition Get_mq_flags :=
          Ref.map
            (fun α => Some α.(mq_flags))
            (fun β α => Some (α <| mq_flags := β |>)).
        Definition Get_mq_maxmsg :=
          Ref.map
            (fun α => Some α.(mq_maxmsg))
            (fun β α => Some (α <| mq_maxmsg := β |>)).
        Definition Get_mq_msgsize :=
          Ref.map
            (fun α => Some α.(mq_msgsize))
            (fun β α => Some (α <| mq_msgsize := β |>)).
        Definition Get_mq_curmsgs :=
          Ref.map
            (fun α => Some α.(mq_curmsgs))
            (fun β α => Some (α <| mq_curmsgs := β |>)).
        Definition Get_pad :=
          Ref.map (fun α => Some α.(pad)) (fun β α => Some (α <| pad := β |>)).
      End mq_attr.
      End mq_attr.
      
      Module  Impl_core_marker_Copy_for_libc_unix_linux_like_linux_mq_attr_t.
      Section Impl_core_marker_Copy_for_libc_unix_linux_like_linux_mq_attr_t.
        Definition Self : Set := libc.unix.linux_like.linux.mq_attr.t.
        
        Global Instance ℐ : core.marker.Copy.Trait Self := {
        }.
      End Impl_core_marker_Copy_for_libc_unix_linux_like_linux_mq_attr_t.
      End Impl_core_marker_Copy_for_libc_unix_linux_like_linux_mq_attr_t.
      
      Module  Impl_core_clone_Clone_for_libc_unix_linux_like_linux_mq_attr_t.
      Section Impl_core_clone_Clone_for_libc_unix_linux_like_linux_mq_attr_t.
        Definition Self : Set := libc.unix.linux_like.linux.mq_attr.t.
        
        (*
                    fn clone(&self) -> $i { *self }
        *)
        Definition clone
            (self : ref Self)
            : M libc.unix.linux_like.linux.mq_attr.t :=
          let* self := M.alloc self in
          let* α0 : ref libc.unix.linux_like.linux.mq_attr.t := M.read self in
          M.read (deref α0).
        
        Global Instance AssociatedFunction_clone :
          Notations.DoubleColon Self "clone" := {
          Notations.double_colon := clone;
        }.
        
        Global Instance ℐ : core.clone.Clone.Required.Trait Self := {
          core.clone.Clone.clone := clone;
          core.clone.Clone.clone_from := Datatypes.None;
        }.
      End Impl_core_clone_Clone_for_libc_unix_linux_like_linux_mq_attr_t.
      End Impl_core_clone_Clone_for_libc_unix_linux_like_linux_mq_attr_t.
      
      Error Union.
      
      Module  Impl_core_marker_Copy_for_libc_unix_linux_like_linux___c_anonymous_ifr_ifru_t.
      Section Impl_core_marker_Copy_for_libc_unix_linux_like_linux___c_anonymous_ifr_ifru_t.
        Definition Self : Set :=
          libc.unix.linux_like.linux.__c_anonymous_ifr_ifru.t.
        
        Global Instance ℐ : core.marker.Copy.Trait Self := {
        }.
      End Impl_core_marker_Copy_for_libc_unix_linux_like_linux___c_anonymous_ifr_ifru_t.
      End Impl_core_marker_Copy_for_libc_unix_linux_like_linux___c_anonymous_ifr_ifru_t.
      
      Module  Impl_core_clone_Clone_for_libc_unix_linux_like_linux___c_anonymous_ifr_ifru_t.
      Section Impl_core_clone_Clone_for_libc_unix_linux_like_linux___c_anonymous_ifr_ifru_t.
        Definition Self : Set :=
          libc.unix.linux_like.linux.__c_anonymous_ifr_ifru.t.
        
        (*
                    fn clone(&self) -> $i { *self }
        *)
        Definition clone
            (self : ref Self)
            : M libc.unix.linux_like.linux.__c_anonymous_ifr_ifru.t :=
          let* self := M.alloc self in
          let* α0 : ref libc.unix.linux_like.linux.__c_anonymous_ifr_ifru.t :=
            M.read self in
          M.read (deref α0).
        
        Global Instance AssociatedFunction_clone :
          Notations.DoubleColon Self "clone" := {
          Notations.double_colon := clone;
        }.
        
        Global Instance ℐ : core.clone.Clone.Required.Trait Self := {
          core.clone.Clone.clone := clone;
          core.clone.Clone.clone_from := Datatypes.None;
        }.
      End Impl_core_clone_Clone_for_libc_unix_linux_like_linux___c_anonymous_ifr_ifru_t.
      End Impl_core_clone_Clone_for_libc_unix_linux_like_linux___c_anonymous_ifr_ifru_t.
      
      Module  ifreq.
      Section ifreq.
        Record t : Set := {
          ifr_name :
            array ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.c_char);
          ifr_ifru : libc.unix.linux_like.linux.__c_anonymous_ifr_ifru.t;
        }.
        
        Definition Get_ifr_name :=
          Ref.map
            (fun α => Some α.(ifr_name))
            (fun β α => Some (α <| ifr_name := β |>)).
        Definition Get_ifr_ifru :=
          Ref.map
            (fun α => Some α.(ifr_ifru))
            (fun β α => Some (α <| ifr_ifru := β |>)).
      End ifreq.
      End ifreq.
      
      Module  Impl_core_marker_Copy_for_libc_unix_linux_like_linux_ifreq_t.
      Section Impl_core_marker_Copy_for_libc_unix_linux_like_linux_ifreq_t.
        Definition Self : Set := libc.unix.linux_like.linux.ifreq.t.
        
        Global Instance ℐ : core.marker.Copy.Trait Self := {
        }.
      End Impl_core_marker_Copy_for_libc_unix_linux_like_linux_ifreq_t.
      End Impl_core_marker_Copy_for_libc_unix_linux_like_linux_ifreq_t.
      
      Module  Impl_core_clone_Clone_for_libc_unix_linux_like_linux_ifreq_t.
      Section Impl_core_clone_Clone_for_libc_unix_linux_like_linux_ifreq_t.
        Definition Self : Set := libc.unix.linux_like.linux.ifreq.t.
        
        (*
                    fn clone(&self) -> $i { *self }
        *)
        Definition clone
            (self : ref Self)
            : M libc.unix.linux_like.linux.ifreq.t :=
          let* self := M.alloc self in
          let* α0 : ref libc.unix.linux_like.linux.ifreq.t := M.read self in
          M.read (deref α0).
        
        Global Instance AssociatedFunction_clone :
          Notations.DoubleColon Self "clone" := {
          Notations.double_colon := clone;
        }.
        
        Global Instance ℐ : core.clone.Clone.Required.Trait Self := {
          core.clone.Clone.clone := clone;
          core.clone.Clone.clone_from := Datatypes.None;
        }.
      End Impl_core_clone_Clone_for_libc_unix_linux_like_linux_ifreq_t.
      End Impl_core_clone_Clone_for_libc_unix_linux_like_linux_ifreq_t.
      
      Error Union.
      
      Module  Impl_core_marker_Copy_for_libc_unix_linux_like_linux___c_anonymous_ifc_ifcu_t.
      Section Impl_core_marker_Copy_for_libc_unix_linux_like_linux___c_anonymous_ifc_ifcu_t.
        Definition Self : Set :=
          libc.unix.linux_like.linux.__c_anonymous_ifc_ifcu.t.
        
        Global Instance ℐ : core.marker.Copy.Trait Self := {
        }.
      End Impl_core_marker_Copy_for_libc_unix_linux_like_linux___c_anonymous_ifc_ifcu_t.
      End Impl_core_marker_Copy_for_libc_unix_linux_like_linux___c_anonymous_ifc_ifcu_t.
      
      Module  Impl_core_clone_Clone_for_libc_unix_linux_like_linux___c_anonymous_ifc_ifcu_t.
      Section Impl_core_clone_Clone_for_libc_unix_linux_like_linux___c_anonymous_ifc_ifcu_t.
        Definition Self : Set :=
          libc.unix.linux_like.linux.__c_anonymous_ifc_ifcu.t.
        
        (*
                    fn clone(&self) -> $i { *self }
        *)
        Definition clone
            (self : ref Self)
            : M libc.unix.linux_like.linux.__c_anonymous_ifc_ifcu.t :=
          let* self := M.alloc self in
          let* α0 : ref libc.unix.linux_like.linux.__c_anonymous_ifc_ifcu.t :=
            M.read self in
          M.read (deref α0).
        
        Global Instance AssociatedFunction_clone :
          Notations.DoubleColon Self "clone" := {
          Notations.double_colon := clone;
        }.
        
        Global Instance ℐ : core.clone.Clone.Required.Trait Self := {
          core.clone.Clone.clone := clone;
          core.clone.Clone.clone_from := Datatypes.None;
        }.
      End Impl_core_clone_Clone_for_libc_unix_linux_like_linux___c_anonymous_ifc_ifcu_t.
      End Impl_core_clone_Clone_for_libc_unix_linux_like_linux___c_anonymous_ifc_ifcu_t.
      
      Module  ifconf.
      Section ifconf.
        Record t : Set := {
          ifc_len : ltac:(libc.unix.c_int);
          ifc_ifcu : libc.unix.linux_like.linux.__c_anonymous_ifc_ifcu.t;
        }.
        
        Definition Get_ifc_len :=
          Ref.map
            (fun α => Some α.(ifc_len))
            (fun β α => Some (α <| ifc_len := β |>)).
        Definition Get_ifc_ifcu :=
          Ref.map
            (fun α => Some α.(ifc_ifcu))
            (fun β α => Some (α <| ifc_ifcu := β |>)).
      End ifconf.
      End ifconf.
      
      Module  Impl_core_marker_Copy_for_libc_unix_linux_like_linux_ifconf_t.
      Section Impl_core_marker_Copy_for_libc_unix_linux_like_linux_ifconf_t.
        Definition Self : Set := libc.unix.linux_like.linux.ifconf.t.
        
        Global Instance ℐ : core.marker.Copy.Trait Self := {
        }.
      End Impl_core_marker_Copy_for_libc_unix_linux_like_linux_ifconf_t.
      End Impl_core_marker_Copy_for_libc_unix_linux_like_linux_ifconf_t.
      
      Module  Impl_core_clone_Clone_for_libc_unix_linux_like_linux_ifconf_t.
      Section Impl_core_clone_Clone_for_libc_unix_linux_like_linux_ifconf_t.
        Definition Self : Set := libc.unix.linux_like.linux.ifconf.t.
        
        (*
                    fn clone(&self) -> $i { *self }
        *)
        Definition clone
            (self : ref Self)
            : M libc.unix.linux_like.linux.ifconf.t :=
          let* self := M.alloc self in
          let* α0 : ref libc.unix.linux_like.linux.ifconf.t := M.read self in
          M.read (deref α0).
        
        Global Instance AssociatedFunction_clone :
          Notations.DoubleColon Self "clone" := {
          Notations.double_colon := clone;
        }.
        
        Global Instance ℐ : core.clone.Clone.Required.Trait Self := {
          core.clone.Clone.clone := clone;
          core.clone.Clone.clone_from := Datatypes.None;
        }.
      End Impl_core_clone_Clone_for_libc_unix_linux_like_linux_ifconf_t.
      End Impl_core_clone_Clone_for_libc_unix_linux_like_linux_ifconf_t.
      
      Module  hwtstamp_config.
      Section hwtstamp_config.
        Record t : Set := {
          flags : ltac:(libc.unix.c_int);
          tx_type : ltac:(libc.unix.c_int);
          rx_filter : ltac:(libc.unix.c_int);
        }.
        
        Definition Get_flags :=
          Ref.map
            (fun α => Some α.(flags))
            (fun β α => Some (α <| flags := β |>)).
        Definition Get_tx_type :=
          Ref.map
            (fun α => Some α.(tx_type))
            (fun β α => Some (α <| tx_type := β |>)).
        Definition Get_rx_filter :=
          Ref.map
            (fun α => Some α.(rx_filter))
            (fun β α => Some (α <| rx_filter := β |>)).
      End hwtstamp_config.
      End hwtstamp_config.
      
      Module  Impl_core_marker_Copy_for_libc_unix_linux_like_linux_hwtstamp_config_t.
      Section Impl_core_marker_Copy_for_libc_unix_linux_like_linux_hwtstamp_config_t.
        Definition Self : Set := libc.unix.linux_like.linux.hwtstamp_config.t.
        
        Global Instance ℐ : core.marker.Copy.Trait Self := {
        }.
      End Impl_core_marker_Copy_for_libc_unix_linux_like_linux_hwtstamp_config_t.
      End Impl_core_marker_Copy_for_libc_unix_linux_like_linux_hwtstamp_config_t.
      
      Module  Impl_core_clone_Clone_for_libc_unix_linux_like_linux_hwtstamp_config_t.
      Section Impl_core_clone_Clone_for_libc_unix_linux_like_linux_hwtstamp_config_t.
        Definition Self : Set := libc.unix.linux_like.linux.hwtstamp_config.t.
        
        (*
                    fn clone(&self) -> $i { *self }
        *)
        Definition clone
            (self : ref Self)
            : M libc.unix.linux_like.linux.hwtstamp_config.t :=
          let* self := M.alloc self in
          let* α0 : ref libc.unix.linux_like.linux.hwtstamp_config.t :=
            M.read self in
          M.read (deref α0).
        
        Global Instance AssociatedFunction_clone :
          Notations.DoubleColon Self "clone" := {
          Notations.double_colon := clone;
        }.
        
        Global Instance ℐ : core.clone.Clone.Required.Trait Self := {
          core.clone.Clone.clone := clone;
          core.clone.Clone.clone_from := Datatypes.None;
        }.
      End Impl_core_clone_Clone_for_libc_unix_linux_like_linux_hwtstamp_config_t.
      End Impl_core_clone_Clone_for_libc_unix_linux_like_linux_hwtstamp_config_t.
      
      Module  dirent64.
      Section dirent64.
        Record t : Set := {
          d_ino : ltac:(libc.unix.linux_like.linux.ino64_t);
          d_off : ltac:(libc.unix.linux_like.linux.off64_t);
          d_reclen : ltac:(libc.unix.c_ushort);
          d_type : ltac:(libc.unix.c_uchar);
          d_name :
            array ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.c_char);
        }.
        
        Definition Get_d_ino :=
          Ref.map
            (fun α => Some α.(d_ino))
            (fun β α => Some (α <| d_ino := β |>)).
        Definition Get_d_off :=
          Ref.map
            (fun α => Some α.(d_off))
            (fun β α => Some (α <| d_off := β |>)).
        Definition Get_d_reclen :=
          Ref.map
            (fun α => Some α.(d_reclen))
            (fun β α => Some (α <| d_reclen := β |>)).
        Definition Get_d_type :=
          Ref.map
            (fun α => Some α.(d_type))
            (fun β α => Some (α <| d_type := β |>)).
        Definition Get_d_name :=
          Ref.map
            (fun α => Some α.(d_name))
            (fun β α => Some (α <| d_name := β |>)).
      End dirent64.
      End dirent64.
      
      Module  Impl_core_marker_Copy_for_libc_unix_linux_like_linux_dirent64_t.
      Section Impl_core_marker_Copy_for_libc_unix_linux_like_linux_dirent64_t.
        Definition Self : Set := libc.unix.linux_like.linux.dirent64.t.
        
        Global Instance ℐ : core.marker.Copy.Trait Self := {
        }.
      End Impl_core_marker_Copy_for_libc_unix_linux_like_linux_dirent64_t.
      End Impl_core_marker_Copy_for_libc_unix_linux_like_linux_dirent64_t.
      
      Module  Impl_core_clone_Clone_for_libc_unix_linux_like_linux_dirent64_t.
      Section Impl_core_clone_Clone_for_libc_unix_linux_like_linux_dirent64_t.
        Definition Self : Set := libc.unix.linux_like.linux.dirent64.t.
        
        (*
                    fn clone(&self) -> $i { *self }
        *)
        Definition clone
            (self : ref Self)
            : M libc.unix.linux_like.linux.dirent64.t :=
          let* self := M.alloc self in
          let* α0 : ref libc.unix.linux_like.linux.dirent64.t := M.read self in
          M.read (deref α0).
        
        Global Instance AssociatedFunction_clone :
          Notations.DoubleColon Self "clone" := {
          Notations.double_colon := clone;
        }.
        
        Global Instance ℐ : core.clone.Clone.Required.Trait Self := {
          core.clone.Clone.clone := clone;
          core.clone.Clone.clone_from := Datatypes.None;
        }.
      End Impl_core_clone_Clone_for_libc_unix_linux_like_linux_dirent64_t.
      End Impl_core_clone_Clone_for_libc_unix_linux_like_linux_dirent64_t.
      
      Module  sched_attr.
      Section sched_attr.
        Record t : Set := {
          size : ltac:(libc.unix.linux_like.linux.__u32);
          sched_policy : ltac:(libc.unix.linux_like.linux.__u32);
          sched_flags : ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.__u64);
          sched_nice : ltac:(libc.unix.linux_like.linux.__s32);
          sched_priority : ltac:(libc.unix.linux_like.linux.__u32);
          sched_runtime :
            ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.__u64);
          sched_deadline :
            ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.__u64);
          sched_period : ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.__u64);
        }.
        
        Definition Get_size :=
          Ref.map
            (fun α => Some α.(size))
            (fun β α => Some (α <| size := β |>)).
        Definition Get_sched_policy :=
          Ref.map
            (fun α => Some α.(sched_policy))
            (fun β α => Some (α <| sched_policy := β |>)).
        Definition Get_sched_flags :=
          Ref.map
            (fun α => Some α.(sched_flags))
            (fun β α => Some (α <| sched_flags := β |>)).
        Definition Get_sched_nice :=
          Ref.map
            (fun α => Some α.(sched_nice))
            (fun β α => Some (α <| sched_nice := β |>)).
        Definition Get_sched_priority :=
          Ref.map
            (fun α => Some α.(sched_priority))
            (fun β α => Some (α <| sched_priority := β |>)).
        Definition Get_sched_runtime :=
          Ref.map
            (fun α => Some α.(sched_runtime))
            (fun β α => Some (α <| sched_runtime := β |>)).
        Definition Get_sched_deadline :=
          Ref.map
            (fun α => Some α.(sched_deadline))
            (fun β α => Some (α <| sched_deadline := β |>)).
        Definition Get_sched_period :=
          Ref.map
            (fun α => Some α.(sched_period))
            (fun β α => Some (α <| sched_period := β |>)).
      End sched_attr.
      End sched_attr.
      
      Module  Impl_core_marker_Copy_for_libc_unix_linux_like_linux_sched_attr_t.
      Section Impl_core_marker_Copy_for_libc_unix_linux_like_linux_sched_attr_t.
        Definition Self : Set := libc.unix.linux_like.linux.sched_attr.t.
        
        Global Instance ℐ : core.marker.Copy.Trait Self := {
        }.
      End Impl_core_marker_Copy_for_libc_unix_linux_like_linux_sched_attr_t.
      End Impl_core_marker_Copy_for_libc_unix_linux_like_linux_sched_attr_t.
      
      Module  Impl_core_clone_Clone_for_libc_unix_linux_like_linux_sched_attr_t.
      Section Impl_core_clone_Clone_for_libc_unix_linux_like_linux_sched_attr_t.
        Definition Self : Set := libc.unix.linux_like.linux.sched_attr.t.
        
        (*
                    fn clone(&self) -> $i { *self }
        *)
        Definition clone
            (self : ref Self)
            : M libc.unix.linux_like.linux.sched_attr.t :=
          let* self := M.alloc self in
          let* α0 : ref libc.unix.linux_like.linux.sched_attr.t :=
            M.read self in
          M.read (deref α0).
        
        Global Instance AssociatedFunction_clone :
          Notations.DoubleColon Self "clone" := {
          Notations.double_colon := clone;
        }.
        
        Global Instance ℐ : core.clone.Clone.Required.Trait Self := {
          core.clone.Clone.clone := clone;
          core.clone.Clone.clone_from := Datatypes.None;
        }.
      End Impl_core_clone_Clone_for_libc_unix_linux_like_linux_sched_attr_t.
      End Impl_core_clone_Clone_for_libc_unix_linux_like_linux_sched_attr_t.
      
      Error Union.
      
      Module  Impl_core_marker_Copy_for_libc_unix_linux_like_linux_tpacket_req_u_t.
      Section Impl_core_marker_Copy_for_libc_unix_linux_like_linux_tpacket_req_u_t.
        Definition Self : Set := libc.unix.linux_like.linux.tpacket_req_u.t.
        
        Global Instance ℐ : core.marker.Copy.Trait Self := {
        }.
      End Impl_core_marker_Copy_for_libc_unix_linux_like_linux_tpacket_req_u_t.
      End Impl_core_marker_Copy_for_libc_unix_linux_like_linux_tpacket_req_u_t.
      
      Module  Impl_core_clone_Clone_for_libc_unix_linux_like_linux_tpacket_req_u_t.
      Section Impl_core_clone_Clone_for_libc_unix_linux_like_linux_tpacket_req_u_t.
        Definition Self : Set := libc.unix.linux_like.linux.tpacket_req_u.t.
        
        (*
                    fn clone(&self) -> $i { *self }
        *)
        Definition clone
            (self : ref Self)
            : M libc.unix.linux_like.linux.tpacket_req_u.t :=
          let* self := M.alloc self in
          let* α0 : ref libc.unix.linux_like.linux.tpacket_req_u.t :=
            M.read self in
          M.read (deref α0).
        
        Global Instance AssociatedFunction_clone :
          Notations.DoubleColon Self "clone" := {
          Notations.double_colon := clone;
        }.
        
        Global Instance ℐ : core.clone.Clone.Required.Trait Self := {
          core.clone.Clone.clone := clone;
          core.clone.Clone.clone_from := Datatypes.None;
        }.
      End Impl_core_clone_Clone_for_libc_unix_linux_like_linux_tpacket_req_u_t.
      End Impl_core_clone_Clone_for_libc_unix_linux_like_linux_tpacket_req_u_t.
      
      Error Union.
      
      Module  Impl_core_marker_Copy_for_libc_unix_linux_like_linux_tpacket_bd_header_u_t.
      Section Impl_core_marker_Copy_for_libc_unix_linux_like_linux_tpacket_bd_header_u_t.
        Definition Self : Set :=
          libc.unix.linux_like.linux.tpacket_bd_header_u.t.
        
        Global Instance ℐ : core.marker.Copy.Trait Self := {
        }.
      End Impl_core_marker_Copy_for_libc_unix_linux_like_linux_tpacket_bd_header_u_t.
      End Impl_core_marker_Copy_for_libc_unix_linux_like_linux_tpacket_bd_header_u_t.
      
      Module  Impl_core_clone_Clone_for_libc_unix_linux_like_linux_tpacket_bd_header_u_t.
      Section Impl_core_clone_Clone_for_libc_unix_linux_like_linux_tpacket_bd_header_u_t.
        Definition Self : Set :=
          libc.unix.linux_like.linux.tpacket_bd_header_u.t.
        
        (*
                    fn clone(&self) -> $i { *self }
        *)
        Definition clone
            (self : ref Self)
            : M libc.unix.linux_like.linux.tpacket_bd_header_u.t :=
          let* self := M.alloc self in
          let* α0 : ref libc.unix.linux_like.linux.tpacket_bd_header_u.t :=
            M.read self in
          M.read (deref α0).
        
        Global Instance AssociatedFunction_clone :
          Notations.DoubleColon Self "clone" := {
          Notations.double_colon := clone;
        }.
        
        Global Instance ℐ : core.clone.Clone.Required.Trait Self := {
          core.clone.Clone.clone := clone;
          core.clone.Clone.clone_from := Datatypes.None;
        }.
      End Impl_core_clone_Clone_for_libc_unix_linux_like_linux_tpacket_bd_header_u_t.
      End Impl_core_clone_Clone_for_libc_unix_linux_like_linux_tpacket_bd_header_u_t.
      
      Module  tpacket_block_desc.
      Section tpacket_block_desc.
        Record t : Set := {
          version : ltac:(libc.unix.linux_like.linux.__u32);
          offset_to_priv : ltac:(libc.unix.linux_like.linux.__u32);
          hdr : libc.unix.linux_like.linux.tpacket_bd_header_u.t;
        }.
        
        Definition Get_version :=
          Ref.map
            (fun α => Some α.(version))
            (fun β α => Some (α <| version := β |>)).
        Definition Get_offset_to_priv :=
          Ref.map
            (fun α => Some α.(offset_to_priv))
            (fun β α => Some (α <| offset_to_priv := β |>)).
        Definition Get_hdr :=
          Ref.map (fun α => Some α.(hdr)) (fun β α => Some (α <| hdr := β |>)).
      End tpacket_block_desc.
      End tpacket_block_desc.
      
      Module  Impl_core_marker_Copy_for_libc_unix_linux_like_linux_tpacket_block_desc_t.
      Section Impl_core_marker_Copy_for_libc_unix_linux_like_linux_tpacket_block_desc_t.
        Definition Self : Set :=
          libc.unix.linux_like.linux.tpacket_block_desc.t.
        
        Global Instance ℐ : core.marker.Copy.Trait Self := {
        }.
      End Impl_core_marker_Copy_for_libc_unix_linux_like_linux_tpacket_block_desc_t.
      End Impl_core_marker_Copy_for_libc_unix_linux_like_linux_tpacket_block_desc_t.
      
      Module  Impl_core_clone_Clone_for_libc_unix_linux_like_linux_tpacket_block_desc_t.
      Section Impl_core_clone_Clone_for_libc_unix_linux_like_linux_tpacket_block_desc_t.
        Definition Self : Set :=
          libc.unix.linux_like.linux.tpacket_block_desc.t.
        
        (*
                    fn clone(&self) -> $i { *self }
        *)
        Definition clone
            (self : ref Self)
            : M libc.unix.linux_like.linux.tpacket_block_desc.t :=
          let* self := M.alloc self in
          let* α0 : ref libc.unix.linux_like.linux.tpacket_block_desc.t :=
            M.read self in
          M.read (deref α0).
        
        Global Instance AssociatedFunction_clone :
          Notations.DoubleColon Self "clone" := {
          Notations.double_colon := clone;
        }.
        
        Global Instance ℐ : core.clone.Clone.Required.Trait Self := {
          core.clone.Clone.clone := clone;
          core.clone.Clone.clone_from := Datatypes.None;
        }.
      End Impl_core_clone_Clone_for_libc_unix_linux_like_linux_tpacket_block_desc_t.
      End Impl_core_clone_Clone_for_libc_unix_linux_like_linux_tpacket_block_desc_t.
      
      Module  sock_txtime.
      Section sock_txtime.
        Record t : Set := {
          clockid : ltac:(libc.unix.linux_like.clockid_t);
          flags : ltac:(libc.unix.linux_like.linux.__u32);
        }.
        
        Definition Get_clockid :=
          Ref.map
            (fun α => Some α.(clockid))
            (fun β α => Some (α <| clockid := β |>)).
        Definition Get_flags :=
          Ref.map
            (fun α => Some α.(flags))
            (fun β α => Some (α <| flags := β |>)).
      End sock_txtime.
      End sock_txtime.
      
      Module  Impl_core_marker_Copy_for_libc_unix_linux_like_linux_sock_txtime_t.
      Section Impl_core_marker_Copy_for_libc_unix_linux_like_linux_sock_txtime_t.
        Definition Self : Set := libc.unix.linux_like.linux.sock_txtime.t.
        
        Global Instance ℐ : core.marker.Copy.Trait Self := {
        }.
      End Impl_core_marker_Copy_for_libc_unix_linux_like_linux_sock_txtime_t.
      End Impl_core_marker_Copy_for_libc_unix_linux_like_linux_sock_txtime_t.
      
      Module  Impl_core_clone_Clone_for_libc_unix_linux_like_linux_sock_txtime_t.
      Section Impl_core_clone_Clone_for_libc_unix_linux_like_linux_sock_txtime_t.
        Definition Self : Set := libc.unix.linux_like.linux.sock_txtime.t.
        
        (*
                    fn clone(&self) -> $i { *self }
        *)
        Definition clone
            (self : ref Self)
            : M libc.unix.linux_like.linux.sock_txtime.t :=
          let* self := M.alloc self in
          let* α0 : ref libc.unix.linux_like.linux.sock_txtime.t :=
            M.read self in
          M.read (deref α0).
        
        Global Instance AssociatedFunction_clone :
          Notations.DoubleColon Self "clone" := {
          Notations.double_colon := clone;
        }.
        
        Global Instance ℐ : core.clone.Clone.Required.Trait Self := {
          core.clone.Clone.clone := clone;
          core.clone.Clone.clone_from := Datatypes.None;
        }.
      End Impl_core_clone_Clone_for_libc_unix_linux_like_linux_sock_txtime_t.
      End Impl_core_clone_Clone_for_libc_unix_linux_like_linux_sock_txtime_t.
      
      Error Union.
      
      Module  Impl_core_marker_Copy_for_libc_unix_linux_like_linux___c_anonymous_sockaddr_can_can_addr_t.
      Section Impl_core_marker_Copy_for_libc_unix_linux_like_linux___c_anonymous_sockaddr_can_can_addr_t.
        Definition Self : Set :=
          libc.unix.linux_like.linux.__c_anonymous_sockaddr_can_can_addr.t.
        
        Global Instance ℐ : core.marker.Copy.Trait Self := {
        }.
      End Impl_core_marker_Copy_for_libc_unix_linux_like_linux___c_anonymous_sockaddr_can_can_addr_t.
      End Impl_core_marker_Copy_for_libc_unix_linux_like_linux___c_anonymous_sockaddr_can_can_addr_t.
      
      Module  Impl_core_clone_Clone_for_libc_unix_linux_like_linux___c_anonymous_sockaddr_can_can_addr_t.
      Section Impl_core_clone_Clone_for_libc_unix_linux_like_linux___c_anonymous_sockaddr_can_can_addr_t.
        Definition Self : Set :=
          libc.unix.linux_like.linux.__c_anonymous_sockaddr_can_can_addr.t.
        
        (*
                    fn clone(&self) -> $i { *self }
        *)
        Definition clone
            (self : ref Self)
            :
              M
                libc.unix.linux_like.linux.__c_anonymous_sockaddr_can_can_addr.t :=
          let* self := M.alloc self in
          let* α0 :
              ref
                libc.unix.linux_like.linux.__c_anonymous_sockaddr_can_can_addr.t :=
            M.read self in
          M.read (deref α0).
        
        Global Instance AssociatedFunction_clone :
          Notations.DoubleColon Self "clone" := {
          Notations.double_colon := clone;
        }.
        
        Global Instance ℐ : core.clone.Clone.Required.Trait Self := {
          core.clone.Clone.clone := clone;
          core.clone.Clone.clone_from := Datatypes.None;
        }.
      End Impl_core_clone_Clone_for_libc_unix_linux_like_linux___c_anonymous_sockaddr_can_can_addr_t.
      End Impl_core_clone_Clone_for_libc_unix_linux_like_linux___c_anonymous_sockaddr_can_can_addr_t.
      
      Module  sockaddr_can.
      Section sockaddr_can.
        Record t : Set := {
          can_family : ltac:(libc.unix.linux_like.sa_family_t);
          can_ifindex : ltac:(libc.unix.c_int);
          can_addr :
            libc.unix.linux_like.linux.__c_anonymous_sockaddr_can_can_addr.t;
        }.
        
        Definition Get_can_family :=
          Ref.map
            (fun α => Some α.(can_family))
            (fun β α => Some (α <| can_family := β |>)).
        Definition Get_can_ifindex :=
          Ref.map
            (fun α => Some α.(can_ifindex))
            (fun β α => Some (α <| can_ifindex := β |>)).
        Definition Get_can_addr :=
          Ref.map
            (fun α => Some α.(can_addr))
            (fun β α => Some (α <| can_addr := β |>)).
      End sockaddr_can.
      End sockaddr_can.
      
      Module  Impl_core_marker_Copy_for_libc_unix_linux_like_linux_sockaddr_can_t.
      Section Impl_core_marker_Copy_for_libc_unix_linux_like_linux_sockaddr_can_t.
        Definition Self : Set := libc.unix.linux_like.linux.sockaddr_can.t.
        
        Global Instance ℐ : core.marker.Copy.Trait Self := {
        }.
      End Impl_core_marker_Copy_for_libc_unix_linux_like_linux_sockaddr_can_t.
      End Impl_core_marker_Copy_for_libc_unix_linux_like_linux_sockaddr_can_t.
      
      Module  Impl_core_clone_Clone_for_libc_unix_linux_like_linux_sockaddr_can_t.
      Section Impl_core_clone_Clone_for_libc_unix_linux_like_linux_sockaddr_can_t.
        Definition Self : Set := libc.unix.linux_like.linux.sockaddr_can.t.
        
        (*
                    fn clone(&self) -> $i { *self }
        *)
        Definition clone
            (self : ref Self)
            : M libc.unix.linux_like.linux.sockaddr_can.t :=
          let* self := M.alloc self in
          let* α0 : ref libc.unix.linux_like.linux.sockaddr_can.t :=
            M.read self in
          M.read (deref α0).
        
        Global Instance AssociatedFunction_clone :
          Notations.DoubleColon Self "clone" := {
          Notations.double_colon := clone;
        }.
        
        Global Instance ℐ : core.clone.Clone.Required.Trait Self := {
          core.clone.Clone.clone := clone;
          core.clone.Clone.clone_from := Datatypes.None;
        }.
      End Impl_core_clone_Clone_for_libc_unix_linux_like_linux_sockaddr_can_t.
      End Impl_core_clone_Clone_for_libc_unix_linux_like_linux_sockaddr_can_t.
      
      Error Union.
      
      Module  Impl_core_marker_Copy_for_libc_unix_linux_like_linux_iwreq_data_t.
      Section Impl_core_marker_Copy_for_libc_unix_linux_like_linux_iwreq_data_t.
        Definition Self : Set := libc.unix.linux_like.linux.iwreq_data.t.
        
        Global Instance ℐ : core.marker.Copy.Trait Self := {
        }.
      End Impl_core_marker_Copy_for_libc_unix_linux_like_linux_iwreq_data_t.
      End Impl_core_marker_Copy_for_libc_unix_linux_like_linux_iwreq_data_t.
      
      Module  Impl_core_clone_Clone_for_libc_unix_linux_like_linux_iwreq_data_t.
      Section Impl_core_clone_Clone_for_libc_unix_linux_like_linux_iwreq_data_t.
        Definition Self : Set := libc.unix.linux_like.linux.iwreq_data.t.
        
        (*
                    fn clone(&self) -> $i { *self }
        *)
        Definition clone
            (self : ref Self)
            : M libc.unix.linux_like.linux.iwreq_data.t :=
          let* self := M.alloc self in
          let* α0 : ref libc.unix.linux_like.linux.iwreq_data.t :=
            M.read self in
          M.read (deref α0).
        
        Global Instance AssociatedFunction_clone :
          Notations.DoubleColon Self "clone" := {
          Notations.double_colon := clone;
        }.
        
        Global Instance ℐ : core.clone.Clone.Required.Trait Self := {
          core.clone.Clone.clone := clone;
          core.clone.Clone.clone_from := Datatypes.None;
        }.
      End Impl_core_clone_Clone_for_libc_unix_linux_like_linux_iwreq_data_t.
      End Impl_core_clone_Clone_for_libc_unix_linux_like_linux_iwreq_data_t.
      
      Module  iw_event.
      Section iw_event.
        Record t : Set := {
          len : ltac:(libc.unix.linux_like.linux.__u16);
          cmd : ltac:(libc.unix.linux_like.linux.__u16);
          u : libc.unix.linux_like.linux.iwreq_data.t;
        }.
        
        Definition Get_len :=
          Ref.map (fun α => Some α.(len)) (fun β α => Some (α <| len := β |>)).
        Definition Get_cmd :=
          Ref.map (fun α => Some α.(cmd)) (fun β α => Some (α <| cmd := β |>)).
        Definition Get_u :=
          Ref.map (fun α => Some α.(u)) (fun β α => Some (α <| u := β |>)).
      End iw_event.
      End iw_event.
      
      Module  Impl_core_marker_Copy_for_libc_unix_linux_like_linux_iw_event_t.
      Section Impl_core_marker_Copy_for_libc_unix_linux_like_linux_iw_event_t.
        Definition Self : Set := libc.unix.linux_like.linux.iw_event.t.
        
        Global Instance ℐ : core.marker.Copy.Trait Self := {
        }.
      End Impl_core_marker_Copy_for_libc_unix_linux_like_linux_iw_event_t.
      End Impl_core_marker_Copy_for_libc_unix_linux_like_linux_iw_event_t.
      
      Module  Impl_core_clone_Clone_for_libc_unix_linux_like_linux_iw_event_t.
      Section Impl_core_clone_Clone_for_libc_unix_linux_like_linux_iw_event_t.
        Definition Self : Set := libc.unix.linux_like.linux.iw_event.t.
        
        (*
                    fn clone(&self) -> $i { *self }
        *)
        Definition clone
            (self : ref Self)
            : M libc.unix.linux_like.linux.iw_event.t :=
          let* self := M.alloc self in
          let* α0 : ref libc.unix.linux_like.linux.iw_event.t := M.read self in
          M.read (deref α0).
        
        Global Instance AssociatedFunction_clone :
          Notations.DoubleColon Self "clone" := {
          Notations.double_colon := clone;
        }.
        
        Global Instance ℐ : core.clone.Clone.Required.Trait Self := {
          core.clone.Clone.clone := clone;
          core.clone.Clone.clone_from := Datatypes.None;
        }.
      End Impl_core_clone_Clone_for_libc_unix_linux_like_linux_iw_event_t.
      End Impl_core_clone_Clone_for_libc_unix_linux_like_linux_iw_event_t.
      
      Error Union.
      
      Module  Impl_core_marker_Copy_for_libc_unix_linux_like_linux___c_anonymous_iwreq_t.
      Section Impl_core_marker_Copy_for_libc_unix_linux_like_linux___c_anonymous_iwreq_t.
        Definition Self : Set :=
          libc.unix.linux_like.linux.__c_anonymous_iwreq.t.
        
        Global Instance ℐ : core.marker.Copy.Trait Self := {
        }.
      End Impl_core_marker_Copy_for_libc_unix_linux_like_linux___c_anonymous_iwreq_t.
      End Impl_core_marker_Copy_for_libc_unix_linux_like_linux___c_anonymous_iwreq_t.
      
      Module  Impl_core_clone_Clone_for_libc_unix_linux_like_linux___c_anonymous_iwreq_t.
      Section Impl_core_clone_Clone_for_libc_unix_linux_like_linux___c_anonymous_iwreq_t.
        Definition Self : Set :=
          libc.unix.linux_like.linux.__c_anonymous_iwreq.t.
        
        (*
                    fn clone(&self) -> $i { *self }
        *)
        Definition clone
            (self : ref Self)
            : M libc.unix.linux_like.linux.__c_anonymous_iwreq.t :=
          let* self := M.alloc self in
          let* α0 : ref libc.unix.linux_like.linux.__c_anonymous_iwreq.t :=
            M.read self in
          M.read (deref α0).
        
        Global Instance AssociatedFunction_clone :
          Notations.DoubleColon Self "clone" := {
          Notations.double_colon := clone;
        }.
        
        Global Instance ℐ : core.clone.Clone.Required.Trait Self := {
          core.clone.Clone.clone := clone;
          core.clone.Clone.clone_from := Datatypes.None;
        }.
      End Impl_core_clone_Clone_for_libc_unix_linux_like_linux___c_anonymous_iwreq_t.
      End Impl_core_clone_Clone_for_libc_unix_linux_like_linux___c_anonymous_iwreq_t.
      
      Module  iwreq.
      Section iwreq.
        Record t : Set := {
          ifr_ifrn : libc.unix.linux_like.linux.__c_anonymous_iwreq.t;
          u : libc.unix.linux_like.linux.iwreq_data.t;
        }.
        
        Definition Get_ifr_ifrn :=
          Ref.map
            (fun α => Some α.(ifr_ifrn))
            (fun β α => Some (α <| ifr_ifrn := β |>)).
        Definition Get_u :=
          Ref.map (fun α => Some α.(u)) (fun β α => Some (α <| u := β |>)).
      End iwreq.
      End iwreq.
      
      Module  Impl_core_marker_Copy_for_libc_unix_linux_like_linux_iwreq_t.
      Section Impl_core_marker_Copy_for_libc_unix_linux_like_linux_iwreq_t.
        Definition Self : Set := libc.unix.linux_like.linux.iwreq.t.
        
        Global Instance ℐ : core.marker.Copy.Trait Self := {
        }.
      End Impl_core_marker_Copy_for_libc_unix_linux_like_linux_iwreq_t.
      End Impl_core_marker_Copy_for_libc_unix_linux_like_linux_iwreq_t.
      
      Module  Impl_core_clone_Clone_for_libc_unix_linux_like_linux_iwreq_t.
      Section Impl_core_clone_Clone_for_libc_unix_linux_like_linux_iwreq_t.
        Definition Self : Set := libc.unix.linux_like.linux.iwreq.t.
        
        (*
                    fn clone(&self) -> $i { *self }
        *)
        Definition clone
            (self : ref Self)
            : M libc.unix.linux_like.linux.iwreq.t :=
          let* self := M.alloc self in
          let* α0 : ref libc.unix.linux_like.linux.iwreq.t := M.read self in
          M.read (deref α0).
        
        Global Instance AssociatedFunction_clone :
          Notations.DoubleColon Self "clone" := {
          Notations.double_colon := clone;
        }.
        
        Global Instance ℐ : core.clone.Clone.Required.Trait Self := {
          core.clone.Clone.clone := clone;
          core.clone.Clone.clone_from := Datatypes.None;
        }.
      End Impl_core_clone_Clone_for_libc_unix_linux_like_linux_iwreq_t.
      End Impl_core_clone_Clone_for_libc_unix_linux_like_linux_iwreq_t.
      
      Definition ABDAY_1 : M.Val ltac:(libc.unix.linux_like.linux.nl_item) :=
        M.run (M.alloc ((Integer.of_Z 131072) : i32.t)).
      
      Definition ABDAY_2 : M.Val ltac:(libc.unix.linux_like.linux.nl_item) :=
        M.run (M.alloc ((Integer.of_Z 131073) : i32.t)).
      
      Definition ABDAY_3 : M.Val ltac:(libc.unix.linux_like.linux.nl_item) :=
        M.run (M.alloc ((Integer.of_Z 131074) : i32.t)).
      
      Definition ABDAY_4 : M.Val ltac:(libc.unix.linux_like.linux.nl_item) :=
        M.run (M.alloc ((Integer.of_Z 131075) : i32.t)).
      
      Definition ABDAY_5 : M.Val ltac:(libc.unix.linux_like.linux.nl_item) :=
        M.run (M.alloc ((Integer.of_Z 131076) : i32.t)).
      
      Definition ABDAY_6 : M.Val ltac:(libc.unix.linux_like.linux.nl_item) :=
        M.run (M.alloc ((Integer.of_Z 131077) : i32.t)).
      
      Definition ABDAY_7 : M.Val ltac:(libc.unix.linux_like.linux.nl_item) :=
        M.run (M.alloc ((Integer.of_Z 131078) : i32.t)).
      
      Definition DAY_1 : M.Val ltac:(libc.unix.linux_like.linux.nl_item) :=
        M.run (M.alloc ((Integer.of_Z 131079) : i32.t)).
      
      Definition DAY_2 : M.Val ltac:(libc.unix.linux_like.linux.nl_item) :=
        M.run (M.alloc ((Integer.of_Z 131080) : i32.t)).
      
      Definition DAY_3 : M.Val ltac:(libc.unix.linux_like.linux.nl_item) :=
        M.run (M.alloc ((Integer.of_Z 131081) : i32.t)).
      
      Definition DAY_4 : M.Val ltac:(libc.unix.linux_like.linux.nl_item) :=
        M.run (M.alloc ((Integer.of_Z 131082) : i32.t)).
      
      Definition DAY_5 : M.Val ltac:(libc.unix.linux_like.linux.nl_item) :=
        M.run (M.alloc ((Integer.of_Z 131083) : i32.t)).
      
      Definition DAY_6 : M.Val ltac:(libc.unix.linux_like.linux.nl_item) :=
        M.run (M.alloc ((Integer.of_Z 131084) : i32.t)).
      
      Definition DAY_7 : M.Val ltac:(libc.unix.linux_like.linux.nl_item) :=
        M.run (M.alloc ((Integer.of_Z 131085) : i32.t)).
      
      Definition ABMON_1 : M.Val ltac:(libc.unix.linux_like.linux.nl_item) :=
        M.run (M.alloc ((Integer.of_Z 131086) : i32.t)).
      
      Definition ABMON_2 : M.Val ltac:(libc.unix.linux_like.linux.nl_item) :=
        M.run (M.alloc ((Integer.of_Z 131087) : i32.t)).
      
      Definition ABMON_3 : M.Val ltac:(libc.unix.linux_like.linux.nl_item) :=
        M.run (M.alloc ((Integer.of_Z 131088) : i32.t)).
      
      Definition ABMON_4 : M.Val ltac:(libc.unix.linux_like.linux.nl_item) :=
        M.run (M.alloc ((Integer.of_Z 131089) : i32.t)).
      
      Definition ABMON_5 : M.Val ltac:(libc.unix.linux_like.linux.nl_item) :=
        M.run (M.alloc ((Integer.of_Z 131090) : i32.t)).
      
      Definition ABMON_6 : M.Val ltac:(libc.unix.linux_like.linux.nl_item) :=
        M.run (M.alloc ((Integer.of_Z 131091) : i32.t)).
      
      Definition ABMON_7 : M.Val ltac:(libc.unix.linux_like.linux.nl_item) :=
        M.run (M.alloc ((Integer.of_Z 131092) : i32.t)).
      
      Definition ABMON_8 : M.Val ltac:(libc.unix.linux_like.linux.nl_item) :=
        M.run (M.alloc ((Integer.of_Z 131093) : i32.t)).
      
      Definition ABMON_9 : M.Val ltac:(libc.unix.linux_like.linux.nl_item) :=
        M.run (M.alloc ((Integer.of_Z 131094) : i32.t)).
      
      Definition ABMON_10 : M.Val ltac:(libc.unix.linux_like.linux.nl_item) :=
        M.run (M.alloc ((Integer.of_Z 131095) : i32.t)).
      
      Definition ABMON_11 : M.Val ltac:(libc.unix.linux_like.linux.nl_item) :=
        M.run (M.alloc ((Integer.of_Z 131096) : i32.t)).
      
      Definition ABMON_12 : M.Val ltac:(libc.unix.linux_like.linux.nl_item) :=
        M.run (M.alloc ((Integer.of_Z 131097) : i32.t)).
      
      Definition MON_1 : M.Val ltac:(libc.unix.linux_like.linux.nl_item) :=
        M.run (M.alloc ((Integer.of_Z 131098) : i32.t)).
      
      Definition MON_2 : M.Val ltac:(libc.unix.linux_like.linux.nl_item) :=
        M.run (M.alloc ((Integer.of_Z 131099) : i32.t)).
      
      Definition MON_3 : M.Val ltac:(libc.unix.linux_like.linux.nl_item) :=
        M.run (M.alloc ((Integer.of_Z 131100) : i32.t)).
      
      Definition MON_4 : M.Val ltac:(libc.unix.linux_like.linux.nl_item) :=
        M.run (M.alloc ((Integer.of_Z 131101) : i32.t)).
      
      Definition MON_5 : M.Val ltac:(libc.unix.linux_like.linux.nl_item) :=
        M.run (M.alloc ((Integer.of_Z 131102) : i32.t)).
      
      Definition MON_6 : M.Val ltac:(libc.unix.linux_like.linux.nl_item) :=
        M.run (M.alloc ((Integer.of_Z 131103) : i32.t)).
      
      Definition MON_7 : M.Val ltac:(libc.unix.linux_like.linux.nl_item) :=
        M.run (M.alloc ((Integer.of_Z 131104) : i32.t)).
      
      Definition MON_8 : M.Val ltac:(libc.unix.linux_like.linux.nl_item) :=
        M.run (M.alloc ((Integer.of_Z 131105) : i32.t)).
      
      Definition MON_9 : M.Val ltac:(libc.unix.linux_like.linux.nl_item) :=
        M.run (M.alloc ((Integer.of_Z 131106) : i32.t)).
      
      Definition MON_10 : M.Val ltac:(libc.unix.linux_like.linux.nl_item) :=
        M.run (M.alloc ((Integer.of_Z 131107) : i32.t)).
      
      Definition MON_11 : M.Val ltac:(libc.unix.linux_like.linux.nl_item) :=
        M.run (M.alloc ((Integer.of_Z 131108) : i32.t)).
      
      Definition MON_12 : M.Val ltac:(libc.unix.linux_like.linux.nl_item) :=
        M.run (M.alloc ((Integer.of_Z 131109) : i32.t)).
      
      Definition AM_STR : M.Val ltac:(libc.unix.linux_like.linux.nl_item) :=
        M.run (M.alloc ((Integer.of_Z 131110) : i32.t)).
      
      Definition PM_STR : M.Val ltac:(libc.unix.linux_like.linux.nl_item) :=
        M.run (M.alloc ((Integer.of_Z 131111) : i32.t)).
      
      Definition D_T_FMT : M.Val ltac:(libc.unix.linux_like.linux.nl_item) :=
        M.run (M.alloc ((Integer.of_Z 131112) : i32.t)).
      
      Definition D_FMT : M.Val ltac:(libc.unix.linux_like.linux.nl_item) :=
        M.run (M.alloc ((Integer.of_Z 131113) : i32.t)).
      
      Definition T_FMT : M.Val ltac:(libc.unix.linux_like.linux.nl_item) :=
        M.run (M.alloc ((Integer.of_Z 131114) : i32.t)).
      
      Definition T_FMT_AMPM : M.Val ltac:(libc.unix.linux_like.linux.nl_item) :=
        M.run (M.alloc ((Integer.of_Z 131115) : i32.t)).
      
      Definition ERA : M.Val ltac:(libc.unix.linux_like.linux.nl_item) :=
        M.run (M.alloc ((Integer.of_Z 131116) : i32.t)).
      
      Definition ERA_D_FMT : M.Val ltac:(libc.unix.linux_like.linux.nl_item) :=
        M.run (M.alloc ((Integer.of_Z 131118) : i32.t)).
      
      Definition ALT_DIGITS : M.Val ltac:(libc.unix.linux_like.linux.nl_item) :=
        M.run (M.alloc ((Integer.of_Z 131119) : i32.t)).
      
      Definition ERA_D_T_FMT
          : M.Val ltac:(libc.unix.linux_like.linux.nl_item) :=
        M.run (M.alloc ((Integer.of_Z 131120) : i32.t)).
      
      Definition ERA_T_FMT : M.Val ltac:(libc.unix.linux_like.linux.nl_item) :=
        M.run (M.alloc ((Integer.of_Z 131121) : i32.t)).
      
      Definition CODESET : M.Val ltac:(libc.unix.linux_like.linux.nl_item) :=
        M.run (M.alloc ((Integer.of_Z 14) : i32.t)).
      
      Definition CRNCYSTR : M.Val ltac:(libc.unix.linux_like.linux.nl_item) :=
        M.run (M.alloc ((Integer.of_Z 262159) : i32.t)).
      
      Definition RADIXCHAR : M.Val ltac:(libc.unix.linux_like.linux.nl_item) :=
        M.run (M.alloc ((Integer.of_Z 65536) : i32.t)).
      
      Definition THOUSEP : M.Val ltac:(libc.unix.linux_like.linux.nl_item) :=
        M.run (M.alloc ((Integer.of_Z 65537) : i32.t)).
      
      Definition YESEXPR : M.Val ltac:(libc.unix.linux_like.linux.nl_item) :=
        M.run (M.alloc ((Integer.of_Z 327680) : i32.t)).
      
      Definition NOEXPR : M.Val ltac:(libc.unix.linux_like.linux.nl_item) :=
        M.run (M.alloc ((Integer.of_Z 327681) : i32.t)).
      
      Definition YESSTR : M.Val ltac:(libc.unix.linux_like.linux.nl_item) :=
        M.run (M.alloc ((Integer.of_Z 327682) : i32.t)).
      
      Definition NOSTR : M.Val ltac:(libc.unix.linux_like.linux.nl_item) :=
        M.run (M.alloc ((Integer.of_Z 327683) : i32.t)).
      
      Definition RUSAGE_CHILDREN : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z (-1)) : i32.t)).
      
      Definition L_tmpnam : M.Val ltac:(libc.unix.c_uint) :=
        M.run (M.alloc ((Integer.of_Z 20) : u32.t)).
      
      Definition _PC_LINK_MAX : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 0) : i32.t)).
      
      Definition _PC_MAX_CANON : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 1) : i32.t)).
      
      Definition _PC_MAX_INPUT : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 2) : i32.t)).
      
      Definition _PC_NAME_MAX : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 3) : i32.t)).
      
      Definition _PC_PATH_MAX : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 4) : i32.t)).
      
      Definition _PC_PIPE_BUF : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 5) : i32.t)).
      
      Definition _PC_CHOWN_RESTRICTED : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 6) : i32.t)).
      
      Definition _PC_NO_TRUNC : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 7) : i32.t)).
      
      Definition _PC_VDISABLE : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 8) : i32.t)).
      
      Definition _PC_SYNC_IO : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 9) : i32.t)).
      
      Definition _PC_ASYNC_IO : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 10) : i32.t)).
      
      Definition _PC_PRIO_IO : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 11) : i32.t)).
      
      Definition _PC_SOCK_MAXBUF : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 12) : i32.t)).
      
      Definition _PC_FILESIZEBITS : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 13) : i32.t)).
      
      Definition _PC_REC_INCR_XFER_SIZE : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 14) : i32.t)).
      
      Definition _PC_REC_MAX_XFER_SIZE : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 15) : i32.t)).
      
      Definition _PC_REC_MIN_XFER_SIZE : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 16) : i32.t)).
      
      Definition _PC_REC_XFER_ALIGN : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 17) : i32.t)).
      
      Definition _PC_ALLOC_SIZE_MIN : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 18) : i32.t)).
      
      Definition _PC_SYMLINK_MAX : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 19) : i32.t)).
      
      Definition _PC_2_SYMLINKS : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 20) : i32.t)).
      
      Definition MS_NOUSER
          :
            M.Val
              ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_ulong) :=
        M.run (M.alloc ((Integer.of_Z 18446744071562067968) : u64.t)).
      
      Definition _SC_ARG_MAX : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 0) : i32.t)).
      
      Definition _SC_CHILD_MAX : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 1) : i32.t)).
      
      Definition _SC_CLK_TCK : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 2) : i32.t)).
      
      Definition _SC_NGROUPS_MAX : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 3) : i32.t)).
      
      Definition _SC_OPEN_MAX : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 4) : i32.t)).
      
      Definition _SC_STREAM_MAX : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 5) : i32.t)).
      
      Definition _SC_TZNAME_MAX : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 6) : i32.t)).
      
      Definition _SC_JOB_CONTROL : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 7) : i32.t)).
      
      Definition _SC_SAVED_IDS : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 8) : i32.t)).
      
      Definition _SC_REALTIME_SIGNALS : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 9) : i32.t)).
      
      Definition _SC_PRIORITY_SCHEDULING : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 10) : i32.t)).
      
      Definition _SC_TIMERS : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 11) : i32.t)).
      
      Definition _SC_ASYNCHRONOUS_IO : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 12) : i32.t)).
      
      Definition _SC_PRIORITIZED_IO : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 13) : i32.t)).
      
      Definition _SC_SYNCHRONIZED_IO : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 14) : i32.t)).
      
      Definition _SC_FSYNC : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 15) : i32.t)).
      
      Definition _SC_MAPPED_FILES : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 16) : i32.t)).
      
      Definition _SC_MEMLOCK : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 17) : i32.t)).
      
      Definition _SC_MEMLOCK_RANGE : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 18) : i32.t)).
      
      Definition _SC_MEMORY_PROTECTION : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 19) : i32.t)).
      
      Definition _SC_MESSAGE_PASSING : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 20) : i32.t)).
      
      Definition _SC_SEMAPHORES : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 21) : i32.t)).
      
      Definition _SC_SHARED_MEMORY_OBJECTS : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 22) : i32.t)).
      
      Definition _SC_AIO_LISTIO_MAX : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 23) : i32.t)).
      
      Definition _SC_AIO_MAX : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 24) : i32.t)).
      
      Definition _SC_AIO_PRIO_DELTA_MAX : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 25) : i32.t)).
      
      Definition _SC_DELAYTIMER_MAX : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 26) : i32.t)).
      
      Definition _SC_MQ_OPEN_MAX : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 27) : i32.t)).
      
      Definition _SC_MQ_PRIO_MAX : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 28) : i32.t)).
      
      Definition _SC_VERSION : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 29) : i32.t)).
      
      Definition _SC_PAGESIZE : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 30) : i32.t)).
      
      Definition _SC_PAGE_SIZE : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.pure libc.unix.linux_like.linux._SC_PAGESIZE).
      
      Definition _SC_RTSIG_MAX : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 31) : i32.t)).
      
      Definition _SC_SEM_NSEMS_MAX : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 32) : i32.t)).
      
      Definition _SC_SEM_VALUE_MAX : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 33) : i32.t)).
      
      Definition _SC_SIGQUEUE_MAX : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 34) : i32.t)).
      
      Definition _SC_TIMER_MAX : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 35) : i32.t)).
      
      Definition _SC_BC_BASE_MAX : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 36) : i32.t)).
      
      Definition _SC_BC_DIM_MAX : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 37) : i32.t)).
      
      Definition _SC_BC_SCALE_MAX : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 38) : i32.t)).
      
      Definition _SC_BC_STRING_MAX : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 39) : i32.t)).
      
      Definition _SC_COLL_WEIGHTS_MAX : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 40) : i32.t)).
      
      Definition _SC_EXPR_NEST_MAX : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 42) : i32.t)).
      
      Definition _SC_LINE_MAX : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 43) : i32.t)).
      
      Definition _SC_RE_DUP_MAX : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 44) : i32.t)).
      
      Definition _SC_2_VERSION : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 46) : i32.t)).
      
      Definition _SC_2_C_BIND : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 47) : i32.t)).
      
      Definition _SC_2_C_DEV : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 48) : i32.t)).
      
      Definition _SC_2_FORT_DEV : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 49) : i32.t)).
      
      Definition _SC_2_FORT_RUN : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 50) : i32.t)).
      
      Definition _SC_2_SW_DEV : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 51) : i32.t)).
      
      Definition _SC_2_LOCALEDEF : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 52) : i32.t)).
      
      Definition _SC_UIO_MAXIOV : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 60) : i32.t)).
      
      Definition _SC_IOV_MAX : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 60) : i32.t)).
      
      Definition _SC_THREADS : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 67) : i32.t)).
      
      Definition _SC_THREAD_SAFE_FUNCTIONS : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 68) : i32.t)).
      
      Definition _SC_GETGR_R_SIZE_MAX : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 69) : i32.t)).
      
      Definition _SC_GETPW_R_SIZE_MAX : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 70) : i32.t)).
      
      Definition _SC_LOGIN_NAME_MAX : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 71) : i32.t)).
      
      Definition _SC_TTY_NAME_MAX : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 72) : i32.t)).
      
      Definition _SC_THREAD_DESTRUCTOR_ITERATIONS
          : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 73) : i32.t)).
      
      Definition _SC_THREAD_KEYS_MAX : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 74) : i32.t)).
      
      Definition _SC_THREAD_STACK_MIN : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 75) : i32.t)).
      
      Definition _SC_THREAD_THREADS_MAX : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 76) : i32.t)).
      
      Definition _SC_THREAD_ATTR_STACKADDR : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 77) : i32.t)).
      
      Definition _SC_THREAD_ATTR_STACKSIZE : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 78) : i32.t)).
      
      Definition _SC_THREAD_PRIORITY_SCHEDULING
          : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 79) : i32.t)).
      
      Definition _SC_THREAD_PRIO_INHERIT : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 80) : i32.t)).
      
      Definition _SC_THREAD_PRIO_PROTECT : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 81) : i32.t)).
      
      Definition _SC_THREAD_PROCESS_SHARED : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 82) : i32.t)).
      
      Definition _SC_NPROCESSORS_CONF : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 83) : i32.t)).
      
      Definition _SC_NPROCESSORS_ONLN : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 84) : i32.t)).
      
      Definition _SC_PHYS_PAGES : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 85) : i32.t)).
      
      Definition _SC_AVPHYS_PAGES : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 86) : i32.t)).
      
      Definition _SC_ATEXIT_MAX : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 87) : i32.t)).
      
      Definition _SC_PASS_MAX : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 88) : i32.t)).
      
      Definition _SC_XOPEN_VERSION : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 89) : i32.t)).
      
      Definition _SC_XOPEN_XCU_VERSION : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 90) : i32.t)).
      
      Definition _SC_XOPEN_UNIX : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 91) : i32.t)).
      
      Definition _SC_XOPEN_CRYPT : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 92) : i32.t)).
      
      Definition _SC_XOPEN_ENH_I18N : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 93) : i32.t)).
      
      Definition _SC_XOPEN_SHM : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 94) : i32.t)).
      
      Definition _SC_2_CHAR_TERM : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 95) : i32.t)).
      
      Definition _SC_2_UPE : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 97) : i32.t)).
      
      Definition _SC_XOPEN_XPG2 : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 98) : i32.t)).
      
      Definition _SC_XOPEN_XPG3 : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 99) : i32.t)).
      
      Definition _SC_XOPEN_XPG4 : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 100) : i32.t)).
      
      Definition _SC_NZERO : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 109) : i32.t)).
      
      Definition _SC_XBS5_ILP32_OFF32 : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 125) : i32.t)).
      
      Definition _SC_XBS5_ILP32_OFFBIG : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 126) : i32.t)).
      
      Definition _SC_XBS5_LP64_OFF64 : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 127) : i32.t)).
      
      Definition _SC_XBS5_LPBIG_OFFBIG : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 128) : i32.t)).
      
      Definition _SC_XOPEN_LEGACY : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 129) : i32.t)).
      
      Definition _SC_XOPEN_REALTIME : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 130) : i32.t)).
      
      Definition _SC_XOPEN_REALTIME_THREADS : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 131) : i32.t)).
      
      Definition _SC_ADVISORY_INFO : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 132) : i32.t)).
      
      Definition _SC_BARRIERS : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 133) : i32.t)).
      
      Definition _SC_CLOCK_SELECTION : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 137) : i32.t)).
      
      Definition _SC_CPUTIME : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 138) : i32.t)).
      
      Definition _SC_THREAD_CPUTIME : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 139) : i32.t)).
      
      Definition _SC_MONOTONIC_CLOCK : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 149) : i32.t)).
      
      Definition _SC_READER_WRITER_LOCKS : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 153) : i32.t)).
      
      Definition _SC_SPIN_LOCKS : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 154) : i32.t)).
      
      Definition _SC_REGEXP : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 155) : i32.t)).
      
      Definition _SC_SHELL : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 157) : i32.t)).
      
      Definition _SC_SPAWN : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 159) : i32.t)).
      
      Definition _SC_SPORADIC_SERVER : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 160) : i32.t)).
      
      Definition _SC_THREAD_SPORADIC_SERVER : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 161) : i32.t)).
      
      Definition _SC_TIMEOUTS : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 164) : i32.t)).
      
      Definition _SC_TYPED_MEMORY_OBJECTS : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 165) : i32.t)).
      
      Definition _SC_2_PBS : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 168) : i32.t)).
      
      Definition _SC_2_PBS_ACCOUNTING : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 169) : i32.t)).
      
      Definition _SC_2_PBS_LOCATE : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 170) : i32.t)).
      
      Definition _SC_2_PBS_MESSAGE : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 171) : i32.t)).
      
      Definition _SC_2_PBS_TRACK : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 172) : i32.t)).
      
      Definition _SC_SYMLOOP_MAX : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 173) : i32.t)).
      
      Definition _SC_STREAMS : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 174) : i32.t)).
      
      Definition _SC_2_PBS_CHECKPOINT : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 175) : i32.t)).
      
      Definition _SC_V6_ILP32_OFF32 : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 176) : i32.t)).
      
      Definition _SC_V6_ILP32_OFFBIG : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 177) : i32.t)).
      
      Definition _SC_V6_LP64_OFF64 : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 178) : i32.t)).
      
      Definition _SC_V6_LPBIG_OFFBIG : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 179) : i32.t)).
      
      Definition _SC_HOST_NAME_MAX : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 180) : i32.t)).
      
      Definition _SC_TRACE : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 181) : i32.t)).
      
      Definition _SC_TRACE_EVENT_FILTER : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 182) : i32.t)).
      
      Definition _SC_TRACE_INHERIT : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 183) : i32.t)).
      
      Definition _SC_TRACE_LOG : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 184) : i32.t)).
      
      Definition _SC_IPV6 : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 235) : i32.t)).
      
      Definition _SC_RAW_SOCKETS : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 236) : i32.t)).
      
      Definition _SC_V7_ILP32_OFF32 : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 237) : i32.t)).
      
      Definition _SC_V7_ILP32_OFFBIG : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 238) : i32.t)).
      
      Definition _SC_V7_LP64_OFF64 : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 239) : i32.t)).
      
      Definition _SC_V7_LPBIG_OFFBIG : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 240) : i32.t)).
      
      Definition _SC_SS_REPL_MAX : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 241) : i32.t)).
      
      Definition _SC_TRACE_EVENT_NAME_MAX : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 242) : i32.t)).
      
      Definition _SC_TRACE_NAME_MAX : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 243) : i32.t)).
      
      Definition _SC_TRACE_SYS_MAX : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 244) : i32.t)).
      
      Definition _SC_TRACE_USER_EVENT_MAX : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 245) : i32.t)).
      
      Definition _SC_XOPEN_STREAMS : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 246) : i32.t)).
      
      Definition _SC_THREAD_ROBUST_PRIO_INHERIT
          : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 247) : i32.t)).
      
      Definition _SC_THREAD_ROBUST_PRIO_PROTECT
          : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 248) : i32.t)).
      
      Definition RLIM_SAVED_MAX
          : M.Val ltac:(libc.unix.linux_like.linux.gnu.b64.rlim_t) :=
        M.run (M.pure libc.unix.linux_like.linux.arch.generic.RLIM_INFINITY).
      
      Definition RLIM_SAVED_CUR
          : M.Val ltac:(libc.unix.linux_like.linux.gnu.b64.rlim_t) :=
        M.run (M.pure libc.unix.linux_like.linux.arch.generic.RLIM_INFINITY).
      
      Definition EI_NIDENT : M.Val usize.t :=
        M.run (M.alloc ((Integer.of_Z 16) : usize.t)).
      
      Definition EI_MAG0 : M.Val usize.t :=
        M.run (M.alloc ((Integer.of_Z 0) : usize.t)).
      
      Definition ELFMAG0 : M.Val u8.t :=
        M.run (M.alloc ((Integer.of_Z 127) : u8.t)).
      
      Definition EI_MAG1 : M.Val usize.t :=
        M.run (M.alloc ((Integer.of_Z 1) : usize.t)).
      
      Definition ELFMAG1 : M.Val u8.t :=
        M.run (M.pure (UnsupportedLiteral : M.Val u8.t)).
      
      Definition EI_MAG2 : M.Val usize.t :=
        M.run (M.alloc ((Integer.of_Z 2) : usize.t)).
      
      Definition ELFMAG2 : M.Val u8.t :=
        M.run (M.pure (UnsupportedLiteral : M.Val u8.t)).
      
      Definition EI_MAG3 : M.Val usize.t :=
        M.run (M.alloc ((Integer.of_Z 3) : usize.t)).
      
      Definition ELFMAG3 : M.Val u8.t :=
        M.run (M.pure (UnsupportedLiteral : M.Val u8.t)).
      
      Definition SELFMAG : M.Val usize.t :=
        M.run (M.alloc ((Integer.of_Z 4) : usize.t)).
      
      Definition EI_CLASS : M.Val usize.t :=
        M.run (M.alloc ((Integer.of_Z 4) : usize.t)).
      
      Definition ELFCLASSNONE : M.Val u8.t :=
        M.run (M.alloc ((Integer.of_Z 0) : u8.t)).
      
      Definition ELFCLASS32 : M.Val u8.t :=
        M.run (M.alloc ((Integer.of_Z 1) : u8.t)).
      
      Definition ELFCLASS64 : M.Val u8.t :=
        M.run (M.alloc ((Integer.of_Z 2) : u8.t)).
      
      Definition ELFCLASSNUM : M.Val usize.t :=
        M.run (M.alloc ((Integer.of_Z 3) : usize.t)).
      
      Definition EI_DATA : M.Val usize.t :=
        M.run (M.alloc ((Integer.of_Z 5) : usize.t)).
      
      Definition ELFDATANONE : M.Val u8.t :=
        M.run (M.alloc ((Integer.of_Z 0) : u8.t)).
      
      Definition ELFDATA2LSB : M.Val u8.t :=
        M.run (M.alloc ((Integer.of_Z 1) : u8.t)).
      
      Definition ELFDATA2MSB : M.Val u8.t :=
        M.run (M.alloc ((Integer.of_Z 2) : u8.t)).
      
      Definition ELFDATANUM : M.Val usize.t :=
        M.run (M.alloc ((Integer.of_Z 3) : usize.t)).
      
      Definition EI_VERSION : M.Val usize.t :=
        M.run (M.alloc ((Integer.of_Z 6) : usize.t)).
      
      Definition EI_OSABI : M.Val usize.t :=
        M.run (M.alloc ((Integer.of_Z 7) : usize.t)).
      
      Definition ELFOSABI_NONE : M.Val u8.t :=
        M.run (M.alloc ((Integer.of_Z 0) : u8.t)).
      
      Definition ELFOSABI_SYSV : M.Val u8.t :=
        M.run (M.alloc ((Integer.of_Z 0) : u8.t)).
      
      Definition ELFOSABI_HPUX : M.Val u8.t :=
        M.run (M.alloc ((Integer.of_Z 1) : u8.t)).
      
      Definition ELFOSABI_NETBSD : M.Val u8.t :=
        M.run (M.alloc ((Integer.of_Z 2) : u8.t)).
      
      Definition ELFOSABI_GNU : M.Val u8.t :=
        M.run (M.alloc ((Integer.of_Z 3) : u8.t)).
      
      Definition ELFOSABI_LINUX : M.Val u8.t :=
        M.run (M.pure libc.unix.linux_like.linux.ELFOSABI_GNU).
      
      Definition ELFOSABI_SOLARIS : M.Val u8.t :=
        M.run (M.alloc ((Integer.of_Z 6) : u8.t)).
      
      Definition ELFOSABI_AIX : M.Val u8.t :=
        M.run (M.alloc ((Integer.of_Z 7) : u8.t)).
      
      Definition ELFOSABI_IRIX : M.Val u8.t :=
        M.run (M.alloc ((Integer.of_Z 8) : u8.t)).
      
      Definition ELFOSABI_FREEBSD : M.Val u8.t :=
        M.run (M.alloc ((Integer.of_Z 9) : u8.t)).
      
      Definition ELFOSABI_TRU64 : M.Val u8.t :=
        M.run (M.alloc ((Integer.of_Z 10) : u8.t)).
      
      Definition ELFOSABI_MODESTO : M.Val u8.t :=
        M.run (M.alloc ((Integer.of_Z 11) : u8.t)).
      
      Definition ELFOSABI_OPENBSD : M.Val u8.t :=
        M.run (M.alloc ((Integer.of_Z 12) : u8.t)).
      
      Definition ELFOSABI_ARM : M.Val u8.t :=
        M.run (M.alloc ((Integer.of_Z 97) : u8.t)).
      
      Definition ELFOSABI_STANDALONE : M.Val u8.t :=
        M.run (M.alloc ((Integer.of_Z 255) : u8.t)).
      
      Definition EI_ABIVERSION : M.Val usize.t :=
        M.run (M.alloc ((Integer.of_Z 8) : usize.t)).
      
      Definition EI_PAD : M.Val usize.t :=
        M.run (M.alloc ((Integer.of_Z 9) : usize.t)).
      
      Definition ET_NONE : M.Val u16.t :=
        M.run (M.alloc ((Integer.of_Z 0) : u16.t)).
      
      Definition ET_REL : M.Val u16.t :=
        M.run (M.alloc ((Integer.of_Z 1) : u16.t)).
      
      Definition ET_EXEC : M.Val u16.t :=
        M.run (M.alloc ((Integer.of_Z 2) : u16.t)).
      
      Definition ET_DYN : M.Val u16.t :=
        M.run (M.alloc ((Integer.of_Z 3) : u16.t)).
      
      Definition ET_CORE : M.Val u16.t :=
        M.run (M.alloc ((Integer.of_Z 4) : u16.t)).
      
      Definition ET_NUM : M.Val u16.t :=
        M.run (M.alloc ((Integer.of_Z 5) : u16.t)).
      
      Definition ET_LOOS : M.Val u16.t :=
        M.run (M.alloc ((Integer.of_Z 65024) : u16.t)).
      
      Definition ET_HIOS : M.Val u16.t :=
        M.run (M.alloc ((Integer.of_Z 65279) : u16.t)).
      
      Definition ET_LOPROC : M.Val u16.t :=
        M.run (M.alloc ((Integer.of_Z 65280) : u16.t)).
      
      Definition ET_HIPROC : M.Val u16.t :=
        M.run (M.alloc ((Integer.of_Z 65535) : u16.t)).
      
      Definition EM_NONE : M.Val u16.t :=
        M.run (M.alloc ((Integer.of_Z 0) : u16.t)).
      
      Definition EM_M32 : M.Val u16.t :=
        M.run (M.alloc ((Integer.of_Z 1) : u16.t)).
      
      Definition EM_SPARC : M.Val u16.t :=
        M.run (M.alloc ((Integer.of_Z 2) : u16.t)).
      
      Definition EM_386 : M.Val u16.t :=
        M.run (M.alloc ((Integer.of_Z 3) : u16.t)).
      
      Definition EM_68K : M.Val u16.t :=
        M.run (M.alloc ((Integer.of_Z 4) : u16.t)).
      
      Definition EM_88K : M.Val u16.t :=
        M.run (M.alloc ((Integer.of_Z 5) : u16.t)).
      
      Definition EM_860 : M.Val u16.t :=
        M.run (M.alloc ((Integer.of_Z 7) : u16.t)).
      
      Definition EM_MIPS : M.Val u16.t :=
        M.run (M.alloc ((Integer.of_Z 8) : u16.t)).
      
      Definition EM_S370 : M.Val u16.t :=
        M.run (M.alloc ((Integer.of_Z 9) : u16.t)).
      
      Definition EM_MIPS_RS3_LE : M.Val u16.t :=
        M.run (M.alloc ((Integer.of_Z 10) : u16.t)).
      
      Definition EM_PARISC : M.Val u16.t :=
        M.run (M.alloc ((Integer.of_Z 15) : u16.t)).
      
      Definition EM_VPP500 : M.Val u16.t :=
        M.run (M.alloc ((Integer.of_Z 17) : u16.t)).
      
      Definition EM_SPARC32PLUS : M.Val u16.t :=
        M.run (M.alloc ((Integer.of_Z 18) : u16.t)).
      
      Definition EM_960 : M.Val u16.t :=
        M.run (M.alloc ((Integer.of_Z 19) : u16.t)).
      
      Definition EM_PPC : M.Val u16.t :=
        M.run (M.alloc ((Integer.of_Z 20) : u16.t)).
      
      Definition EM_PPC64 : M.Val u16.t :=
        M.run (M.alloc ((Integer.of_Z 21) : u16.t)).
      
      Definition EM_S390 : M.Val u16.t :=
        M.run (M.alloc ((Integer.of_Z 22) : u16.t)).
      
      Definition EM_V800 : M.Val u16.t :=
        M.run (M.alloc ((Integer.of_Z 36) : u16.t)).
      
      Definition EM_FR20 : M.Val u16.t :=
        M.run (M.alloc ((Integer.of_Z 37) : u16.t)).
      
      Definition EM_RH32 : M.Val u16.t :=
        M.run (M.alloc ((Integer.of_Z 38) : u16.t)).
      
      Definition EM_RCE : M.Val u16.t :=
        M.run (M.alloc ((Integer.of_Z 39) : u16.t)).
      
      Definition EM_ARM : M.Val u16.t :=
        M.run (M.alloc ((Integer.of_Z 40) : u16.t)).
      
      Definition EM_FAKE_ALPHA : M.Val u16.t :=
        M.run (M.alloc ((Integer.of_Z 41) : u16.t)).
      
      Definition EM_SH : M.Val u16.t :=
        M.run (M.alloc ((Integer.of_Z 42) : u16.t)).
      
      Definition EM_SPARCV9 : M.Val u16.t :=
        M.run (M.alloc ((Integer.of_Z 43) : u16.t)).
      
      Definition EM_TRICORE : M.Val u16.t :=
        M.run (M.alloc ((Integer.of_Z 44) : u16.t)).
      
      Definition EM_ARC : M.Val u16.t :=
        M.run (M.alloc ((Integer.of_Z 45) : u16.t)).
      
      Definition EM_H8_300 : M.Val u16.t :=
        M.run (M.alloc ((Integer.of_Z 46) : u16.t)).
      
      Definition EM_H8_300H : M.Val u16.t :=
        M.run (M.alloc ((Integer.of_Z 47) : u16.t)).
      
      Definition EM_H8S : M.Val u16.t :=
        M.run (M.alloc ((Integer.of_Z 48) : u16.t)).
      
      Definition EM_H8_500 : M.Val u16.t :=
        M.run (M.alloc ((Integer.of_Z 49) : u16.t)).
      
      Definition EM_IA_64 : M.Val u16.t :=
        M.run (M.alloc ((Integer.of_Z 50) : u16.t)).
      
      Definition EM_MIPS_X : M.Val u16.t :=
        M.run (M.alloc ((Integer.of_Z 51) : u16.t)).
      
      Definition EM_COLDFIRE : M.Val u16.t :=
        M.run (M.alloc ((Integer.of_Z 52) : u16.t)).
      
      Definition EM_68HC12 : M.Val u16.t :=
        M.run (M.alloc ((Integer.of_Z 53) : u16.t)).
      
      Definition EM_MMA : M.Val u16.t :=
        M.run (M.alloc ((Integer.of_Z 54) : u16.t)).
      
      Definition EM_PCP : M.Val u16.t :=
        M.run (M.alloc ((Integer.of_Z 55) : u16.t)).
      
      Definition EM_NCPU : M.Val u16.t :=
        M.run (M.alloc ((Integer.of_Z 56) : u16.t)).
      
      Definition EM_NDR1 : M.Val u16.t :=
        M.run (M.alloc ((Integer.of_Z 57) : u16.t)).
      
      Definition EM_STARCORE : M.Val u16.t :=
        M.run (M.alloc ((Integer.of_Z 58) : u16.t)).
      
      Definition EM_ME16 : M.Val u16.t :=
        M.run (M.alloc ((Integer.of_Z 59) : u16.t)).
      
      Definition EM_ST100 : M.Val u16.t :=
        M.run (M.alloc ((Integer.of_Z 60) : u16.t)).
      
      Definition EM_TINYJ : M.Val u16.t :=
        M.run (M.alloc ((Integer.of_Z 61) : u16.t)).
      
      Definition EM_X86_64 : M.Val u16.t :=
        M.run (M.alloc ((Integer.of_Z 62) : u16.t)).
      
      Definition EM_PDSP : M.Val u16.t :=
        M.run (M.alloc ((Integer.of_Z 63) : u16.t)).
      
      Definition EM_FX66 : M.Val u16.t :=
        M.run (M.alloc ((Integer.of_Z 66) : u16.t)).
      
      Definition EM_ST9PLUS : M.Val u16.t :=
        M.run (M.alloc ((Integer.of_Z 67) : u16.t)).
      
      Definition EM_ST7 : M.Val u16.t :=
        M.run (M.alloc ((Integer.of_Z 68) : u16.t)).
      
      Definition EM_68HC16 : M.Val u16.t :=
        M.run (M.alloc ((Integer.of_Z 69) : u16.t)).
      
      Definition EM_68HC11 : M.Val u16.t :=
        M.run (M.alloc ((Integer.of_Z 70) : u16.t)).
      
      Definition EM_68HC08 : M.Val u16.t :=
        M.run (M.alloc ((Integer.of_Z 71) : u16.t)).
      
      Definition EM_68HC05 : M.Val u16.t :=
        M.run (M.alloc ((Integer.of_Z 72) : u16.t)).
      
      Definition EM_SVX : M.Val u16.t :=
        M.run (M.alloc ((Integer.of_Z 73) : u16.t)).
      
      Definition EM_ST19 : M.Val u16.t :=
        M.run (M.alloc ((Integer.of_Z 74) : u16.t)).
      
      Definition EM_VAX : M.Val u16.t :=
        M.run (M.alloc ((Integer.of_Z 75) : u16.t)).
      
      Definition EM_CRIS : M.Val u16.t :=
        M.run (M.alloc ((Integer.of_Z 76) : u16.t)).
      
      Definition EM_JAVELIN : M.Val u16.t :=
        M.run (M.alloc ((Integer.of_Z 77) : u16.t)).
      
      Definition EM_FIREPATH : M.Val u16.t :=
        M.run (M.alloc ((Integer.of_Z 78) : u16.t)).
      
      Definition EM_ZSP : M.Val u16.t :=
        M.run (M.alloc ((Integer.of_Z 79) : u16.t)).
      
      Definition EM_MMIX : M.Val u16.t :=
        M.run (M.alloc ((Integer.of_Z 80) : u16.t)).
      
      Definition EM_HUANY : M.Val u16.t :=
        M.run (M.alloc ((Integer.of_Z 81) : u16.t)).
      
      Definition EM_PRISM : M.Val u16.t :=
        M.run (M.alloc ((Integer.of_Z 82) : u16.t)).
      
      Definition EM_AVR : M.Val u16.t :=
        M.run (M.alloc ((Integer.of_Z 83) : u16.t)).
      
      Definition EM_FR30 : M.Val u16.t :=
        M.run (M.alloc ((Integer.of_Z 84) : u16.t)).
      
      Definition EM_D10V : M.Val u16.t :=
        M.run (M.alloc ((Integer.of_Z 85) : u16.t)).
      
      Definition EM_D30V : M.Val u16.t :=
        M.run (M.alloc ((Integer.of_Z 86) : u16.t)).
      
      Definition EM_V850 : M.Val u16.t :=
        M.run (M.alloc ((Integer.of_Z 87) : u16.t)).
      
      Definition EM_M32R : M.Val u16.t :=
        M.run (M.alloc ((Integer.of_Z 88) : u16.t)).
      
      Definition EM_MN10300 : M.Val u16.t :=
        M.run (M.alloc ((Integer.of_Z 89) : u16.t)).
      
      Definition EM_MN10200 : M.Val u16.t :=
        M.run (M.alloc ((Integer.of_Z 90) : u16.t)).
      
      Definition EM_PJ : M.Val u16.t :=
        M.run (M.alloc ((Integer.of_Z 91) : u16.t)).
      
      Definition EM_OPENRISC : M.Val u16.t :=
        M.run (M.alloc ((Integer.of_Z 92) : u16.t)).
      
      Definition EM_ARC_A5 : M.Val u16.t :=
        M.run (M.alloc ((Integer.of_Z 93) : u16.t)).
      
      Definition EM_XTENSA : M.Val u16.t :=
        M.run (M.alloc ((Integer.of_Z 94) : u16.t)).
      
      Definition EM_AARCH64 : M.Val u16.t :=
        M.run (M.alloc ((Integer.of_Z 183) : u16.t)).
      
      Definition EM_TILEPRO : M.Val u16.t :=
        M.run (M.alloc ((Integer.of_Z 188) : u16.t)).
      
      Definition EM_TILEGX : M.Val u16.t :=
        M.run (M.alloc ((Integer.of_Z 191) : u16.t)).
      
      Definition EM_ALPHA : M.Val u16.t :=
        M.run (M.alloc ((Integer.of_Z 36902) : u16.t)).
      
      Definition EV_NONE : M.Val u32.t :=
        M.run (M.alloc ((Integer.of_Z 0) : u32.t)).
      
      Definition EV_CURRENT : M.Val u32.t :=
        M.run (M.alloc ((Integer.of_Z 1) : u32.t)).
      
      Definition EV_NUM : M.Val u32.t :=
        M.run (M.alloc ((Integer.of_Z 2) : u32.t)).
      
      Definition PT_NULL : M.Val u32.t :=
        M.run (M.alloc ((Integer.of_Z 0) : u32.t)).
      
      Definition PT_LOAD : M.Val u32.t :=
        M.run (M.alloc ((Integer.of_Z 1) : u32.t)).
      
      Definition PT_DYNAMIC : M.Val u32.t :=
        M.run (M.alloc ((Integer.of_Z 2) : u32.t)).
      
      Definition PT_INTERP : M.Val u32.t :=
        M.run (M.alloc ((Integer.of_Z 3) : u32.t)).
      
      Definition PT_NOTE : M.Val u32.t :=
        M.run (M.alloc ((Integer.of_Z 4) : u32.t)).
      
      Definition PT_SHLIB : M.Val u32.t :=
        M.run (M.alloc ((Integer.of_Z 5) : u32.t)).
      
      Definition PT_PHDR : M.Val u32.t :=
        M.run (M.alloc ((Integer.of_Z 6) : u32.t)).
      
      Definition PT_TLS : M.Val u32.t :=
        M.run (M.alloc ((Integer.of_Z 7) : u32.t)).
      
      Definition PT_NUM : M.Val u32.t :=
        M.run (M.alloc ((Integer.of_Z 8) : u32.t)).
      
      Definition PT_LOOS : M.Val u32.t :=
        M.run (M.alloc ((Integer.of_Z 1610612736) : u32.t)).
      
      Definition PT_GNU_EH_FRAME : M.Val u32.t :=
        M.run (M.alloc ((Integer.of_Z 1685382480) : u32.t)).
      
      Definition PT_GNU_STACK : M.Val u32.t :=
        M.run (M.alloc ((Integer.of_Z 1685382481) : u32.t)).
      
      Definition PT_GNU_RELRO : M.Val u32.t :=
        M.run (M.alloc ((Integer.of_Z 1685382482) : u32.t)).
      
      Definition PT_LOSUNW : M.Val u32.t :=
        M.run (M.alloc ((Integer.of_Z 1879048186) : u32.t)).
      
      Definition PT_SUNWBSS : M.Val u32.t :=
        M.run (M.alloc ((Integer.of_Z 1879048186) : u32.t)).
      
      Definition PT_SUNWSTACK : M.Val u32.t :=
        M.run (M.alloc ((Integer.of_Z 1879048187) : u32.t)).
      
      Definition PT_HISUNW : M.Val u32.t :=
        M.run (M.alloc ((Integer.of_Z 1879048191) : u32.t)).
      
      Definition PT_HIOS : M.Val u32.t :=
        M.run (M.alloc ((Integer.of_Z 1879048191) : u32.t)).
      
      Definition PT_LOPROC : M.Val u32.t :=
        M.run (M.alloc ((Integer.of_Z 1879048192) : u32.t)).
      
      Definition PT_HIPROC : M.Val u32.t :=
        M.run (M.alloc ((Integer.of_Z 2147483647) : u32.t)).
      
      Definition PF_X : M.Val u32.t :=
        M.run
          (let* α0 : u32.t :=
            BinOp.Panic.shl
              ((Integer.of_Z 1) : u32.t)
              ((Integer.of_Z 0) : i32.t) in
          M.alloc α0).
      
      Definition PF_W : M.Val u32.t :=
        M.run
          (let* α0 : u32.t :=
            BinOp.Panic.shl
              ((Integer.of_Z 1) : u32.t)
              ((Integer.of_Z 1) : i32.t) in
          M.alloc α0).
      
      Definition PF_R : M.Val u32.t :=
        M.run
          (let* α0 : u32.t :=
            BinOp.Panic.shl
              ((Integer.of_Z 1) : u32.t)
              ((Integer.of_Z 2) : i32.t) in
          M.alloc α0).
      
      Definition PF_MASKOS : M.Val u32.t :=
        M.run (M.alloc ((Integer.of_Z 267386880) : u32.t)).
      
      Definition PF_MASKPROC : M.Val u32.t :=
        M.run (M.alloc ((Integer.of_Z 4026531840) : u32.t)).
      
      Definition AT_NULL
          :
            M.Val
              ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_ulong) :=
        M.run (M.alloc ((Integer.of_Z 0) : u64.t)).
      
      Definition AT_IGNORE
          :
            M.Val
              ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_ulong) :=
        M.run (M.alloc ((Integer.of_Z 1) : u64.t)).
      
      Definition AT_EXECFD
          :
            M.Val
              ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_ulong) :=
        M.run (M.alloc ((Integer.of_Z 2) : u64.t)).
      
      Definition AT_PHDR
          :
            M.Val
              ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_ulong) :=
        M.run (M.alloc ((Integer.of_Z 3) : u64.t)).
      
      Definition AT_PHENT
          :
            M.Val
              ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_ulong) :=
        M.run (M.alloc ((Integer.of_Z 4) : u64.t)).
      
      Definition AT_PHNUM
          :
            M.Val
              ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_ulong) :=
        M.run (M.alloc ((Integer.of_Z 5) : u64.t)).
      
      Definition AT_PAGESZ
          :
            M.Val
              ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_ulong) :=
        M.run (M.alloc ((Integer.of_Z 6) : u64.t)).
      
      Definition AT_BASE
          :
            M.Val
              ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_ulong) :=
        M.run (M.alloc ((Integer.of_Z 7) : u64.t)).
      
      Definition AT_FLAGS
          :
            M.Val
              ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_ulong) :=
        M.run (M.alloc ((Integer.of_Z 8) : u64.t)).
      
      Definition AT_ENTRY
          :
            M.Val
              ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_ulong) :=
        M.run (M.alloc ((Integer.of_Z 9) : u64.t)).
      
      Definition AT_NOTELF
          :
            M.Val
              ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_ulong) :=
        M.run (M.alloc ((Integer.of_Z 10) : u64.t)).
      
      Definition AT_UID
          :
            M.Val
              ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_ulong) :=
        M.run (M.alloc ((Integer.of_Z 11) : u64.t)).
      
      Definition AT_EUID
          :
            M.Val
              ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_ulong) :=
        M.run (M.alloc ((Integer.of_Z 12) : u64.t)).
      
      Definition AT_GID
          :
            M.Val
              ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_ulong) :=
        M.run (M.alloc ((Integer.of_Z 13) : u64.t)).
      
      Definition AT_EGID
          :
            M.Val
              ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_ulong) :=
        M.run (M.alloc ((Integer.of_Z 14) : u64.t)).
      
      Definition AT_PLATFORM
          :
            M.Val
              ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_ulong) :=
        M.run (M.alloc ((Integer.of_Z 15) : u64.t)).
      
      Definition AT_HWCAP
          :
            M.Val
              ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_ulong) :=
        M.run (M.alloc ((Integer.of_Z 16) : u64.t)).
      
      Definition AT_CLKTCK
          :
            M.Val
              ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_ulong) :=
        M.run (M.alloc ((Integer.of_Z 17) : u64.t)).
      
      Definition AT_SECURE
          :
            M.Val
              ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_ulong) :=
        M.run (M.alloc ((Integer.of_Z 23) : u64.t)).
      
      Definition AT_BASE_PLATFORM
          :
            M.Val
              ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_ulong) :=
        M.run (M.alloc ((Integer.of_Z 24) : u64.t)).
      
      Definition AT_RANDOM
          :
            M.Val
              ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_ulong) :=
        M.run (M.alloc ((Integer.of_Z 25) : u64.t)).
      
      Definition AT_HWCAP2
          :
            M.Val
              ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_ulong) :=
        M.run (M.alloc ((Integer.of_Z 26) : u64.t)).
      
      Definition AT_EXECFN
          :
            M.Val
              ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_ulong) :=
        M.run (M.alloc ((Integer.of_Z 31) : u64.t)).
      
      Definition AT_SYSINFO_EHDR
          :
            M.Val
              ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_ulong) :=
        M.run (M.alloc ((Integer.of_Z 33) : u64.t)).
      
      Definition GLOB_ERR : M.Val ltac:(libc.unix.c_int) :=
        M.run
          (let* α0 : i32.t :=
            BinOp.Panic.shl
              ((Integer.of_Z 1) : i32.t)
              ((Integer.of_Z 0) : i32.t) in
          M.alloc α0).
      
      Definition GLOB_MARK : M.Val ltac:(libc.unix.c_int) :=
        M.run
          (let* α0 : i32.t :=
            BinOp.Panic.shl
              ((Integer.of_Z 1) : i32.t)
              ((Integer.of_Z 1) : i32.t) in
          M.alloc α0).
      
      Definition GLOB_NOSORT : M.Val ltac:(libc.unix.c_int) :=
        M.run
          (let* α0 : i32.t :=
            BinOp.Panic.shl
              ((Integer.of_Z 1) : i32.t)
              ((Integer.of_Z 2) : i32.t) in
          M.alloc α0).
      
      Definition GLOB_DOOFFS : M.Val ltac:(libc.unix.c_int) :=
        M.run
          (let* α0 : i32.t :=
            BinOp.Panic.shl
              ((Integer.of_Z 1) : i32.t)
              ((Integer.of_Z 3) : i32.t) in
          M.alloc α0).
      
      Definition GLOB_NOCHECK : M.Val ltac:(libc.unix.c_int) :=
        M.run
          (let* α0 : i32.t :=
            BinOp.Panic.shl
              ((Integer.of_Z 1) : i32.t)
              ((Integer.of_Z 4) : i32.t) in
          M.alloc α0).
      
      Definition GLOB_APPEND : M.Val ltac:(libc.unix.c_int) :=
        M.run
          (let* α0 : i32.t :=
            BinOp.Panic.shl
              ((Integer.of_Z 1) : i32.t)
              ((Integer.of_Z 5) : i32.t) in
          M.alloc α0).
      
      Definition GLOB_NOESCAPE : M.Val ltac:(libc.unix.c_int) :=
        M.run
          (let* α0 : i32.t :=
            BinOp.Panic.shl
              ((Integer.of_Z 1) : i32.t)
              ((Integer.of_Z 6) : i32.t) in
          M.alloc α0).
      
      Definition GLOB_NOSPACE : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 1) : i32.t)).
      
      Definition GLOB_ABORTED : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 2) : i32.t)).
      
      Definition GLOB_NOMATCH : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 3) : i32.t)).
      
      Definition POSIX_MADV_NORMAL : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 0) : i32.t)).
      
      Definition POSIX_MADV_RANDOM : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 1) : i32.t)).
      
      Definition POSIX_MADV_SEQUENTIAL : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 2) : i32.t)).
      
      Definition POSIX_MADV_WILLNEED : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 3) : i32.t)).
      
      Definition POSIX_SPAWN_USEVFORK : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 64) : i32.t)).
      
      Definition POSIX_SPAWN_SETSID : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 128) : i32.t)).
      
      Definition S_IEXEC : M.Val ltac:(libc.unix.linux_like.linux.mode_t) :=
        M.run (M.alloc ((Integer.of_Z 64) : u32.t)).
      
      Definition S_IWRITE : M.Val ltac:(libc.unix.linux_like.linux.mode_t) :=
        M.run (M.alloc ((Integer.of_Z 128) : u32.t)).
      
      Definition S_IREAD : M.Val ltac:(libc.unix.linux_like.linux.mode_t) :=
        M.run (M.alloc ((Integer.of_Z 256) : u32.t)).
      
      Definition F_LOCK : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 1) : i32.t)).
      
      Definition F_TEST : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 3) : i32.t)).
      
      Definition F_TLOCK : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 2) : i32.t)).
      
      Definition F_ULOCK : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 0) : i32.t)).
      
      Definition F_SEAL_FUTURE_WRITE : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 16) : i32.t)).
      
      Definition IFF_LOWER_UP : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 65536) : i32.t)).
      
      Definition IFF_DORMANT : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 131072) : i32.t)).
      
      Definition IFF_ECHO : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 262144) : i32.t)).
      
      Definition IFA_UNSPEC : M.Val ltac:(libc.unix.c_ushort) :=
        M.run (M.alloc ((Integer.of_Z 0) : u16.t)).
      
      Definition IFA_ADDRESS : M.Val ltac:(libc.unix.c_ushort) :=
        M.run (M.alloc ((Integer.of_Z 1) : u16.t)).
      
      Definition IFA_LOCAL : M.Val ltac:(libc.unix.c_ushort) :=
        M.run (M.alloc ((Integer.of_Z 2) : u16.t)).
      
      Definition IFA_LABEL : M.Val ltac:(libc.unix.c_ushort) :=
        M.run (M.alloc ((Integer.of_Z 3) : u16.t)).
      
      Definition IFA_BROADCAST : M.Val ltac:(libc.unix.c_ushort) :=
        M.run (M.alloc ((Integer.of_Z 4) : u16.t)).
      
      Definition IFA_ANYCAST : M.Val ltac:(libc.unix.c_ushort) :=
        M.run (M.alloc ((Integer.of_Z 5) : u16.t)).
      
      Definition IFA_CACHEINFO : M.Val ltac:(libc.unix.c_ushort) :=
        M.run (M.alloc ((Integer.of_Z 6) : u16.t)).
      
      Definition IFA_MULTICAST : M.Val ltac:(libc.unix.c_ushort) :=
        M.run (M.alloc ((Integer.of_Z 7) : u16.t)).
      
      Definition IFA_F_SECONDARY : M.Val u32.t :=
        M.run (M.alloc ((Integer.of_Z 1) : u32.t)).
      
      Definition IFA_F_TEMPORARY : M.Val u32.t :=
        M.run (M.alloc ((Integer.of_Z 1) : u32.t)).
      
      Definition IFA_F_NODAD : M.Val u32.t :=
        M.run (M.alloc ((Integer.of_Z 2) : u32.t)).
      
      Definition IFA_F_OPTIMISTIC : M.Val u32.t :=
        M.run (M.alloc ((Integer.of_Z 4) : u32.t)).
      
      Definition IFA_F_DADFAILED : M.Val u32.t :=
        M.run (M.alloc ((Integer.of_Z 8) : u32.t)).
      
      Definition IFA_F_HOMEADDRESS : M.Val u32.t :=
        M.run (M.alloc ((Integer.of_Z 16) : u32.t)).
      
      Definition IFA_F_DEPRECATED : M.Val u32.t :=
        M.run (M.alloc ((Integer.of_Z 32) : u32.t)).
      
      Definition IFA_F_TENTATIVE : M.Val u32.t :=
        M.run (M.alloc ((Integer.of_Z 64) : u32.t)).
      
      Definition IFA_F_PERMANENT : M.Val u32.t :=
        M.run (M.alloc ((Integer.of_Z 128) : u32.t)).
      
      Definition IFLA_UNSPEC : M.Val ltac:(libc.unix.c_ushort) :=
        M.run (M.alloc ((Integer.of_Z 0) : u16.t)).
      
      Definition IFLA_ADDRESS : M.Val ltac:(libc.unix.c_ushort) :=
        M.run (M.alloc ((Integer.of_Z 1) : u16.t)).
      
      Definition IFLA_BROADCAST : M.Val ltac:(libc.unix.c_ushort) :=
        M.run (M.alloc ((Integer.of_Z 2) : u16.t)).
      
      Definition IFLA_IFNAME : M.Val ltac:(libc.unix.c_ushort) :=
        M.run (M.alloc ((Integer.of_Z 3) : u16.t)).
      
      Definition IFLA_MTU : M.Val ltac:(libc.unix.c_ushort) :=
        M.run (M.alloc ((Integer.of_Z 4) : u16.t)).
      
      Definition IFLA_LINK : M.Val ltac:(libc.unix.c_ushort) :=
        M.run (M.alloc ((Integer.of_Z 5) : u16.t)).
      
      Definition IFLA_QDISC : M.Val ltac:(libc.unix.c_ushort) :=
        M.run (M.alloc ((Integer.of_Z 6) : u16.t)).
      
      Definition IFLA_STATS : M.Val ltac:(libc.unix.c_ushort) :=
        M.run (M.alloc ((Integer.of_Z 7) : u16.t)).
      
      Definition IFLA_COST : M.Val ltac:(libc.unix.c_ushort) :=
        M.run (M.alloc ((Integer.of_Z 8) : u16.t)).
      
      Definition IFLA_PRIORITY : M.Val ltac:(libc.unix.c_ushort) :=
        M.run (M.alloc ((Integer.of_Z 9) : u16.t)).
      
      Definition IFLA_MASTER : M.Val ltac:(libc.unix.c_ushort) :=
        M.run (M.alloc ((Integer.of_Z 10) : u16.t)).
      
      Definition IFLA_WIRELESS : M.Val ltac:(libc.unix.c_ushort) :=
        M.run (M.alloc ((Integer.of_Z 11) : u16.t)).
      
      Definition IFLA_PROTINFO : M.Val ltac:(libc.unix.c_ushort) :=
        M.run (M.alloc ((Integer.of_Z 12) : u16.t)).
      
      Definition IFLA_TXQLEN : M.Val ltac:(libc.unix.c_ushort) :=
        M.run (M.alloc ((Integer.of_Z 13) : u16.t)).
      
      Definition IFLA_MAP : M.Val ltac:(libc.unix.c_ushort) :=
        M.run (M.alloc ((Integer.of_Z 14) : u16.t)).
      
      Definition IFLA_WEIGHT : M.Val ltac:(libc.unix.c_ushort) :=
        M.run (M.alloc ((Integer.of_Z 15) : u16.t)).
      
      Definition IFLA_OPERSTATE : M.Val ltac:(libc.unix.c_ushort) :=
        M.run (M.alloc ((Integer.of_Z 16) : u16.t)).
      
      Definition IFLA_LINKMODE : M.Val ltac:(libc.unix.c_ushort) :=
        M.run (M.alloc ((Integer.of_Z 17) : u16.t)).
      
      Definition IFLA_LINKINFO : M.Val ltac:(libc.unix.c_ushort) :=
        M.run (M.alloc ((Integer.of_Z 18) : u16.t)).
      
      Definition IFLA_NET_NS_PID : M.Val ltac:(libc.unix.c_ushort) :=
        M.run (M.alloc ((Integer.of_Z 19) : u16.t)).
      
      Definition IFLA_IFALIAS : M.Val ltac:(libc.unix.c_ushort) :=
        M.run (M.alloc ((Integer.of_Z 20) : u16.t)).
      
      Definition IFLA_NUM_VF : M.Val ltac:(libc.unix.c_ushort) :=
        M.run (M.alloc ((Integer.of_Z 21) : u16.t)).
      
      Definition IFLA_VFINFO_LIST : M.Val ltac:(libc.unix.c_ushort) :=
        M.run (M.alloc ((Integer.of_Z 22) : u16.t)).
      
      Definition IFLA_STATS64 : M.Val ltac:(libc.unix.c_ushort) :=
        M.run (M.alloc ((Integer.of_Z 23) : u16.t)).
      
      Definition IFLA_VF_PORTS : M.Val ltac:(libc.unix.c_ushort) :=
        M.run (M.alloc ((Integer.of_Z 24) : u16.t)).
      
      Definition IFLA_PORT_SELF : M.Val ltac:(libc.unix.c_ushort) :=
        M.run (M.alloc ((Integer.of_Z 25) : u16.t)).
      
      Definition IFLA_AF_SPEC : M.Val ltac:(libc.unix.c_ushort) :=
        M.run (M.alloc ((Integer.of_Z 26) : u16.t)).
      
      Definition IFLA_GROUP : M.Val ltac:(libc.unix.c_ushort) :=
        M.run (M.alloc ((Integer.of_Z 27) : u16.t)).
      
      Definition IFLA_NET_NS_FD : M.Val ltac:(libc.unix.c_ushort) :=
        M.run (M.alloc ((Integer.of_Z 28) : u16.t)).
      
      Definition IFLA_EXT_MASK : M.Val ltac:(libc.unix.c_ushort) :=
        M.run (M.alloc ((Integer.of_Z 29) : u16.t)).
      
      Definition IFLA_PROMISCUITY : M.Val ltac:(libc.unix.c_ushort) :=
        M.run (M.alloc ((Integer.of_Z 30) : u16.t)).
      
      Definition IFLA_NUM_TX_QUEUES : M.Val ltac:(libc.unix.c_ushort) :=
        M.run (M.alloc ((Integer.of_Z 31) : u16.t)).
      
      Definition IFLA_NUM_RX_QUEUES : M.Val ltac:(libc.unix.c_ushort) :=
        M.run (M.alloc ((Integer.of_Z 32) : u16.t)).
      
      Definition IFLA_CARRIER : M.Val ltac:(libc.unix.c_ushort) :=
        M.run (M.alloc ((Integer.of_Z 33) : u16.t)).
      
      Definition IFLA_PHYS_PORT_ID : M.Val ltac:(libc.unix.c_ushort) :=
        M.run (M.alloc ((Integer.of_Z 34) : u16.t)).
      
      Definition IFLA_CARRIER_CHANGES : M.Val ltac:(libc.unix.c_ushort) :=
        M.run (M.alloc ((Integer.of_Z 35) : u16.t)).
      
      Definition IFLA_PHYS_SWITCH_ID : M.Val ltac:(libc.unix.c_ushort) :=
        M.run (M.alloc ((Integer.of_Z 36) : u16.t)).
      
      Definition IFLA_LINK_NETNSID : M.Val ltac:(libc.unix.c_ushort) :=
        M.run (M.alloc ((Integer.of_Z 37) : u16.t)).
      
      Definition IFLA_PHYS_PORT_NAME : M.Val ltac:(libc.unix.c_ushort) :=
        M.run (M.alloc ((Integer.of_Z 38) : u16.t)).
      
      Definition IFLA_PROTO_DOWN : M.Val ltac:(libc.unix.c_ushort) :=
        M.run (M.alloc ((Integer.of_Z 39) : u16.t)).
      
      Definition IFLA_GSO_MAX_SEGS : M.Val ltac:(libc.unix.c_ushort) :=
        M.run (M.alloc ((Integer.of_Z 40) : u16.t)).
      
      Definition IFLA_GSO_MAX_SIZE : M.Val ltac:(libc.unix.c_ushort) :=
        M.run (M.alloc ((Integer.of_Z 41) : u16.t)).
      
      Definition IFLA_PAD : M.Val ltac:(libc.unix.c_ushort) :=
        M.run (M.alloc ((Integer.of_Z 42) : u16.t)).
      
      Definition IFLA_XDP : M.Val ltac:(libc.unix.c_ushort) :=
        M.run (M.alloc ((Integer.of_Z 43) : u16.t)).
      
      Definition IFLA_EVENT : M.Val ltac:(libc.unix.c_ushort) :=
        M.run (M.alloc ((Integer.of_Z 44) : u16.t)).
      
      Definition IFLA_NEW_NETNSID : M.Val ltac:(libc.unix.c_ushort) :=
        M.run (M.alloc ((Integer.of_Z 45) : u16.t)).
      
      Definition IFLA_IF_NETNSID : M.Val ltac:(libc.unix.c_ushort) :=
        M.run (M.alloc ((Integer.of_Z 46) : u16.t)).
      
      Definition IFLA_TARGET_NETNSID : M.Val ltac:(libc.unix.c_ushort) :=
        M.run (M.pure libc.unix.linux_like.linux.IFLA_IF_NETNSID).
      
      Definition IFLA_CARRIER_UP_COUNT : M.Val ltac:(libc.unix.c_ushort) :=
        M.run (M.alloc ((Integer.of_Z 47) : u16.t)).
      
      Definition IFLA_CARRIER_DOWN_COUNT : M.Val ltac:(libc.unix.c_ushort) :=
        M.run (M.alloc ((Integer.of_Z 48) : u16.t)).
      
      Definition IFLA_NEW_IFINDEX : M.Val ltac:(libc.unix.c_ushort) :=
        M.run (M.alloc ((Integer.of_Z 49) : u16.t)).
      
      Definition IFLA_MIN_MTU : M.Val ltac:(libc.unix.c_ushort) :=
        M.run (M.alloc ((Integer.of_Z 50) : u16.t)).
      
      Definition IFLA_MAX_MTU : M.Val ltac:(libc.unix.c_ushort) :=
        M.run (M.alloc ((Integer.of_Z 51) : u16.t)).
      
      Definition IFLA_PROP_LIST : M.Val ltac:(libc.unix.c_ushort) :=
        M.run (M.alloc ((Integer.of_Z 52) : u16.t)).
      
      Definition IFLA_ALT_IFNAME : M.Val ltac:(libc.unix.c_ushort) :=
        M.run (M.alloc ((Integer.of_Z 53) : u16.t)).
      
      Definition IFLA_PERM_ADDRESS : M.Val ltac:(libc.unix.c_ushort) :=
        M.run (M.alloc ((Integer.of_Z 54) : u16.t)).
      
      Definition IFLA_PROTO_DOWN_REASON : M.Val ltac:(libc.unix.c_ushort) :=
        M.run (M.alloc ((Integer.of_Z 55) : u16.t)).
      
      Definition IFLA_PARENT_DEV_NAME : M.Val ltac:(libc.unix.c_ushort) :=
        M.run (M.alloc ((Integer.of_Z 56) : u16.t)).
      
      Definition IFLA_PARENT_DEV_BUS_NAME : M.Val ltac:(libc.unix.c_ushort) :=
        M.run (M.alloc ((Integer.of_Z 57) : u16.t)).
      
      Definition IFLA_GRO_MAX_SIZE : M.Val ltac:(libc.unix.c_ushort) :=
        M.run (M.alloc ((Integer.of_Z 58) : u16.t)).
      
      Definition IFLA_TSO_MAX_SIZE : M.Val ltac:(libc.unix.c_ushort) :=
        M.run (M.alloc ((Integer.of_Z 59) : u16.t)).
      
      Definition IFLA_TSO_MAX_SEGS : M.Val ltac:(libc.unix.c_ushort) :=
        M.run (M.alloc ((Integer.of_Z 60) : u16.t)).
      
      Definition IFLA_ALLMULTI : M.Val ltac:(libc.unix.c_ushort) :=
        M.run (M.alloc ((Integer.of_Z 61) : u16.t)).
      
      Definition IFLA_INFO_UNSPEC : M.Val ltac:(libc.unix.c_ushort) :=
        M.run (M.alloc ((Integer.of_Z 0) : u16.t)).
      
      Definition IFLA_INFO_KIND : M.Val ltac:(libc.unix.c_ushort) :=
        M.run (M.alloc ((Integer.of_Z 1) : u16.t)).
      
      Definition IFLA_INFO_DATA : M.Val ltac:(libc.unix.c_ushort) :=
        M.run (M.alloc ((Integer.of_Z 2) : u16.t)).
      
      Definition IFLA_INFO_XSTATS : M.Val ltac:(libc.unix.c_ushort) :=
        M.run (M.alloc ((Integer.of_Z 3) : u16.t)).
      
      Definition IFLA_INFO_SLAVE_KIND : M.Val ltac:(libc.unix.c_ushort) :=
        M.run (M.alloc ((Integer.of_Z 4) : u16.t)).
      
      Definition IFLA_INFO_SLAVE_DATA : M.Val ltac:(libc.unix.c_ushort) :=
        M.run (M.alloc ((Integer.of_Z 5) : u16.t)).
      
      Definition IFF_TUN : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 1) : i32.t)).
      
      Definition IFF_TAP : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 2) : i32.t)).
      
      Definition IFF_NAPI : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 16) : i32.t)).
      
      Definition IFF_NAPI_FRAGS : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 32) : i32.t)).
      
      Definition IFF_NO_CARRIER : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 64) : i32.t)).
      
      Definition IFF_NO_PI : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 4096) : i32.t)).
      
      Definition TUN_READQ_SIZE : M.Val ltac:(libc.unix.c_short) :=
        M.run (M.alloc ((Integer.of_Z 500) : i16.t)).
      
      Definition TUN_TUN_DEV : M.Val ltac:(libc.unix.c_short) :=
        M.run
          (let* α0 : i32.t := M.read libc.unix.linux_like.linux.IFF_TUN in
          M.alloc (rust_cast α0)).
      
      Definition TUN_TAP_DEV : M.Val ltac:(libc.unix.c_short) :=
        M.run
          (let* α0 : i32.t := M.read libc.unix.linux_like.linux.IFF_TAP in
          M.alloc (rust_cast α0)).
      
      Definition TUN_TYPE_MASK : M.Val ltac:(libc.unix.c_short) :=
        M.run (M.alloc ((Integer.of_Z 15) : i16.t)).
      
      Definition IFF_ONE_QUEUE : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 8192) : i32.t)).
      
      Definition IFF_VNET_HDR : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 16384) : i32.t)).
      
      Definition IFF_TUN_EXCL : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 32768) : i32.t)).
      
      Definition IFF_MULTI_QUEUE : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 256) : i32.t)).
      
      Definition IFF_ATTACH_QUEUE : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 512) : i32.t)).
      
      Definition IFF_DETACH_QUEUE : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 1024) : i32.t)).
      
      Definition IFF_PERSIST : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 2048) : i32.t)).
      
      Definition IFF_NOFILTER : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 4096) : i32.t)).
      
      Definition TUN_TX_TIMESTAMP : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 1) : i32.t)).
      
      Definition TUN_F_CSUM : M.Val ltac:(libc.unix.c_uint) :=
        M.run (M.alloc ((Integer.of_Z 1) : u32.t)).
      
      Definition TUN_F_TSO4 : M.Val ltac:(libc.unix.c_uint) :=
        M.run (M.alloc ((Integer.of_Z 2) : u32.t)).
      
      Definition TUN_F_TSO6 : M.Val ltac:(libc.unix.c_uint) :=
        M.run (M.alloc ((Integer.of_Z 4) : u32.t)).
      
      Definition TUN_F_TSO_ECN : M.Val ltac:(libc.unix.c_uint) :=
        M.run (M.alloc ((Integer.of_Z 8) : u32.t)).
      
      Definition TUN_F_UFO : M.Val ltac:(libc.unix.c_uint) :=
        M.run (M.alloc ((Integer.of_Z 16) : u32.t)).
      
      Definition TUN_F_USO4 : M.Val ltac:(libc.unix.c_uint) :=
        M.run (M.alloc ((Integer.of_Z 32) : u32.t)).
      
      Definition TUN_F_USO6 : M.Val ltac:(libc.unix.c_uint) :=
        M.run (M.alloc ((Integer.of_Z 64) : u32.t)).
      
      Definition TUN_PKT_STRIP : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 1) : i32.t)).
      
      Definition TUN_FLT_ALLMULTI : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 1) : i32.t)).
      
      Definition SEEK_DATA : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 3) : i32.t)).
      
      Definition SEEK_HOLE : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 4) : i32.t)).
      
      Definition ST_RDONLY
          :
            M.Val
              ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_ulong) :=
        M.run (M.alloc ((Integer.of_Z 1) : u64.t)).
      
      Definition ST_NOSUID
          :
            M.Val
              ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_ulong) :=
        M.run (M.alloc ((Integer.of_Z 2) : u64.t)).
      
      Definition ST_NODEV
          :
            M.Val
              ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_ulong) :=
        M.run (M.alloc ((Integer.of_Z 4) : u64.t)).
      
      Definition ST_NOEXEC
          :
            M.Val
              ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_ulong) :=
        M.run (M.alloc ((Integer.of_Z 8) : u64.t)).
      
      Definition ST_SYNCHRONOUS
          :
            M.Val
              ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_ulong) :=
        M.run (M.alloc ((Integer.of_Z 16) : u64.t)).
      
      Definition ST_MANDLOCK
          :
            M.Val
              ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_ulong) :=
        M.run (M.alloc ((Integer.of_Z 64) : u64.t)).
      
      Definition ST_WRITE
          :
            M.Val
              ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_ulong) :=
        M.run (M.alloc ((Integer.of_Z 128) : u64.t)).
      
      Definition ST_APPEND
          :
            M.Val
              ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_ulong) :=
        M.run (M.alloc ((Integer.of_Z 256) : u64.t)).
      
      Definition ST_IMMUTABLE
          :
            M.Val
              ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_ulong) :=
        M.run (M.alloc ((Integer.of_Z 512) : u64.t)).
      
      Definition ST_NOATIME
          :
            M.Val
              ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_ulong) :=
        M.run (M.alloc ((Integer.of_Z 1024) : u64.t)).
      
      Definition ST_NODIRATIME
          :
            M.Val
              ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_ulong) :=
        M.run (M.alloc ((Integer.of_Z 2048) : u64.t)).
      
      Definition RTLD_NEXT : M.Val (mut_ref core.ffi.c_void.t) :=
        M.run (M.alloc (rust_cast ((Integer.of_Z (-1)) : i64.t))).
      
      Definition RTLD_DEFAULT : M.Val (mut_ref core.ffi.c_void.t) :=
        M.run (M.alloc (rust_cast ((Integer.of_Z 0) : i64.t))).
      
      Definition RTLD_NODELETE : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 4096) : i32.t)).
      
      Definition RTLD_NOW : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 2) : i32.t)).
      
      Definition AT_EACCESS : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 512) : i32.t)).
      
      Definition MPOL_DEFAULT : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 0) : i32.t)).
      
      Definition MPOL_PREFERRED : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 1) : i32.t)).
      
      Definition MPOL_BIND : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 2) : i32.t)).
      
      Definition MPOL_INTERLEAVE : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 3) : i32.t)).
      
      Definition MPOL_LOCAL : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 4) : i32.t)).
      
      Definition MPOL_F_NUMA_BALANCING : M.Val ltac:(libc.unix.c_int) :=
        M.run
          (let* α0 : i32.t :=
            BinOp.Panic.shl
              ((Integer.of_Z 1) : i32.t)
              ((Integer.of_Z 13) : i32.t) in
          M.alloc α0).
      
      Definition MPOL_F_RELATIVE_NODES : M.Val ltac:(libc.unix.c_int) :=
        M.run
          (let* α0 : i32.t :=
            BinOp.Panic.shl
              ((Integer.of_Z 1) : i32.t)
              ((Integer.of_Z 14) : i32.t) in
          M.alloc α0).
      
      Definition MPOL_F_STATIC_NODES : M.Val ltac:(libc.unix.c_int) :=
        M.run
          (let* α0 : i32.t :=
            BinOp.Panic.shl
              ((Integer.of_Z 1) : i32.t)
              ((Integer.of_Z 15) : i32.t) in
          M.alloc α0).
      
      Definition MEMBARRIER_CMD_QUERY : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 0) : i32.t)).
      
      Definition MEMBARRIER_CMD_GLOBAL : M.Val ltac:(libc.unix.c_int) :=
        M.run
          (let* α0 : i32.t :=
            BinOp.Panic.shl
              ((Integer.of_Z 1) : i32.t)
              ((Integer.of_Z 0) : i32.t) in
          M.alloc α0).
      
      Definition MEMBARRIER_CMD_GLOBAL_EXPEDITED
          : M.Val ltac:(libc.unix.c_int) :=
        M.run
          (let* α0 : i32.t :=
            BinOp.Panic.shl
              ((Integer.of_Z 1) : i32.t)
              ((Integer.of_Z 1) : i32.t) in
          M.alloc α0).
      
      Definition MEMBARRIER_CMD_REGISTER_GLOBAL_EXPEDITED
          : M.Val ltac:(libc.unix.c_int) :=
        M.run
          (let* α0 : i32.t :=
            BinOp.Panic.shl
              ((Integer.of_Z 1) : i32.t)
              ((Integer.of_Z 2) : i32.t) in
          M.alloc α0).
      
      Definition MEMBARRIER_CMD_PRIVATE_EXPEDITED
          : M.Val ltac:(libc.unix.c_int) :=
        M.run
          (let* α0 : i32.t :=
            BinOp.Panic.shl
              ((Integer.of_Z 1) : i32.t)
              ((Integer.of_Z 3) : i32.t) in
          M.alloc α0).
      
      Definition MEMBARRIER_CMD_REGISTER_PRIVATE_EXPEDITED
          : M.Val ltac:(libc.unix.c_int) :=
        M.run
          (let* α0 : i32.t :=
            BinOp.Panic.shl
              ((Integer.of_Z 1) : i32.t)
              ((Integer.of_Z 4) : i32.t) in
          M.alloc α0).
      
      Definition MEMBARRIER_CMD_PRIVATE_EXPEDITED_SYNC_CORE
          : M.Val ltac:(libc.unix.c_int) :=
        M.run
          (let* α0 : i32.t :=
            BinOp.Panic.shl
              ((Integer.of_Z 1) : i32.t)
              ((Integer.of_Z 5) : i32.t) in
          M.alloc α0).
      
      Definition MEMBARRIER_CMD_REGISTER_PRIVATE_EXPEDITED_SYNC_CORE
          : M.Val ltac:(libc.unix.c_int) :=
        M.run
          (let* α0 : i32.t :=
            BinOp.Panic.shl
              ((Integer.of_Z 1) : i32.t)
              ((Integer.of_Z 6) : i32.t) in
          M.alloc α0).
      
      Definition MEMBARRIER_CMD_PRIVATE_EXPEDITED_RSEQ
          : M.Val ltac:(libc.unix.c_int) :=
        M.run
          (let* α0 : i32.t :=
            BinOp.Panic.shl
              ((Integer.of_Z 1) : i32.t)
              ((Integer.of_Z 7) : i32.t) in
          M.alloc α0).
      
      Definition MEMBARRIER_CMD_REGISTER_PRIVATE_EXPEDITED_RSEQ
          : M.Val ltac:(libc.unix.c_int) :=
        M.run
          (let* α0 : i32.t :=
            BinOp.Panic.shl
              ((Integer.of_Z 1) : i32.t)
              ((Integer.of_Z 8) : i32.t) in
          M.alloc α0).
      
      Definition PTHREAD_MUTEX_INITIALIZER
          : M.Val libc.unix.linux_like.linux.pthread_mutex_t.t :=
        M.run
          (M.alloc
            {|
              libc.unix.linux_like.linux.pthread_mutex_t.size :=
                repeat ((Integer.of_Z 0) : u8.t) 40;
            |}).
      
      Definition PTHREAD_COND_INITIALIZER
          : M.Val libc.unix.linux_like.linux.pthread_cond_t.t :=
        M.run
          (M.alloc
            {|
              libc.unix.linux_like.linux.pthread_cond_t.size :=
                repeat ((Integer.of_Z 0) : u8.t) 48;
            |}).
      
      Definition PTHREAD_RWLOCK_INITIALIZER
          : M.Val libc.unix.linux_like.linux.pthread_rwlock_t.t :=
        M.run
          (M.alloc
            {|
              libc.unix.linux_like.linux.pthread_rwlock_t.size :=
                repeat ((Integer.of_Z 0) : u8.t) 56;
            |}).
      
      Definition PTHREAD_ONCE_INIT
          : M.Val ltac:(libc.unix.linux_like.linux.pthread_once_t) :=
        M.run (M.alloc ((Integer.of_Z 0) : i32.t)).
      
      Definition PTHREAD_MUTEX_NORMAL : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 0) : i32.t)).
      
      Definition PTHREAD_MUTEX_RECURSIVE : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 1) : i32.t)).
      
      Definition PTHREAD_MUTEX_ERRORCHECK : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 2) : i32.t)).
      
      Definition PTHREAD_MUTEX_DEFAULT : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.pure libc.unix.linux_like.linux.PTHREAD_MUTEX_NORMAL).
      
      Definition PTHREAD_MUTEX_STALLED : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 0) : i32.t)).
      
      Definition PTHREAD_MUTEX_ROBUST : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 1) : i32.t)).
      
      Definition PTHREAD_PRIO_NONE : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 0) : i32.t)).
      
      Definition PTHREAD_PRIO_INHERIT : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 1) : i32.t)).
      
      Definition PTHREAD_PRIO_PROTECT : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 2) : i32.t)).
      
      Definition PTHREAD_PROCESS_PRIVATE : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 0) : i32.t)).
      
      Definition PTHREAD_PROCESS_SHARED : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 1) : i32.t)).
      
      Definition PTHREAD_INHERIT_SCHED : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 0) : i32.t)).
      
      Definition PTHREAD_EXPLICIT_SCHED : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 1) : i32.t)).
      
      Definition __SIZEOF_PTHREAD_COND_T : M.Val usize.t :=
        M.run (M.pure "thir failed to compile: Any { .. }").
      
      Definition RENAME_NOREPLACE : M.Val ltac:(libc.unix.c_uint) :=
        M.run (M.alloc ((Integer.of_Z 1) : u32.t)).
      
      Definition RENAME_EXCHANGE : M.Val ltac:(libc.unix.c_uint) :=
        M.run (M.alloc ((Integer.of_Z 2) : u32.t)).
      
      Definition RENAME_WHITEOUT : M.Val ltac:(libc.unix.c_uint) :=
        M.run (M.alloc ((Integer.of_Z 4) : u32.t)).
      
      Definition IPPROTO_MAX : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 256) : i32.t)).
      
      Definition IPC_PRIVATE : M.Val ltac:(libc.unix.linux_like.key_t) :=
        M.run (M.alloc ((Integer.of_Z 0) : i32.t)).
      
      Definition IPC_CREAT : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 512) : i32.t)).
      
      Definition IPC_EXCL : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 1024) : i32.t)).
      
      Definition IPC_NOWAIT : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 2048) : i32.t)).
      
      Definition IPC_RMID : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 0) : i32.t)).
      
      Definition IPC_SET : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 1) : i32.t)).
      
      Definition IPC_STAT : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 2) : i32.t)).
      
      Definition IPC_INFO : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 3) : i32.t)).
      
      Definition MSG_STAT : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 11) : i32.t)).
      
      Definition MSG_INFO : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 12) : i32.t)).
      
      Definition MSG_NOTIFICATION : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 32768) : i32.t)).
      
      Definition MSG_NOERROR : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 4096) : i32.t)).
      
      Definition MSG_EXCEPT : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 8192) : i32.t)).
      
      Definition MSG_ZEROCOPY : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 67108864) : i32.t)).
      
      Definition SHM_R : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 256) : i32.t)).
      
      Definition SHM_W : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 128) : i32.t)).
      
      Definition SHM_RDONLY : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 4096) : i32.t)).
      
      Definition SHM_RND : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 8192) : i32.t)).
      
      Definition SHM_REMAP : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 16384) : i32.t)).
      
      Definition SHM_LOCK : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 11) : i32.t)).
      
      Definition SHM_UNLOCK : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 12) : i32.t)).
      
      Definition SHM_HUGETLB : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 2048) : i32.t)).
      
      Definition SHM_NORESERVE : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 4096) : i32.t)).
      
      Definition QFMT_VFS_OLD : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 1) : i32.t)).
      
      Definition QFMT_VFS_V0 : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 2) : i32.t)).
      
      Definition QFMT_VFS_V1 : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 4) : i32.t)).
      
      Definition EFD_SEMAPHORE : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 1) : i32.t)).
      
      Definition LOG_NFACILITIES : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 24) : i32.t)).
      
      Definition SEM_FAILED
          : M.Val (mut_ref libc.unix.linux_like.linux.gnu.align.sem_t.t) :=
        M.run (M.alloc (rust_cast ((Integer.of_Z 0) : usize.t))).
      
      Definition RB_AUTOBOOT : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc (rust_cast ((Integer.of_Z 19088743) : u32.t))).
      
      Definition RB_HALT_SYSTEM : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc (rust_cast ((Integer.of_Z 3454992675) : u32.t))).
      
      Definition RB_ENABLE_CAD : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc (rust_cast ((Integer.of_Z 2309737967) : u32.t))).
      
      Definition RB_DISABLE_CAD : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc (rust_cast ((Integer.of_Z 0) : u32.t))).
      
      Definition RB_POWER_OFF : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc (rust_cast ((Integer.of_Z 1126301404) : u32.t))).
      
      Definition RB_SW_SUSPEND : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc (rust_cast ((Integer.of_Z 3489725666) : u32.t))).
      
      Definition RB_KEXEC : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc (rust_cast ((Integer.of_Z 1163412803) : u32.t))).
      
      Definition AI_PASSIVE : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 1) : i32.t)).
      
      Definition AI_CANONNAME : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 2) : i32.t)).
      
      Definition AI_NUMERICHOST : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 4) : i32.t)).
      
      Definition AI_V4MAPPED : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 8) : i32.t)).
      
      Definition AI_ALL : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 16) : i32.t)).
      
      Definition AI_ADDRCONFIG : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 32) : i32.t)).
      
      Definition AI_NUMERICSERV : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 1024) : i32.t)).
      
      Definition EAI_BADFLAGS : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z (-1)) : i32.t)).
      
      Definition EAI_NONAME : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z (-2)) : i32.t)).
      
      Definition EAI_AGAIN : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z (-3)) : i32.t)).
      
      Definition EAI_FAIL : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z (-4)) : i32.t)).
      
      Definition EAI_NODATA : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z (-5)) : i32.t)).
      
      Definition EAI_FAMILY : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z (-6)) : i32.t)).
      
      Definition EAI_SOCKTYPE : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z (-7)) : i32.t)).
      
      Definition EAI_SERVICE : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z (-8)) : i32.t)).
      
      Definition EAI_MEMORY : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z (-10)) : i32.t)).
      
      Definition EAI_SYSTEM : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z (-11)) : i32.t)).
      
      Definition EAI_OVERFLOW : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z (-12)) : i32.t)).
      
      Definition NI_NUMERICHOST : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 1) : i32.t)).
      
      Definition NI_NUMERICSERV : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 2) : i32.t)).
      
      Definition NI_NOFQDN : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 4) : i32.t)).
      
      Definition NI_NAMEREQD : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 8) : i32.t)).
      
      Definition NI_DGRAM : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 16) : i32.t)).
      
      Definition NI_IDN : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 32) : i32.t)).
      
      Definition SYNC_FILE_RANGE_WAIT_BEFORE : M.Val ltac:(libc.unix.c_uint) :=
        M.run (M.alloc ((Integer.of_Z 1) : u32.t)).
      
      Definition SYNC_FILE_RANGE_WRITE : M.Val ltac:(libc.unix.c_uint) :=
        M.run (M.alloc ((Integer.of_Z 2) : u32.t)).
      
      Definition SYNC_FILE_RANGE_WAIT_AFTER : M.Val ltac:(libc.unix.c_uint) :=
        M.run (M.alloc ((Integer.of_Z 4) : u32.t)).
      
      Definition AIO_CANCELED : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 0) : i32.t)).
      
      Definition AIO_NOTCANCELED : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 1) : i32.t)).
      
      Definition AIO_ALLDONE : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 2) : i32.t)).
      
      Definition LIO_READ : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 0) : i32.t)).
      
      Definition LIO_WRITE : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 1) : i32.t)).
      
      Definition LIO_NOP : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 2) : i32.t)).
      
      Definition LIO_WAIT : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 0) : i32.t)).
      
      Definition LIO_NOWAIT : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 1) : i32.t)).
      
      Definition RUSAGE_THREAD : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 1) : i32.t)).
      
      Definition MSG_COPY : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 16384) : i32.t)).
      
      Definition SHM_EXEC : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 32768) : i32.t)).
      
      Definition IPV6_MULTICAST_ALL : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 29) : i32.t)).
      
      Definition IPV6_ROUTER_ALERT_ISOLATE : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 30) : i32.t)).
      
      Definition PACKET_MR_UNICAST : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 3) : i32.t)).
      
      Definition PTRACE_EVENT_STOP : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 128) : i32.t)).
      
      Definition UDP_SEGMENT : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 103) : i32.t)).
      
      Definition UDP_GRO : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 104) : i32.t)).
      
      Definition MREMAP_MAYMOVE : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 1) : i32.t)).
      
      Definition MREMAP_FIXED : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 2) : i32.t)).
      
      Definition MREMAP_DONTUNMAP : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 4) : i32.t)).
      
      Definition PR_SET_PDEATHSIG : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 1) : i32.t)).
      
      Definition PR_GET_PDEATHSIG : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 2) : i32.t)).
      
      Definition PR_GET_DUMPABLE : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 3) : i32.t)).
      
      Definition PR_SET_DUMPABLE : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 4) : i32.t)).
      
      Definition PR_GET_UNALIGN : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 5) : i32.t)).
      
      Definition PR_SET_UNALIGN : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 6) : i32.t)).
      
      Definition PR_UNALIGN_NOPRINT : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 1) : i32.t)).
      
      Definition PR_UNALIGN_SIGBUS : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 2) : i32.t)).
      
      Definition PR_GET_KEEPCAPS : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 7) : i32.t)).
      
      Definition PR_SET_KEEPCAPS : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 8) : i32.t)).
      
      Definition PR_GET_FPEMU : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 9) : i32.t)).
      
      Definition PR_SET_FPEMU : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 10) : i32.t)).
      
      Definition PR_FPEMU_NOPRINT : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 1) : i32.t)).
      
      Definition PR_FPEMU_SIGFPE : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 2) : i32.t)).
      
      Definition PR_GET_FPEXC : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 11) : i32.t)).
      
      Definition PR_SET_FPEXC : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 12) : i32.t)).
      
      Definition PR_FP_EXC_SW_ENABLE : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 128) : i32.t)).
      
      Definition PR_FP_EXC_DIV : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 65536) : i32.t)).
      
      Definition PR_FP_EXC_OVF : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 131072) : i32.t)).
      
      Definition PR_FP_EXC_UND : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 262144) : i32.t)).
      
      Definition PR_FP_EXC_RES : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 524288) : i32.t)).
      
      Definition PR_FP_EXC_INV : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 1048576) : i32.t)).
      
      Definition PR_FP_EXC_DISABLED : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 0) : i32.t)).
      
      Definition PR_FP_EXC_NONRECOV : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 1) : i32.t)).
      
      Definition PR_FP_EXC_ASYNC : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 2) : i32.t)).
      
      Definition PR_FP_EXC_PRECISE : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 3) : i32.t)).
      
      Definition PR_GET_TIMING : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 13) : i32.t)).
      
      Definition PR_SET_TIMING : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 14) : i32.t)).
      
      Definition PR_TIMING_STATISTICAL : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 0) : i32.t)).
      
      Definition PR_TIMING_TIMESTAMP : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 1) : i32.t)).
      
      Definition PR_SET_NAME : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 15) : i32.t)).
      
      Definition PR_GET_NAME : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 16) : i32.t)).
      
      Definition PR_GET_ENDIAN : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 19) : i32.t)).
      
      Definition PR_SET_ENDIAN : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 20) : i32.t)).
      
      Definition PR_ENDIAN_BIG : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 0) : i32.t)).
      
      Definition PR_ENDIAN_LITTLE : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 1) : i32.t)).
      
      Definition PR_ENDIAN_PPC_LITTLE : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 2) : i32.t)).
      
      Definition PR_GET_SECCOMP : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 21) : i32.t)).
      
      Definition PR_SET_SECCOMP : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 22) : i32.t)).
      
      Definition PR_CAPBSET_READ : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 23) : i32.t)).
      
      Definition PR_CAPBSET_DROP : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 24) : i32.t)).
      
      Definition PR_GET_TSC : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 25) : i32.t)).
      
      Definition PR_SET_TSC : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 26) : i32.t)).
      
      Definition PR_TSC_ENABLE : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 1) : i32.t)).
      
      Definition PR_TSC_SIGSEGV : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 2) : i32.t)).
      
      Definition PR_GET_SECUREBITS : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 27) : i32.t)).
      
      Definition PR_SET_SECUREBITS : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 28) : i32.t)).
      
      Definition PR_SET_TIMERSLACK : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 29) : i32.t)).
      
      Definition PR_GET_TIMERSLACK : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 30) : i32.t)).
      
      Definition PR_TASK_PERF_EVENTS_DISABLE : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 31) : i32.t)).
      
      Definition PR_TASK_PERF_EVENTS_ENABLE : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 32) : i32.t)).
      
      Definition PR_MCE_KILL : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 33) : i32.t)).
      
      Definition PR_MCE_KILL_CLEAR : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 0) : i32.t)).
      
      Definition PR_MCE_KILL_SET : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 1) : i32.t)).
      
      Definition PR_MCE_KILL_LATE : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 0) : i32.t)).
      
      Definition PR_MCE_KILL_EARLY : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 1) : i32.t)).
      
      Definition PR_MCE_KILL_DEFAULT : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 2) : i32.t)).
      
      Definition PR_MCE_KILL_GET : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 34) : i32.t)).
      
      Definition PR_SET_MM : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 35) : i32.t)).
      
      Definition PR_SET_MM_START_CODE : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 1) : i32.t)).
      
      Definition PR_SET_MM_END_CODE : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 2) : i32.t)).
      
      Definition PR_SET_MM_START_DATA : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 3) : i32.t)).
      
      Definition PR_SET_MM_END_DATA : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 4) : i32.t)).
      
      Definition PR_SET_MM_START_STACK : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 5) : i32.t)).
      
      Definition PR_SET_MM_START_BRK : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 6) : i32.t)).
      
      Definition PR_SET_MM_BRK : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 7) : i32.t)).
      
      Definition PR_SET_MM_ARG_START : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 8) : i32.t)).
      
      Definition PR_SET_MM_ARG_END : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 9) : i32.t)).
      
      Definition PR_SET_MM_ENV_START : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 10) : i32.t)).
      
      Definition PR_SET_MM_ENV_END : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 11) : i32.t)).
      
      Definition PR_SET_MM_AUXV : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 12) : i32.t)).
      
      Definition PR_SET_MM_EXE_FILE : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 13) : i32.t)).
      
      Definition PR_SET_MM_MAP : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 14) : i32.t)).
      
      Definition PR_SET_MM_MAP_SIZE : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 15) : i32.t)).
      
      Definition PR_SET_PTRACER : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 1499557217) : i32.t)).
      
      Definition PR_SET_PTRACER_ANY
          :
            M.Val
              ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_ulong) :=
        M.run (M.alloc ((Integer.of_Z 18446744073709551615) : u64.t)).
      
      Definition PR_SET_CHILD_SUBREAPER : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 36) : i32.t)).
      
      Definition PR_GET_CHILD_SUBREAPER : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 37) : i32.t)).
      
      Definition PR_SET_NO_NEW_PRIVS : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 38) : i32.t)).
      
      Definition PR_GET_NO_NEW_PRIVS : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 39) : i32.t)).
      
      Definition PR_GET_TID_ADDRESS : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 40) : i32.t)).
      
      Definition PR_SET_THP_DISABLE : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 41) : i32.t)).
      
      Definition PR_GET_THP_DISABLE : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 42) : i32.t)).
      
      Definition PR_MPX_ENABLE_MANAGEMENT : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 43) : i32.t)).
      
      Definition PR_MPX_DISABLE_MANAGEMENT : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 44) : i32.t)).
      
      Definition PR_SET_FP_MODE : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 45) : i32.t)).
      
      Definition PR_GET_FP_MODE : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 46) : i32.t)).
      
      Definition PR_FP_MODE_FR : M.Val ltac:(libc.unix.c_int) :=
        M.run
          (let* α0 : i32.t :=
            BinOp.Panic.shl
              ((Integer.of_Z 1) : i32.t)
              ((Integer.of_Z 0) : i32.t) in
          M.alloc α0).
      
      Definition PR_FP_MODE_FRE : M.Val ltac:(libc.unix.c_int) :=
        M.run
          (let* α0 : i32.t :=
            BinOp.Panic.shl
              ((Integer.of_Z 1) : i32.t)
              ((Integer.of_Z 1) : i32.t) in
          M.alloc α0).
      
      Definition PR_CAP_AMBIENT : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 47) : i32.t)).
      
      Definition PR_CAP_AMBIENT_IS_SET : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 1) : i32.t)).
      
      Definition PR_CAP_AMBIENT_RAISE : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 2) : i32.t)).
      
      Definition PR_CAP_AMBIENT_LOWER : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 3) : i32.t)).
      
      Definition PR_CAP_AMBIENT_CLEAR_ALL : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 4) : i32.t)).
      
      Definition PR_SET_VMA : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 1398164801) : i32.t)).
      
      Definition PR_SET_VMA_ANON_NAME : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 0) : i32.t)).
      
      Definition PR_SCHED_CORE : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 62) : i32.t)).
      
      Definition PR_SCHED_CORE_GET : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 0) : i32.t)).
      
      Definition PR_SCHED_CORE_CREATE : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 1) : i32.t)).
      
      Definition PR_SCHED_CORE_SHARE_TO : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 2) : i32.t)).
      
      Definition PR_SCHED_CORE_SHARE_FROM : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 3) : i32.t)).
      
      Definition PR_SCHED_CORE_MAX : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 4) : i32.t)).
      
      Definition PR_SCHED_CORE_SCOPE_THREAD : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 0) : i32.t)).
      
      Definition PR_SCHED_CORE_SCOPE_THREAD_GROUP
          : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 1) : i32.t)).
      
      Definition PR_SCHED_CORE_SCOPE_PROCESS_GROUP
          : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 2) : i32.t)).
      
      Definition GRND_NONBLOCK : M.Val ltac:(libc.unix.c_uint) :=
        M.run (M.alloc ((Integer.of_Z 1) : u32.t)).
      
      Definition GRND_RANDOM : M.Val ltac:(libc.unix.c_uint) :=
        M.run (M.alloc ((Integer.of_Z 2) : u32.t)).
      
      Definition GRND_INSECURE : M.Val ltac:(libc.unix.c_uint) :=
        M.run (M.alloc ((Integer.of_Z 4) : u32.t)).
      
      Definition SECCOMP_MODE_DISABLED : M.Val ltac:(libc.unix.c_uint) :=
        M.run (M.alloc ((Integer.of_Z 0) : u32.t)).
      
      Definition SECCOMP_MODE_STRICT : M.Val ltac:(libc.unix.c_uint) :=
        M.run (M.alloc ((Integer.of_Z 1) : u32.t)).
      
      Definition SECCOMP_MODE_FILTER : M.Val ltac:(libc.unix.c_uint) :=
        M.run (M.alloc ((Integer.of_Z 2) : u32.t)).
      
      Definition SECCOMP_SET_MODE_STRICT : M.Val ltac:(libc.unix.c_uint) :=
        M.run (M.alloc ((Integer.of_Z 0) : u32.t)).
      
      Definition SECCOMP_SET_MODE_FILTER : M.Val ltac:(libc.unix.c_uint) :=
        M.run (M.alloc ((Integer.of_Z 1) : u32.t)).
      
      Definition SECCOMP_GET_ACTION_AVAIL : M.Val ltac:(libc.unix.c_uint) :=
        M.run (M.alloc ((Integer.of_Z 2) : u32.t)).
      
      Definition SECCOMP_GET_NOTIF_SIZES : M.Val ltac:(libc.unix.c_uint) :=
        M.run (M.alloc ((Integer.of_Z 3) : u32.t)).
      
      Definition SECCOMP_FILTER_FLAG_TSYNC
          :
            M.Val
              ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_ulong) :=
        M.run (M.alloc ((Integer.of_Z 1) : u64.t)).
      
      Definition SECCOMP_FILTER_FLAG_LOG
          :
            M.Val
              ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_ulong) :=
        M.run (M.alloc ((Integer.of_Z 2) : u64.t)).
      
      Definition SECCOMP_FILTER_FLAG_SPEC_ALLOW
          :
            M.Val
              ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_ulong) :=
        M.run (M.alloc ((Integer.of_Z 4) : u64.t)).
      
      Definition SECCOMP_FILTER_FLAG_NEW_LISTENER
          :
            M.Val
              ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_ulong) :=
        M.run (M.alloc ((Integer.of_Z 8) : u64.t)).
      
      Definition SECCOMP_FILTER_FLAG_TSYNC_ESRCH
          :
            M.Val
              ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_ulong) :=
        M.run (M.alloc ((Integer.of_Z 16) : u64.t)).
      
      Definition SECCOMP_FILTER_FLAG_WAIT_KILLABLE_RECV
          :
            M.Val
              ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_ulong) :=
        M.run (M.alloc ((Integer.of_Z 32) : u64.t)).
      
      Definition SECCOMP_RET_KILL_PROCESS : M.Val ltac:(libc.unix.c_uint) :=
        M.run (M.alloc ((Integer.of_Z 2147483648) : u32.t)).
      
      Definition SECCOMP_RET_KILL_THREAD : M.Val ltac:(libc.unix.c_uint) :=
        M.run (M.alloc ((Integer.of_Z 0) : u32.t)).
      
      Definition SECCOMP_RET_KILL : M.Val ltac:(libc.unix.c_uint) :=
        M.run (M.pure libc.unix.linux_like.linux.SECCOMP_RET_KILL_THREAD).
      
      Definition SECCOMP_RET_TRAP : M.Val ltac:(libc.unix.c_uint) :=
        M.run (M.alloc ((Integer.of_Z 196608) : u32.t)).
      
      Definition SECCOMP_RET_ERRNO : M.Val ltac:(libc.unix.c_uint) :=
        M.run (M.alloc ((Integer.of_Z 327680) : u32.t)).
      
      Definition SECCOMP_RET_TRACE : M.Val ltac:(libc.unix.c_uint) :=
        M.run (M.alloc ((Integer.of_Z 2146435072) : u32.t)).
      
      Definition SECCOMP_RET_LOG : M.Val ltac:(libc.unix.c_uint) :=
        M.run (M.alloc ((Integer.of_Z 2147221504) : u32.t)).
      
      Definition SECCOMP_RET_ALLOW : M.Val ltac:(libc.unix.c_uint) :=
        M.run (M.alloc ((Integer.of_Z 2147418112) : u32.t)).
      
      Definition SECCOMP_RET_ACTION_FULL : M.Val ltac:(libc.unix.c_uint) :=
        M.run (M.alloc ((Integer.of_Z 4294901760) : u32.t)).
      
      Definition SECCOMP_RET_ACTION : M.Val ltac:(libc.unix.c_uint) :=
        M.run (M.alloc ((Integer.of_Z 2147418112) : u32.t)).
      
      Definition SECCOMP_RET_DATA : M.Val ltac:(libc.unix.c_uint) :=
        M.run (M.alloc ((Integer.of_Z 65535) : u32.t)).
      
      Definition SECCOMP_USER_NOTIF_FLAG_CONTINUE
          :
            M.Val
              ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_ulong) :=
        M.run (M.alloc ((Integer.of_Z 1) : u64.t)).
      
      Definition SECCOMP_ADDFD_FLAG_SETFD
          :
            M.Val
              ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_ulong) :=
        M.run (M.alloc ((Integer.of_Z 1) : u64.t)).
      
      Definition SECCOMP_ADDFD_FLAG_SEND
          :
            M.Val
              ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_ulong) :=
        M.run (M.alloc ((Integer.of_Z 2) : u64.t)).
      
      Definition ITIMER_REAL : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 0) : i32.t)).
      
      Definition ITIMER_VIRTUAL : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 1) : i32.t)).
      
      Definition ITIMER_PROF : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 2) : i32.t)).
      
      Definition TFD_CLOEXEC : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.pure libc.unix.linux_like.linux.gnu.b64.x86_64.O_CLOEXEC).
      
      Definition TFD_NONBLOCK : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.pure libc.unix.linux_like.linux.gnu.b64.x86_64.O_NONBLOCK).
      
      Definition TFD_TIMER_ABSTIME : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 1) : i32.t)).
      
      Definition TFD_TIMER_CANCEL_ON_SET : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 2) : i32.t)).
      
      Definition _POSIX_VDISABLE : M.Val ltac:(libc.unix.cc_t) :=
        M.run (M.alloc ((Integer.of_Z 0) : u8.t)).
      
      Definition FALLOC_FL_KEEP_SIZE : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 1) : i32.t)).
      
      Definition FALLOC_FL_PUNCH_HOLE : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 2) : i32.t)).
      
      Definition FALLOC_FL_COLLAPSE_RANGE : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 8) : i32.t)).
      
      Definition FALLOC_FL_ZERO_RANGE : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 16) : i32.t)).
      
      Definition FALLOC_FL_INSERT_RANGE : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 32) : i32.t)).
      
      Definition FALLOC_FL_UNSHARE_RANGE : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 64) : i32.t)).
      
      Definition ENOATTR : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.pure libc.unix.linux_like.linux.gnu.b64.x86_64.ENODATA).
      
      Definition SO_ORIGINAL_DST : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 80) : i32.t)).
      
      Definition IP_RECVFRAGSIZE : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 25) : i32.t)).
      
      Definition IPV6_FLOWINFO : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 11) : i32.t)).
      
      Definition IPV6_FLOWLABEL_MGR : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 32) : i32.t)).
      
      Definition IPV6_FLOWINFO_SEND : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 33) : i32.t)).
      
      Definition IPV6_RECVFRAGSIZE : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 77) : i32.t)).
      
      Definition IPV6_FREEBIND : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 78) : i32.t)).
      
      Definition IPV6_FLOWINFO_FLOWLABEL : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 1048575) : i32.t)).
      
      Definition IPV6_FLOWINFO_PRIORITY : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 267386880) : i32.t)).
      
      Definition IPV6_RTHDR_LOOSE : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 0) : i32.t)).
      
      Definition IPV6_RTHDR_STRICT : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 1) : i32.t)).
      
      Definition SK_MEMINFO_RMEM_ALLOC : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 0) : i32.t)).
      
      Definition SK_MEMINFO_RCVBUF : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 1) : i32.t)).
      
      Definition SK_MEMINFO_WMEM_ALLOC : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 2) : i32.t)).
      
      Definition SK_MEMINFO_SNDBUF : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 3) : i32.t)).
      
      Definition SK_MEMINFO_FWD_ALLOC : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 4) : i32.t)).
      
      Definition SK_MEMINFO_WMEM_QUEUED : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 5) : i32.t)).
      
      Definition SK_MEMINFO_OPTMEM : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 6) : i32.t)).
      
      Definition SK_MEMINFO_BACKLOG : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 7) : i32.t)).
      
      Definition SK_MEMINFO_DROPS : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 8) : i32.t)).
      
      Definition IUTF8 : M.Val ltac:(libc.unix.linux_like.tcflag_t) :=
        M.run (M.alloc ((Integer.of_Z 16384) : u32.t)).
      
      Definition CMSPAR : M.Val ltac:(libc.unix.linux_like.tcflag_t) :=
        M.run (M.alloc ((Integer.of_Z 1073741824) : u32.t)).
      
      Definition MFD_CLOEXEC : M.Val ltac:(libc.unix.c_uint) :=
        M.run (M.alloc ((Integer.of_Z 1) : u32.t)).
      
      Definition MFD_ALLOW_SEALING : M.Val ltac:(libc.unix.c_uint) :=
        M.run (M.alloc ((Integer.of_Z 2) : u32.t)).
      
      Definition MFD_HUGETLB : M.Val ltac:(libc.unix.c_uint) :=
        M.run (M.alloc ((Integer.of_Z 4) : u32.t)).
      
      Definition MFD_HUGE_64KB : M.Val ltac:(libc.unix.c_uint) :=
        M.run (M.alloc ((Integer.of_Z 1073741824) : u32.t)).
      
      Definition MFD_HUGE_512KB : M.Val ltac:(libc.unix.c_uint) :=
        M.run (M.alloc ((Integer.of_Z 1275068416) : u32.t)).
      
      Definition MFD_HUGE_1MB : M.Val ltac:(libc.unix.c_uint) :=
        M.run (M.alloc ((Integer.of_Z 1342177280) : u32.t)).
      
      Definition MFD_HUGE_2MB : M.Val ltac:(libc.unix.c_uint) :=
        M.run (M.alloc ((Integer.of_Z 1409286144) : u32.t)).
      
      Definition MFD_HUGE_8MB : M.Val ltac:(libc.unix.c_uint) :=
        M.run (M.alloc ((Integer.of_Z 1543503872) : u32.t)).
      
      Definition MFD_HUGE_16MB : M.Val ltac:(libc.unix.c_uint) :=
        M.run (M.alloc ((Integer.of_Z 1610612736) : u32.t)).
      
      Definition MFD_HUGE_32MB : M.Val ltac:(libc.unix.c_uint) :=
        M.run (M.alloc ((Integer.of_Z 1677721600) : u32.t)).
      
      Definition MFD_HUGE_256MB : M.Val ltac:(libc.unix.c_uint) :=
        M.run (M.alloc ((Integer.of_Z 1879048192) : u32.t)).
      
      Definition MFD_HUGE_512MB : M.Val ltac:(libc.unix.c_uint) :=
        M.run (M.alloc ((Integer.of_Z 1946157056) : u32.t)).
      
      Definition MFD_HUGE_1GB : M.Val ltac:(libc.unix.c_uint) :=
        M.run (M.alloc ((Integer.of_Z 2013265920) : u32.t)).
      
      Definition MFD_HUGE_2GB : M.Val ltac:(libc.unix.c_uint) :=
        M.run (M.alloc ((Integer.of_Z 2080374784) : u32.t)).
      
      Definition MFD_HUGE_16GB : M.Val ltac:(libc.unix.c_uint) :=
        M.run (M.alloc ((Integer.of_Z 2281701376) : u32.t)).
      
      Definition MFD_HUGE_MASK : M.Val ltac:(libc.unix.c_uint) :=
        M.run (M.alloc ((Integer.of_Z 63) : u32.t)).
      
      Definition MFD_HUGE_SHIFT : M.Val ltac:(libc.unix.c_uint) :=
        M.run (M.alloc ((Integer.of_Z 26) : u32.t)).
      
      Definition CLOSE_RANGE_UNSHARE : M.Val ltac:(libc.unix.c_uint) :=
        M.run
          (let* α0 : u32.t :=
            BinOp.Panic.shl
              ((Integer.of_Z 1) : u32.t)
              ((Integer.of_Z 1) : i32.t) in
          M.alloc α0).
      
      Definition CLOSE_RANGE_CLOEXEC : M.Val ltac:(libc.unix.c_uint) :=
        M.run
          (let* α0 : u32.t :=
            BinOp.Panic.shl
              ((Integer.of_Z 1) : u32.t)
              ((Integer.of_Z 2) : i32.t) in
          M.alloc α0).
      
      Definition SKF_AD_OFF : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z (-4096)) : i32.t)).
      
      Definition SKF_AD_PROTOCOL : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 0) : i32.t)).
      
      Definition SKF_AD_PKTTYPE : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 4) : i32.t)).
      
      Definition SKF_AD_IFINDEX : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 8) : i32.t)).
      
      Definition SKF_AD_NLATTR : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 12) : i32.t)).
      
      Definition SKF_AD_NLATTR_NEST : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 16) : i32.t)).
      
      Definition SKF_AD_MARK : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 20) : i32.t)).
      
      Definition SKF_AD_QUEUE : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 24) : i32.t)).
      
      Definition SKF_AD_HATYPE : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 28) : i32.t)).
      
      Definition SKF_AD_RXHASH : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 32) : i32.t)).
      
      Definition SKF_AD_CPU : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 36) : i32.t)).
      
      Definition SKF_AD_ALU_XOR_X : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 40) : i32.t)).
      
      Definition SKF_AD_VLAN_TAG : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 44) : i32.t)).
      
      Definition SKF_AD_VLAN_TAG_PRESENT : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 48) : i32.t)).
      
      Definition SKF_AD_PAY_OFFSET : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 52) : i32.t)).
      
      Definition SKF_AD_RANDOM : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 56) : i32.t)).
      
      Definition SKF_AD_VLAN_TPID : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 60) : i32.t)).
      
      Definition SKF_AD_MAX : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 64) : i32.t)).
      
      Definition SKF_NET_OFF : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z (-1048576)) : i32.t)).
      
      Definition SKF_LL_OFF : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z (-2097152)) : i32.t)).
      
      Definition BPF_NET_OFF : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.pure libc.unix.linux_like.linux.SKF_NET_OFF).
      
      Definition BPF_LL_OFF : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.pure libc.unix.linux_like.linux.SKF_LL_OFF).
      
      Definition BPF_MEMWORDS : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 16) : i32.t)).
      
      Definition BPF_MAXINSNS : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 4096) : i32.t)).
      
      Definition BPF_LD : M.Val ltac:(libc.unix.linux_like.linux.__u32) :=
        M.run (M.alloc ((Integer.of_Z 0) : u32.t)).
      
      Definition BPF_LDX : M.Val ltac:(libc.unix.linux_like.linux.__u32) :=
        M.run (M.alloc ((Integer.of_Z 1) : u32.t)).
      
      Definition BPF_ST : M.Val ltac:(libc.unix.linux_like.linux.__u32) :=
        M.run (M.alloc ((Integer.of_Z 2) : u32.t)).
      
      Definition BPF_STX : M.Val ltac:(libc.unix.linux_like.linux.__u32) :=
        M.run (M.alloc ((Integer.of_Z 3) : u32.t)).
      
      Definition BPF_ALU : M.Val ltac:(libc.unix.linux_like.linux.__u32) :=
        M.run (M.alloc ((Integer.of_Z 4) : u32.t)).
      
      Definition BPF_JMP : M.Val ltac:(libc.unix.linux_like.linux.__u32) :=
        M.run (M.alloc ((Integer.of_Z 5) : u32.t)).
      
      Definition BPF_RET : M.Val ltac:(libc.unix.linux_like.linux.__u32) :=
        M.run (M.alloc ((Integer.of_Z 6) : u32.t)).
      
      Definition BPF_MISC : M.Val ltac:(libc.unix.linux_like.linux.__u32) :=
        M.run (M.alloc ((Integer.of_Z 7) : u32.t)).
      
      Definition BPF_W : M.Val ltac:(libc.unix.linux_like.linux.__u32) :=
        M.run (M.alloc ((Integer.of_Z 0) : u32.t)).
      
      Definition BPF_H : M.Val ltac:(libc.unix.linux_like.linux.__u32) :=
        M.run (M.alloc ((Integer.of_Z 8) : u32.t)).
      
      Definition BPF_B : M.Val ltac:(libc.unix.linux_like.linux.__u32) :=
        M.run (M.alloc ((Integer.of_Z 16) : u32.t)).
      
      Definition BPF_IMM : M.Val ltac:(libc.unix.linux_like.linux.__u32) :=
        M.run (M.alloc ((Integer.of_Z 0) : u32.t)).
      
      Definition BPF_ABS : M.Val ltac:(libc.unix.linux_like.linux.__u32) :=
        M.run (M.alloc ((Integer.of_Z 32) : u32.t)).
      
      Definition BPF_IND : M.Val ltac:(libc.unix.linux_like.linux.__u32) :=
        M.run (M.alloc ((Integer.of_Z 64) : u32.t)).
      
      Definition BPF_MEM : M.Val ltac:(libc.unix.linux_like.linux.__u32) :=
        M.run (M.alloc ((Integer.of_Z 96) : u32.t)).
      
      Definition BPF_LEN : M.Val ltac:(libc.unix.linux_like.linux.__u32) :=
        M.run (M.alloc ((Integer.of_Z 128) : u32.t)).
      
      Definition BPF_MSH : M.Val ltac:(libc.unix.linux_like.linux.__u32) :=
        M.run (M.alloc ((Integer.of_Z 160) : u32.t)).
      
      Definition BPF_ADD : M.Val ltac:(libc.unix.linux_like.linux.__u32) :=
        M.run (M.alloc ((Integer.of_Z 0) : u32.t)).
      
      Definition BPF_SUB : M.Val ltac:(libc.unix.linux_like.linux.__u32) :=
        M.run (M.alloc ((Integer.of_Z 16) : u32.t)).
      
      Definition BPF_MUL : M.Val ltac:(libc.unix.linux_like.linux.__u32) :=
        M.run (M.alloc ((Integer.of_Z 32) : u32.t)).
      
      Definition BPF_DIV : M.Val ltac:(libc.unix.linux_like.linux.__u32) :=
        M.run (M.alloc ((Integer.of_Z 48) : u32.t)).
      
      Definition BPF_OR : M.Val ltac:(libc.unix.linux_like.linux.__u32) :=
        M.run (M.alloc ((Integer.of_Z 64) : u32.t)).
      
      Definition BPF_AND : M.Val ltac:(libc.unix.linux_like.linux.__u32) :=
        M.run (M.alloc ((Integer.of_Z 80) : u32.t)).
      
      Definition BPF_LSH : M.Val ltac:(libc.unix.linux_like.linux.__u32) :=
        M.run (M.alloc ((Integer.of_Z 96) : u32.t)).
      
      Definition BPF_RSH : M.Val ltac:(libc.unix.linux_like.linux.__u32) :=
        M.run (M.alloc ((Integer.of_Z 112) : u32.t)).
      
      Definition BPF_NEG : M.Val ltac:(libc.unix.linux_like.linux.__u32) :=
        M.run (M.alloc ((Integer.of_Z 128) : u32.t)).
      
      Definition BPF_MOD : M.Val ltac:(libc.unix.linux_like.linux.__u32) :=
        M.run (M.alloc ((Integer.of_Z 144) : u32.t)).
      
      Definition BPF_XOR : M.Val ltac:(libc.unix.linux_like.linux.__u32) :=
        M.run (M.alloc ((Integer.of_Z 160) : u32.t)).
      
      Definition BPF_JA : M.Val ltac:(libc.unix.linux_like.linux.__u32) :=
        M.run (M.alloc ((Integer.of_Z 0) : u32.t)).
      
      Definition BPF_JEQ : M.Val ltac:(libc.unix.linux_like.linux.__u32) :=
        M.run (M.alloc ((Integer.of_Z 16) : u32.t)).
      
      Definition BPF_JGT : M.Val ltac:(libc.unix.linux_like.linux.__u32) :=
        M.run (M.alloc ((Integer.of_Z 32) : u32.t)).
      
      Definition BPF_JGE : M.Val ltac:(libc.unix.linux_like.linux.__u32) :=
        M.run (M.alloc ((Integer.of_Z 48) : u32.t)).
      
      Definition BPF_JSET : M.Val ltac:(libc.unix.linux_like.linux.__u32) :=
        M.run (M.alloc ((Integer.of_Z 64) : u32.t)).
      
      Definition BPF_K : M.Val ltac:(libc.unix.linux_like.linux.__u32) :=
        M.run (M.alloc ((Integer.of_Z 0) : u32.t)).
      
      Definition BPF_X : M.Val ltac:(libc.unix.linux_like.linux.__u32) :=
        M.run (M.alloc ((Integer.of_Z 8) : u32.t)).
      
      Definition RESOLVE_NO_XDEV
          : M.Val ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.__u64) :=
        M.run (M.alloc ((Integer.of_Z 1) : u64.t)).
      
      Definition RESOLVE_NO_MAGICLINKS
          : M.Val ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.__u64) :=
        M.run (M.alloc ((Integer.of_Z 2) : u64.t)).
      
      Definition RESOLVE_NO_SYMLINKS
          : M.Val ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.__u64) :=
        M.run (M.alloc ((Integer.of_Z 4) : u64.t)).
      
      Definition RESOLVE_BENEATH
          : M.Val ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.__u64) :=
        M.run (M.alloc ((Integer.of_Z 8) : u64.t)).
      
      Definition RESOLVE_IN_ROOT
          : M.Val ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.__u64) :=
        M.run (M.alloc ((Integer.of_Z 16) : u64.t)).
      
      Definition RESOLVE_CACHED
          : M.Val ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.__u64) :=
        M.run (M.alloc ((Integer.of_Z 32) : u64.t)).
      
      Definition ETH_ALEN : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 6) : i32.t)).
      
      Definition ETH_HLEN : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 14) : i32.t)).
      
      Definition ETH_ZLEN : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 60) : i32.t)).
      
      Definition ETH_DATA_LEN : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 1500) : i32.t)).
      
      Definition ETH_FRAME_LEN : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 1514) : i32.t)).
      
      Definition ETH_FCS_LEN : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 4) : i32.t)).
      
      Definition ETH_P_LOOP : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 96) : i32.t)).
      
      Definition ETH_P_PUP : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 512) : i32.t)).
      
      Definition ETH_P_PUPAT : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 513) : i32.t)).
      
      Definition ETH_P_IP : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 2048) : i32.t)).
      
      Definition ETH_P_X25 : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 2053) : i32.t)).
      
      Definition ETH_P_ARP : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 2054) : i32.t)).
      
      Definition ETH_P_BPQ : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 2303) : i32.t)).
      
      Definition ETH_P_IEEEPUP : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 2560) : i32.t)).
      
      Definition ETH_P_IEEEPUPAT : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 2561) : i32.t)).
      
      Definition ETH_P_BATMAN : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 17157) : i32.t)).
      
      Definition ETH_P_DEC : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 24576) : i32.t)).
      
      Definition ETH_P_DNA_DL : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 24577) : i32.t)).
      
      Definition ETH_P_DNA_RC : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 24578) : i32.t)).
      
      Definition ETH_P_DNA_RT : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 24579) : i32.t)).
      
      Definition ETH_P_LAT : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 24580) : i32.t)).
      
      Definition ETH_P_DIAG : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 24581) : i32.t)).
      
      Definition ETH_P_CUST : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 24582) : i32.t)).
      
      Definition ETH_P_SCA : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 24583) : i32.t)).
      
      Definition ETH_P_TEB : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 25944) : i32.t)).
      
      Definition ETH_P_RARP : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 32821) : i32.t)).
      
      Definition ETH_P_ATALK : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 32923) : i32.t)).
      
      Definition ETH_P_AARP : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 33011) : i32.t)).
      
      Definition ETH_P_8021Q : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 33024) : i32.t)).
      
      Definition ETH_P_IPX : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 33079) : i32.t)).
      
      Definition ETH_P_IPV6 : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 34525) : i32.t)).
      
      Definition ETH_P_PAUSE : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 34824) : i32.t)).
      
      Definition ETH_P_SLOW : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 34825) : i32.t)).
      
      Definition ETH_P_WCCP : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 34878) : i32.t)).
      
      Definition ETH_P_MPLS_UC : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 34887) : i32.t)).
      
      Definition ETH_P_MPLS_MC : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 34888) : i32.t)).
      
      Definition ETH_P_ATMMPOA : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 34892) : i32.t)).
      
      Definition ETH_P_PPP_DISC : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 34915) : i32.t)).
      
      Definition ETH_P_PPP_SES : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 34916) : i32.t)).
      
      Definition ETH_P_LINK_CTL : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 34924) : i32.t)).
      
      Definition ETH_P_ATMFATE : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 34948) : i32.t)).
      
      Definition ETH_P_PAE : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 34958) : i32.t)).
      
      Definition ETH_P_AOE : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 34978) : i32.t)).
      
      Definition ETH_P_8021AD : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 34984) : i32.t)).
      
      Definition ETH_P_802_EX1 : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 34997) : i32.t)).
      
      Definition ETH_P_TIPC : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 35018) : i32.t)).
      
      Definition ETH_P_MACSEC : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 35045) : i32.t)).
      
      Definition ETH_P_8021AH : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 35047) : i32.t)).
      
      Definition ETH_P_MVRP : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 35061) : i32.t)).
      
      Definition ETH_P_1588 : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 35063) : i32.t)).
      
      Definition ETH_P_PRP : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 35067) : i32.t)).
      
      Definition ETH_P_FCOE : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 35078) : i32.t)).
      
      Definition ETH_P_TDLS : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 35085) : i32.t)).
      
      Definition ETH_P_FIP : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 35092) : i32.t)).
      
      Definition ETH_P_80221 : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 35095) : i32.t)).
      
      Definition ETH_P_LOOPBACK : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 36864) : i32.t)).
      
      Definition ETH_P_QINQ1 : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 37120) : i32.t)).
      
      Definition ETH_P_QINQ2 : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 37376) : i32.t)).
      
      Definition ETH_P_QINQ3 : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 37632) : i32.t)).
      
      Definition ETH_P_EDSA : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 56026) : i32.t)).
      
      Definition ETH_P_AF_IUCV : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 64507) : i32.t)).
      
      Definition ETH_P_802_3_MIN : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 1536) : i32.t)).
      
      Definition ETH_P_802_3 : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 1) : i32.t)).
      
      Definition ETH_P_AX25 : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 2) : i32.t)).
      
      Definition ETH_P_ALL : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 3) : i32.t)).
      
      Definition ETH_P_802_2 : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 4) : i32.t)).
      
      Definition ETH_P_SNAP : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 5) : i32.t)).
      
      Definition ETH_P_DDCMP : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 6) : i32.t)).
      
      Definition ETH_P_WAN_PPP : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 7) : i32.t)).
      
      Definition ETH_P_PPP_MP : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 8) : i32.t)).
      
      Definition ETH_P_LOCALTALK : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 9) : i32.t)).
      
      Definition ETH_P_CANFD : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 13) : i32.t)).
      
      Definition ETH_P_PPPTALK : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 16) : i32.t)).
      
      Definition ETH_P_TR_802_2 : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 17) : i32.t)).
      
      Definition ETH_P_MOBITEX : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 21) : i32.t)).
      
      Definition ETH_P_CONTROL : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 22) : i32.t)).
      
      Definition ETH_P_IRDA : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 23) : i32.t)).
      
      Definition ETH_P_ECONET : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 24) : i32.t)).
      
      Definition ETH_P_HDLC : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 25) : i32.t)).
      
      Definition ETH_P_ARCNET : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 26) : i32.t)).
      
      Definition ETH_P_DSA : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 27) : i32.t)).
      
      Definition ETH_P_TRAILER : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 28) : i32.t)).
      
      Definition ETH_P_PHONET : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 245) : i32.t)).
      
      Definition ETH_P_IEEE802154 : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 246) : i32.t)).
      
      Definition ETH_P_CAIF : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 247) : i32.t)).
      
      Definition POSIX_SPAWN_RESETIDS : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 1) : i32.t)).
      
      Definition POSIX_SPAWN_SETPGROUP : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 2) : i32.t)).
      
      Definition POSIX_SPAWN_SETSIGDEF : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 4) : i32.t)).
      
      Definition POSIX_SPAWN_SETSIGMASK : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 8) : i32.t)).
      
      Definition POSIX_SPAWN_SETSCHEDPARAM : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 16) : i32.t)).
      
      Definition POSIX_SPAWN_SETSCHEDULER : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 32) : i32.t)).
      
      Definition NLMSG_NOOP : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 1) : i32.t)).
      
      Definition NLMSG_ERROR : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 2) : i32.t)).
      
      Definition NLMSG_DONE : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 3) : i32.t)).
      
      Definition NLMSG_OVERRUN : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 4) : i32.t)).
      
      Definition NLMSG_MIN_TYPE : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 16) : i32.t)).
      
      Definition NFNLGRP_NONE : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 0) : i32.t)).
      
      Definition NFNLGRP_CONNTRACK_NEW : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 1) : i32.t)).
      
      Definition NFNLGRP_CONNTRACK_UPDATE : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 2) : i32.t)).
      
      Definition NFNLGRP_CONNTRACK_DESTROY : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 3) : i32.t)).
      
      Definition NFNLGRP_CONNTRACK_EXP_NEW : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 4) : i32.t)).
      
      Definition NFNLGRP_CONNTRACK_EXP_UPDATE : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 5) : i32.t)).
      
      Definition NFNLGRP_CONNTRACK_EXP_DESTROY : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 6) : i32.t)).
      
      Definition NFNLGRP_NFTABLES : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 7) : i32.t)).
      
      Definition NFNLGRP_ACCT_QUOTA : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 8) : i32.t)).
      
      Definition NFNLGRP_NFTRACE : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 9) : i32.t)).
      
      Definition NFNETLINK_V0 : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 0) : i32.t)).
      
      Definition NFNL_SUBSYS_NONE : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 0) : i32.t)).
      
      Definition NFNL_SUBSYS_CTNETLINK : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 1) : i32.t)).
      
      Definition NFNL_SUBSYS_CTNETLINK_EXP : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 2) : i32.t)).
      
      Definition NFNL_SUBSYS_QUEUE : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 3) : i32.t)).
      
      Definition NFNL_SUBSYS_ULOG : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 4) : i32.t)).
      
      Definition NFNL_SUBSYS_OSF : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 5) : i32.t)).
      
      Definition NFNL_SUBSYS_IPSET : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 6) : i32.t)).
      
      Definition NFNL_SUBSYS_ACCT : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 7) : i32.t)).
      
      Definition NFNL_SUBSYS_CTNETLINK_TIMEOUT : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 8) : i32.t)).
      
      Definition NFNL_SUBSYS_CTHELPER : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 9) : i32.t)).
      
      Definition NFNL_SUBSYS_NFTABLES : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 10) : i32.t)).
      
      Definition NFNL_SUBSYS_NFT_COMPAT : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 11) : i32.t)).
      
      Definition NFNL_SUBSYS_HOOK : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 12) : i32.t)).
      
      Definition NFNL_SUBSYS_COUNT : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 13) : i32.t)).
      
      Definition NFNL_MSG_BATCH_BEGIN : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.pure libc.unix.linux_like.linux.NLMSG_MIN_TYPE).
      
      Definition NFNL_MSG_BATCH_END : M.Val ltac:(libc.unix.c_int) :=
        M.run
          (let* α0 : i32.t :=
            M.read libc.unix.linux_like.linux.NLMSG_MIN_TYPE in
          let* α1 : i32.t := BinOp.Panic.add α0 ((Integer.of_Z 1) : i32.t) in
          M.alloc α1).
      
      Definition NFNL_BATCH_UNSPEC : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 0) : i32.t)).
      
      Definition NFNL_BATCH_GENID : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 1) : i32.t)).
      
      Definition NFULNL_MSG_PACKET : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 0) : i32.t)).
      
      Definition NFULNL_MSG_CONFIG : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 1) : i32.t)).
      
      Definition NFULA_VLAN_UNSPEC : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 0) : i32.t)).
      
      Definition NFULA_VLAN_PROTO : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 1) : i32.t)).
      
      Definition NFULA_VLAN_TCI : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 2) : i32.t)).
      
      Definition NFULA_UNSPEC : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 0) : i32.t)).
      
      Definition NFULA_PACKET_HDR : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 1) : i32.t)).
      
      Definition NFULA_MARK : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 2) : i32.t)).
      
      Definition NFULA_TIMESTAMP : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 3) : i32.t)).
      
      Definition NFULA_IFINDEX_INDEV : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 4) : i32.t)).
      
      Definition NFULA_IFINDEX_OUTDEV : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 5) : i32.t)).
      
      Definition NFULA_IFINDEX_PHYSINDEV : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 6) : i32.t)).
      
      Definition NFULA_IFINDEX_PHYSOUTDEV : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 7) : i32.t)).
      
      Definition NFULA_HWADDR : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 8) : i32.t)).
      
      Definition NFULA_PAYLOAD : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 9) : i32.t)).
      
      Definition NFULA_PREFIX : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 10) : i32.t)).
      
      Definition NFULA_UID : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 11) : i32.t)).
      
      Definition NFULA_SEQ : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 12) : i32.t)).
      
      Definition NFULA_SEQ_GLOBAL : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 13) : i32.t)).
      
      Definition NFULA_GID : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 14) : i32.t)).
      
      Definition NFULA_HWTYPE : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 15) : i32.t)).
      
      Definition NFULA_HWHEADER : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 16) : i32.t)).
      
      Definition NFULA_HWLEN : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 17) : i32.t)).
      
      Definition NFULA_CT : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 18) : i32.t)).
      
      Definition NFULA_CT_INFO : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 19) : i32.t)).
      
      Definition NFULA_VLAN : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 20) : i32.t)).
      
      Definition NFULA_L2HDR : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 21) : i32.t)).
      
      Definition NFULNL_CFG_CMD_NONE : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 0) : i32.t)).
      
      Definition NFULNL_CFG_CMD_BIND : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 1) : i32.t)).
      
      Definition NFULNL_CFG_CMD_UNBIND : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 2) : i32.t)).
      
      Definition NFULNL_CFG_CMD_PF_BIND : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 3) : i32.t)).
      
      Definition NFULNL_CFG_CMD_PF_UNBIND : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 4) : i32.t)).
      
      Definition NFULA_CFG_UNSPEC : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 0) : i32.t)).
      
      Definition NFULA_CFG_CMD : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 1) : i32.t)).
      
      Definition NFULA_CFG_MODE : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 2) : i32.t)).
      
      Definition NFULA_CFG_NLBUFSIZ : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 3) : i32.t)).
      
      Definition NFULA_CFG_TIMEOUT : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 4) : i32.t)).
      
      Definition NFULA_CFG_QTHRESH : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 5) : i32.t)).
      
      Definition NFULA_CFG_FLAGS : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 6) : i32.t)).
      
      Definition NFULNL_COPY_NONE : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 0) : i32.t)).
      
      Definition NFULNL_COPY_META : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 1) : i32.t)).
      
      Definition NFULNL_COPY_PACKET : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 2) : i32.t)).
      
      Definition NFULNL_CFG_F_SEQ : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 1) : i32.t)).
      
      Definition NFULNL_CFG_F_SEQ_GLOBAL : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 2) : i32.t)).
      
      Definition NFULNL_CFG_F_CONNTRACK : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 4) : i32.t)).
      
      Definition NFQNL_MSG_PACKET : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 0) : i32.t)).
      
      Definition NFQNL_MSG_VERDICT : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 1) : i32.t)).
      
      Definition NFQNL_MSG_CONFIG : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 2) : i32.t)).
      
      Definition NFQNL_MSG_VERDICT_BATCH : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 3) : i32.t)).
      
      Definition NFQA_UNSPEC : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 0) : i32.t)).
      
      Definition NFQA_PACKET_HDR : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 1) : i32.t)).
      
      Definition NFQA_VERDICT_HDR : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 2) : i32.t)).
      
      Definition NFQA_MARK : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 3) : i32.t)).
      
      Definition NFQA_TIMESTAMP : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 4) : i32.t)).
      
      Definition NFQA_IFINDEX_INDEV : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 5) : i32.t)).
      
      Definition NFQA_IFINDEX_OUTDEV : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 6) : i32.t)).
      
      Definition NFQA_IFINDEX_PHYSINDEV : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 7) : i32.t)).
      
      Definition NFQA_IFINDEX_PHYSOUTDEV : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 8) : i32.t)).
      
      Definition NFQA_HWADDR : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 9) : i32.t)).
      
      Definition NFQA_PAYLOAD : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 10) : i32.t)).
      
      Definition NFQA_CT : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 11) : i32.t)).
      
      Definition NFQA_CT_INFO : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 12) : i32.t)).
      
      Definition NFQA_CAP_LEN : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 13) : i32.t)).
      
      Definition NFQA_SKB_INFO : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 14) : i32.t)).
      
      Definition NFQA_EXP : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 15) : i32.t)).
      
      Definition NFQA_UID : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 16) : i32.t)).
      
      Definition NFQA_GID : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 17) : i32.t)).
      
      Definition NFQA_SECCTX : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 18) : i32.t)).
      
      Definition NFQA_VLAN : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 19) : i32.t)).
      
      Definition NFQA_L2HDR : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 20) : i32.t)).
      
      Definition NFQA_PRIORITY : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 21) : i32.t)).
      
      Definition NFQA_VLAN_UNSPEC : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 0) : i32.t)).
      
      Definition NFQA_VLAN_PROTO : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 1) : i32.t)).
      
      Definition NFQA_VLAN_TCI : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 2) : i32.t)).
      
      Definition NFQNL_CFG_CMD_NONE : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 0) : i32.t)).
      
      Definition NFQNL_CFG_CMD_BIND : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 1) : i32.t)).
      
      Definition NFQNL_CFG_CMD_UNBIND : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 2) : i32.t)).
      
      Definition NFQNL_CFG_CMD_PF_BIND : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 3) : i32.t)).
      
      Definition NFQNL_CFG_CMD_PF_UNBIND : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 4) : i32.t)).
      
      Definition NFQNL_COPY_NONE : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 0) : i32.t)).
      
      Definition NFQNL_COPY_META : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 1) : i32.t)).
      
      Definition NFQNL_COPY_PACKET : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 2) : i32.t)).
      
      Definition NFQA_CFG_UNSPEC : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 0) : i32.t)).
      
      Definition NFQA_CFG_CMD : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 1) : i32.t)).
      
      Definition NFQA_CFG_PARAMS : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 2) : i32.t)).
      
      Definition NFQA_CFG_QUEUE_MAXLEN : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 3) : i32.t)).
      
      Definition NFQA_CFG_MASK : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 4) : i32.t)).
      
      Definition NFQA_CFG_FLAGS : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 5) : i32.t)).
      
      Definition NFQA_CFG_F_FAIL_OPEN : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 1) : i32.t)).
      
      Definition NFQA_CFG_F_CONNTRACK : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 2) : i32.t)).
      
      Definition NFQA_CFG_F_GSO : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 4) : i32.t)).
      
      Definition NFQA_CFG_F_UID_GID : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 8) : i32.t)).
      
      Definition NFQA_CFG_F_SECCTX : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 16) : i32.t)).
      
      Definition NFQA_CFG_F_MAX : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 32) : i32.t)).
      
      Definition NFQA_SKB_CSUMNOTREADY : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 1) : i32.t)).
      
      Definition NFQA_SKB_GSO : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 2) : i32.t)).
      
      Definition NFQA_SKB_CSUM_NOTVERIFIED : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 4) : i32.t)).
      
      Definition GENL_NAMSIZ : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 16) : i32.t)).
      
      Definition GENL_MIN_ID : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.pure libc.unix.linux_like.linux.NLMSG_MIN_TYPE).
      
      Definition GENL_MAX_ID : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 1023) : i32.t)).
      
      Definition GENL_ADMIN_PERM : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 1) : i32.t)).
      
      Definition GENL_CMD_CAP_DO : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 2) : i32.t)).
      
      Definition GENL_CMD_CAP_DUMP : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 4) : i32.t)).
      
      Definition GENL_CMD_CAP_HASPOL : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 8) : i32.t)).
      
      Definition GENL_ID_CTRL : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.pure libc.unix.linux_like.linux.NLMSG_MIN_TYPE).
      
      Definition CTRL_CMD_UNSPEC : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 0) : i32.t)).
      
      Definition CTRL_CMD_NEWFAMILY : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 1) : i32.t)).
      
      Definition CTRL_CMD_DELFAMILY : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 2) : i32.t)).
      
      Definition CTRL_CMD_GETFAMILY : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 3) : i32.t)).
      
      Definition CTRL_CMD_NEWOPS : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 4) : i32.t)).
      
      Definition CTRL_CMD_DELOPS : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 5) : i32.t)).
      
      Definition CTRL_CMD_GETOPS : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 6) : i32.t)).
      
      Definition CTRL_CMD_NEWMCAST_GRP : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 7) : i32.t)).
      
      Definition CTRL_CMD_DELMCAST_GRP : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 8) : i32.t)).
      
      Definition CTRL_CMD_GETMCAST_GRP : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 9) : i32.t)).
      
      Definition CTRL_ATTR_UNSPEC : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 0) : i32.t)).
      
      Definition CTRL_ATTR_FAMILY_ID : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 1) : i32.t)).
      
      Definition CTRL_ATTR_FAMILY_NAME : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 2) : i32.t)).
      
      Definition CTRL_ATTR_VERSION : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 3) : i32.t)).
      
      Definition CTRL_ATTR_HDRSIZE : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 4) : i32.t)).
      
      Definition CTRL_ATTR_MAXATTR : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 5) : i32.t)).
      
      Definition CTRL_ATTR_OPS : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 6) : i32.t)).
      
      Definition CTRL_ATTR_MCAST_GROUPS : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 7) : i32.t)).
      
      Definition CTRL_ATTR_OP_UNSPEC : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 0) : i32.t)).
      
      Definition CTRL_ATTR_OP_ID : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 1) : i32.t)).
      
      Definition CTRL_ATTR_OP_FLAGS : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 2) : i32.t)).
      
      Definition CTRL_ATTR_MCAST_GRP_UNSPEC : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 0) : i32.t)).
      
      Definition CTRL_ATTR_MCAST_GRP_NAME : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 1) : i32.t)).
      
      Definition CTRL_ATTR_MCAST_GRP_ID : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 2) : i32.t)).
      
      Definition PACKET_HOST : M.Val ltac:(libc.unix.c_uchar) :=
        M.run (M.alloc ((Integer.of_Z 0) : u8.t)).
      
      Definition PACKET_BROADCAST : M.Val ltac:(libc.unix.c_uchar) :=
        M.run (M.alloc ((Integer.of_Z 1) : u8.t)).
      
      Definition PACKET_MULTICAST : M.Val ltac:(libc.unix.c_uchar) :=
        M.run (M.alloc ((Integer.of_Z 2) : u8.t)).
      
      Definition PACKET_OTHERHOST : M.Val ltac:(libc.unix.c_uchar) :=
        M.run (M.alloc ((Integer.of_Z 3) : u8.t)).
      
      Definition PACKET_OUTGOING : M.Val ltac:(libc.unix.c_uchar) :=
        M.run (M.alloc ((Integer.of_Z 4) : u8.t)).
      
      Definition PACKET_LOOPBACK : M.Val ltac:(libc.unix.c_uchar) :=
        M.run (M.alloc ((Integer.of_Z 5) : u8.t)).
      
      Definition PACKET_USER : M.Val ltac:(libc.unix.c_uchar) :=
        M.run (M.alloc ((Integer.of_Z 6) : u8.t)).
      
      Definition PACKET_KERNEL : M.Val ltac:(libc.unix.c_uchar) :=
        M.run (M.alloc ((Integer.of_Z 7) : u8.t)).
      
      Definition PACKET_ADD_MEMBERSHIP : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 1) : i32.t)).
      
      Definition PACKET_DROP_MEMBERSHIP : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 2) : i32.t)).
      
      Definition PACKET_RX_RING : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 5) : i32.t)).
      
      Definition PACKET_STATISTICS : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 6) : i32.t)).
      
      Definition PACKET_AUXDATA : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 8) : i32.t)).
      
      Definition PACKET_VERSION : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 10) : i32.t)).
      
      Definition PACKET_RESERVE : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 12) : i32.t)).
      
      Definition PACKET_TX_RING : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 13) : i32.t)).
      
      Definition PACKET_LOSS : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 14) : i32.t)).
      
      Definition PACKET_TIMESTAMP : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 17) : i32.t)).
      
      Definition PACKET_FANOUT : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 18) : i32.t)).
      
      Definition PACKET_QDISC_BYPASS : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 20) : i32.t)).
      
      Definition PACKET_FANOUT_HASH : M.Val ltac:(libc.unix.c_uint) :=
        M.run (M.alloc ((Integer.of_Z 0) : u32.t)).
      
      Definition PACKET_FANOUT_LB : M.Val ltac:(libc.unix.c_uint) :=
        M.run (M.alloc ((Integer.of_Z 1) : u32.t)).
      
      Definition PACKET_FANOUT_CPU : M.Val ltac:(libc.unix.c_uint) :=
        M.run (M.alloc ((Integer.of_Z 2) : u32.t)).
      
      Definition PACKET_FANOUT_ROLLOVER : M.Val ltac:(libc.unix.c_uint) :=
        M.run (M.alloc ((Integer.of_Z 3) : u32.t)).
      
      Definition PACKET_FANOUT_RND : M.Val ltac:(libc.unix.c_uint) :=
        M.run (M.alloc ((Integer.of_Z 4) : u32.t)).
      
      Definition PACKET_FANOUT_QM : M.Val ltac:(libc.unix.c_uint) :=
        M.run (M.alloc ((Integer.of_Z 5) : u32.t)).
      
      Definition PACKET_FANOUT_CBPF : M.Val ltac:(libc.unix.c_uint) :=
        M.run (M.alloc ((Integer.of_Z 6) : u32.t)).
      
      Definition PACKET_FANOUT_EBPF : M.Val ltac:(libc.unix.c_uint) :=
        M.run (M.alloc ((Integer.of_Z 7) : u32.t)).
      
      Definition PACKET_FANOUT_FLAG_ROLLOVER : M.Val ltac:(libc.unix.c_uint) :=
        M.run (M.alloc ((Integer.of_Z 4096) : u32.t)).
      
      Definition PACKET_FANOUT_FLAG_UNIQUEID : M.Val ltac:(libc.unix.c_uint) :=
        M.run (M.alloc ((Integer.of_Z 8192) : u32.t)).
      
      Definition PACKET_FANOUT_FLAG_DEFRAG : M.Val ltac:(libc.unix.c_uint) :=
        M.run (M.alloc ((Integer.of_Z 32768) : u32.t)).
      
      Definition PACKET_MR_MULTICAST : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 0) : i32.t)).
      
      Definition PACKET_MR_PROMISC : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 1) : i32.t)).
      
      Definition PACKET_MR_ALLMULTI : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 2) : i32.t)).
      
      Definition TP_STATUS_KERNEL
          : M.Val ltac:(libc.unix.linux_like.linux.__u32) :=
        M.run (M.alloc ((Integer.of_Z 0) : u32.t)).
      
      Definition TP_STATUS_USER
          : M.Val ltac:(libc.unix.linux_like.linux.__u32) :=
        M.run
          (let* α0 : u32.t :=
            BinOp.Panic.shl
              ((Integer.of_Z 1) : u32.t)
              ((Integer.of_Z 0) : i32.t) in
          M.alloc α0).
      
      Definition TP_STATUS_COPY
          : M.Val ltac:(libc.unix.linux_like.linux.__u32) :=
        M.run
          (let* α0 : u32.t :=
            BinOp.Panic.shl
              ((Integer.of_Z 1) : u32.t)
              ((Integer.of_Z 1) : i32.t) in
          M.alloc α0).
      
      Definition TP_STATUS_LOSING
          : M.Val ltac:(libc.unix.linux_like.linux.__u32) :=
        M.run
          (let* α0 : u32.t :=
            BinOp.Panic.shl
              ((Integer.of_Z 1) : u32.t)
              ((Integer.of_Z 2) : i32.t) in
          M.alloc α0).
      
      Definition TP_STATUS_CSUMNOTREADY
          : M.Val ltac:(libc.unix.linux_like.linux.__u32) :=
        M.run
          (let* α0 : u32.t :=
            BinOp.Panic.shl
              ((Integer.of_Z 1) : u32.t)
              ((Integer.of_Z 3) : i32.t) in
          M.alloc α0).
      
      Definition TP_STATUS_VLAN_VALID
          : M.Val ltac:(libc.unix.linux_like.linux.__u32) :=
        M.run
          (let* α0 : u32.t :=
            BinOp.Panic.shl
              ((Integer.of_Z 1) : u32.t)
              ((Integer.of_Z 4) : i32.t) in
          M.alloc α0).
      
      Definition TP_STATUS_BLK_TMO
          : M.Val ltac:(libc.unix.linux_like.linux.__u32) :=
        M.run
          (let* α0 : u32.t :=
            BinOp.Panic.shl
              ((Integer.of_Z 1) : u32.t)
              ((Integer.of_Z 5) : i32.t) in
          M.alloc α0).
      
      Definition TP_STATUS_VLAN_TPID_VALID
          : M.Val ltac:(libc.unix.linux_like.linux.__u32) :=
        M.run
          (let* α0 : u32.t :=
            BinOp.Panic.shl
              ((Integer.of_Z 1) : u32.t)
              ((Integer.of_Z 6) : i32.t) in
          M.alloc α0).
      
      Definition TP_STATUS_CSUM_VALID
          : M.Val ltac:(libc.unix.linux_like.linux.__u32) :=
        M.run
          (let* α0 : u32.t :=
            BinOp.Panic.shl
              ((Integer.of_Z 1) : u32.t)
              ((Integer.of_Z 7) : i32.t) in
          M.alloc α0).
      
      Definition TP_STATUS_AVAILABLE
          : M.Val ltac:(libc.unix.linux_like.linux.__u32) :=
        M.run (M.alloc ((Integer.of_Z 0) : u32.t)).
      
      Definition TP_STATUS_SEND_REQUEST
          : M.Val ltac:(libc.unix.linux_like.linux.__u32) :=
        M.run
          (let* α0 : u32.t :=
            BinOp.Panic.shl
              ((Integer.of_Z 1) : u32.t)
              ((Integer.of_Z 0) : i32.t) in
          M.alloc α0).
      
      Definition TP_STATUS_SENDING
          : M.Val ltac:(libc.unix.linux_like.linux.__u32) :=
        M.run
          (let* α0 : u32.t :=
            BinOp.Panic.shl
              ((Integer.of_Z 1) : u32.t)
              ((Integer.of_Z 1) : i32.t) in
          M.alloc α0).
      
      Definition TP_STATUS_WRONG_FORMAT
          : M.Val ltac:(libc.unix.linux_like.linux.__u32) :=
        M.run
          (let* α0 : u32.t :=
            BinOp.Panic.shl
              ((Integer.of_Z 1) : u32.t)
              ((Integer.of_Z 2) : i32.t) in
          M.alloc α0).
      
      Definition TP_STATUS_TS_SOFTWARE
          : M.Val ltac:(libc.unix.linux_like.linux.__u32) :=
        M.run
          (let* α0 : u32.t :=
            BinOp.Panic.shl
              ((Integer.of_Z 1) : u32.t)
              ((Integer.of_Z 29) : i32.t) in
          M.alloc α0).
      
      Definition TP_STATUS_TS_SYS_HARDWARE
          : M.Val ltac:(libc.unix.linux_like.linux.__u32) :=
        M.run
          (let* α0 : u32.t :=
            BinOp.Panic.shl
              ((Integer.of_Z 1) : u32.t)
              ((Integer.of_Z 30) : i32.t) in
          M.alloc α0).
      
      Definition TP_STATUS_TS_RAW_HARDWARE
          : M.Val ltac:(libc.unix.linux_like.linux.__u32) :=
        M.run
          (let* α0 : u32.t :=
            BinOp.Panic.shl
              ((Integer.of_Z 1) : u32.t)
              ((Integer.of_Z 31) : i32.t) in
          M.alloc α0).
      
      Definition TPACKET_ALIGNMENT : M.Val usize.t :=
        M.run (M.alloc ((Integer.of_Z 16) : usize.t)).
      
      Definition TPACKET_HDRLEN : M.Val usize.t :=
        M.run
          (let* α0 : usize.t := M.call core.mem.size_of in
          let* α1 : usize.t :=
            M.read libc.unix.linux_like.linux.TPACKET_ALIGNMENT in
          let* α2 : usize.t := BinOp.Panic.add α0 α1 in
          let* α3 : usize.t :=
            BinOp.Panic.sub α2 ((Integer.of_Z 1) : usize.t) in
          let* α4 : usize.t :=
            M.read libc.unix.linux_like.linux.TPACKET_ALIGNMENT in
          let* α5 : usize.t :=
            BinOp.Panic.sub α4 ((Integer.of_Z 1) : usize.t) in
          let* α6 : usize.t := M.call core.mem.size_of in
          let* α7 : usize.t :=
            BinOp.Panic.add (BinOp.Pure.bit_and α3 (UnOp.not α5)) α6 in
          M.alloc α7).
      
      Definition TPACKET2_HDRLEN : M.Val usize.t :=
        M.run
          (let* α0 : usize.t := M.call core.mem.size_of in
          let* α1 : usize.t :=
            M.read libc.unix.linux_like.linux.TPACKET_ALIGNMENT in
          let* α2 : usize.t := BinOp.Panic.add α0 α1 in
          let* α3 : usize.t :=
            BinOp.Panic.sub α2 ((Integer.of_Z 1) : usize.t) in
          let* α4 : usize.t :=
            M.read libc.unix.linux_like.linux.TPACKET_ALIGNMENT in
          let* α5 : usize.t :=
            BinOp.Panic.sub α4 ((Integer.of_Z 1) : usize.t) in
          let* α6 : usize.t := M.call core.mem.size_of in
          let* α7 : usize.t :=
            BinOp.Panic.add (BinOp.Pure.bit_and α3 (UnOp.not α5)) α6 in
          M.alloc α7).
      
      Definition TPACKET3_HDRLEN : M.Val usize.t :=
        M.run
          (let* α0 : usize.t := M.call core.mem.size_of in
          let* α1 : usize.t :=
            M.read libc.unix.linux_like.linux.TPACKET_ALIGNMENT in
          let* α2 : usize.t := BinOp.Panic.add α0 α1 in
          let* α3 : usize.t :=
            BinOp.Panic.sub α2 ((Integer.of_Z 1) : usize.t) in
          let* α4 : usize.t :=
            M.read libc.unix.linux_like.linux.TPACKET_ALIGNMENT in
          let* α5 : usize.t :=
            BinOp.Panic.sub α4 ((Integer.of_Z 1) : usize.t) in
          let* α6 : usize.t := M.call core.mem.size_of in
          let* α7 : usize.t :=
            BinOp.Panic.add (BinOp.Pure.bit_and α3 (UnOp.not α5)) α6 in
          M.alloc α7).
      
      Definition NF_DROP : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 0) : i32.t)).
      
      Definition NF_ACCEPT : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 1) : i32.t)).
      
      Definition NF_STOLEN : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 2) : i32.t)).
      
      Definition NF_QUEUE : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 3) : i32.t)).
      
      Definition NF_REPEAT : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 4) : i32.t)).
      
      Definition NF_STOP : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 5) : i32.t)).
      
      Definition NF_MAX_VERDICT : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.pure libc.unix.linux_like.linux.NF_STOP).
      
      Definition NF_VERDICT_MASK : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 255) : i32.t)).
      
      Definition NF_VERDICT_FLAG_QUEUE_BYPASS : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 32768) : i32.t)).
      
      Definition NF_VERDICT_QMASK : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 4294901760) : i32.t)).
      
      Definition NF_VERDICT_QBITS : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 16) : i32.t)).
      
      Definition NF_VERDICT_BITS : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 16) : i32.t)).
      
      Definition NF_INET_PRE_ROUTING : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 0) : i32.t)).
      
      Definition NF_INET_LOCAL_IN : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 1) : i32.t)).
      
      Definition NF_INET_FORWARD : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 2) : i32.t)).
      
      Definition NF_INET_LOCAL_OUT : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 3) : i32.t)).
      
      Definition NF_INET_POST_ROUTING : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 4) : i32.t)).
      
      Definition NF_INET_NUMHOOKS : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 5) : i32.t)).
      
      Definition NFPROTO_UNSPEC : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 0) : i32.t)).
      
      Definition NFPROTO_IPV4 : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 2) : i32.t)).
      
      Definition NFPROTO_ARP : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 3) : i32.t)).
      
      Definition NFPROTO_BRIDGE : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 7) : i32.t)).
      
      Definition NFPROTO_IPV6 : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 10) : i32.t)).
      
      Definition NFPROTO_DECNET : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 12) : i32.t)).
      
      Definition NFPROTO_NUMPROTO : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 13) : i32.t)).
      
      Definition NFPROTO_INET : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 1) : i32.t)).
      
      Definition NFPROTO_NETDEV : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 5) : i32.t)).
      
      Definition NF_NETDEV_INGRESS : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 0) : i32.t)).
      
      Definition NF_NETDEV_NUMHOOKS : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 1) : i32.t)).
      
      Definition NF_IP_PRE_ROUTING : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 0) : i32.t)).
      
      Definition NF_IP_LOCAL_IN : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 1) : i32.t)).
      
      Definition NF_IP_FORWARD : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 2) : i32.t)).
      
      Definition NF_IP_LOCAL_OUT : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 3) : i32.t)).
      
      Definition NF_IP_POST_ROUTING : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 4) : i32.t)).
      
      Definition NF_IP_NUMHOOKS : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 5) : i32.t)).
      
      Definition NF_IP_PRI_FIRST : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.pure libc.unix.INT_MIN).
      
      Definition NF_IP_PRI_CONNTRACK_DEFRAG : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z (-400)) : i32.t)).
      
      Definition NF_IP_PRI_RAW : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z (-300)) : i32.t)).
      
      Definition NF_IP_PRI_SELINUX_FIRST : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z (-225)) : i32.t)).
      
      Definition NF_IP_PRI_CONNTRACK : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z (-200)) : i32.t)).
      
      Definition NF_IP_PRI_MANGLE : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z (-150)) : i32.t)).
      
      Definition NF_IP_PRI_NAT_DST : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z (-100)) : i32.t)).
      
      Definition NF_IP_PRI_FILTER : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 0) : i32.t)).
      
      Definition NF_IP_PRI_SECURITY : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 50) : i32.t)).
      
      Definition NF_IP_PRI_NAT_SRC : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 100) : i32.t)).
      
      Definition NF_IP_PRI_SELINUX_LAST : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 225) : i32.t)).
      
      Definition NF_IP_PRI_CONNTRACK_HELPER : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 300) : i32.t)).
      
      Definition NF_IP_PRI_CONNTRACK_CONFIRM : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.pure libc.unix.INT_MAX).
      
      Definition NF_IP_PRI_LAST : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.pure libc.unix.INT_MAX).
      
      Definition NF_IP6_PRE_ROUTING : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 0) : i32.t)).
      
      Definition NF_IP6_LOCAL_IN : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 1) : i32.t)).
      
      Definition NF_IP6_FORWARD : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 2) : i32.t)).
      
      Definition NF_IP6_LOCAL_OUT : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 3) : i32.t)).
      
      Definition NF_IP6_POST_ROUTING : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 4) : i32.t)).
      
      Definition NF_IP6_NUMHOOKS : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 5) : i32.t)).
      
      Definition NF_IP6_PRI_FIRST : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.pure libc.unix.INT_MIN).
      
      Definition NF_IP6_PRI_CONNTRACK_DEFRAG : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z (-400)) : i32.t)).
      
      Definition NF_IP6_PRI_RAW : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z (-300)) : i32.t)).
      
      Definition NF_IP6_PRI_SELINUX_FIRST : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z (-225)) : i32.t)).
      
      Definition NF_IP6_PRI_CONNTRACK : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z (-200)) : i32.t)).
      
      Definition NF_IP6_PRI_MANGLE : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z (-150)) : i32.t)).
      
      Definition NF_IP6_PRI_NAT_DST : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z (-100)) : i32.t)).
      
      Definition NF_IP6_PRI_FILTER : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 0) : i32.t)).
      
      Definition NF_IP6_PRI_SECURITY : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 50) : i32.t)).
      
      Definition NF_IP6_PRI_NAT_SRC : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 100) : i32.t)).
      
      Definition NF_IP6_PRI_SELINUX_LAST : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 225) : i32.t)).
      
      Definition NF_IP6_PRI_CONNTRACK_HELPER : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 300) : i32.t)).
      
      Definition NF_IP6_PRI_LAST : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.pure libc.unix.INT_MAX).
      
      Definition IP6T_SO_ORIGINAL_DST : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 80) : i32.t)).
      
      Definition SIOCADDRT
          :
            M.Val
              ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_ulong) :=
        M.run (M.alloc ((Integer.of_Z 35083) : u64.t)).
      
      Definition SIOCDELRT
          :
            M.Val
              ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_ulong) :=
        M.run (M.alloc ((Integer.of_Z 35084) : u64.t)).
      
      Definition SIOCGIFNAME
          :
            M.Val
              ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_ulong) :=
        M.run (M.alloc ((Integer.of_Z 35088) : u64.t)).
      
      Definition SIOCSIFLINK
          :
            M.Val
              ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_ulong) :=
        M.run (M.alloc ((Integer.of_Z 35089) : u64.t)).
      
      Definition SIOCGIFCONF
          :
            M.Val
              ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_ulong) :=
        M.run (M.alloc ((Integer.of_Z 35090) : u64.t)).
      
      Definition SIOCGIFFLAGS
          :
            M.Val
              ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_ulong) :=
        M.run (M.alloc ((Integer.of_Z 35091) : u64.t)).
      
      Definition SIOCSIFFLAGS
          :
            M.Val
              ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_ulong) :=
        M.run (M.alloc ((Integer.of_Z 35092) : u64.t)).
      
      Definition SIOCGIFADDR
          :
            M.Val
              ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_ulong) :=
        M.run (M.alloc ((Integer.of_Z 35093) : u64.t)).
      
      Definition SIOCSIFADDR
          :
            M.Val
              ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_ulong) :=
        M.run (M.alloc ((Integer.of_Z 35094) : u64.t)).
      
      Definition SIOCGIFDSTADDR
          :
            M.Val
              ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_ulong) :=
        M.run (M.alloc ((Integer.of_Z 35095) : u64.t)).
      
      Definition SIOCSIFDSTADDR
          :
            M.Val
              ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_ulong) :=
        M.run (M.alloc ((Integer.of_Z 35096) : u64.t)).
      
      Definition SIOCGIFBRDADDR
          :
            M.Val
              ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_ulong) :=
        M.run (M.alloc ((Integer.of_Z 35097) : u64.t)).
      
      Definition SIOCSIFBRDADDR
          :
            M.Val
              ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_ulong) :=
        M.run (M.alloc ((Integer.of_Z 35098) : u64.t)).
      
      Definition SIOCGIFNETMASK
          :
            M.Val
              ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_ulong) :=
        M.run (M.alloc ((Integer.of_Z 35099) : u64.t)).
      
      Definition SIOCSIFNETMASK
          :
            M.Val
              ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_ulong) :=
        M.run (M.alloc ((Integer.of_Z 35100) : u64.t)).
      
      Definition SIOCGIFMETRIC
          :
            M.Val
              ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_ulong) :=
        M.run (M.alloc ((Integer.of_Z 35101) : u64.t)).
      
      Definition SIOCSIFMETRIC
          :
            M.Val
              ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_ulong) :=
        M.run (M.alloc ((Integer.of_Z 35102) : u64.t)).
      
      Definition SIOCGIFMEM
          :
            M.Val
              ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_ulong) :=
        M.run (M.alloc ((Integer.of_Z 35103) : u64.t)).
      
      Definition SIOCSIFMEM
          :
            M.Val
              ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_ulong) :=
        M.run (M.alloc ((Integer.of_Z 35104) : u64.t)).
      
      Definition SIOCGIFMTU
          :
            M.Val
              ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_ulong) :=
        M.run (M.alloc ((Integer.of_Z 35105) : u64.t)).
      
      Definition SIOCSIFMTU
          :
            M.Val
              ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_ulong) :=
        M.run (M.alloc ((Integer.of_Z 35106) : u64.t)).
      
      Definition SIOCSIFNAME
          :
            M.Val
              ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_ulong) :=
        M.run (M.alloc ((Integer.of_Z 35107) : u64.t)).
      
      Definition SIOCSIFHWADDR
          :
            M.Val
              ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_ulong) :=
        M.run (M.alloc ((Integer.of_Z 35108) : u64.t)).
      
      Definition SIOCGIFENCAP
          :
            M.Val
              ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_ulong) :=
        M.run (M.alloc ((Integer.of_Z 35109) : u64.t)).
      
      Definition SIOCSIFENCAP
          :
            M.Val
              ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_ulong) :=
        M.run (M.alloc ((Integer.of_Z 35110) : u64.t)).
      
      Definition SIOCGIFHWADDR
          :
            M.Val
              ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_ulong) :=
        M.run (M.alloc ((Integer.of_Z 35111) : u64.t)).
      
      Definition SIOCGIFSLAVE
          :
            M.Val
              ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_ulong) :=
        M.run (M.alloc ((Integer.of_Z 35113) : u64.t)).
      
      Definition SIOCSIFSLAVE
          :
            M.Val
              ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_ulong) :=
        M.run (M.alloc ((Integer.of_Z 35120) : u64.t)).
      
      Definition SIOCADDMULTI
          :
            M.Val
              ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_ulong) :=
        M.run (M.alloc ((Integer.of_Z 35121) : u64.t)).
      
      Definition SIOCDELMULTI
          :
            M.Val
              ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_ulong) :=
        M.run (M.alloc ((Integer.of_Z 35122) : u64.t)).
      
      Definition SIOCGIFINDEX
          :
            M.Val
              ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_ulong) :=
        M.run (M.alloc ((Integer.of_Z 35123) : u64.t)).
      
      Definition SIOGIFINDEX
          :
            M.Val
              ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_ulong) :=
        M.run (M.pure libc.unix.linux_like.linux.SIOCGIFINDEX).
      
      Definition SIOCSIFPFLAGS
          :
            M.Val
              ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_ulong) :=
        M.run (M.alloc ((Integer.of_Z 35124) : u64.t)).
      
      Definition SIOCGIFPFLAGS
          :
            M.Val
              ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_ulong) :=
        M.run (M.alloc ((Integer.of_Z 35125) : u64.t)).
      
      Definition SIOCDIFADDR
          :
            M.Val
              ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_ulong) :=
        M.run (M.alloc ((Integer.of_Z 35126) : u64.t)).
      
      Definition SIOCSIFHWBROADCAST
          :
            M.Val
              ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_ulong) :=
        M.run (M.alloc ((Integer.of_Z 35127) : u64.t)).
      
      Definition SIOCGIFCOUNT
          :
            M.Val
              ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_ulong) :=
        M.run (M.alloc ((Integer.of_Z 35128) : u64.t)).
      
      Definition SIOCGIFBR
          :
            M.Val
              ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_ulong) :=
        M.run (M.alloc ((Integer.of_Z 35136) : u64.t)).
      
      Definition SIOCSIFBR
          :
            M.Val
              ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_ulong) :=
        M.run (M.alloc ((Integer.of_Z 35137) : u64.t)).
      
      Definition SIOCGIFTXQLEN
          :
            M.Val
              ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_ulong) :=
        M.run (M.alloc ((Integer.of_Z 35138) : u64.t)).
      
      Definition SIOCSIFTXQLEN
          :
            M.Val
              ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_ulong) :=
        M.run (M.alloc ((Integer.of_Z 35139) : u64.t)).
      
      Definition SIOCETHTOOL
          :
            M.Val
              ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_ulong) :=
        M.run (M.alloc ((Integer.of_Z 35142) : u64.t)).
      
      Definition SIOCGMIIPHY
          :
            M.Val
              ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_ulong) :=
        M.run (M.alloc ((Integer.of_Z 35143) : u64.t)).
      
      Definition SIOCGMIIREG
          :
            M.Val
              ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_ulong) :=
        M.run (M.alloc ((Integer.of_Z 35144) : u64.t)).
      
      Definition SIOCSMIIREG
          :
            M.Val
              ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_ulong) :=
        M.run (M.alloc ((Integer.of_Z 35145) : u64.t)).
      
      Definition SIOCWANDEV
          :
            M.Val
              ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_ulong) :=
        M.run (M.alloc ((Integer.of_Z 35146) : u64.t)).
      
      Definition SIOCOUTQNSD
          :
            M.Val
              ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_ulong) :=
        M.run (M.alloc ((Integer.of_Z 35147) : u64.t)).
      
      Definition SIOCGSKNS
          :
            M.Val
              ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_ulong) :=
        M.run (M.alloc ((Integer.of_Z 35148) : u64.t)).
      
      Definition SIOCDARP
          :
            M.Val
              ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_ulong) :=
        M.run (M.alloc ((Integer.of_Z 35155) : u64.t)).
      
      Definition SIOCGARP
          :
            M.Val
              ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_ulong) :=
        M.run (M.alloc ((Integer.of_Z 35156) : u64.t)).
      
      Definition SIOCSARP
          :
            M.Val
              ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_ulong) :=
        M.run (M.alloc ((Integer.of_Z 35157) : u64.t)).
      
      Definition SIOCDRARP
          :
            M.Val
              ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_ulong) :=
        M.run (M.alloc ((Integer.of_Z 35168) : u64.t)).
      
      Definition SIOCGRARP
          :
            M.Val
              ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_ulong) :=
        M.run (M.alloc ((Integer.of_Z 35169) : u64.t)).
      
      Definition SIOCSRARP
          :
            M.Val
              ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_ulong) :=
        M.run (M.alloc ((Integer.of_Z 35170) : u64.t)).
      
      Definition SIOCGIFMAP
          :
            M.Val
              ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_ulong) :=
        M.run (M.alloc ((Integer.of_Z 35184) : u64.t)).
      
      Definition SIOCSIFMAP
          :
            M.Val
              ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_ulong) :=
        M.run (M.alloc ((Integer.of_Z 35185) : u64.t)).
      
      Definition SIOCSHWTSTAMP
          :
            M.Val
              ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_ulong) :=
        M.run (M.alloc ((Integer.of_Z 35248) : u64.t)).
      
      Definition SIOCGHWTSTAMP
          :
            M.Val
              ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_ulong) :=
        M.run (M.alloc ((Integer.of_Z 35249) : u64.t)).
      
      Definition WIRELESS_EXT
          :
            M.Val
              ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_ulong) :=
        M.run (M.alloc ((Integer.of_Z 22) : u64.t)).
      
      Definition SIOCSIWCOMMIT
          :
            M.Val
              ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_ulong) :=
        M.run (M.alloc ((Integer.of_Z 35584) : u64.t)).
      
      Definition SIOCGIWNAME
          :
            M.Val
              ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_ulong) :=
        M.run (M.alloc ((Integer.of_Z 35585) : u64.t)).
      
      Definition SIOCSIWNWID
          :
            M.Val
              ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_ulong) :=
        M.run (M.alloc ((Integer.of_Z 35586) : u64.t)).
      
      Definition SIOCGIWNWID
          :
            M.Val
              ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_ulong) :=
        M.run (M.alloc ((Integer.of_Z 35587) : u64.t)).
      
      Definition SIOCSIWFREQ
          :
            M.Val
              ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_ulong) :=
        M.run (M.alloc ((Integer.of_Z 35588) : u64.t)).
      
      Definition SIOCGIWFREQ
          :
            M.Val
              ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_ulong) :=
        M.run (M.alloc ((Integer.of_Z 35589) : u64.t)).
      
      Definition SIOCSIWMODE
          :
            M.Val
              ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_ulong) :=
        M.run (M.alloc ((Integer.of_Z 35590) : u64.t)).
      
      Definition SIOCGIWMODE
          :
            M.Val
              ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_ulong) :=
        M.run (M.alloc ((Integer.of_Z 35591) : u64.t)).
      
      Definition SIOCSIWSENS
          :
            M.Val
              ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_ulong) :=
        M.run (M.alloc ((Integer.of_Z 35592) : u64.t)).
      
      Definition SIOCGIWSENS
          :
            M.Val
              ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_ulong) :=
        M.run (M.alloc ((Integer.of_Z 35593) : u64.t)).
      
      Definition SIOCSIWRANGE
          :
            M.Val
              ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_ulong) :=
        M.run (M.alloc ((Integer.of_Z 35594) : u64.t)).
      
      Definition SIOCGIWRANGE
          :
            M.Val
              ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_ulong) :=
        M.run (M.alloc ((Integer.of_Z 35595) : u64.t)).
      
      Definition SIOCSIWPRIV
          :
            M.Val
              ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_ulong) :=
        M.run (M.alloc ((Integer.of_Z 35596) : u64.t)).
      
      Definition SIOCGIWPRIV
          :
            M.Val
              ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_ulong) :=
        M.run (M.alloc ((Integer.of_Z 35597) : u64.t)).
      
      Definition SIOCSIWSTATS
          :
            M.Val
              ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_ulong) :=
        M.run (M.alloc ((Integer.of_Z 35598) : u64.t)).
      
      Definition SIOCGIWSTATS
          :
            M.Val
              ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_ulong) :=
        M.run (M.alloc ((Integer.of_Z 35599) : u64.t)).
      
      Definition SIOCSIWSPY
          :
            M.Val
              ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_ulong) :=
        M.run (M.alloc ((Integer.of_Z 35600) : u64.t)).
      
      Definition SIOCGIWSPY
          :
            M.Val
              ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_ulong) :=
        M.run (M.alloc ((Integer.of_Z 35601) : u64.t)).
      
      Definition SIOCSIWTHRSPY
          :
            M.Val
              ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_ulong) :=
        M.run (M.alloc ((Integer.of_Z 35602) : u64.t)).
      
      Definition SIOCGIWTHRSPY
          :
            M.Val
              ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_ulong) :=
        M.run (M.alloc ((Integer.of_Z 35603) : u64.t)).
      
      Definition SIOCSIWAP
          :
            M.Val
              ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_ulong) :=
        M.run (M.alloc ((Integer.of_Z 35604) : u64.t)).
      
      Definition SIOCGIWAP
          :
            M.Val
              ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_ulong) :=
        M.run (M.alloc ((Integer.of_Z 35605) : u64.t)).
      
      Definition SIOCGIWAPLIST
          :
            M.Val
              ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_ulong) :=
        M.run (M.alloc ((Integer.of_Z 35607) : u64.t)).
      
      Definition SIOCSIWSCAN
          :
            M.Val
              ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_ulong) :=
        M.run (M.alloc ((Integer.of_Z 35608) : u64.t)).
      
      Definition SIOCGIWSCAN
          :
            M.Val
              ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_ulong) :=
        M.run (M.alloc ((Integer.of_Z 35609) : u64.t)).
      
      Definition SIOCSIWESSID
          :
            M.Val
              ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_ulong) :=
        M.run (M.alloc ((Integer.of_Z 35610) : u64.t)).
      
      Definition SIOCGIWESSID
          :
            M.Val
              ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_ulong) :=
        M.run (M.alloc ((Integer.of_Z 35611) : u64.t)).
      
      Definition SIOCSIWNICKN
          :
            M.Val
              ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_ulong) :=
        M.run (M.alloc ((Integer.of_Z 35612) : u64.t)).
      
      Definition SIOCGIWNICKN
          :
            M.Val
              ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_ulong) :=
        M.run (M.alloc ((Integer.of_Z 35613) : u64.t)).
      
      Definition SIOCSIWRATE
          :
            M.Val
              ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_ulong) :=
        M.run (M.alloc ((Integer.of_Z 35616) : u64.t)).
      
      Definition SIOCGIWRATE
          :
            M.Val
              ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_ulong) :=
        M.run (M.alloc ((Integer.of_Z 35617) : u64.t)).
      
      Definition SIOCSIWRTS
          :
            M.Val
              ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_ulong) :=
        M.run (M.alloc ((Integer.of_Z 35618) : u64.t)).
      
      Definition SIOCGIWRTS
          :
            M.Val
              ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_ulong) :=
        M.run (M.alloc ((Integer.of_Z 35619) : u64.t)).
      
      Definition SIOCSIWFRAG
          :
            M.Val
              ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_ulong) :=
        M.run (M.alloc ((Integer.of_Z 35620) : u64.t)).
      
      Definition SIOCGIWFRAG
          :
            M.Val
              ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_ulong) :=
        M.run (M.alloc ((Integer.of_Z 35621) : u64.t)).
      
      Definition SIOCSIWTXPOW
          :
            M.Val
              ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_ulong) :=
        M.run (M.alloc ((Integer.of_Z 35622) : u64.t)).
      
      Definition SIOCGIWTXPOW
          :
            M.Val
              ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_ulong) :=
        M.run (M.alloc ((Integer.of_Z 35623) : u64.t)).
      
      Definition SIOCSIWRETRY
          :
            M.Val
              ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_ulong) :=
        M.run (M.alloc ((Integer.of_Z 35624) : u64.t)).
      
      Definition SIOCGIWRETRY
          :
            M.Val
              ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_ulong) :=
        M.run (M.alloc ((Integer.of_Z 35625) : u64.t)).
      
      Definition SIOCSIWENCODE
          :
            M.Val
              ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_ulong) :=
        M.run (M.alloc ((Integer.of_Z 35626) : u64.t)).
      
      Definition SIOCGIWENCODE
          :
            M.Val
              ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_ulong) :=
        M.run (M.alloc ((Integer.of_Z 35627) : u64.t)).
      
      Definition SIOCSIWPOWER
          :
            M.Val
              ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_ulong) :=
        M.run (M.alloc ((Integer.of_Z 35628) : u64.t)).
      
      Definition SIOCGIWPOWER
          :
            M.Val
              ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_ulong) :=
        M.run (M.alloc ((Integer.of_Z 35629) : u64.t)).
      
      Definition SIOCSIWGENIE
          :
            M.Val
              ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_ulong) :=
        M.run (M.alloc ((Integer.of_Z 35632) : u64.t)).
      
      Definition SIOCGIWGENIE
          :
            M.Val
              ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_ulong) :=
        M.run (M.alloc ((Integer.of_Z 35633) : u64.t)).
      
      Definition SIOCSIWMLME
          :
            M.Val
              ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_ulong) :=
        M.run (M.alloc ((Integer.of_Z 35606) : u64.t)).
      
      Definition SIOCSIWAUTH
          :
            M.Val
              ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_ulong) :=
        M.run (M.alloc ((Integer.of_Z 35634) : u64.t)).
      
      Definition SIOCGIWAUTH
          :
            M.Val
              ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_ulong) :=
        M.run (M.alloc ((Integer.of_Z 35635) : u64.t)).
      
      Definition SIOCSIWENCODEEXT
          :
            M.Val
              ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_ulong) :=
        M.run (M.alloc ((Integer.of_Z 35636) : u64.t)).
      
      Definition SIOCGIWENCODEEXT
          :
            M.Val
              ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_ulong) :=
        M.run (M.alloc ((Integer.of_Z 35637) : u64.t)).
      
      Definition SIOCSIWPMKSA
          :
            M.Val
              ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_ulong) :=
        M.run (M.alloc ((Integer.of_Z 35638) : u64.t)).
      
      Definition SIOCIWFIRSTPRIV
          :
            M.Val
              ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_ulong) :=
        M.run (M.alloc ((Integer.of_Z 35808) : u64.t)).
      
      Definition SIOCIWLASTPRIV
          :
            M.Val
              ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_ulong) :=
        M.run (M.alloc ((Integer.of_Z 35839) : u64.t)).
      
      Definition SIOCIWFIRST
          :
            M.Val
              ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_ulong) :=
        M.run (M.alloc ((Integer.of_Z 35584) : u64.t)).
      
      Definition SIOCIWLAST
          :
            M.Val
              ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_ulong) :=
        M.run (M.pure libc.unix.linux_like.linux.SIOCIWLASTPRIV).
      
      Definition IWEVTXDROP
          :
            M.Val
              ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_ulong) :=
        M.run (M.alloc ((Integer.of_Z 35840) : u64.t)).
      
      Definition IWEVQUAL
          :
            M.Val
              ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_ulong) :=
        M.run (M.alloc ((Integer.of_Z 35841) : u64.t)).
      
      Definition IWEVCUSTOM
          :
            M.Val
              ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_ulong) :=
        M.run (M.alloc ((Integer.of_Z 35842) : u64.t)).
      
      Definition IWEVREGISTERED
          :
            M.Val
              ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_ulong) :=
        M.run (M.alloc ((Integer.of_Z 35843) : u64.t)).
      
      Definition IWEVEXPIRED
          :
            M.Val
              ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_ulong) :=
        M.run (M.alloc ((Integer.of_Z 35844) : u64.t)).
      
      Definition IWEVGENIE
          :
            M.Val
              ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_ulong) :=
        M.run (M.alloc ((Integer.of_Z 35845) : u64.t)).
      
      Definition IWEVMICHAELMICFAILURE
          :
            M.Val
              ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_ulong) :=
        M.run (M.alloc ((Integer.of_Z 35846) : u64.t)).
      
      Definition IWEVASSOCREQIE
          :
            M.Val
              ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_ulong) :=
        M.run (M.alloc ((Integer.of_Z 35847) : u64.t)).
      
      Definition IWEVASSOCRESPIE
          :
            M.Val
              ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_ulong) :=
        M.run (M.alloc ((Integer.of_Z 35848) : u64.t)).
      
      Definition IWEVPMKIDCAND
          :
            M.Val
              ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_ulong) :=
        M.run (M.alloc ((Integer.of_Z 35849) : u64.t)).
      
      Definition IWEVFIRST
          :
            M.Val
              ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_ulong) :=
        M.run (M.alloc ((Integer.of_Z 35840) : u64.t)).
      
      Definition IW_PRIV_TYPE_MASK
          :
            M.Val
              ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_ulong) :=
        M.run (M.alloc ((Integer.of_Z 28672) : u64.t)).
      
      Definition IW_PRIV_TYPE_NONE
          :
            M.Val
              ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_ulong) :=
        M.run (M.alloc ((Integer.of_Z 0) : u64.t)).
      
      Definition IW_PRIV_TYPE_BYTE
          :
            M.Val
              ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_ulong) :=
        M.run (M.alloc ((Integer.of_Z 4096) : u64.t)).
      
      Definition IW_PRIV_TYPE_CHAR
          :
            M.Val
              ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_ulong) :=
        M.run (M.alloc ((Integer.of_Z 8192) : u64.t)).
      
      Definition IW_PRIV_TYPE_INT
          :
            M.Val
              ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_ulong) :=
        M.run (M.alloc ((Integer.of_Z 16384) : u64.t)).
      
      Definition IW_PRIV_TYPE_FLOAT
          :
            M.Val
              ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_ulong) :=
        M.run (M.alloc ((Integer.of_Z 20480) : u64.t)).
      
      Definition IW_PRIV_TYPE_ADDR
          :
            M.Val
              ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_ulong) :=
        M.run (M.alloc ((Integer.of_Z 24576) : u64.t)).
      
      Definition IW_PRIV_SIZE_FIXED
          :
            M.Val
              ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_ulong) :=
        M.run (M.alloc ((Integer.of_Z 2048) : u64.t)).
      
      Definition IW_PRIV_SIZE_MASK
          :
            M.Val
              ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_ulong) :=
        M.run (M.alloc ((Integer.of_Z 2047) : u64.t)).
      
      Definition IW_MAX_FREQUENCIES : M.Val usize.t :=
        M.run (M.alloc ((Integer.of_Z 32) : usize.t)).
      
      Definition IW_MAX_BITRATES : M.Val usize.t :=
        M.run (M.alloc ((Integer.of_Z 32) : usize.t)).
      
      Definition IW_MAX_TXPOWER : M.Val usize.t :=
        M.run (M.alloc ((Integer.of_Z 8) : usize.t)).
      
      Definition IW_MAX_SPY : M.Val usize.t :=
        M.run (M.alloc ((Integer.of_Z 8) : usize.t)).
      
      Definition IW_MAX_AP : M.Val usize.t :=
        M.run (M.alloc ((Integer.of_Z 64) : usize.t)).
      
      Definition IW_ESSID_MAX_SIZE : M.Val usize.t :=
        M.run (M.alloc ((Integer.of_Z 32) : usize.t)).
      
      Definition IW_MODE_AUTO : M.Val usize.t :=
        M.run (M.alloc ((Integer.of_Z 0) : usize.t)).
      
      Definition IW_MODE_ADHOC : M.Val usize.t :=
        M.run (M.alloc ((Integer.of_Z 1) : usize.t)).
      
      Definition IW_MODE_INFRA : M.Val usize.t :=
        M.run (M.alloc ((Integer.of_Z 2) : usize.t)).
      
      Definition IW_MODE_MASTER : M.Val usize.t :=
        M.run (M.alloc ((Integer.of_Z 3) : usize.t)).
      
      Definition IW_MODE_REPEAT : M.Val usize.t :=
        M.run (M.alloc ((Integer.of_Z 4) : usize.t)).
      
      Definition IW_MODE_SECOND : M.Val usize.t :=
        M.run (M.alloc ((Integer.of_Z 5) : usize.t)).
      
      Definition IW_MODE_MONITOR : M.Val usize.t :=
        M.run (M.alloc ((Integer.of_Z 6) : usize.t)).
      
      Definition IW_MODE_MESH : M.Val usize.t :=
        M.run (M.alloc ((Integer.of_Z 7) : usize.t)).
      
      Definition IW_QUAL_QUAL_UPDATED
          :
            M.Val
              ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_ulong) :=
        M.run (M.alloc ((Integer.of_Z 1) : u64.t)).
      
      Definition IW_QUAL_LEVEL_UPDATED
          :
            M.Val
              ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_ulong) :=
        M.run (M.alloc ((Integer.of_Z 2) : u64.t)).
      
      Definition IW_QUAL_NOISE_UPDATED
          :
            M.Val
              ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_ulong) :=
        M.run (M.alloc ((Integer.of_Z 4) : u64.t)).
      
      Definition IW_QUAL_ALL_UPDATED
          :
            M.Val
              ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_ulong) :=
        M.run (M.alloc ((Integer.of_Z 7) : u64.t)).
      
      Definition IW_QUAL_DBM
          :
            M.Val
              ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_ulong) :=
        M.run (M.alloc ((Integer.of_Z 8) : u64.t)).
      
      Definition IW_QUAL_QUAL_INVALID
          :
            M.Val
              ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_ulong) :=
        M.run (M.alloc ((Integer.of_Z 16) : u64.t)).
      
      Definition IW_QUAL_LEVEL_INVALID
          :
            M.Val
              ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_ulong) :=
        M.run (M.alloc ((Integer.of_Z 32) : u64.t)).
      
      Definition IW_QUAL_NOISE_INVALID
          :
            M.Val
              ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_ulong) :=
        M.run (M.alloc ((Integer.of_Z 64) : u64.t)).
      
      Definition IW_QUAL_RCPI
          :
            M.Val
              ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_ulong) :=
        M.run (M.alloc ((Integer.of_Z 128) : u64.t)).
      
      Definition IW_QUAL_ALL_INVALID
          :
            M.Val
              ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_ulong) :=
        M.run (M.alloc ((Integer.of_Z 112) : u64.t)).
      
      Definition IW_FREQ_AUTO
          :
            M.Val
              ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_ulong) :=
        M.run (M.alloc ((Integer.of_Z 0) : u64.t)).
      
      Definition IW_FREQ_FIXED
          :
            M.Val
              ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_ulong) :=
        M.run (M.alloc ((Integer.of_Z 1) : u64.t)).
      
      Definition IW_MAX_ENCODING_SIZES : M.Val usize.t :=
        M.run (M.alloc ((Integer.of_Z 8) : usize.t)).
      
      Definition IW_ENCODING_TOKEN_MAX : M.Val usize.t :=
        M.run (M.alloc ((Integer.of_Z 64) : usize.t)).
      
      Definition IW_ENCODE_INDEX
          :
            M.Val
              ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_ulong) :=
        M.run (M.alloc ((Integer.of_Z 255) : u64.t)).
      
      Definition IW_ENCODE_FLAGS
          :
            M.Val
              ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_ulong) :=
        M.run (M.alloc ((Integer.of_Z 65280) : u64.t)).
      
      Definition IW_ENCODE_MODE
          :
            M.Val
              ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_ulong) :=
        M.run (M.alloc ((Integer.of_Z 61440) : u64.t)).
      
      Definition IW_ENCODE_DISABLED
          :
            M.Val
              ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_ulong) :=
        M.run (M.alloc ((Integer.of_Z 32768) : u64.t)).
      
      Definition IW_ENCODE_ENABLED
          :
            M.Val
              ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_ulong) :=
        M.run (M.alloc ((Integer.of_Z 0) : u64.t)).
      
      Definition IW_ENCODE_RESTRICTED
          :
            M.Val
              ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_ulong) :=
        M.run (M.alloc ((Integer.of_Z 16384) : u64.t)).
      
      Definition IW_ENCODE_OPEN
          :
            M.Val
              ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_ulong) :=
        M.run (M.alloc ((Integer.of_Z 8192) : u64.t)).
      
      Definition IW_ENCODE_NOKEY
          :
            M.Val
              ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_ulong) :=
        M.run (M.alloc ((Integer.of_Z 2048) : u64.t)).
      
      Definition IW_ENCODE_TEMP
          :
            M.Val
              ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_ulong) :=
        M.run (M.alloc ((Integer.of_Z 1024) : u64.t)).
      
      Definition IW_POWER_ON
          :
            M.Val
              ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_ulong) :=
        M.run (M.alloc ((Integer.of_Z 0) : u64.t)).
      
      Definition IW_POWER_TYPE
          :
            M.Val
              ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_ulong) :=
        M.run (M.alloc ((Integer.of_Z 61440) : u64.t)).
      
      Definition IW_POWER_PERIOD
          :
            M.Val
              ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_ulong) :=
        M.run (M.alloc ((Integer.of_Z 4096) : u64.t)).
      
      Definition IW_POWER_TIMEOUT
          :
            M.Val
              ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_ulong) :=
        M.run (M.alloc ((Integer.of_Z 8192) : u64.t)).
      
      Definition IW_POWER_MODE
          :
            M.Val
              ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_ulong) :=
        M.run (M.alloc ((Integer.of_Z 3840) : u64.t)).
      
      Definition IW_POWER_UNICAST_R
          :
            M.Val
              ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_ulong) :=
        M.run (M.alloc ((Integer.of_Z 256) : u64.t)).
      
      Definition IW_POWER_MULTICAST_R
          :
            M.Val
              ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_ulong) :=
        M.run (M.alloc ((Integer.of_Z 512) : u64.t)).
      
      Definition IW_POWER_ALL_R
          :
            M.Val
              ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_ulong) :=
        M.run (M.alloc ((Integer.of_Z 768) : u64.t)).
      
      Definition IW_POWER_FORCE_S
          :
            M.Val
              ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_ulong) :=
        M.run (M.alloc ((Integer.of_Z 1024) : u64.t)).
      
      Definition IW_POWER_REPEATER
          :
            M.Val
              ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_ulong) :=
        M.run (M.alloc ((Integer.of_Z 2048) : u64.t)).
      
      Definition IW_POWER_MODIFIER
          :
            M.Val
              ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_ulong) :=
        M.run (M.alloc ((Integer.of_Z 15) : u64.t)).
      
      Definition IW_POWER_MIN
          :
            M.Val
              ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_ulong) :=
        M.run (M.alloc ((Integer.of_Z 1) : u64.t)).
      
      Definition IW_POWER_MAX
          :
            M.Val
              ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_ulong) :=
        M.run (M.alloc ((Integer.of_Z 2) : u64.t)).
      
      Definition IW_POWER_RELATIVE
          :
            M.Val
              ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_ulong) :=
        M.run (M.alloc ((Integer.of_Z 4) : u64.t)).
      
      Definition IW_TXPOW_TYPE
          :
            M.Val
              ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_ulong) :=
        M.run (M.alloc ((Integer.of_Z 255) : u64.t)).
      
      Definition IW_TXPOW_DBM
          :
            M.Val
              ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_ulong) :=
        M.run (M.alloc ((Integer.of_Z 0) : u64.t)).
      
      Definition IW_TXPOW_MWATT
          :
            M.Val
              ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_ulong) :=
        M.run (M.alloc ((Integer.of_Z 1) : u64.t)).
      
      Definition IW_TXPOW_RELATIVE
          :
            M.Val
              ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_ulong) :=
        M.run (M.alloc ((Integer.of_Z 2) : u64.t)).
      
      Definition IW_TXPOW_RANGE
          :
            M.Val
              ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_ulong) :=
        M.run (M.alloc ((Integer.of_Z 4096) : u64.t)).
      
      Definition IW_RETRY_ON
          :
            M.Val
              ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_ulong) :=
        M.run (M.alloc ((Integer.of_Z 0) : u64.t)).
      
      Definition IW_RETRY_TYPE
          :
            M.Val
              ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_ulong) :=
        M.run (M.alloc ((Integer.of_Z 61440) : u64.t)).
      
      Definition IW_RETRY_LIMIT
          :
            M.Val
              ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_ulong) :=
        M.run (M.alloc ((Integer.of_Z 4096) : u64.t)).
      
      Definition IW_RETRY_LIFETIME
          :
            M.Val
              ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_ulong) :=
        M.run (M.alloc ((Integer.of_Z 8192) : u64.t)).
      
      Definition IW_RETRY_MODIFIER
          :
            M.Val
              ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_ulong) :=
        M.run (M.alloc ((Integer.of_Z 255) : u64.t)).
      
      Definition IW_RETRY_MIN
          :
            M.Val
              ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_ulong) :=
        M.run (M.alloc ((Integer.of_Z 1) : u64.t)).
      
      Definition IW_RETRY_MAX
          :
            M.Val
              ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_ulong) :=
        M.run (M.alloc ((Integer.of_Z 2) : u64.t)).
      
      Definition IW_RETRY_RELATIVE
          :
            M.Val
              ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_ulong) :=
        M.run (M.alloc ((Integer.of_Z 4) : u64.t)).
      
      Definition IW_RETRY_SHORT
          :
            M.Val
              ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_ulong) :=
        M.run (M.alloc ((Integer.of_Z 16) : u64.t)).
      
      Definition IW_RETRY_LONG
          :
            M.Val
              ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_ulong) :=
        M.run (M.alloc ((Integer.of_Z 32) : u64.t)).
      
      Definition IW_SCAN_DEFAULT
          :
            M.Val
              ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_ulong) :=
        M.run (M.alloc ((Integer.of_Z 0) : u64.t)).
      
      Definition IW_SCAN_ALL_ESSID
          :
            M.Val
              ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_ulong) :=
        M.run (M.alloc ((Integer.of_Z 1) : u64.t)).
      
      Definition IW_SCAN_THIS_ESSID
          :
            M.Val
              ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_ulong) :=
        M.run (M.alloc ((Integer.of_Z 2) : u64.t)).
      
      Definition IW_SCAN_ALL_FREQ
          :
            M.Val
              ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_ulong) :=
        M.run (M.alloc ((Integer.of_Z 4) : u64.t)).
      
      Definition IW_SCAN_THIS_FREQ
          :
            M.Val
              ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_ulong) :=
        M.run (M.alloc ((Integer.of_Z 8) : u64.t)).
      
      Definition IW_SCAN_ALL_MODE
          :
            M.Val
              ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_ulong) :=
        M.run (M.alloc ((Integer.of_Z 16) : u64.t)).
      
      Definition IW_SCAN_THIS_MODE
          :
            M.Val
              ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_ulong) :=
        M.run (M.alloc ((Integer.of_Z 32) : u64.t)).
      
      Definition IW_SCAN_ALL_RATE
          :
            M.Val
              ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_ulong) :=
        M.run (M.alloc ((Integer.of_Z 64) : u64.t)).
      
      Definition IW_SCAN_THIS_RATE
          :
            M.Val
              ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_ulong) :=
        M.run (M.alloc ((Integer.of_Z 128) : u64.t)).
      
      Definition IW_SCAN_TYPE_ACTIVE : M.Val usize.t :=
        M.run (M.alloc ((Integer.of_Z 0) : usize.t)).
      
      Definition IW_SCAN_TYPE_PASSIVE : M.Val usize.t :=
        M.run (M.alloc ((Integer.of_Z 1) : usize.t)).
      
      Definition IW_SCAN_MAX_DATA : M.Val usize.t :=
        M.run (M.alloc ((Integer.of_Z 4096) : usize.t)).
      
      Definition IW_SCAN_CAPA_NONE
          :
            M.Val
              ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_ulong) :=
        M.run (M.alloc ((Integer.of_Z 0) : u64.t)).
      
      Definition IW_SCAN_CAPA_ESSID
          :
            M.Val
              ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_ulong) :=
        M.run (M.alloc ((Integer.of_Z 1) : u64.t)).
      
      Definition IW_SCAN_CAPA_BSSID
          :
            M.Val
              ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_ulong) :=
        M.run (M.alloc ((Integer.of_Z 2) : u64.t)).
      
      Definition IW_SCAN_CAPA_CHANNEL
          :
            M.Val
              ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_ulong) :=
        M.run (M.alloc ((Integer.of_Z 4) : u64.t)).
      
      Definition IW_SCAN_CAPA_MODE
          :
            M.Val
              ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_ulong) :=
        M.run (M.alloc ((Integer.of_Z 8) : u64.t)).
      
      Definition IW_SCAN_CAPA_RATE
          :
            M.Val
              ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_ulong) :=
        M.run (M.alloc ((Integer.of_Z 16) : u64.t)).
      
      Definition IW_SCAN_CAPA_TYPE
          :
            M.Val
              ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_ulong) :=
        M.run (M.alloc ((Integer.of_Z 32) : u64.t)).
      
      Definition IW_SCAN_CAPA_TIME
          :
            M.Val
              ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_ulong) :=
        M.run (M.alloc ((Integer.of_Z 64) : u64.t)).
      
      Definition IW_CUSTOM_MAX
          :
            M.Val
              ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_ulong) :=
        M.run (M.alloc ((Integer.of_Z 256) : u64.t)).
      
      Definition IW_GENERIC_IE_MAX
          :
            M.Val
              ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_ulong) :=
        M.run (M.alloc ((Integer.of_Z 1024) : u64.t)).
      
      Definition IW_MLME_DEAUTH
          :
            M.Val
              ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_ulong) :=
        M.run (M.alloc ((Integer.of_Z 0) : u64.t)).
      
      Definition IW_MLME_DISASSOC
          :
            M.Val
              ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_ulong) :=
        M.run (M.alloc ((Integer.of_Z 1) : u64.t)).
      
      Definition IW_MLME_AUTH
          :
            M.Val
              ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_ulong) :=
        M.run (M.alloc ((Integer.of_Z 2) : u64.t)).
      
      Definition IW_MLME_ASSOC
          :
            M.Val
              ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_ulong) :=
        M.run (M.alloc ((Integer.of_Z 3) : u64.t)).
      
      Definition IW_AUTH_INDEX
          :
            M.Val
              ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_ulong) :=
        M.run (M.alloc ((Integer.of_Z 4095) : u64.t)).
      
      Definition IW_AUTH_FLAGS
          :
            M.Val
              ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_ulong) :=
        M.run (M.alloc ((Integer.of_Z 61440) : u64.t)).
      
      Definition IW_AUTH_WPA_VERSION : M.Val usize.t :=
        M.run (M.alloc ((Integer.of_Z 0) : usize.t)).
      
      Definition IW_AUTH_CIPHER_PAIRWISE : M.Val usize.t :=
        M.run (M.alloc ((Integer.of_Z 1) : usize.t)).
      
      Definition IW_AUTH_CIPHER_GROUP : M.Val usize.t :=
        M.run (M.alloc ((Integer.of_Z 2) : usize.t)).
      
      Definition IW_AUTH_KEY_MGMT : M.Val usize.t :=
        M.run (M.alloc ((Integer.of_Z 3) : usize.t)).
      
      Definition IW_AUTH_TKIP_COUNTERMEASURES : M.Val usize.t :=
        M.run (M.alloc ((Integer.of_Z 4) : usize.t)).
      
      Definition IW_AUTH_DROP_UNENCRYPTED : M.Val usize.t :=
        M.run (M.alloc ((Integer.of_Z 5) : usize.t)).
      
      Definition IW_AUTH_80211_AUTH_ALG : M.Val usize.t :=
        M.run (M.alloc ((Integer.of_Z 6) : usize.t)).
      
      Definition IW_AUTH_WPA_ENABLED : M.Val usize.t :=
        M.run (M.alloc ((Integer.of_Z 7) : usize.t)).
      
      Definition IW_AUTH_RX_UNENCRYPTED_EAPOL : M.Val usize.t :=
        M.run (M.alloc ((Integer.of_Z 8) : usize.t)).
      
      Definition IW_AUTH_ROAMING_CONTROL : M.Val usize.t :=
        M.run (M.alloc ((Integer.of_Z 9) : usize.t)).
      
      Definition IW_AUTH_PRIVACY_INVOKED : M.Val usize.t :=
        M.run (M.alloc ((Integer.of_Z 10) : usize.t)).
      
      Definition IW_AUTH_CIPHER_GROUP_MGMT : M.Val usize.t :=
        M.run (M.alloc ((Integer.of_Z 11) : usize.t)).
      
      Definition IW_AUTH_MFP : M.Val usize.t :=
        M.run (M.alloc ((Integer.of_Z 12) : usize.t)).
      
      Definition IW_AUTH_WPA_VERSION_DISABLED
          :
            M.Val
              ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_ulong) :=
        M.run (M.alloc ((Integer.of_Z 1) : u64.t)).
      
      Definition IW_AUTH_WPA_VERSION_WPA
          :
            M.Val
              ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_ulong) :=
        M.run (M.alloc ((Integer.of_Z 2) : u64.t)).
      
      Definition IW_AUTH_WPA_VERSION_WPA2
          :
            M.Val
              ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_ulong) :=
        M.run (M.alloc ((Integer.of_Z 4) : u64.t)).
      
      Definition IW_AUTH_CIPHER_NONE
          :
            M.Val
              ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_ulong) :=
        M.run (M.alloc ((Integer.of_Z 1) : u64.t)).
      
      Definition IW_AUTH_CIPHER_WEP40
          :
            M.Val
              ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_ulong) :=
        M.run (M.alloc ((Integer.of_Z 2) : u64.t)).
      
      Definition IW_AUTH_CIPHER_TKIP
          :
            M.Val
              ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_ulong) :=
        M.run (M.alloc ((Integer.of_Z 4) : u64.t)).
      
      Definition IW_AUTH_CIPHER_CCMP
          :
            M.Val
              ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_ulong) :=
        M.run (M.alloc ((Integer.of_Z 8) : u64.t)).
      
      Definition IW_AUTH_CIPHER_WEP104
          :
            M.Val
              ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_ulong) :=
        M.run (M.alloc ((Integer.of_Z 16) : u64.t)).
      
      Definition IW_AUTH_CIPHER_AES_CMAC
          :
            M.Val
              ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_ulong) :=
        M.run (M.alloc ((Integer.of_Z 32) : u64.t)).
      
      Definition IW_AUTH_KEY_MGMT_802_1X : M.Val usize.t :=
        M.run (M.alloc ((Integer.of_Z 1) : usize.t)).
      
      Definition IW_AUTH_KEY_MGMT_PSK : M.Val usize.t :=
        M.run (M.alloc ((Integer.of_Z 2) : usize.t)).
      
      Definition IW_AUTH_ALG_OPEN_SYSTEM
          :
            M.Val
              ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_ulong) :=
        M.run (M.alloc ((Integer.of_Z 1) : u64.t)).
      
      Definition IW_AUTH_ALG_SHARED_KEY
          :
            M.Val
              ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_ulong) :=
        M.run (M.alloc ((Integer.of_Z 2) : u64.t)).
      
      Definition IW_AUTH_ALG_LEAP
          :
            M.Val
              ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_ulong) :=
        M.run (M.alloc ((Integer.of_Z 4) : u64.t)).
      
      Definition IW_AUTH_ROAMING_ENABLE : M.Val usize.t :=
        M.run (M.alloc ((Integer.of_Z 0) : usize.t)).
      
      Definition IW_AUTH_ROAMING_DISABLE : M.Val usize.t :=
        M.run (M.alloc ((Integer.of_Z 1) : usize.t)).
      
      Definition IW_AUTH_MFP_DISABLED : M.Val usize.t :=
        M.run (M.alloc ((Integer.of_Z 0) : usize.t)).
      
      Definition IW_AUTH_MFP_OPTIONAL : M.Val usize.t :=
        M.run (M.alloc ((Integer.of_Z 1) : usize.t)).
      
      Definition IW_AUTH_MFP_REQUIRED : M.Val usize.t :=
        M.run (M.alloc ((Integer.of_Z 2) : usize.t)).
      
      Definition IW_ENCODE_SEQ_MAX_SIZE : M.Val usize.t :=
        M.run (M.alloc ((Integer.of_Z 8) : usize.t)).
      
      Definition IW_ENCODE_ALG_NONE : M.Val usize.t :=
        M.run (M.alloc ((Integer.of_Z 0) : usize.t)).
      
      Definition IW_ENCODE_ALG_WEP : M.Val usize.t :=
        M.run (M.alloc ((Integer.of_Z 1) : usize.t)).
      
      Definition IW_ENCODE_ALG_TKIP : M.Val usize.t :=
        M.run (M.alloc ((Integer.of_Z 2) : usize.t)).
      
      Definition IW_ENCODE_ALG_CCMP : M.Val usize.t :=
        M.run (M.alloc ((Integer.of_Z 3) : usize.t)).
      
      Definition IW_ENCODE_ALG_PMK : M.Val usize.t :=
        M.run (M.alloc ((Integer.of_Z 4) : usize.t)).
      
      Definition IW_ENCODE_ALG_AES_CMAC : M.Val usize.t :=
        M.run (M.alloc ((Integer.of_Z 5) : usize.t)).
      
      Definition IW_ENCODE_EXT_TX_SEQ_VALID
          :
            M.Val
              ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_ulong) :=
        M.run (M.alloc ((Integer.of_Z 1) : u64.t)).
      
      Definition IW_ENCODE_EXT_RX_SEQ_VALID
          :
            M.Val
              ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_ulong) :=
        M.run (M.alloc ((Integer.of_Z 2) : u64.t)).
      
      Definition IW_ENCODE_EXT_GROUP_KEY
          :
            M.Val
              ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_ulong) :=
        M.run (M.alloc ((Integer.of_Z 4) : u64.t)).
      
      Definition IW_ENCODE_EXT_SET_TX_KEY
          :
            M.Val
              ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_ulong) :=
        M.run (M.alloc ((Integer.of_Z 8) : u64.t)).
      
      Definition IW_MICFAILURE_KEY_ID
          :
            M.Val
              ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_ulong) :=
        M.run (M.alloc ((Integer.of_Z 3) : u64.t)).
      
      Definition IW_MICFAILURE_GROUP
          :
            M.Val
              ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_ulong) :=
        M.run (M.alloc ((Integer.of_Z 4) : u64.t)).
      
      Definition IW_MICFAILURE_PAIRWISE
          :
            M.Val
              ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_ulong) :=
        M.run (M.alloc ((Integer.of_Z 8) : u64.t)).
      
      Definition IW_MICFAILURE_STAKEY
          :
            M.Val
              ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_ulong) :=
        M.run (M.alloc ((Integer.of_Z 16) : u64.t)).
      
      Definition IW_MICFAILURE_COUNT
          :
            M.Val
              ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_ulong) :=
        M.run (M.alloc ((Integer.of_Z 96) : u64.t)).
      
      Definition IW_ENC_CAPA_WPA
          :
            M.Val
              ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_ulong) :=
        M.run (M.alloc ((Integer.of_Z 1) : u64.t)).
      
      Definition IW_ENC_CAPA_WPA2
          :
            M.Val
              ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_ulong) :=
        M.run (M.alloc ((Integer.of_Z 2) : u64.t)).
      
      Definition IW_ENC_CAPA_CIPHER_TKIP
          :
            M.Val
              ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_ulong) :=
        M.run (M.alloc ((Integer.of_Z 4) : u64.t)).
      
      Definition IW_ENC_CAPA_CIPHER_CCMP
          :
            M.Val
              ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_ulong) :=
        M.run (M.alloc ((Integer.of_Z 8) : u64.t)).
      
      Definition IW_ENC_CAPA_4WAY_HANDSHAKE
          :
            M.Val
              ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_ulong) :=
        M.run (M.alloc ((Integer.of_Z 16) : u64.t)).
      
      Definition IW_EVENT_CAPA_K_0
          :
            M.Val
              ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_ulong) :=
        M.run (M.alloc ((Integer.of_Z 67108944) : u64.t)).
      
      Definition IW_EVENT_CAPA_K_1
          :
            M.Val
              ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_ulong) :=
        M.run (M.alloc ((Integer.of_Z 1024) : u64.t)).
      
      Definition IW_PMKSA_ADD : M.Val usize.t :=
        M.run (M.alloc ((Integer.of_Z 1) : usize.t)).
      
      Definition IW_PMKSA_REMOVE : M.Val usize.t :=
        M.run (M.alloc ((Integer.of_Z 2) : usize.t)).
      
      Definition IW_PMKSA_FLUSH : M.Val usize.t :=
        M.run (M.alloc ((Integer.of_Z 3) : usize.t)).
      
      Definition IW_PMKID_LEN : M.Val usize.t :=
        M.run (M.alloc ((Integer.of_Z 16) : usize.t)).
      
      Definition IW_PMKID_CAND_PREAUTH
          :
            M.Val
              ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_ulong) :=
        M.run (M.alloc ((Integer.of_Z 1) : u64.t)).
      
      Definition IW_EV_LCP_PK_LEN : M.Val usize.t :=
        M.run (M.alloc ((Integer.of_Z 4) : usize.t)).
      
      Definition IW_EV_CHAR_PK_LEN : M.Val usize.t :=
        M.run (M.alloc ((Integer.of_Z 20) : usize.t)).
      
      Definition IW_EV_UINT_PK_LEN : M.Val usize.t :=
        M.run (M.alloc ((Integer.of_Z 8) : usize.t)).
      
      Definition IW_EV_FREQ_PK_LEN : M.Val usize.t :=
        M.run (M.alloc ((Integer.of_Z 12) : usize.t)).
      
      Definition IW_EV_PARAM_PK_LEN : M.Val usize.t :=
        M.run (M.alloc ((Integer.of_Z 12) : usize.t)).
      
      Definition IW_EV_ADDR_PK_LEN : M.Val usize.t :=
        M.run (M.alloc ((Integer.of_Z 20) : usize.t)).
      
      Definition IW_EV_QUAL_PK_LEN : M.Val usize.t :=
        M.run (M.alloc ((Integer.of_Z 8) : usize.t)).
      
      Definition IW_EV_POINT_PK_LEN : M.Val usize.t :=
        M.run (M.alloc ((Integer.of_Z 8) : usize.t)).
      
      Definition IPTOS_TOS_MASK : M.Val u8.t :=
        M.run (M.alloc ((Integer.of_Z 30) : u8.t)).
      
      Definition IPTOS_PREC_MASK : M.Val u8.t :=
        M.run (M.alloc ((Integer.of_Z 224) : u8.t)).
      
      Definition IPTOS_ECN_NOT_ECT : M.Val u8.t :=
        M.run (M.alloc ((Integer.of_Z 0) : u8.t)).
      
      Definition RTF_UP : M.Val ltac:(libc.unix.c_ushort) :=
        M.run (M.alloc ((Integer.of_Z 1) : u16.t)).
      
      Definition RTF_GATEWAY : M.Val ltac:(libc.unix.c_ushort) :=
        M.run (M.alloc ((Integer.of_Z 2) : u16.t)).
      
      Definition RTF_HOST : M.Val ltac:(libc.unix.c_ushort) :=
        M.run (M.alloc ((Integer.of_Z 4) : u16.t)).
      
      Definition RTF_REINSTATE : M.Val ltac:(libc.unix.c_ushort) :=
        M.run (M.alloc ((Integer.of_Z 8) : u16.t)).
      
      Definition RTF_DYNAMIC : M.Val ltac:(libc.unix.c_ushort) :=
        M.run (M.alloc ((Integer.of_Z 16) : u16.t)).
      
      Definition RTF_MODIFIED : M.Val ltac:(libc.unix.c_ushort) :=
        M.run (M.alloc ((Integer.of_Z 32) : u16.t)).
      
      Definition RTF_MTU : M.Val ltac:(libc.unix.c_ushort) :=
        M.run (M.alloc ((Integer.of_Z 64) : u16.t)).
      
      Definition RTF_MSS : M.Val ltac:(libc.unix.c_ushort) :=
        M.run (M.pure libc.unix.linux_like.linux.RTF_MTU).
      
      Definition RTF_WINDOW : M.Val ltac:(libc.unix.c_ushort) :=
        M.run (M.alloc ((Integer.of_Z 128) : u16.t)).
      
      Definition RTF_IRTT : M.Val ltac:(libc.unix.c_ushort) :=
        M.run (M.alloc ((Integer.of_Z 256) : u16.t)).
      
      Definition RTF_REJECT : M.Val ltac:(libc.unix.c_ushort) :=
        M.run (M.alloc ((Integer.of_Z 512) : u16.t)).
      
      Definition RTF_STATIC : M.Val ltac:(libc.unix.c_ushort) :=
        M.run (M.alloc ((Integer.of_Z 1024) : u16.t)).
      
      Definition RTF_XRESOLVE : M.Val ltac:(libc.unix.c_ushort) :=
        M.run (M.alloc ((Integer.of_Z 2048) : u16.t)).
      
      Definition RTF_NOFORWARD : M.Val ltac:(libc.unix.c_ushort) :=
        M.run (M.alloc ((Integer.of_Z 4096) : u16.t)).
      
      Definition RTF_THROW : M.Val ltac:(libc.unix.c_ushort) :=
        M.run (M.alloc ((Integer.of_Z 8192) : u16.t)).
      
      Definition RTF_NOPMTUDISC : M.Val ltac:(libc.unix.c_ushort) :=
        M.run (M.alloc ((Integer.of_Z 16384) : u16.t)).
      
      Definition RTF_DEFAULT : M.Val u32.t :=
        M.run (M.alloc ((Integer.of_Z 65536) : u32.t)).
      
      Definition RTF_ALLONLINK : M.Val u32.t :=
        M.run (M.alloc ((Integer.of_Z 131072) : u32.t)).
      
      Definition RTF_ADDRCONF : M.Val u32.t :=
        M.run (M.alloc ((Integer.of_Z 262144) : u32.t)).
      
      Definition RTF_LINKRT : M.Val u32.t :=
        M.run (M.alloc ((Integer.of_Z 1048576) : u32.t)).
      
      Definition RTF_NONEXTHOP : M.Val u32.t :=
        M.run (M.alloc ((Integer.of_Z 2097152) : u32.t)).
      
      Definition RTF_CACHE : M.Val u32.t :=
        M.run (M.alloc ((Integer.of_Z 16777216) : u32.t)).
      
      Definition RTF_FLOW : M.Val u32.t :=
        M.run (M.alloc ((Integer.of_Z 33554432) : u32.t)).
      
      Definition RTF_POLICY : M.Val u32.t :=
        M.run (M.alloc ((Integer.of_Z 67108864) : u32.t)).
      
      Definition RTCF_VALVE : M.Val u32.t :=
        M.run (M.alloc ((Integer.of_Z 2097152) : u32.t)).
      
      Definition RTCF_MASQ : M.Val u32.t :=
        M.run (M.alloc ((Integer.of_Z 4194304) : u32.t)).
      
      Definition RTCF_NAT : M.Val u32.t :=
        M.run (M.alloc ((Integer.of_Z 8388608) : u32.t)).
      
      Definition RTCF_DOREDIRECT : M.Val u32.t :=
        M.run (M.alloc ((Integer.of_Z 16777216) : u32.t)).
      
      Definition RTCF_LOG : M.Val u32.t :=
        M.run (M.alloc ((Integer.of_Z 33554432) : u32.t)).
      
      Definition RTCF_DIRECTSRC : M.Val u32.t :=
        M.run (M.alloc ((Integer.of_Z 67108864) : u32.t)).
      
      Definition RTF_LOCAL : M.Val u32.t :=
        M.run (M.alloc ((Integer.of_Z 2147483648) : u32.t)).
      
      Definition RTF_INTERFACE : M.Val u32.t :=
        M.run (M.alloc ((Integer.of_Z 1073741824) : u32.t)).
      
      Definition RTF_MULTICAST : M.Val u32.t :=
        M.run (M.alloc ((Integer.of_Z 536870912) : u32.t)).
      
      Definition RTF_BROADCAST : M.Val u32.t :=
        M.run (M.alloc ((Integer.of_Z 268435456) : u32.t)).
      
      Definition RTF_NAT : M.Val u32.t :=
        M.run (M.alloc ((Integer.of_Z 134217728) : u32.t)).
      
      Definition RTF_ADDRCLASSMASK : M.Val u32.t :=
        M.run (M.alloc ((Integer.of_Z 4160749568) : u32.t)).
      
      Definition RT_CLASS_UNSPEC : M.Val u8.t :=
        M.run (M.alloc ((Integer.of_Z 0) : u8.t)).
      
      Definition RT_CLASS_DEFAULT : M.Val u8.t :=
        M.run (M.alloc ((Integer.of_Z 253) : u8.t)).
      
      Definition RT_CLASS_MAIN : M.Val u8.t :=
        M.run (M.alloc ((Integer.of_Z 254) : u8.t)).
      
      Definition RT_CLASS_LOCAL : M.Val u8.t :=
        M.run (M.alloc ((Integer.of_Z 255) : u8.t)).
      
      Definition RT_CLASS_MAX : M.Val u8.t :=
        M.run (M.alloc ((Integer.of_Z 255) : u8.t)).
      
      Definition NUD_NONE : M.Val u16.t :=
        M.run (M.alloc ((Integer.of_Z 0) : u16.t)).
      
      Definition NUD_INCOMPLETE : M.Val u16.t :=
        M.run (M.alloc ((Integer.of_Z 1) : u16.t)).
      
      Definition NUD_REACHABLE : M.Val u16.t :=
        M.run (M.alloc ((Integer.of_Z 2) : u16.t)).
      
      Definition NUD_STALE : M.Val u16.t :=
        M.run (M.alloc ((Integer.of_Z 4) : u16.t)).
      
      Definition NUD_DELAY : M.Val u16.t :=
        M.run (M.alloc ((Integer.of_Z 8) : u16.t)).
      
      Definition NUD_PROBE : M.Val u16.t :=
        M.run (M.alloc ((Integer.of_Z 16) : u16.t)).
      
      Definition NUD_FAILED : M.Val u16.t :=
        M.run (M.alloc ((Integer.of_Z 32) : u16.t)).
      
      Definition NUD_NOARP : M.Val u16.t :=
        M.run (M.alloc ((Integer.of_Z 64) : u16.t)).
      
      Definition NUD_PERMANENT : M.Val u16.t :=
        M.run (M.alloc ((Integer.of_Z 128) : u16.t)).
      
      Definition NTF_USE : M.Val u8.t :=
        M.run (M.alloc ((Integer.of_Z 1) : u8.t)).
      
      Definition NTF_SELF : M.Val u8.t :=
        M.run (M.alloc ((Integer.of_Z 2) : u8.t)).
      
      Definition NTF_MASTER : M.Val u8.t :=
        M.run (M.alloc ((Integer.of_Z 4) : u8.t)).
      
      Definition NTF_PROXY : M.Val u8.t :=
        M.run (M.alloc ((Integer.of_Z 8) : u8.t)).
      
      Definition NTF_ROUTER : M.Val u8.t :=
        M.run (M.alloc ((Integer.of_Z 128) : u8.t)).
      
      Definition NDA_UNSPEC : M.Val ltac:(libc.unix.c_ushort) :=
        M.run (M.alloc ((Integer.of_Z 0) : u16.t)).
      
      Definition NDA_DST : M.Val ltac:(libc.unix.c_ushort) :=
        M.run (M.alloc ((Integer.of_Z 1) : u16.t)).
      
      Definition NDA_LLADDR : M.Val ltac:(libc.unix.c_ushort) :=
        M.run (M.alloc ((Integer.of_Z 2) : u16.t)).
      
      Definition NDA_CACHEINFO : M.Val ltac:(libc.unix.c_ushort) :=
        M.run (M.alloc ((Integer.of_Z 3) : u16.t)).
      
      Definition NDA_PROBES : M.Val ltac:(libc.unix.c_ushort) :=
        M.run (M.alloc ((Integer.of_Z 4) : u16.t)).
      
      Definition NDA_VLAN : M.Val ltac:(libc.unix.c_ushort) :=
        M.run (M.alloc ((Integer.of_Z 5) : u16.t)).
      
      Definition NDA_PORT : M.Val ltac:(libc.unix.c_ushort) :=
        M.run (M.alloc ((Integer.of_Z 6) : u16.t)).
      
      Definition NDA_VNI : M.Val ltac:(libc.unix.c_ushort) :=
        M.run (M.alloc ((Integer.of_Z 7) : u16.t)).
      
      Definition NDA_IFINDEX : M.Val ltac:(libc.unix.c_ushort) :=
        M.run (M.alloc ((Integer.of_Z 8) : u16.t)).
      
      Definition NLA_ALIGNTO : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 4) : i32.t)).
      
      Definition NETLINK_ROUTE : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 0) : i32.t)).
      
      Definition NETLINK_UNUSED : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 1) : i32.t)).
      
      Definition NETLINK_USERSOCK : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 2) : i32.t)).
      
      Definition NETLINK_FIREWALL : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 3) : i32.t)).
      
      Definition NETLINK_SOCK_DIAG : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 4) : i32.t)).
      
      Definition NETLINK_NFLOG : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 5) : i32.t)).
      
      Definition NETLINK_XFRM : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 6) : i32.t)).
      
      Definition NETLINK_SELINUX : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 7) : i32.t)).
      
      Definition NETLINK_ISCSI : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 8) : i32.t)).
      
      Definition NETLINK_AUDIT : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 9) : i32.t)).
      
      Definition NETLINK_FIB_LOOKUP : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 10) : i32.t)).
      
      Definition NETLINK_CONNECTOR : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 11) : i32.t)).
      
      Definition NETLINK_NETFILTER : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 12) : i32.t)).
      
      Definition NETLINK_IP6_FW : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 13) : i32.t)).
      
      Definition NETLINK_DNRTMSG : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 14) : i32.t)).
      
      Definition NETLINK_KOBJECT_UEVENT : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 15) : i32.t)).
      
      Definition NETLINK_GENERIC : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 16) : i32.t)).
      
      Definition NETLINK_SCSITRANSPORT : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 18) : i32.t)).
      
      Definition NETLINK_ECRYPTFS : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 19) : i32.t)).
      
      Definition NETLINK_RDMA : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 20) : i32.t)).
      
      Definition NETLINK_CRYPTO : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 21) : i32.t)).
      
      Definition NETLINK_INET_DIAG : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.pure libc.unix.linux_like.linux.NETLINK_SOCK_DIAG).
      
      Definition NLM_F_REQUEST : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 1) : i32.t)).
      
      Definition NLM_F_MULTI : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 2) : i32.t)).
      
      Definition NLM_F_ACK : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 4) : i32.t)).
      
      Definition NLM_F_ECHO : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 8) : i32.t)).
      
      Definition NLM_F_DUMP_INTR : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 16) : i32.t)).
      
      Definition NLM_F_DUMP_FILTERED : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 32) : i32.t)).
      
      Definition NLM_F_ROOT : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 256) : i32.t)).
      
      Definition NLM_F_MATCH : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 512) : i32.t)).
      
      Definition NLM_F_ATOMIC : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 1024) : i32.t)).
      
      Definition NLM_F_DUMP : M.Val ltac:(libc.unix.c_int) :=
        M.run
          (let* α0 : i32.t := M.read libc.unix.linux_like.linux.NLM_F_ROOT in
          let* α1 : i32.t := M.read libc.unix.linux_like.linux.NLM_F_MATCH in
          M.alloc (BinOp.Pure.bit_or α0 α1)).
      
      Definition NLM_F_REPLACE : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 256) : i32.t)).
      
      Definition NLM_F_EXCL : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 512) : i32.t)).
      
      Definition NLM_F_CREATE : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 1024) : i32.t)).
      
      Definition NLM_F_APPEND : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 2048) : i32.t)).
      
      Definition NETLINK_ADD_MEMBERSHIP : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 1) : i32.t)).
      
      Definition NETLINK_DROP_MEMBERSHIP : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 2) : i32.t)).
      
      Definition NETLINK_PKTINFO : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 3) : i32.t)).
      
      Definition NETLINK_BROADCAST_ERROR : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 4) : i32.t)).
      
      Definition NETLINK_NO_ENOBUFS : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 5) : i32.t)).
      
      Definition NETLINK_RX_RING : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 6) : i32.t)).
      
      Definition NETLINK_TX_RING : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 7) : i32.t)).
      
      Definition NETLINK_LISTEN_ALL_NSID : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 8) : i32.t)).
      
      Definition NETLINK_LIST_MEMBERSHIPS : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 9) : i32.t)).
      
      Definition NETLINK_CAP_ACK : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 10) : i32.t)).
      
      Definition NETLINK_EXT_ACK : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 11) : i32.t)).
      
      Definition NETLINK_GET_STRICT_CHK : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 12) : i32.t)).
      
      Definition NLA_F_NESTED : M.Val ltac:(libc.unix.c_int) :=
        M.run
          (let* α0 : i32.t :=
            BinOp.Panic.shl
              ((Integer.of_Z 1) : i32.t)
              ((Integer.of_Z 15) : i32.t) in
          M.alloc α0).
      
      Definition NLA_F_NET_BYTEORDER : M.Val ltac:(libc.unix.c_int) :=
        M.run
          (let* α0 : i32.t :=
            BinOp.Panic.shl
              ((Integer.of_Z 1) : i32.t)
              ((Integer.of_Z 14) : i32.t) in
          M.alloc α0).
      
      Definition NLA_TYPE_MASK : M.Val ltac:(libc.unix.c_int) :=
        M.run
          (let* α0 : i32.t := M.read libc.unix.linux_like.linux.NLA_F_NESTED in
          let* α1 : i32.t :=
            M.read libc.unix.linux_like.linux.NLA_F_NET_BYTEORDER in
          M.alloc (UnOp.not (BinOp.Pure.bit_or α0 α1))).
      
      Definition TCA_UNSPEC : M.Val ltac:(libc.unix.c_ushort) :=
        M.run (M.alloc ((Integer.of_Z 0) : u16.t)).
      
      Definition TCA_KIND : M.Val ltac:(libc.unix.c_ushort) :=
        M.run (M.alloc ((Integer.of_Z 1) : u16.t)).
      
      Definition TCA_OPTIONS : M.Val ltac:(libc.unix.c_ushort) :=
        M.run (M.alloc ((Integer.of_Z 2) : u16.t)).
      
      Definition TCA_STATS : M.Val ltac:(libc.unix.c_ushort) :=
        M.run (M.alloc ((Integer.of_Z 3) : u16.t)).
      
      Definition TCA_XSTATS : M.Val ltac:(libc.unix.c_ushort) :=
        M.run (M.alloc ((Integer.of_Z 4) : u16.t)).
      
      Definition TCA_RATE : M.Val ltac:(libc.unix.c_ushort) :=
        M.run (M.alloc ((Integer.of_Z 5) : u16.t)).
      
      Definition TCA_FCNT : M.Val ltac:(libc.unix.c_ushort) :=
        M.run (M.alloc ((Integer.of_Z 6) : u16.t)).
      
      Definition TCA_STATS2 : M.Val ltac:(libc.unix.c_ushort) :=
        M.run (M.alloc ((Integer.of_Z 7) : u16.t)).
      
      Definition TCA_STAB : M.Val ltac:(libc.unix.c_ushort) :=
        M.run (M.alloc ((Integer.of_Z 8) : u16.t)).
      
      Definition RTM_NEWLINK : M.Val u16.t :=
        M.run (M.alloc ((Integer.of_Z 16) : u16.t)).
      
      Definition RTM_DELLINK : M.Val u16.t :=
        M.run (M.alloc ((Integer.of_Z 17) : u16.t)).
      
      Definition RTM_GETLINK : M.Val u16.t :=
        M.run (M.alloc ((Integer.of_Z 18) : u16.t)).
      
      Definition RTM_SETLINK : M.Val u16.t :=
        M.run (M.alloc ((Integer.of_Z 19) : u16.t)).
      
      Definition RTM_NEWADDR : M.Val u16.t :=
        M.run (M.alloc ((Integer.of_Z 20) : u16.t)).
      
      Definition RTM_DELADDR : M.Val u16.t :=
        M.run (M.alloc ((Integer.of_Z 21) : u16.t)).
      
      Definition RTM_GETADDR : M.Val u16.t :=
        M.run (M.alloc ((Integer.of_Z 22) : u16.t)).
      
      Definition RTM_NEWROUTE : M.Val u16.t :=
        M.run (M.alloc ((Integer.of_Z 24) : u16.t)).
      
      Definition RTM_DELROUTE : M.Val u16.t :=
        M.run (M.alloc ((Integer.of_Z 25) : u16.t)).
      
      Definition RTM_GETROUTE : M.Val u16.t :=
        M.run (M.alloc ((Integer.of_Z 26) : u16.t)).
      
      Definition RTM_NEWNEIGH : M.Val u16.t :=
        M.run (M.alloc ((Integer.of_Z 28) : u16.t)).
      
      Definition RTM_DELNEIGH : M.Val u16.t :=
        M.run (M.alloc ((Integer.of_Z 29) : u16.t)).
      
      Definition RTM_GETNEIGH : M.Val u16.t :=
        M.run (M.alloc ((Integer.of_Z 30) : u16.t)).
      
      Definition RTM_NEWRULE : M.Val u16.t :=
        M.run (M.alloc ((Integer.of_Z 32) : u16.t)).
      
      Definition RTM_DELRULE : M.Val u16.t :=
        M.run (M.alloc ((Integer.of_Z 33) : u16.t)).
      
      Definition RTM_GETRULE : M.Val u16.t :=
        M.run (M.alloc ((Integer.of_Z 34) : u16.t)).
      
      Definition RTM_NEWQDISC : M.Val u16.t :=
        M.run (M.alloc ((Integer.of_Z 36) : u16.t)).
      
      Definition RTM_DELQDISC : M.Val u16.t :=
        M.run (M.alloc ((Integer.of_Z 37) : u16.t)).
      
      Definition RTM_GETQDISC : M.Val u16.t :=
        M.run (M.alloc ((Integer.of_Z 38) : u16.t)).
      
      Definition RTM_NEWTCLASS : M.Val u16.t :=
        M.run (M.alloc ((Integer.of_Z 40) : u16.t)).
      
      Definition RTM_DELTCLASS : M.Val u16.t :=
        M.run (M.alloc ((Integer.of_Z 41) : u16.t)).
      
      Definition RTM_GETTCLASS : M.Val u16.t :=
        M.run (M.alloc ((Integer.of_Z 42) : u16.t)).
      
      Definition RTM_NEWTFILTER : M.Val u16.t :=
        M.run (M.alloc ((Integer.of_Z 44) : u16.t)).
      
      Definition RTM_DELTFILTER : M.Val u16.t :=
        M.run (M.alloc ((Integer.of_Z 45) : u16.t)).
      
      Definition RTM_GETTFILTER : M.Val u16.t :=
        M.run (M.alloc ((Integer.of_Z 46) : u16.t)).
      
      Definition RTM_NEWACTION : M.Val u16.t :=
        M.run (M.alloc ((Integer.of_Z 48) : u16.t)).
      
      Definition RTM_DELACTION : M.Val u16.t :=
        M.run (M.alloc ((Integer.of_Z 49) : u16.t)).
      
      Definition RTM_GETACTION : M.Val u16.t :=
        M.run (M.alloc ((Integer.of_Z 50) : u16.t)).
      
      Definition RTM_NEWPREFIX : M.Val u16.t :=
        M.run (M.alloc ((Integer.of_Z 52) : u16.t)).
      
      Definition RTM_GETMULTICAST : M.Val u16.t :=
        M.run (M.alloc ((Integer.of_Z 58) : u16.t)).
      
      Definition RTM_GETANYCAST : M.Val u16.t :=
        M.run (M.alloc ((Integer.of_Z 62) : u16.t)).
      
      Definition RTM_NEWNEIGHTBL : M.Val u16.t :=
        M.run (M.alloc ((Integer.of_Z 64) : u16.t)).
      
      Definition RTM_GETNEIGHTBL : M.Val u16.t :=
        M.run (M.alloc ((Integer.of_Z 66) : u16.t)).
      
      Definition RTM_SETNEIGHTBL : M.Val u16.t :=
        M.run (M.alloc ((Integer.of_Z 67) : u16.t)).
      
      Definition RTM_NEWNDUSEROPT : M.Val u16.t :=
        M.run (M.alloc ((Integer.of_Z 68) : u16.t)).
      
      Definition RTM_NEWADDRLABEL : M.Val u16.t :=
        M.run (M.alloc ((Integer.of_Z 72) : u16.t)).
      
      Definition RTM_DELADDRLABEL : M.Val u16.t :=
        M.run (M.alloc ((Integer.of_Z 73) : u16.t)).
      
      Definition RTM_GETADDRLABEL : M.Val u16.t :=
        M.run (M.alloc ((Integer.of_Z 74) : u16.t)).
      
      Definition RTM_GETDCB : M.Val u16.t :=
        M.run (M.alloc ((Integer.of_Z 78) : u16.t)).
      
      Definition RTM_SETDCB : M.Val u16.t :=
        M.run (M.alloc ((Integer.of_Z 79) : u16.t)).
      
      Definition RTM_NEWNETCONF : M.Val u16.t :=
        M.run (M.alloc ((Integer.of_Z 80) : u16.t)).
      
      Definition RTM_GETNETCONF : M.Val u16.t :=
        M.run (M.alloc ((Integer.of_Z 82) : u16.t)).
      
      Definition RTM_NEWMDB : M.Val u16.t :=
        M.run (M.alloc ((Integer.of_Z 84) : u16.t)).
      
      Definition RTM_DELMDB : M.Val u16.t :=
        M.run (M.alloc ((Integer.of_Z 85) : u16.t)).
      
      Definition RTM_GETMDB : M.Val u16.t :=
        M.run (M.alloc ((Integer.of_Z 86) : u16.t)).
      
      Definition RTM_NEWNSID : M.Val u16.t :=
        M.run (M.alloc ((Integer.of_Z 88) : u16.t)).
      
      Definition RTM_DELNSID : M.Val u16.t :=
        M.run (M.alloc ((Integer.of_Z 89) : u16.t)).
      
      Definition RTM_GETNSID : M.Val u16.t :=
        M.run (M.alloc ((Integer.of_Z 90) : u16.t)).
      
      Definition RTM_F_NOTIFY : M.Val ltac:(libc.unix.c_uint) :=
        M.run (M.alloc ((Integer.of_Z 256) : u32.t)).
      
      Definition RTM_F_CLONED : M.Val ltac:(libc.unix.c_uint) :=
        M.run (M.alloc ((Integer.of_Z 512) : u32.t)).
      
      Definition RTM_F_EQUALIZE : M.Val ltac:(libc.unix.c_uint) :=
        M.run (M.alloc ((Integer.of_Z 1024) : u32.t)).
      
      Definition RTM_F_PREFIX : M.Val ltac:(libc.unix.c_uint) :=
        M.run (M.alloc ((Integer.of_Z 2048) : u32.t)).
      
      Definition RTA_UNSPEC : M.Val ltac:(libc.unix.c_ushort) :=
        M.run (M.alloc ((Integer.of_Z 0) : u16.t)).
      
      Definition RTA_DST : M.Val ltac:(libc.unix.c_ushort) :=
        M.run (M.alloc ((Integer.of_Z 1) : u16.t)).
      
      Definition RTA_SRC : M.Val ltac:(libc.unix.c_ushort) :=
        M.run (M.alloc ((Integer.of_Z 2) : u16.t)).
      
      Definition RTA_IIF : M.Val ltac:(libc.unix.c_ushort) :=
        M.run (M.alloc ((Integer.of_Z 3) : u16.t)).
      
      Definition RTA_OIF : M.Val ltac:(libc.unix.c_ushort) :=
        M.run (M.alloc ((Integer.of_Z 4) : u16.t)).
      
      Definition RTA_GATEWAY : M.Val ltac:(libc.unix.c_ushort) :=
        M.run (M.alloc ((Integer.of_Z 5) : u16.t)).
      
      Definition RTA_PRIORITY : M.Val ltac:(libc.unix.c_ushort) :=
        M.run (M.alloc ((Integer.of_Z 6) : u16.t)).
      
      Definition RTA_PREFSRC : M.Val ltac:(libc.unix.c_ushort) :=
        M.run (M.alloc ((Integer.of_Z 7) : u16.t)).
      
      Definition RTA_METRICS : M.Val ltac:(libc.unix.c_ushort) :=
        M.run (M.alloc ((Integer.of_Z 8) : u16.t)).
      
      Definition RTA_MULTIPATH : M.Val ltac:(libc.unix.c_ushort) :=
        M.run (M.alloc ((Integer.of_Z 9) : u16.t)).
      
      Definition RTA_PROTOINFO : M.Val ltac:(libc.unix.c_ushort) :=
        M.run (M.alloc ((Integer.of_Z 10) : u16.t)).
      
      Definition RTA_FLOW : M.Val ltac:(libc.unix.c_ushort) :=
        M.run (M.alloc ((Integer.of_Z 11) : u16.t)).
      
      Definition RTA_CACHEINFO : M.Val ltac:(libc.unix.c_ushort) :=
        M.run (M.alloc ((Integer.of_Z 12) : u16.t)).
      
      Definition RTA_SESSION : M.Val ltac:(libc.unix.c_ushort) :=
        M.run (M.alloc ((Integer.of_Z 13) : u16.t)).
      
      Definition RTA_MP_ALGO : M.Val ltac:(libc.unix.c_ushort) :=
        M.run (M.alloc ((Integer.of_Z 14) : u16.t)).
      
      Definition RTA_TABLE : M.Val ltac:(libc.unix.c_ushort) :=
        M.run (M.alloc ((Integer.of_Z 15) : u16.t)).
      
      Definition RTA_MARK : M.Val ltac:(libc.unix.c_ushort) :=
        M.run (M.alloc ((Integer.of_Z 16) : u16.t)).
      
      Definition RTA_MFC_STATS : M.Val ltac:(libc.unix.c_ushort) :=
        M.run (M.alloc ((Integer.of_Z 17) : u16.t)).
      
      Definition RTN_UNSPEC : M.Val ltac:(libc.unix.c_uchar) :=
        M.run (M.alloc ((Integer.of_Z 0) : u8.t)).
      
      Definition RTN_UNICAST : M.Val ltac:(libc.unix.c_uchar) :=
        M.run (M.alloc ((Integer.of_Z 1) : u8.t)).
      
      Definition RTN_LOCAL : M.Val ltac:(libc.unix.c_uchar) :=
        M.run (M.alloc ((Integer.of_Z 2) : u8.t)).
      
      Definition RTN_BROADCAST : M.Val ltac:(libc.unix.c_uchar) :=
        M.run (M.alloc ((Integer.of_Z 3) : u8.t)).
      
      Definition RTN_ANYCAST : M.Val ltac:(libc.unix.c_uchar) :=
        M.run (M.alloc ((Integer.of_Z 4) : u8.t)).
      
      Definition RTN_MULTICAST : M.Val ltac:(libc.unix.c_uchar) :=
        M.run (M.alloc ((Integer.of_Z 5) : u8.t)).
      
      Definition RTN_BLACKHOLE : M.Val ltac:(libc.unix.c_uchar) :=
        M.run (M.alloc ((Integer.of_Z 6) : u8.t)).
      
      Definition RTN_UNREACHABLE : M.Val ltac:(libc.unix.c_uchar) :=
        M.run (M.alloc ((Integer.of_Z 7) : u8.t)).
      
      Definition RTN_PROHIBIT : M.Val ltac:(libc.unix.c_uchar) :=
        M.run (M.alloc ((Integer.of_Z 8) : u8.t)).
      
      Definition RTN_THROW : M.Val ltac:(libc.unix.c_uchar) :=
        M.run (M.alloc ((Integer.of_Z 9) : u8.t)).
      
      Definition RTN_NAT : M.Val ltac:(libc.unix.c_uchar) :=
        M.run (M.alloc ((Integer.of_Z 10) : u8.t)).
      
      Definition RTN_XRESOLVE : M.Val ltac:(libc.unix.c_uchar) :=
        M.run (M.alloc ((Integer.of_Z 11) : u8.t)).
      
      Definition RTPROT_UNSPEC : M.Val ltac:(libc.unix.c_uchar) :=
        M.run (M.alloc ((Integer.of_Z 0) : u8.t)).
      
      Definition RTPROT_REDIRECT : M.Val ltac:(libc.unix.c_uchar) :=
        M.run (M.alloc ((Integer.of_Z 1) : u8.t)).
      
      Definition RTPROT_KERNEL : M.Val ltac:(libc.unix.c_uchar) :=
        M.run (M.alloc ((Integer.of_Z 2) : u8.t)).
      
      Definition RTPROT_BOOT : M.Val ltac:(libc.unix.c_uchar) :=
        M.run (M.alloc ((Integer.of_Z 3) : u8.t)).
      
      Definition RTPROT_STATIC : M.Val ltac:(libc.unix.c_uchar) :=
        M.run (M.alloc ((Integer.of_Z 4) : u8.t)).
      
      Definition RT_SCOPE_UNIVERSE : M.Val ltac:(libc.unix.c_uchar) :=
        M.run (M.alloc ((Integer.of_Z 0) : u8.t)).
      
      Definition RT_SCOPE_SITE : M.Val ltac:(libc.unix.c_uchar) :=
        M.run (M.alloc ((Integer.of_Z 200) : u8.t)).
      
      Definition RT_SCOPE_LINK : M.Val ltac:(libc.unix.c_uchar) :=
        M.run (M.alloc ((Integer.of_Z 253) : u8.t)).
      
      Definition RT_SCOPE_HOST : M.Val ltac:(libc.unix.c_uchar) :=
        M.run (M.alloc ((Integer.of_Z 254) : u8.t)).
      
      Definition RT_SCOPE_NOWHERE : M.Val ltac:(libc.unix.c_uchar) :=
        M.run (M.alloc ((Integer.of_Z 255) : u8.t)).
      
      Definition RT_TABLE_UNSPEC : M.Val ltac:(libc.unix.c_uchar) :=
        M.run (M.alloc ((Integer.of_Z 0) : u8.t)).
      
      Definition RT_TABLE_COMPAT : M.Val ltac:(libc.unix.c_uchar) :=
        M.run (M.alloc ((Integer.of_Z 252) : u8.t)).
      
      Definition RT_TABLE_DEFAULT : M.Val ltac:(libc.unix.c_uchar) :=
        M.run (M.alloc ((Integer.of_Z 253) : u8.t)).
      
      Definition RT_TABLE_MAIN : M.Val ltac:(libc.unix.c_uchar) :=
        M.run (M.alloc ((Integer.of_Z 254) : u8.t)).
      
      Definition RT_TABLE_LOCAL : M.Val ltac:(libc.unix.c_uchar) :=
        M.run (M.alloc ((Integer.of_Z 255) : u8.t)).
      
      Definition RTMSG_OVERRUN : M.Val u32.t :=
        M.run
          (let* α0 : i32.t := M.read libc.unix.linux_like.linux.NLMSG_OVERRUN in
          M.alloc (rust_cast α0)).
      
      Definition RTMSG_NEWDEVICE : M.Val u32.t :=
        M.run (M.alloc ((Integer.of_Z 17) : u32.t)).
      
      Definition RTMSG_DELDEVICE : M.Val u32.t :=
        M.run (M.alloc ((Integer.of_Z 18) : u32.t)).
      
      Definition RTMSG_NEWROUTE : M.Val u32.t :=
        M.run (M.alloc ((Integer.of_Z 33) : u32.t)).
      
      Definition RTMSG_DELROUTE : M.Val u32.t :=
        M.run (M.alloc ((Integer.of_Z 34) : u32.t)).
      
      Definition RTMSG_NEWRULE : M.Val u32.t :=
        M.run (M.alloc ((Integer.of_Z 49) : u32.t)).
      
      Definition RTMSG_DELRULE : M.Val u32.t :=
        M.run (M.alloc ((Integer.of_Z 50) : u32.t)).
      
      Definition RTMSG_CONTROL : M.Val u32.t :=
        M.run (M.alloc ((Integer.of_Z 64) : u32.t)).
      
      Definition RTMSG_AR_FAILED : M.Val u32.t :=
        M.run (M.alloc ((Integer.of_Z 81) : u32.t)).
      
      Definition MAX_ADDR_LEN : M.Val usize.t :=
        M.run (M.alloc ((Integer.of_Z 7) : usize.t)).
      
      Definition ARPD_UPDATE : M.Val ltac:(libc.unix.c_ushort) :=
        M.run (M.alloc ((Integer.of_Z 1) : u16.t)).
      
      Definition ARPD_LOOKUP : M.Val ltac:(libc.unix.c_ushort) :=
        M.run (M.alloc ((Integer.of_Z 2) : u16.t)).
      
      Definition ARPD_FLUSH : M.Val ltac:(libc.unix.c_ushort) :=
        M.run (M.alloc ((Integer.of_Z 3) : u16.t)).
      
      Definition ATF_MAGIC : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 128) : i32.t)).
      
      Definition RTEXT_FILTER_VF : M.Val ltac:(libc.unix.c_int) :=
        M.run
          (let* α0 : i32.t :=
            BinOp.Panic.shl
              ((Integer.of_Z 1) : i32.t)
              ((Integer.of_Z 0) : i32.t) in
          M.alloc α0).
      
      Definition RTEXT_FILTER_BRVLAN : M.Val ltac:(libc.unix.c_int) :=
        M.run
          (let* α0 : i32.t :=
            BinOp.Panic.shl
              ((Integer.of_Z 1) : i32.t)
              ((Integer.of_Z 1) : i32.t) in
          M.alloc α0).
      
      Definition RTEXT_FILTER_BRVLAN_COMPRESSED
          : M.Val ltac:(libc.unix.c_int) :=
        M.run
          (let* α0 : i32.t :=
            BinOp.Panic.shl
              ((Integer.of_Z 1) : i32.t)
              ((Integer.of_Z 2) : i32.t) in
          M.alloc α0).
      
      Definition RTEXT_FILTER_SKIP_STATS : M.Val ltac:(libc.unix.c_int) :=
        M.run
          (let* α0 : i32.t :=
            BinOp.Panic.shl
              ((Integer.of_Z 1) : i32.t)
              ((Integer.of_Z 3) : i32.t) in
          M.alloc α0).
      
      Definition RTEXT_FILTER_MRP : M.Val ltac:(libc.unix.c_int) :=
        M.run
          (let* α0 : i32.t :=
            BinOp.Panic.shl
              ((Integer.of_Z 1) : i32.t)
              ((Integer.of_Z 4) : i32.t) in
          M.alloc α0).
      
      Definition RTEXT_FILTER_CFM_CONFIG : M.Val ltac:(libc.unix.c_int) :=
        M.run
          (let* α0 : i32.t :=
            BinOp.Panic.shl
              ((Integer.of_Z 1) : i32.t)
              ((Integer.of_Z 5) : i32.t) in
          M.alloc α0).
      
      Definition RTEXT_FILTER_CFM_STATUS : M.Val ltac:(libc.unix.c_int) :=
        M.run
          (let* α0 : i32.t :=
            BinOp.Panic.shl
              ((Integer.of_Z 1) : i32.t)
              ((Integer.of_Z 6) : i32.t) in
          M.alloc α0).
      
      Definition RTMGRP_LINK : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 1) : i32.t)).
      
      Definition RTMGRP_NOTIFY : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 2) : i32.t)).
      
      Definition RTMGRP_NEIGH : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 4) : i32.t)).
      
      Definition RTMGRP_TC : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 8) : i32.t)).
      
      Definition RTMGRP_IPV4_IFADDR : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 16) : i32.t)).
      
      Definition RTMGRP_IPV4_MROUTE : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 32) : i32.t)).
      
      Definition RTMGRP_IPV4_ROUTE : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 64) : i32.t)).
      
      Definition RTMGRP_IPV4_RULE : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 128) : i32.t)).
      
      Definition RTMGRP_IPV6_IFADDR : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 256) : i32.t)).
      
      Definition RTMGRP_IPV6_MROUTE : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 512) : i32.t)).
      
      Definition RTMGRP_IPV6_ROUTE : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 1024) : i32.t)).
      
      Definition RTMGRP_IPV6_IFINFO : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 2048) : i32.t)).
      
      Definition RTMGRP_DECnet_IFADDR : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 4096) : i32.t)).
      
      Definition RTMGRP_DECnet_ROUTE : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 16384) : i32.t)).
      
      Definition RTMGRP_IPV6_PREFIX : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 131072) : i32.t)).
      
      Definition RTNLGRP_NONE : M.Val ltac:(libc.unix.c_uint) :=
        M.run (M.alloc ((Integer.of_Z 0) : u32.t)).
      
      Definition RTNLGRP_LINK : M.Val ltac:(libc.unix.c_uint) :=
        M.run (M.alloc ((Integer.of_Z 1) : u32.t)).
      
      Definition RTNLGRP_NOTIFY : M.Val ltac:(libc.unix.c_uint) :=
        M.run (M.alloc ((Integer.of_Z 2) : u32.t)).
      
      Definition RTNLGRP_NEIGH : M.Val ltac:(libc.unix.c_uint) :=
        M.run (M.alloc ((Integer.of_Z 3) : u32.t)).
      
      Definition RTNLGRP_TC : M.Val ltac:(libc.unix.c_uint) :=
        M.run (M.alloc ((Integer.of_Z 4) : u32.t)).
      
      Definition RTNLGRP_IPV4_IFADDR : M.Val ltac:(libc.unix.c_uint) :=
        M.run (M.alloc ((Integer.of_Z 5) : u32.t)).
      
      Definition RTNLGRP_IPV4_MROUTE : M.Val ltac:(libc.unix.c_uint) :=
        M.run (M.alloc ((Integer.of_Z 6) : u32.t)).
      
      Definition RTNLGRP_IPV4_ROUTE : M.Val ltac:(libc.unix.c_uint) :=
        M.run (M.alloc ((Integer.of_Z 7) : u32.t)).
      
      Definition RTNLGRP_IPV4_RULE : M.Val ltac:(libc.unix.c_uint) :=
        M.run (M.alloc ((Integer.of_Z 8) : u32.t)).
      
      Definition RTNLGRP_IPV6_IFADDR : M.Val ltac:(libc.unix.c_uint) :=
        M.run (M.alloc ((Integer.of_Z 9) : u32.t)).
      
      Definition RTNLGRP_IPV6_MROUTE : M.Val ltac:(libc.unix.c_uint) :=
        M.run (M.alloc ((Integer.of_Z 10) : u32.t)).
      
      Definition RTNLGRP_IPV6_ROUTE : M.Val ltac:(libc.unix.c_uint) :=
        M.run (M.alloc ((Integer.of_Z 11) : u32.t)).
      
      Definition RTNLGRP_IPV6_IFINFO : M.Val ltac:(libc.unix.c_uint) :=
        M.run (M.alloc ((Integer.of_Z 12) : u32.t)).
      
      Definition RTNLGRP_DECnet_IFADDR : M.Val ltac:(libc.unix.c_uint) :=
        M.run (M.alloc ((Integer.of_Z 13) : u32.t)).
      
      Definition RTNLGRP_NOP2 : M.Val ltac:(libc.unix.c_uint) :=
        M.run (M.alloc ((Integer.of_Z 14) : u32.t)).
      
      Definition RTNLGRP_DECnet_ROUTE : M.Val ltac:(libc.unix.c_uint) :=
        M.run (M.alloc ((Integer.of_Z 15) : u32.t)).
      
      Definition RTNLGRP_DECnet_RULE : M.Val ltac:(libc.unix.c_uint) :=
        M.run (M.alloc ((Integer.of_Z 16) : u32.t)).
      
      Definition RTNLGRP_NOP4 : M.Val ltac:(libc.unix.c_uint) :=
        M.run (M.alloc ((Integer.of_Z 17) : u32.t)).
      
      Definition RTNLGRP_IPV6_PREFIX : M.Val ltac:(libc.unix.c_uint) :=
        M.run (M.alloc ((Integer.of_Z 18) : u32.t)).
      
      Definition RTNLGRP_IPV6_RULE : M.Val ltac:(libc.unix.c_uint) :=
        M.run (M.alloc ((Integer.of_Z 19) : u32.t)).
      
      Definition RTNLGRP_ND_USEROPT : M.Val ltac:(libc.unix.c_uint) :=
        M.run (M.alloc ((Integer.of_Z 20) : u32.t)).
      
      Definition RTNLGRP_PHONET_IFADDR : M.Val ltac:(libc.unix.c_uint) :=
        M.run (M.alloc ((Integer.of_Z 21) : u32.t)).
      
      Definition RTNLGRP_PHONET_ROUTE : M.Val ltac:(libc.unix.c_uint) :=
        M.run (M.alloc ((Integer.of_Z 22) : u32.t)).
      
      Definition RTNLGRP_DCB : M.Val ltac:(libc.unix.c_uint) :=
        M.run (M.alloc ((Integer.of_Z 23) : u32.t)).
      
      Definition RTNLGRP_IPV4_NETCONF : M.Val ltac:(libc.unix.c_uint) :=
        M.run (M.alloc ((Integer.of_Z 24) : u32.t)).
      
      Definition RTNLGRP_IPV6_NETCONF : M.Val ltac:(libc.unix.c_uint) :=
        M.run (M.alloc ((Integer.of_Z 25) : u32.t)).
      
      Definition RTNLGRP_MDB : M.Val ltac:(libc.unix.c_uint) :=
        M.run (M.alloc ((Integer.of_Z 26) : u32.t)).
      
      Definition RTNLGRP_MPLS_ROUTE : M.Val ltac:(libc.unix.c_uint) :=
        M.run (M.alloc ((Integer.of_Z 27) : u32.t)).
      
      Definition RTNLGRP_NSID : M.Val ltac:(libc.unix.c_uint) :=
        M.run (M.alloc ((Integer.of_Z 28) : u32.t)).
      
      Definition RTNLGRP_MPLS_NETCONF : M.Val ltac:(libc.unix.c_uint) :=
        M.run (M.alloc ((Integer.of_Z 29) : u32.t)).
      
      Definition RTNLGRP_IPV4_MROUTE_R : M.Val ltac:(libc.unix.c_uint) :=
        M.run (M.alloc ((Integer.of_Z 30) : u32.t)).
      
      Definition RTNLGRP_IPV6_MROUTE_R : M.Val ltac:(libc.unix.c_uint) :=
        M.run (M.alloc ((Integer.of_Z 31) : u32.t)).
      
      Definition RTNLGRP_NEXTHOP : M.Val ltac:(libc.unix.c_uint) :=
        M.run (M.alloc ((Integer.of_Z 32) : u32.t)).
      
      Definition RTNLGRP_BRVLAN : M.Val ltac:(libc.unix.c_uint) :=
        M.run (M.alloc ((Integer.of_Z 33) : u32.t)).
      
      Definition RTNLGRP_MCTP_IFADDR : M.Val ltac:(libc.unix.c_uint) :=
        M.run (M.alloc ((Integer.of_Z 34) : u32.t)).
      
      Definition RTNLGRP_TUNNEL : M.Val ltac:(libc.unix.c_uint) :=
        M.run (M.alloc ((Integer.of_Z 35) : u32.t)).
      
      Definition RTNLGRP_STATS : M.Val ltac:(libc.unix.c_uint) :=
        M.run (M.alloc ((Integer.of_Z 36) : u32.t)).
      
      Definition MODULE_INIT_IGNORE_MODVERSIONS
          : M.Val ltac:(libc.unix.c_uint) :=
        M.run (M.alloc ((Integer.of_Z 1) : u32.t)).
      
      Definition MODULE_INIT_IGNORE_VERMAGIC : M.Val ltac:(libc.unix.c_uint) :=
        M.run (M.alloc ((Integer.of_Z 2) : u32.t)).
      
      Definition SOF_TIMESTAMPING_TX_HARDWARE : M.Val ltac:(libc.unix.c_uint) :=
        M.run
          (let* α0 : u32.t :=
            BinOp.Panic.shl
              ((Integer.of_Z 1) : u32.t)
              ((Integer.of_Z 0) : i32.t) in
          M.alloc α0).
      
      Definition SOF_TIMESTAMPING_TX_SOFTWARE : M.Val ltac:(libc.unix.c_uint) :=
        M.run
          (let* α0 : u32.t :=
            BinOp.Panic.shl
              ((Integer.of_Z 1) : u32.t)
              ((Integer.of_Z 1) : i32.t) in
          M.alloc α0).
      
      Definition SOF_TIMESTAMPING_RX_HARDWARE : M.Val ltac:(libc.unix.c_uint) :=
        M.run
          (let* α0 : u32.t :=
            BinOp.Panic.shl
              ((Integer.of_Z 1) : u32.t)
              ((Integer.of_Z 2) : i32.t) in
          M.alloc α0).
      
      Definition SOF_TIMESTAMPING_RX_SOFTWARE : M.Val ltac:(libc.unix.c_uint) :=
        M.run
          (let* α0 : u32.t :=
            BinOp.Panic.shl
              ((Integer.of_Z 1) : u32.t)
              ((Integer.of_Z 3) : i32.t) in
          M.alloc α0).
      
      Definition SOF_TIMESTAMPING_SOFTWARE : M.Val ltac:(libc.unix.c_uint) :=
        M.run
          (let* α0 : u32.t :=
            BinOp.Panic.shl
              ((Integer.of_Z 1) : u32.t)
              ((Integer.of_Z 4) : i32.t) in
          M.alloc α0).
      
      Definition SOF_TIMESTAMPING_SYS_HARDWARE
          : M.Val ltac:(libc.unix.c_uint) :=
        M.run
          (let* α0 : u32.t :=
            BinOp.Panic.shl
              ((Integer.of_Z 1) : u32.t)
              ((Integer.of_Z 5) : i32.t) in
          M.alloc α0).
      
      Definition SOF_TIMESTAMPING_RAW_HARDWARE
          : M.Val ltac:(libc.unix.c_uint) :=
        M.run
          (let* α0 : u32.t :=
            BinOp.Panic.shl
              ((Integer.of_Z 1) : u32.t)
              ((Integer.of_Z 6) : i32.t) in
          M.alloc α0).
      
      Definition SOF_TIMESTAMPING_OPT_ID : M.Val ltac:(libc.unix.c_uint) :=
        M.run
          (let* α0 : u32.t :=
            BinOp.Panic.shl
              ((Integer.of_Z 1) : u32.t)
              ((Integer.of_Z 7) : i32.t) in
          M.alloc α0).
      
      Definition SOF_TIMESTAMPING_TX_SCHED : M.Val ltac:(libc.unix.c_uint) :=
        M.run
          (let* α0 : u32.t :=
            BinOp.Panic.shl
              ((Integer.of_Z 1) : u32.t)
              ((Integer.of_Z 8) : i32.t) in
          M.alloc α0).
      
      Definition SOF_TIMESTAMPING_TX_ACK : M.Val ltac:(libc.unix.c_uint) :=
        M.run
          (let* α0 : u32.t :=
            BinOp.Panic.shl
              ((Integer.of_Z 1) : u32.t)
              ((Integer.of_Z 9) : i32.t) in
          M.alloc α0).
      
      Definition SOF_TIMESTAMPING_OPT_CMSG : M.Val ltac:(libc.unix.c_uint) :=
        M.run
          (let* α0 : u32.t :=
            BinOp.Panic.shl
              ((Integer.of_Z 1) : u32.t)
              ((Integer.of_Z 10) : i32.t) in
          M.alloc α0).
      
      Definition SOF_TIMESTAMPING_OPT_TSONLY : M.Val ltac:(libc.unix.c_uint) :=
        M.run
          (let* α0 : u32.t :=
            BinOp.Panic.shl
              ((Integer.of_Z 1) : u32.t)
              ((Integer.of_Z 11) : i32.t) in
          M.alloc α0).
      
      Definition SOF_TIMESTAMPING_OPT_STATS : M.Val ltac:(libc.unix.c_uint) :=
        M.run
          (let* α0 : u32.t :=
            BinOp.Panic.shl
              ((Integer.of_Z 1) : u32.t)
              ((Integer.of_Z 12) : i32.t) in
          M.alloc α0).
      
      Definition SOF_TIMESTAMPING_OPT_PKTINFO : M.Val ltac:(libc.unix.c_uint) :=
        M.run
          (let* α0 : u32.t :=
            BinOp.Panic.shl
              ((Integer.of_Z 1) : u32.t)
              ((Integer.of_Z 13) : i32.t) in
          M.alloc α0).
      
      Definition SOF_TIMESTAMPING_OPT_TX_SWHW : M.Val ltac:(libc.unix.c_uint) :=
        M.run
          (let* α0 : u32.t :=
            BinOp.Panic.shl
              ((Integer.of_Z 1) : u32.t)
              ((Integer.of_Z 14) : i32.t) in
          M.alloc α0).
      
      Definition SOF_TXTIME_DEADLINE_MODE : M.Val u32.t :=
        M.run
          (let* α0 : u32.t :=
            BinOp.Panic.shl
              ((Integer.of_Z 1) : u32.t)
              ((Integer.of_Z 0) : i32.t) in
          M.alloc α0).
      
      Definition SOF_TXTIME_REPORT_ERRORS : M.Val u32.t :=
        M.run
          (let* α0 : u32.t :=
            BinOp.Panic.shl
              ((Integer.of_Z 1) : u32.t)
              ((Integer.of_Z 1) : i32.t) in
          M.alloc α0).
      
      Definition HWTSTAMP_TX_OFF : M.Val ltac:(libc.unix.c_uint) :=
        M.run (M.alloc ((Integer.of_Z 0) : u32.t)).
      
      Definition HWTSTAMP_TX_ON : M.Val ltac:(libc.unix.c_uint) :=
        M.run (M.alloc ((Integer.of_Z 1) : u32.t)).
      
      Definition HWTSTAMP_TX_ONESTEP_SYNC : M.Val ltac:(libc.unix.c_uint) :=
        M.run (M.alloc ((Integer.of_Z 2) : u32.t)).
      
      Definition HWTSTAMP_TX_ONESTEP_P2P : M.Val ltac:(libc.unix.c_uint) :=
        M.run (M.alloc ((Integer.of_Z 3) : u32.t)).
      
      Definition HWTSTAMP_FILTER_NONE : M.Val ltac:(libc.unix.c_uint) :=
        M.run (M.alloc ((Integer.of_Z 0) : u32.t)).
      
      Definition HWTSTAMP_FILTER_ALL : M.Val ltac:(libc.unix.c_uint) :=
        M.run (M.alloc ((Integer.of_Z 1) : u32.t)).
      
      Definition HWTSTAMP_FILTER_SOME : M.Val ltac:(libc.unix.c_uint) :=
        M.run (M.alloc ((Integer.of_Z 2) : u32.t)).
      
      Definition HWTSTAMP_FILTER_PTP_V1_L4_EVENT
          : M.Val ltac:(libc.unix.c_uint) :=
        M.run (M.alloc ((Integer.of_Z 3) : u32.t)).
      
      Definition HWTSTAMP_FILTER_PTP_V1_L4_SYNC
          : M.Val ltac:(libc.unix.c_uint) :=
        M.run (M.alloc ((Integer.of_Z 4) : u32.t)).
      
      Definition HWTSTAMP_FILTER_PTP_V1_L4_DELAY_REQ
          : M.Val ltac:(libc.unix.c_uint) :=
        M.run (M.alloc ((Integer.of_Z 5) : u32.t)).
      
      Definition HWTSTAMP_FILTER_PTP_V2_L4_EVENT
          : M.Val ltac:(libc.unix.c_uint) :=
        M.run (M.alloc ((Integer.of_Z 6) : u32.t)).
      
      Definition HWTSTAMP_FILTER_PTP_V2_L4_SYNC
          : M.Val ltac:(libc.unix.c_uint) :=
        M.run (M.alloc ((Integer.of_Z 7) : u32.t)).
      
      Definition HWTSTAMP_FILTER_PTP_V2_L4_DELAY_REQ
          : M.Val ltac:(libc.unix.c_uint) :=
        M.run (M.alloc ((Integer.of_Z 8) : u32.t)).
      
      Definition HWTSTAMP_FILTER_PTP_V2_L2_EVENT
          : M.Val ltac:(libc.unix.c_uint) :=
        M.run (M.alloc ((Integer.of_Z 9) : u32.t)).
      
      Definition HWTSTAMP_FILTER_PTP_V2_L2_SYNC
          : M.Val ltac:(libc.unix.c_uint) :=
        M.run (M.alloc ((Integer.of_Z 10) : u32.t)).
      
      Definition HWTSTAMP_FILTER_PTP_V2_L2_DELAY_REQ
          : M.Val ltac:(libc.unix.c_uint) :=
        M.run (M.alloc ((Integer.of_Z 11) : u32.t)).
      
      Definition HWTSTAMP_FILTER_PTP_V2_EVENT : M.Val ltac:(libc.unix.c_uint) :=
        M.run (M.alloc ((Integer.of_Z 12) : u32.t)).
      
      Definition HWTSTAMP_FILTER_PTP_V2_SYNC : M.Val ltac:(libc.unix.c_uint) :=
        M.run (M.alloc ((Integer.of_Z 13) : u32.t)).
      
      Definition HWTSTAMP_FILTER_PTP_V2_DELAY_REQ
          : M.Val ltac:(libc.unix.c_uint) :=
        M.run (M.alloc ((Integer.of_Z 14) : u32.t)).
      
      Definition HWTSTAMP_FILTER_NTP_ALL : M.Val ltac:(libc.unix.c_uint) :=
        M.run (M.alloc ((Integer.of_Z 15) : u32.t)).
      
      Definition TLS_TX : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 1) : i32.t)).
      
      Definition TLS_RX : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 2) : i32.t)).
      
      Definition TLS_1_2_VERSION_MAJOR
          : M.Val ltac:(libc.unix.linux_like.linux.__u8) :=
        M.run (M.alloc ((Integer.of_Z 3) : u8.t)).
      
      Definition TLS_1_2_VERSION_MINOR
          : M.Val ltac:(libc.unix.linux_like.linux.__u8) :=
        M.run (M.alloc ((Integer.of_Z 3) : u8.t)).
      
      Definition TLS_1_2_VERSION
          : M.Val ltac:(libc.unix.linux_like.linux.__u16) :=
        M.run
          (let* α0 : u8.t :=
            M.read libc.unix.linux_like.linux.TLS_1_2_VERSION_MAJOR in
          let* α1 : u16.t :=
            BinOp.Panic.shl (rust_cast α0) ((Integer.of_Z 8) : i32.t) in
          let* α2 : u8.t :=
            M.read libc.unix.linux_like.linux.TLS_1_2_VERSION_MINOR in
          M.alloc (BinOp.Pure.bit_or α1 (rust_cast α2))).
      
      Definition TLS_1_3_VERSION_MAJOR
          : M.Val ltac:(libc.unix.linux_like.linux.__u8) :=
        M.run (M.alloc ((Integer.of_Z 3) : u8.t)).
      
      Definition TLS_1_3_VERSION_MINOR
          : M.Val ltac:(libc.unix.linux_like.linux.__u8) :=
        M.run (M.alloc ((Integer.of_Z 4) : u8.t)).
      
      Definition TLS_1_3_VERSION
          : M.Val ltac:(libc.unix.linux_like.linux.__u16) :=
        M.run
          (let* α0 : u8.t :=
            M.read libc.unix.linux_like.linux.TLS_1_3_VERSION_MAJOR in
          let* α1 : u16.t :=
            BinOp.Panic.shl (rust_cast α0) ((Integer.of_Z 8) : i32.t) in
          let* α2 : u8.t :=
            M.read libc.unix.linux_like.linux.TLS_1_3_VERSION_MINOR in
          M.alloc (BinOp.Pure.bit_or α1 (rust_cast α2))).
      
      Definition TLS_CIPHER_AES_GCM_128
          : M.Val ltac:(libc.unix.linux_like.linux.__u16) :=
        M.run (M.alloc ((Integer.of_Z 51) : u16.t)).
      
      Definition TLS_CIPHER_AES_GCM_128_IV_SIZE : M.Val usize.t :=
        M.run (M.alloc ((Integer.of_Z 8) : usize.t)).
      
      Definition TLS_CIPHER_AES_GCM_128_KEY_SIZE : M.Val usize.t :=
        M.run (M.alloc ((Integer.of_Z 16) : usize.t)).
      
      Definition TLS_CIPHER_AES_GCM_128_SALT_SIZE : M.Val usize.t :=
        M.run (M.alloc ((Integer.of_Z 4) : usize.t)).
      
      Definition TLS_CIPHER_AES_GCM_128_TAG_SIZE : M.Val usize.t :=
        M.run (M.alloc ((Integer.of_Z 16) : usize.t)).
      
      Definition TLS_CIPHER_AES_GCM_128_REC_SEQ_SIZE : M.Val usize.t :=
        M.run (M.alloc ((Integer.of_Z 8) : usize.t)).
      
      Definition TLS_CIPHER_AES_GCM_256
          : M.Val ltac:(libc.unix.linux_like.linux.__u16) :=
        M.run (M.alloc ((Integer.of_Z 52) : u16.t)).
      
      Definition TLS_CIPHER_AES_GCM_256_IV_SIZE : M.Val usize.t :=
        M.run (M.alloc ((Integer.of_Z 8) : usize.t)).
      
      Definition TLS_CIPHER_AES_GCM_256_KEY_SIZE : M.Val usize.t :=
        M.run (M.alloc ((Integer.of_Z 32) : usize.t)).
      
      Definition TLS_CIPHER_AES_GCM_256_SALT_SIZE : M.Val usize.t :=
        M.run (M.alloc ((Integer.of_Z 4) : usize.t)).
      
      Definition TLS_CIPHER_AES_GCM_256_TAG_SIZE : M.Val usize.t :=
        M.run (M.alloc ((Integer.of_Z 16) : usize.t)).
      
      Definition TLS_CIPHER_AES_GCM_256_REC_SEQ_SIZE : M.Val usize.t :=
        M.run (M.alloc ((Integer.of_Z 8) : usize.t)).
      
      Definition TLS_CIPHER_CHACHA20_POLY1305
          : M.Val ltac:(libc.unix.linux_like.linux.__u16) :=
        M.run (M.alloc ((Integer.of_Z 54) : u16.t)).
      
      Definition TLS_CIPHER_CHACHA20_POLY1305_IV_SIZE : M.Val usize.t :=
        M.run (M.alloc ((Integer.of_Z 12) : usize.t)).
      
      Definition TLS_CIPHER_CHACHA20_POLY1305_KEY_SIZE : M.Val usize.t :=
        M.run (M.alloc ((Integer.of_Z 32) : usize.t)).
      
      Definition TLS_CIPHER_CHACHA20_POLY1305_SALT_SIZE : M.Val usize.t :=
        M.run (M.alloc ((Integer.of_Z 0) : usize.t)).
      
      Definition TLS_CIPHER_CHACHA20_POLY1305_TAG_SIZE : M.Val usize.t :=
        M.run (M.alloc ((Integer.of_Z 16) : usize.t)).
      
      Definition TLS_CIPHER_CHACHA20_POLY1305_REC_SEQ_SIZE : M.Val usize.t :=
        M.run (M.alloc ((Integer.of_Z 8) : usize.t)).
      
      Definition TLS_SET_RECORD_TYPE : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 1) : i32.t)).
      
      Definition TLS_GET_RECORD_TYPE : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 2) : i32.t)).
      
      Definition SOL_TLS : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 282) : i32.t)).
      
      Definition ALG_SET_KEY : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 1) : i32.t)).
      
      Definition ALG_SET_IV : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 2) : i32.t)).
      
      Definition ALG_SET_OP : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 3) : i32.t)).
      
      Definition ALG_SET_AEAD_ASSOCLEN : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 4) : i32.t)).
      
      Definition ALG_SET_AEAD_AUTHSIZE : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 5) : i32.t)).
      
      Definition ALG_SET_DRBG_ENTROPY : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 6) : i32.t)).
      
      Definition ALG_SET_KEY_BY_KEY_SERIAL : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 7) : i32.t)).
      
      Definition ALG_OP_DECRYPT : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 0) : i32.t)).
      
      Definition ALG_OP_ENCRYPT : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 1) : i32.t)).
      
      Definition IF_OPER_UNKNOWN : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 0) : i32.t)).
      
      Definition IF_OPER_NOTPRESENT : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 1) : i32.t)).
      
      Definition IF_OPER_DOWN : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 2) : i32.t)).
      
      Definition IF_OPER_LOWERLAYERDOWN : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 3) : i32.t)).
      
      Definition IF_OPER_TESTING : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 4) : i32.t)).
      
      Definition IF_OPER_DORMANT : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 5) : i32.t)).
      
      Definition IF_OPER_UP : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 6) : i32.t)).
      
      Definition IF_LINK_MODE_DEFAULT : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 0) : i32.t)).
      
      Definition IF_LINK_MODE_DORMANT : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 1) : i32.t)).
      
      Definition IF_LINK_MODE_TESTING : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 2) : i32.t)).
      
      Definition UDP_CORK : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 1) : i32.t)).
      
      Definition UDP_ENCAP : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 100) : i32.t)).
      
      Definition UDP_NO_CHECK6_TX : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 101) : i32.t)).
      
      Definition UDP_NO_CHECK6_RX : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 102) : i32.t)).
      
      Definition MAP_SHARED_VALIDATE : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 3) : i32.t)).
      
      Definition MAP_FIXED_NOREPLACE : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 1048576) : i32.t)).
      
      Definition MLOCK_ONFAULT : M.Val ltac:(libc.unix.c_uint) :=
        M.run (M.alloc ((Integer.of_Z 1) : u32.t)).
      
      Definition VMADDR_CID_ANY : M.Val ltac:(libc.unix.c_uint) :=
        M.run (M.alloc ((Integer.of_Z 4294967295) : u32.t)).
      
      Definition VMADDR_CID_HYPERVISOR : M.Val ltac:(libc.unix.c_uint) :=
        M.run (M.alloc ((Integer.of_Z 0) : u32.t)).
      
      Definition VMADDR_CID_RESERVED : M.Val ltac:(libc.unix.c_uint) :=
        M.run (M.alloc ((Integer.of_Z 1) : u32.t)).
      
      Definition VMADDR_CID_LOCAL : M.Val ltac:(libc.unix.c_uint) :=
        M.run (M.alloc ((Integer.of_Z 1) : u32.t)).
      
      Definition VMADDR_CID_HOST : M.Val ltac:(libc.unix.c_uint) :=
        M.run (M.alloc ((Integer.of_Z 2) : u32.t)).
      
      Definition VMADDR_PORT_ANY : M.Val ltac:(libc.unix.c_uint) :=
        M.run (M.alloc ((Integer.of_Z 4294967295) : u32.t)).
      
      Definition IN_ACCESS : M.Val u32.t :=
        M.run (M.alloc ((Integer.of_Z 1) : u32.t)).
      
      Definition IN_MODIFY : M.Val u32.t :=
        M.run (M.alloc ((Integer.of_Z 2) : u32.t)).
      
      Definition IN_ATTRIB : M.Val u32.t :=
        M.run (M.alloc ((Integer.of_Z 4) : u32.t)).
      
      Definition IN_CLOSE_WRITE : M.Val u32.t :=
        M.run (M.alloc ((Integer.of_Z 8) : u32.t)).
      
      Definition IN_CLOSE_NOWRITE : M.Val u32.t :=
        M.run (M.alloc ((Integer.of_Z 16) : u32.t)).
      
      Definition IN_CLOSE : M.Val u32.t :=
        M.run
          (let* α0 : u32.t :=
            M.read libc.unix.linux_like.linux.IN_CLOSE_WRITE in
          let* α1 : u32.t :=
            M.read libc.unix.linux_like.linux.IN_CLOSE_NOWRITE in
          M.alloc (BinOp.Pure.bit_or α0 α1)).
      
      Definition IN_OPEN : M.Val u32.t :=
        M.run (M.alloc ((Integer.of_Z 32) : u32.t)).
      
      Definition IN_MOVED_FROM : M.Val u32.t :=
        M.run (M.alloc ((Integer.of_Z 64) : u32.t)).
      
      Definition IN_MOVED_TO : M.Val u32.t :=
        M.run (M.alloc ((Integer.of_Z 128) : u32.t)).
      
      Definition IN_MOVE : M.Val u32.t :=
        M.run
          (let* α0 : u32.t := M.read libc.unix.linux_like.linux.IN_MOVED_FROM in
          let* α1 : u32.t := M.read libc.unix.linux_like.linux.IN_MOVED_TO in
          M.alloc (BinOp.Pure.bit_or α0 α1)).
      
      Definition IN_CREATE : M.Val u32.t :=
        M.run (M.alloc ((Integer.of_Z 256) : u32.t)).
      
      Definition IN_DELETE : M.Val u32.t :=
        M.run (M.alloc ((Integer.of_Z 512) : u32.t)).
      
      Definition IN_DELETE_SELF : M.Val u32.t :=
        M.run (M.alloc ((Integer.of_Z 1024) : u32.t)).
      
      Definition IN_MOVE_SELF : M.Val u32.t :=
        M.run (M.alloc ((Integer.of_Z 2048) : u32.t)).
      
      Definition IN_UNMOUNT : M.Val u32.t :=
        M.run (M.alloc ((Integer.of_Z 8192) : u32.t)).
      
      Definition IN_Q_OVERFLOW : M.Val u32.t :=
        M.run (M.alloc ((Integer.of_Z 16384) : u32.t)).
      
      Definition IN_IGNORED : M.Val u32.t :=
        M.run (M.alloc ((Integer.of_Z 32768) : u32.t)).
      
      Definition IN_ONLYDIR : M.Val u32.t :=
        M.run (M.alloc ((Integer.of_Z 16777216) : u32.t)).
      
      Definition IN_DONT_FOLLOW : M.Val u32.t :=
        M.run (M.alloc ((Integer.of_Z 33554432) : u32.t)).
      
      Definition IN_EXCL_UNLINK : M.Val u32.t :=
        M.run (M.alloc ((Integer.of_Z 67108864) : u32.t)).
      
      Definition KEY_SPEC_THREAD_KEYRING : M.Val i32.t :=
        M.run (M.alloc ((Integer.of_Z (-1)) : i32.t)).
      
      Definition KEY_SPEC_PROCESS_KEYRING : M.Val i32.t :=
        M.run (M.alloc ((Integer.of_Z (-2)) : i32.t)).
      
      Definition KEY_SPEC_SESSION_KEYRING : M.Val i32.t :=
        M.run (M.alloc ((Integer.of_Z (-3)) : i32.t)).
      
      Definition KEY_SPEC_USER_KEYRING : M.Val i32.t :=
        M.run (M.alloc ((Integer.of_Z (-4)) : i32.t)).
      
      Definition KEY_SPEC_USER_SESSION_KEYRING : M.Val i32.t :=
        M.run (M.alloc ((Integer.of_Z (-5)) : i32.t)).
      
      Definition KEY_SPEC_GROUP_KEYRING : M.Val i32.t :=
        M.run (M.alloc ((Integer.of_Z (-6)) : i32.t)).
      
      Definition KEY_SPEC_REQKEY_AUTH_KEY : M.Val i32.t :=
        M.run (M.alloc ((Integer.of_Z (-7)) : i32.t)).
      
      Definition KEY_SPEC_REQUESTOR_KEYRING : M.Val i32.t :=
        M.run (M.alloc ((Integer.of_Z (-8)) : i32.t)).
      
      Definition KEY_REQKEY_DEFL_NO_CHANGE : M.Val i32.t :=
        M.run (M.alloc ((Integer.of_Z (-1)) : i32.t)).
      
      Definition KEY_REQKEY_DEFL_DEFAULT : M.Val i32.t :=
        M.run (M.alloc ((Integer.of_Z 0) : i32.t)).
      
      Definition KEY_REQKEY_DEFL_THREAD_KEYRING : M.Val i32.t :=
        M.run (M.alloc ((Integer.of_Z 1) : i32.t)).
      
      Definition KEY_REQKEY_DEFL_PROCESS_KEYRING : M.Val i32.t :=
        M.run (M.alloc ((Integer.of_Z 2) : i32.t)).
      
      Definition KEY_REQKEY_DEFL_SESSION_KEYRING : M.Val i32.t :=
        M.run (M.alloc ((Integer.of_Z 3) : i32.t)).
      
      Definition KEY_REQKEY_DEFL_USER_KEYRING : M.Val i32.t :=
        M.run (M.alloc ((Integer.of_Z 4) : i32.t)).
      
      Definition KEY_REQKEY_DEFL_USER_SESSION_KEYRING : M.Val i32.t :=
        M.run (M.alloc ((Integer.of_Z 5) : i32.t)).
      
      Definition KEY_REQKEY_DEFL_GROUP_KEYRING : M.Val i32.t :=
        M.run (M.alloc ((Integer.of_Z 6) : i32.t)).
      
      Definition KEY_REQKEY_DEFL_REQUESTOR_KEYRING : M.Val i32.t :=
        M.run (M.alloc ((Integer.of_Z 7) : i32.t)).
      
      Definition KEYCTL_GET_KEYRING_ID : M.Val u32.t :=
        M.run (M.alloc ((Integer.of_Z 0) : u32.t)).
      
      Definition KEYCTL_JOIN_SESSION_KEYRING : M.Val u32.t :=
        M.run (M.alloc ((Integer.of_Z 1) : u32.t)).
      
      Definition KEYCTL_UPDATE : M.Val u32.t :=
        M.run (M.alloc ((Integer.of_Z 2) : u32.t)).
      
      Definition KEYCTL_REVOKE : M.Val u32.t :=
        M.run (M.alloc ((Integer.of_Z 3) : u32.t)).
      
      Definition KEYCTL_CHOWN : M.Val u32.t :=
        M.run (M.alloc ((Integer.of_Z 4) : u32.t)).
      
      Definition KEYCTL_SETPERM : M.Val u32.t :=
        M.run (M.alloc ((Integer.of_Z 5) : u32.t)).
      
      Definition KEYCTL_DESCRIBE : M.Val u32.t :=
        M.run (M.alloc ((Integer.of_Z 6) : u32.t)).
      
      Definition KEYCTL_CLEAR : M.Val u32.t :=
        M.run (M.alloc ((Integer.of_Z 7) : u32.t)).
      
      Definition KEYCTL_LINK : M.Val u32.t :=
        M.run (M.alloc ((Integer.of_Z 8) : u32.t)).
      
      Definition KEYCTL_UNLINK : M.Val u32.t :=
        M.run (M.alloc ((Integer.of_Z 9) : u32.t)).
      
      Definition KEYCTL_SEARCH : M.Val u32.t :=
        M.run (M.alloc ((Integer.of_Z 10) : u32.t)).
      
      Definition KEYCTL_READ : M.Val u32.t :=
        M.run (M.alloc ((Integer.of_Z 11) : u32.t)).
      
      Definition KEYCTL_INSTANTIATE : M.Val u32.t :=
        M.run (M.alloc ((Integer.of_Z 12) : u32.t)).
      
      Definition KEYCTL_NEGATE : M.Val u32.t :=
        M.run (M.alloc ((Integer.of_Z 13) : u32.t)).
      
      Definition KEYCTL_SET_REQKEY_KEYRING : M.Val u32.t :=
        M.run (M.alloc ((Integer.of_Z 14) : u32.t)).
      
      Definition KEYCTL_SET_TIMEOUT : M.Val u32.t :=
        M.run (M.alloc ((Integer.of_Z 15) : u32.t)).
      
      Definition KEYCTL_ASSUME_AUTHORITY : M.Val u32.t :=
        M.run (M.alloc ((Integer.of_Z 16) : u32.t)).
      
      Definition KEYCTL_GET_SECURITY : M.Val u32.t :=
        M.run (M.alloc ((Integer.of_Z 17) : u32.t)).
      
      Definition KEYCTL_SESSION_TO_PARENT : M.Val u32.t :=
        M.run (M.alloc ((Integer.of_Z 18) : u32.t)).
      
      Definition KEYCTL_REJECT : M.Val u32.t :=
        M.run (M.alloc ((Integer.of_Z 19) : u32.t)).
      
      Definition KEYCTL_INSTANTIATE_IOV : M.Val u32.t :=
        M.run (M.alloc ((Integer.of_Z 20) : u32.t)).
      
      Definition KEYCTL_INVALIDATE : M.Val u32.t :=
        M.run (M.alloc ((Integer.of_Z 21) : u32.t)).
      
      Definition KEYCTL_GET_PERSISTENT : M.Val u32.t :=
        M.run (M.alloc ((Integer.of_Z 22) : u32.t)).
      
      Definition IN_MASK_CREATE : M.Val u32.t :=
        M.run (M.alloc ((Integer.of_Z 268435456) : u32.t)).
      
      Definition IN_MASK_ADD : M.Val u32.t :=
        M.run (M.alloc ((Integer.of_Z 536870912) : u32.t)).
      
      Definition IN_ISDIR : M.Val u32.t :=
        M.run (M.alloc ((Integer.of_Z 1073741824) : u32.t)).
      
      Definition IN_ONESHOT : M.Val u32.t :=
        M.run (M.alloc ((Integer.of_Z 2147483648) : u32.t)).
      
      Definition IN_ALL_EVENTS : M.Val u32.t :=
        M.run
          (let* α0 : u32.t := M.read libc.unix.linux_like.linux.IN_ACCESS in
          let* α1 : u32.t := M.read libc.unix.linux_like.linux.IN_MODIFY in
          let* α2 : u32.t := M.read libc.unix.linux_like.linux.IN_ATTRIB in
          let* α3 : u32.t := M.read libc.unix.linux_like.linux.IN_CLOSE_WRITE in
          let* α4 : u32.t :=
            M.read libc.unix.linux_like.linux.IN_CLOSE_NOWRITE in
          let* α5 : u32.t := M.read libc.unix.linux_like.linux.IN_OPEN in
          let* α6 : u32.t := M.read libc.unix.linux_like.linux.IN_MOVED_FROM in
          let* α7 : u32.t := M.read libc.unix.linux_like.linux.IN_MOVED_TO in
          let* α8 : u32.t := M.read libc.unix.linux_like.linux.IN_DELETE in
          let* α9 : u32.t := M.read libc.unix.linux_like.linux.IN_CREATE in
          let* α10 : u32.t :=
            M.read libc.unix.linux_like.linux.IN_DELETE_SELF in
          let* α11 : u32.t := M.read libc.unix.linux_like.linux.IN_MOVE_SELF in
          M.alloc
            (BinOp.Pure.bit_or
              (BinOp.Pure.bit_or
                (BinOp.Pure.bit_or
                  (BinOp.Pure.bit_or
                    (BinOp.Pure.bit_or
                      (BinOp.Pure.bit_or
                        (BinOp.Pure.bit_or
                          (BinOp.Pure.bit_or
                            (BinOp.Pure.bit_or
                              (BinOp.Pure.bit_or (BinOp.Pure.bit_or α0 α1) α2)
                              α3)
                            α4)
                          α5)
                        α6)
                      α7)
                    α8)
                  α9)
                α10)
              α11)).
      
      Definition IN_CLOEXEC : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.pure libc.unix.linux_like.linux.gnu.b64.x86_64.O_CLOEXEC).
      
      Definition IN_NONBLOCK : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.pure libc.unix.linux_like.linux.gnu.b64.x86_64.O_NONBLOCK).
      
      Definition OPEN_TREE_CLONE : M.Val ltac:(libc.unix.c_uint) :=
        M.run (M.alloc ((Integer.of_Z 1) : u32.t)).
      
      Definition OPEN_TREE_CLOEXEC : M.Val ltac:(libc.unix.c_uint) :=
        M.run
          (let* α0 : i32.t :=
            M.read libc.unix.linux_like.linux.gnu.b64.x86_64.O_CLOEXEC in
          M.alloc (rust_cast α0)).
      
      Definition NFT_TABLE_MAXNAMELEN : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 256) : i32.t)).
      
      Definition NFT_CHAIN_MAXNAMELEN : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 256) : i32.t)).
      
      Definition NFT_SET_MAXNAMELEN : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 256) : i32.t)).
      
      Definition NFT_OBJ_MAXNAMELEN : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 256) : i32.t)).
      
      Definition NFT_USERDATA_MAXLEN : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 256) : i32.t)).
      
      Definition NFT_REG_VERDICT : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 0) : i32.t)).
      
      Definition NFT_REG_1 : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 1) : i32.t)).
      
      Definition NFT_REG_2 : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 2) : i32.t)).
      
      Definition NFT_REG_3 : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 3) : i32.t)).
      
      Definition NFT_REG_4 : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 4) : i32.t)).
      
      Definition __NFT_REG_MAX : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 5) : i32.t)).
      
      Definition NFT_REG32_00 : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 8) : i32.t)).
      
      Definition NFT_REG32_01 : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 9) : i32.t)).
      
      Definition NFT_REG32_02 : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 10) : i32.t)).
      
      Definition NFT_REG32_03 : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 11) : i32.t)).
      
      Definition NFT_REG32_04 : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 12) : i32.t)).
      
      Definition NFT_REG32_05 : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 13) : i32.t)).
      
      Definition NFT_REG32_06 : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 14) : i32.t)).
      
      Definition NFT_REG32_07 : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 15) : i32.t)).
      
      Definition NFT_REG32_08 : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 16) : i32.t)).
      
      Definition NFT_REG32_09 : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 17) : i32.t)).
      
      Definition NFT_REG32_10 : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 18) : i32.t)).
      
      Definition NFT_REG32_11 : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 19) : i32.t)).
      
      Definition NFT_REG32_12 : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 20) : i32.t)).
      
      Definition NFT_REG32_13 : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 21) : i32.t)).
      
      Definition NFT_REG32_14 : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 22) : i32.t)).
      
      Definition NFT_REG32_15 : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 23) : i32.t)).
      
      Definition NFT_REG_SIZE : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 16) : i32.t)).
      
      Definition NFT_REG32_SIZE : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 4) : i32.t)).
      
      Definition NFT_CONTINUE : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z (-1)) : i32.t)).
      
      Definition NFT_BREAK : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z (-2)) : i32.t)).
      
      Definition NFT_JUMP : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z (-3)) : i32.t)).
      
      Definition NFT_GOTO : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z (-4)) : i32.t)).
      
      Definition NFT_RETURN : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z (-5)) : i32.t)).
      
      Definition NFT_MSG_NEWTABLE : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 0) : i32.t)).
      
      Definition NFT_MSG_GETTABLE : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 1) : i32.t)).
      
      Definition NFT_MSG_DELTABLE : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 2) : i32.t)).
      
      Definition NFT_MSG_NEWCHAIN : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 3) : i32.t)).
      
      Definition NFT_MSG_GETCHAIN : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 4) : i32.t)).
      
      Definition NFT_MSG_DELCHAIN : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 5) : i32.t)).
      
      Definition NFT_MSG_NEWRULE : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 6) : i32.t)).
      
      Definition NFT_MSG_GETRULE : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 7) : i32.t)).
      
      Definition NFT_MSG_DELRULE : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 8) : i32.t)).
      
      Definition NFT_MSG_NEWSET : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 9) : i32.t)).
      
      Definition NFT_MSG_GETSET : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 10) : i32.t)).
      
      Definition NFT_MSG_DELSET : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 11) : i32.t)).
      
      Definition NFT_MSG_NEWSETELEM : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 12) : i32.t)).
      
      Definition NFT_MSG_GETSETELEM : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 13) : i32.t)).
      
      Definition NFT_MSG_DELSETELEM : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 14) : i32.t)).
      
      Definition NFT_MSG_NEWGEN : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 15) : i32.t)).
      
      Definition NFT_MSG_GETGEN : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 16) : i32.t)).
      
      Definition NFT_MSG_TRACE : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 17) : i32.t)).
      
      Definition NFT_MSG_NEWOBJ : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 18) : i32.t)).
      
      Definition NFT_MSG_GETOBJ : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 19) : i32.t)).
      
      Definition NFT_MSG_DELOBJ : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 20) : i32.t)).
      
      Definition NFT_MSG_GETOBJ_RESET : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 21) : i32.t)).
      
      Definition NFT_MSG_MAX : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 25) : i32.t)).
      
      Definition NFT_SET_ANONYMOUS : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 1) : i32.t)).
      
      Definition NFT_SET_CONSTANT : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 2) : i32.t)).
      
      Definition NFT_SET_INTERVAL : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 4) : i32.t)).
      
      Definition NFT_SET_MAP : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 8) : i32.t)).
      
      Definition NFT_SET_TIMEOUT : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 16) : i32.t)).
      
      Definition NFT_SET_EVAL : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 32) : i32.t)).
      
      Definition NFT_SET_POL_PERFORMANCE : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 0) : i32.t)).
      
      Definition NFT_SET_POL_MEMORY : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 1) : i32.t)).
      
      Definition NFT_SET_ELEM_INTERVAL_END : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 1) : i32.t)).
      
      Definition NFT_DATA_VALUE : M.Val ltac:(libc.unix.c_uint) :=
        M.run (M.alloc ((Integer.of_Z 0) : u32.t)).
      
      Definition NFT_DATA_VERDICT : M.Val ltac:(libc.unix.c_uint) :=
        M.run (M.alloc ((Integer.of_Z 4294967040) : u32.t)).
      
      Definition NFT_DATA_RESERVED_MASK : M.Val ltac:(libc.unix.c_uint) :=
        M.run (M.alloc ((Integer.of_Z 4294967040) : u32.t)).
      
      Definition NFT_DATA_VALUE_MAXLEN : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 64) : i32.t)).
      
      Definition NFT_BYTEORDER_NTOH : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 0) : i32.t)).
      
      Definition NFT_BYTEORDER_HTON : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 1) : i32.t)).
      
      Definition NFT_CMP_EQ : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 0) : i32.t)).
      
      Definition NFT_CMP_NEQ : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 1) : i32.t)).
      
      Definition NFT_CMP_LT : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 2) : i32.t)).
      
      Definition NFT_CMP_LTE : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 3) : i32.t)).
      
      Definition NFT_CMP_GT : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 4) : i32.t)).
      
      Definition NFT_CMP_GTE : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 5) : i32.t)).
      
      Definition NFT_RANGE_EQ : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 0) : i32.t)).
      
      Definition NFT_RANGE_NEQ : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 1) : i32.t)).
      
      Definition NFT_LOOKUP_F_INV : M.Val ltac:(libc.unix.c_int) :=
        M.run
          (let* α0 : i32.t :=
            BinOp.Panic.shl
              ((Integer.of_Z 1) : i32.t)
              ((Integer.of_Z 0) : i32.t) in
          M.alloc α0).
      
      Definition NFT_DYNSET_OP_ADD : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 0) : i32.t)).
      
      Definition NFT_DYNSET_OP_UPDATE : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 1) : i32.t)).
      
      Definition NFT_DYNSET_F_INV : M.Val ltac:(libc.unix.c_int) :=
        M.run
          (let* α0 : i32.t :=
            BinOp.Panic.shl
              ((Integer.of_Z 1) : i32.t)
              ((Integer.of_Z 0) : i32.t) in
          M.alloc α0).
      
      Definition NFT_PAYLOAD_LL_HEADER : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 0) : i32.t)).
      
      Definition NFT_PAYLOAD_NETWORK_HEADER : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 1) : i32.t)).
      
      Definition NFT_PAYLOAD_TRANSPORT_HEADER : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 2) : i32.t)).
      
      Definition NFT_PAYLOAD_CSUM_NONE : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 0) : i32.t)).
      
      Definition NFT_PAYLOAD_CSUM_INET : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 1) : i32.t)).
      
      Definition NFT_META_LEN : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 0) : i32.t)).
      
      Definition NFT_META_PROTOCOL : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 1) : i32.t)).
      
      Definition NFT_META_PRIORITY : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 2) : i32.t)).
      
      Definition NFT_META_MARK : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 3) : i32.t)).
      
      Definition NFT_META_IIF : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 4) : i32.t)).
      
      Definition NFT_META_OIF : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 5) : i32.t)).
      
      Definition NFT_META_IIFNAME : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 6) : i32.t)).
      
      Definition NFT_META_OIFNAME : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 7) : i32.t)).
      
      Definition NFT_META_IIFTYPE : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 8) : i32.t)).
      
      Definition NFT_META_OIFTYPE : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 9) : i32.t)).
      
      Definition NFT_META_SKUID : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 10) : i32.t)).
      
      Definition NFT_META_SKGID : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 11) : i32.t)).
      
      Definition NFT_META_NFTRACE : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 12) : i32.t)).
      
      Definition NFT_META_RTCLASSID : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 13) : i32.t)).
      
      Definition NFT_META_SECMARK : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 14) : i32.t)).
      
      Definition NFT_META_NFPROTO : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 15) : i32.t)).
      
      Definition NFT_META_L4PROTO : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 16) : i32.t)).
      
      Definition NFT_META_BRI_IIFNAME : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 17) : i32.t)).
      
      Definition NFT_META_BRI_OIFNAME : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 18) : i32.t)).
      
      Definition NFT_META_PKTTYPE : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 19) : i32.t)).
      
      Definition NFT_META_CPU : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 20) : i32.t)).
      
      Definition NFT_META_IIFGROUP : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 21) : i32.t)).
      
      Definition NFT_META_OIFGROUP : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 22) : i32.t)).
      
      Definition NFT_META_CGROUP : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 23) : i32.t)).
      
      Definition NFT_META_PRANDOM : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 24) : i32.t)).
      
      Definition NFT_CT_STATE : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 0) : i32.t)).
      
      Definition NFT_CT_DIRECTION : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 1) : i32.t)).
      
      Definition NFT_CT_STATUS : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 2) : i32.t)).
      
      Definition NFT_CT_MARK : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 3) : i32.t)).
      
      Definition NFT_CT_SECMARK : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 4) : i32.t)).
      
      Definition NFT_CT_EXPIRATION : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 5) : i32.t)).
      
      Definition NFT_CT_HELPER : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 6) : i32.t)).
      
      Definition NFT_CT_L3PROTOCOL : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 7) : i32.t)).
      
      Definition NFT_CT_SRC : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 8) : i32.t)).
      
      Definition NFT_CT_DST : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 9) : i32.t)).
      
      Definition NFT_CT_PROTOCOL : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 10) : i32.t)).
      
      Definition NFT_CT_PROTO_SRC : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 11) : i32.t)).
      
      Definition NFT_CT_PROTO_DST : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 12) : i32.t)).
      
      Definition NFT_CT_LABELS : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 13) : i32.t)).
      
      Definition NFT_CT_PKTS : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 14) : i32.t)).
      
      Definition NFT_CT_BYTES : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 15) : i32.t)).
      
      Definition NFT_LIMIT_PKTS : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 0) : i32.t)).
      
      Definition NFT_LIMIT_PKT_BYTES : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 1) : i32.t)).
      
      Definition NFT_LIMIT_F_INV : M.Val ltac:(libc.unix.c_int) :=
        M.run
          (let* α0 : i32.t :=
            BinOp.Panic.shl
              ((Integer.of_Z 1) : i32.t)
              ((Integer.of_Z 0) : i32.t) in
          M.alloc α0).
      
      Definition NFT_QUEUE_FLAG_BYPASS : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 1) : i32.t)).
      
      Definition NFT_QUEUE_FLAG_CPU_FANOUT : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 2) : i32.t)).
      
      Definition NFT_QUEUE_FLAG_MASK : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 3) : i32.t)).
      
      Definition NFT_QUOTA_F_INV : M.Val ltac:(libc.unix.c_int) :=
        M.run
          (let* α0 : i32.t :=
            BinOp.Panic.shl
              ((Integer.of_Z 1) : i32.t)
              ((Integer.of_Z 0) : i32.t) in
          M.alloc α0).
      
      Definition NFT_REJECT_ICMP_UNREACH : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 0) : i32.t)).
      
      Definition NFT_REJECT_TCP_RST : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 1) : i32.t)).
      
      Definition NFT_REJECT_ICMPX_UNREACH : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 2) : i32.t)).
      
      Definition NFT_REJECT_ICMPX_NO_ROUTE : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 0) : i32.t)).
      
      Definition NFT_REJECT_ICMPX_PORT_UNREACH : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 1) : i32.t)).
      
      Definition NFT_REJECT_ICMPX_HOST_UNREACH : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 2) : i32.t)).
      
      Definition NFT_REJECT_ICMPX_ADMIN_PROHIBITED
          : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 3) : i32.t)).
      
      Definition NFT_NAT_SNAT : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 0) : i32.t)).
      
      Definition NFT_NAT_DNAT : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 1) : i32.t)).
      
      Definition NFT_TRACETYPE_UNSPEC : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 0) : i32.t)).
      
      Definition NFT_TRACETYPE_POLICY : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 1) : i32.t)).
      
      Definition NFT_TRACETYPE_RETURN : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 2) : i32.t)).
      
      Definition NFT_TRACETYPE_RULE : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 3) : i32.t)).
      
      Definition NFT_NG_INCREMENTAL : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 0) : i32.t)).
      
      Definition NFT_NG_RANDOM : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 1) : i32.t)).
      
      Definition FF_MAX : M.Val ltac:(libc.unix.linux_like.linux.__u16) :=
        M.run (M.alloc ((Integer.of_Z 127) : u16.t)).
      
      Definition FF_CNT : M.Val usize.t :=
        M.run
          (let* α0 : u16.t := M.read libc.unix.linux_like.linux.FF_MAX in
          let* α1 : usize.t :=
            BinOp.Panic.add (rust_cast α0) ((Integer.of_Z 1) : usize.t) in
          M.alloc α1).
      
      Definition INPUT_PROP_MAX
          : M.Val ltac:(libc.unix.linux_like.linux.__u16) :=
        M.run (M.alloc ((Integer.of_Z 31) : u16.t)).
      
      Definition INPUT_PROP_CNT : M.Val usize.t :=
        M.run
          (let* α0 : u16.t :=
            M.read libc.unix.linux_like.linux.INPUT_PROP_MAX in
          let* α1 : usize.t :=
            BinOp.Panic.add (rust_cast α0) ((Integer.of_Z 1) : usize.t) in
          M.alloc α1).
      
      Definition EV_MAX : M.Val ltac:(libc.unix.linux_like.linux.__u16) :=
        M.run (M.alloc ((Integer.of_Z 31) : u16.t)).
      
      Definition EV_CNT : M.Val usize.t :=
        M.run
          (let* α0 : u16.t := M.read libc.unix.linux_like.linux.EV_MAX in
          let* α1 : usize.t :=
            BinOp.Panic.add (rust_cast α0) ((Integer.of_Z 1) : usize.t) in
          M.alloc α1).
      
      Definition SYN_MAX : M.Val ltac:(libc.unix.linux_like.linux.__u16) :=
        M.run (M.alloc ((Integer.of_Z 15) : u16.t)).
      
      Definition SYN_CNT : M.Val usize.t :=
        M.run
          (let* α0 : u16.t := M.read libc.unix.linux_like.linux.SYN_MAX in
          let* α1 : usize.t :=
            BinOp.Panic.add (rust_cast α0) ((Integer.of_Z 1) : usize.t) in
          M.alloc α1).
      
      Definition KEY_MAX : M.Val ltac:(libc.unix.linux_like.linux.__u16) :=
        M.run (M.alloc ((Integer.of_Z 767) : u16.t)).
      
      Definition KEY_CNT : M.Val usize.t :=
        M.run
          (let* α0 : u16.t := M.read libc.unix.linux_like.linux.KEY_MAX in
          let* α1 : usize.t :=
            BinOp.Panic.add (rust_cast α0) ((Integer.of_Z 1) : usize.t) in
          M.alloc α1).
      
      Definition REL_MAX : M.Val ltac:(libc.unix.linux_like.linux.__u16) :=
        M.run (M.alloc ((Integer.of_Z 15) : u16.t)).
      
      Definition REL_CNT : M.Val usize.t :=
        M.run
          (let* α0 : u16.t := M.read libc.unix.linux_like.linux.REL_MAX in
          let* α1 : usize.t :=
            BinOp.Panic.add (rust_cast α0) ((Integer.of_Z 1) : usize.t) in
          M.alloc α1).
      
      Definition ABS_MAX : M.Val ltac:(libc.unix.linux_like.linux.__u16) :=
        M.run (M.alloc ((Integer.of_Z 63) : u16.t)).
      
      Definition ABS_CNT : M.Val usize.t :=
        M.run
          (let* α0 : u16.t := M.read libc.unix.linux_like.linux.ABS_MAX in
          let* α1 : usize.t :=
            BinOp.Panic.add (rust_cast α0) ((Integer.of_Z 1) : usize.t) in
          M.alloc α1).
      
      Definition SW_MAX : M.Val ltac:(libc.unix.linux_like.linux.__u16) :=
        M.run (M.alloc ((Integer.of_Z 16) : u16.t)).
      
      Definition SW_CNT : M.Val usize.t :=
        M.run
          (let* α0 : u16.t := M.read libc.unix.linux_like.linux.SW_MAX in
          let* α1 : usize.t :=
            BinOp.Panic.add (rust_cast α0) ((Integer.of_Z 1) : usize.t) in
          M.alloc α1).
      
      Definition MSC_MAX : M.Val ltac:(libc.unix.linux_like.linux.__u16) :=
        M.run (M.alloc ((Integer.of_Z 7) : u16.t)).
      
      Definition MSC_CNT : M.Val usize.t :=
        M.run
          (let* α0 : u16.t := M.read libc.unix.linux_like.linux.MSC_MAX in
          let* α1 : usize.t :=
            BinOp.Panic.add (rust_cast α0) ((Integer.of_Z 1) : usize.t) in
          M.alloc α1).
      
      Definition LED_MAX : M.Val ltac:(libc.unix.linux_like.linux.__u16) :=
        M.run (M.alloc ((Integer.of_Z 15) : u16.t)).
      
      Definition LED_CNT : M.Val usize.t :=
        M.run
          (let* α0 : u16.t := M.read libc.unix.linux_like.linux.LED_MAX in
          let* α1 : usize.t :=
            BinOp.Panic.add (rust_cast α0) ((Integer.of_Z 1) : usize.t) in
          M.alloc α1).
      
      Definition REP_MAX : M.Val ltac:(libc.unix.linux_like.linux.__u16) :=
        M.run (M.alloc ((Integer.of_Z 1) : u16.t)).
      
      Definition REP_CNT : M.Val usize.t :=
        M.run
          (let* α0 : u16.t := M.read libc.unix.linux_like.linux.REP_MAX in
          let* α1 : usize.t :=
            BinOp.Panic.add (rust_cast α0) ((Integer.of_Z 1) : usize.t) in
          M.alloc α1).
      
      Definition SND_MAX : M.Val ltac:(libc.unix.linux_like.linux.__u16) :=
        M.run (M.alloc ((Integer.of_Z 7) : u16.t)).
      
      Definition SND_CNT : M.Val usize.t :=
        M.run
          (let* α0 : u16.t := M.read libc.unix.linux_like.linux.SND_MAX in
          let* α1 : usize.t :=
            BinOp.Panic.add (rust_cast α0) ((Integer.of_Z 1) : usize.t) in
          M.alloc α1).
      
      Definition UINPUT_VERSION : M.Val ltac:(libc.unix.c_uint) :=
        M.run (M.alloc ((Integer.of_Z 5) : u32.t)).
      
      Definition UINPUT_MAX_NAME_SIZE : M.Val usize.t :=
        M.run (M.alloc ((Integer.of_Z 80) : usize.t)).
      
      Definition FAN_ACCESS : M.Val u64.t :=
        M.run (M.alloc ((Integer.of_Z 1) : u64.t)).
      
      Definition FAN_MODIFY : M.Val u64.t :=
        M.run (M.alloc ((Integer.of_Z 2) : u64.t)).
      
      Definition FAN_ATTRIB : M.Val u64.t :=
        M.run (M.alloc ((Integer.of_Z 4) : u64.t)).
      
      Definition FAN_CLOSE_WRITE : M.Val u64.t :=
        M.run (M.alloc ((Integer.of_Z 8) : u64.t)).
      
      Definition FAN_CLOSE_NOWRITE : M.Val u64.t :=
        M.run (M.alloc ((Integer.of_Z 16) : u64.t)).
      
      Definition FAN_OPEN : M.Val u64.t :=
        M.run (M.alloc ((Integer.of_Z 32) : u64.t)).
      
      Definition FAN_MOVED_FROM : M.Val u64.t :=
        M.run (M.alloc ((Integer.of_Z 64) : u64.t)).
      
      Definition FAN_MOVED_TO : M.Val u64.t :=
        M.run (M.alloc ((Integer.of_Z 128) : u64.t)).
      
      Definition FAN_CREATE : M.Val u64.t :=
        M.run (M.alloc ((Integer.of_Z 256) : u64.t)).
      
      Definition FAN_DELETE : M.Val u64.t :=
        M.run (M.alloc ((Integer.of_Z 512) : u64.t)).
      
      Definition FAN_DELETE_SELF : M.Val u64.t :=
        M.run (M.alloc ((Integer.of_Z 1024) : u64.t)).
      
      Definition FAN_MOVE_SELF : M.Val u64.t :=
        M.run (M.alloc ((Integer.of_Z 2048) : u64.t)).
      
      Definition FAN_OPEN_EXEC : M.Val u64.t :=
        M.run (M.alloc ((Integer.of_Z 4096) : u64.t)).
      
      Definition FAN_Q_OVERFLOW : M.Val u64.t :=
        M.run (M.alloc ((Integer.of_Z 16384) : u64.t)).
      
      Definition FAN_FS_ERROR : M.Val u64.t :=
        M.run (M.alloc ((Integer.of_Z 32768) : u64.t)).
      
      Definition FAN_OPEN_PERM : M.Val u64.t :=
        M.run (M.alloc ((Integer.of_Z 65536) : u64.t)).
      
      Definition FAN_ACCESS_PERM : M.Val u64.t :=
        M.run (M.alloc ((Integer.of_Z 131072) : u64.t)).
      
      Definition FAN_OPEN_EXEC_PERM : M.Val u64.t :=
        M.run (M.alloc ((Integer.of_Z 262144) : u64.t)).
      
      Definition FAN_EVENT_ON_CHILD : M.Val u64.t :=
        M.run (M.alloc ((Integer.of_Z 134217728) : u64.t)).
      
      Definition FAN_RENAME : M.Val u64.t :=
        M.run (M.alloc ((Integer.of_Z 268435456) : u64.t)).
      
      Definition FAN_ONDIR : M.Val u64.t :=
        M.run (M.alloc ((Integer.of_Z 1073741824) : u64.t)).
      
      Definition FAN_CLOSE : M.Val u64.t :=
        M.run
          (let* α0 : u64.t :=
            M.read libc.unix.linux_like.linux.FAN_CLOSE_WRITE in
          let* α1 : u64.t :=
            M.read libc.unix.linux_like.linux.FAN_CLOSE_NOWRITE in
          M.alloc (BinOp.Pure.bit_or α0 α1)).
      
      Definition FAN_MOVE : M.Val u64.t :=
        M.run
          (let* α0 : u64.t :=
            M.read libc.unix.linux_like.linux.FAN_MOVED_FROM in
          let* α1 : u64.t := M.read libc.unix.linux_like.linux.FAN_MOVED_TO in
          M.alloc (BinOp.Pure.bit_or α0 α1)).
      
      Definition FAN_CLOEXEC : M.Val ltac:(libc.unix.c_uint) :=
        M.run (M.alloc ((Integer.of_Z 1) : u32.t)).
      
      Definition FAN_NONBLOCK : M.Val ltac:(libc.unix.c_uint) :=
        M.run (M.alloc ((Integer.of_Z 2) : u32.t)).
      
      Definition FAN_CLASS_NOTIF : M.Val ltac:(libc.unix.c_uint) :=
        M.run (M.alloc ((Integer.of_Z 0) : u32.t)).
      
      Definition FAN_CLASS_CONTENT : M.Val ltac:(libc.unix.c_uint) :=
        M.run (M.alloc ((Integer.of_Z 4) : u32.t)).
      
      Definition FAN_CLASS_PRE_CONTENT : M.Val ltac:(libc.unix.c_uint) :=
        M.run (M.alloc ((Integer.of_Z 8) : u32.t)).
      
      Definition FAN_UNLIMITED_QUEUE : M.Val ltac:(libc.unix.c_uint) :=
        M.run (M.alloc ((Integer.of_Z 16) : u32.t)).
      
      Definition FAN_UNLIMITED_MARKS : M.Val ltac:(libc.unix.c_uint) :=
        M.run (M.alloc ((Integer.of_Z 32) : u32.t)).
      
      Definition FAN_ENABLE_AUDIT : M.Val ltac:(libc.unix.c_uint) :=
        M.run (M.alloc ((Integer.of_Z 64) : u32.t)).
      
      Definition FAN_REPORT_PIDFD : M.Val ltac:(libc.unix.c_uint) :=
        M.run (M.alloc ((Integer.of_Z 128) : u32.t)).
      
      Definition FAN_REPORT_TID : M.Val ltac:(libc.unix.c_uint) :=
        M.run (M.alloc ((Integer.of_Z 256) : u32.t)).
      
      Definition FAN_REPORT_FID : M.Val ltac:(libc.unix.c_uint) :=
        M.run (M.alloc ((Integer.of_Z 512) : u32.t)).
      
      Definition FAN_REPORT_DIR_FID : M.Val ltac:(libc.unix.c_uint) :=
        M.run (M.alloc ((Integer.of_Z 1024) : u32.t)).
      
      Definition FAN_REPORT_NAME : M.Val ltac:(libc.unix.c_uint) :=
        M.run (M.alloc ((Integer.of_Z 2048) : u32.t)).
      
      Definition FAN_REPORT_TARGET_FID : M.Val ltac:(libc.unix.c_uint) :=
        M.run (M.alloc ((Integer.of_Z 4096) : u32.t)).
      
      Definition FAN_REPORT_DFID_NAME : M.Val ltac:(libc.unix.c_uint) :=
        M.run
          (let* α0 : u32.t :=
            M.read libc.unix.linux_like.linux.FAN_REPORT_DIR_FID in
          let* α1 : u32.t :=
            M.read libc.unix.linux_like.linux.FAN_REPORT_NAME in
          M.alloc (BinOp.Pure.bit_or α0 α1)).
      
      Definition FAN_REPORT_DFID_NAME_TARGET : M.Val ltac:(libc.unix.c_uint) :=
        M.run
          (let* α0 : u32.t :=
            M.read libc.unix.linux_like.linux.FAN_REPORT_DFID_NAME in
          let* α1 : u32.t := M.read libc.unix.linux_like.linux.FAN_REPORT_FID in
          let* α2 : u32.t :=
            M.read libc.unix.linux_like.linux.FAN_REPORT_TARGET_FID in
          M.alloc (BinOp.Pure.bit_or (BinOp.Pure.bit_or α0 α1) α2)).
      
      Definition FAN_MARK_ADD : M.Val ltac:(libc.unix.c_uint) :=
        M.run (M.alloc ((Integer.of_Z 1) : u32.t)).
      
      Definition FAN_MARK_REMOVE : M.Val ltac:(libc.unix.c_uint) :=
        M.run (M.alloc ((Integer.of_Z 2) : u32.t)).
      
      Definition FAN_MARK_DONT_FOLLOW : M.Val ltac:(libc.unix.c_uint) :=
        M.run (M.alloc ((Integer.of_Z 4) : u32.t)).
      
      Definition FAN_MARK_ONLYDIR : M.Val ltac:(libc.unix.c_uint) :=
        M.run (M.alloc ((Integer.of_Z 8) : u32.t)).
      
      Definition FAN_MARK_IGNORED_MASK : M.Val ltac:(libc.unix.c_uint) :=
        M.run (M.alloc ((Integer.of_Z 32) : u32.t)).
      
      Definition FAN_MARK_IGNORED_SURV_MODIFY : M.Val ltac:(libc.unix.c_uint) :=
        M.run (M.alloc ((Integer.of_Z 64) : u32.t)).
      
      Definition FAN_MARK_FLUSH : M.Val ltac:(libc.unix.c_uint) :=
        M.run (M.alloc ((Integer.of_Z 128) : u32.t)).
      
      Definition FAN_MARK_EVICTABLE : M.Val ltac:(libc.unix.c_uint) :=
        M.run (M.alloc ((Integer.of_Z 512) : u32.t)).
      
      Definition FAN_MARK_IGNORE : M.Val ltac:(libc.unix.c_uint) :=
        M.run (M.alloc ((Integer.of_Z 256) : u32.t)).
      
      Definition FAN_MARK_INODE : M.Val ltac:(libc.unix.c_uint) :=
        M.run (M.alloc ((Integer.of_Z 0) : u32.t)).
      
      Definition FAN_MARK_MOUNT : M.Val ltac:(libc.unix.c_uint) :=
        M.run (M.alloc ((Integer.of_Z 16) : u32.t)).
      
      Definition FAN_MARK_FILESYSTEM : M.Val ltac:(libc.unix.c_uint) :=
        M.run (M.alloc ((Integer.of_Z 256) : u32.t)).
      
      Definition FAN_MARK_IGNORE_SURV : M.Val ltac:(libc.unix.c_uint) :=
        M.run
          (let* α0 : u32.t :=
            M.read libc.unix.linux_like.linux.FAN_MARK_IGNORE in
          let* α1 : u32.t :=
            M.read libc.unix.linux_like.linux.FAN_MARK_IGNORED_SURV_MODIFY in
          M.alloc (BinOp.Pure.bit_or α0 α1)).
      
      Definition FANOTIFY_METADATA_VERSION : M.Val u8.t :=
        M.run (M.alloc ((Integer.of_Z 3) : u8.t)).
      
      Definition FAN_EVENT_INFO_TYPE_FID : M.Val u8.t :=
        M.run (M.alloc ((Integer.of_Z 1) : u8.t)).
      
      Definition FAN_EVENT_INFO_TYPE_DFID_NAME : M.Val u8.t :=
        M.run (M.alloc ((Integer.of_Z 2) : u8.t)).
      
      Definition FAN_EVENT_INFO_TYPE_DFID : M.Val u8.t :=
        M.run (M.alloc ((Integer.of_Z 3) : u8.t)).
      
      Definition FAN_EVENT_INFO_TYPE_PIDFD : M.Val u8.t :=
        M.run (M.alloc ((Integer.of_Z 4) : u8.t)).
      
      Definition FAN_EVENT_INFO_TYPE_ERROR : M.Val u8.t :=
        M.run (M.alloc ((Integer.of_Z 5) : u8.t)).
      
      Definition FAN_EVENT_INFO_TYPE_OLD_DFID_NAME : M.Val u8.t :=
        M.run (M.alloc ((Integer.of_Z 10) : u8.t)).
      
      Definition FAN_EVENT_INFO_TYPE_NEW_DFID_NAME : M.Val u8.t :=
        M.run (M.alloc ((Integer.of_Z 12) : u8.t)).
      
      Definition FAN_RESPONSE_INFO_NONE : M.Val u8.t :=
        M.run (M.alloc ((Integer.of_Z 0) : u8.t)).
      
      Definition FAN_RESPONSE_INFO_AUDIT_RULE : M.Val u8.t :=
        M.run (M.alloc ((Integer.of_Z 1) : u8.t)).
      
      Definition FAN_ALLOW : M.Val u32.t :=
        M.run (M.alloc ((Integer.of_Z 1) : u32.t)).
      
      Definition FAN_DENY : M.Val u32.t :=
        M.run (M.alloc ((Integer.of_Z 2) : u32.t)).
      
      Definition FAN_AUDIT : M.Val u32.t :=
        M.run (M.alloc ((Integer.of_Z 16) : u32.t)).
      
      Definition FAN_INFO : M.Val u32.t :=
        M.run (M.alloc ((Integer.of_Z 32) : u32.t)).
      
      Definition FAN_NOFD : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z (-1)) : i32.t)).
      
      Definition FAN_NOPIDFD : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.pure libc.unix.linux_like.linux.FAN_NOFD).
      
      Definition FAN_EPIDFD : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z (-2)) : i32.t)).
      
      Definition FUTEX_WAIT : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 0) : i32.t)).
      
      Definition FUTEX_WAKE : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 1) : i32.t)).
      
      Definition FUTEX_FD : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 2) : i32.t)).
      
      Definition FUTEX_REQUEUE : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 3) : i32.t)).
      
      Definition FUTEX_CMP_REQUEUE : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 4) : i32.t)).
      
      Definition FUTEX_WAKE_OP : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 5) : i32.t)).
      
      Definition FUTEX_LOCK_PI : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 6) : i32.t)).
      
      Definition FUTEX_UNLOCK_PI : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 7) : i32.t)).
      
      Definition FUTEX_TRYLOCK_PI : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 8) : i32.t)).
      
      Definition FUTEX_WAIT_BITSET : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 9) : i32.t)).
      
      Definition FUTEX_WAKE_BITSET : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 10) : i32.t)).
      
      Definition FUTEX_WAIT_REQUEUE_PI : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 11) : i32.t)).
      
      Definition FUTEX_CMP_REQUEUE_PI : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 12) : i32.t)).
      
      Definition FUTEX_LOCK_PI2 : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 13) : i32.t)).
      
      Definition FUTEX_PRIVATE_FLAG : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 128) : i32.t)).
      
      Definition FUTEX_CLOCK_REALTIME : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 256) : i32.t)).
      
      Definition FUTEX_CMD_MASK : M.Val ltac:(libc.unix.c_int) :=
        M.run
          (let* α0 : i32.t :=
            M.read libc.unix.linux_like.linux.FUTEX_PRIVATE_FLAG in
          let* α1 : i32.t :=
            M.read libc.unix.linux_like.linux.FUTEX_CLOCK_REALTIME in
          M.alloc (UnOp.not (BinOp.Pure.bit_or α0 α1))).
      
      Definition FUTEX_BITSET_MATCH_ANY : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 4294967295) : i32.t)).
      
      Definition FUTEX_OP_SET : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 0) : i32.t)).
      
      Definition FUTEX_OP_ADD : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 1) : i32.t)).
      
      Definition FUTEX_OP_OR : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 2) : i32.t)).
      
      Definition FUTEX_OP_ANDN : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 3) : i32.t)).
      
      Definition FUTEX_OP_XOR : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 4) : i32.t)).
      
      Definition FUTEX_OP_OPARG_SHIFT : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 8) : i32.t)).
      
      Definition FUTEX_OP_CMP_EQ : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 0) : i32.t)).
      
      Definition FUTEX_OP_CMP_NE : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 1) : i32.t)).
      
      Definition FUTEX_OP_CMP_LT : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 2) : i32.t)).
      
      Definition FUTEX_OP_CMP_LE : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 3) : i32.t)).
      
      Definition FUTEX_OP_CMP_GT : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 4) : i32.t)).
      
      Definition FUTEX_OP_CMP_GE : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 5) : i32.t)).
      
      (*
      pub fn FUTEX_OP(op: ::c_int, oparg: ::c_int, cmp: ::c_int, cmparg: ::c_int) -> ::c_int {
          ((op & 0xf) << 28) | ((cmp & 0xf) << 24) | ((oparg & 0xfff) << 12) | (cmparg & 0xfff)
      }
      *)
      Definition FUTEX_OP
          (op : ltac:(libc.unix.c_int))
          (oparg : ltac:(libc.unix.c_int))
          (cmp : ltac:(libc.unix.c_int))
          (cmparg : ltac:(libc.unix.c_int))
          : M ltac:(libc.unix.c_int) :=
        let* op := M.alloc op in
        let* oparg := M.alloc oparg in
        let* cmp := M.alloc cmp in
        let* cmparg := M.alloc cmparg in
        let* α0 : i32.t := M.read op in
        let* α1 : i32.t :=
          BinOp.Panic.shl
            (BinOp.Pure.bit_and α0 ((Integer.of_Z 15) : i32.t))
            ((Integer.of_Z 28) : i32.t) in
        let* α2 : i32.t := M.read cmp in
        let* α3 : i32.t :=
          BinOp.Panic.shl
            (BinOp.Pure.bit_and α2 ((Integer.of_Z 15) : i32.t))
            ((Integer.of_Z 24) : i32.t) in
        let* α4 : i32.t := M.read oparg in
        let* α5 : i32.t :=
          BinOp.Panic.shl
            (BinOp.Pure.bit_and α4 ((Integer.of_Z 4095) : i32.t))
            ((Integer.of_Z 12) : i32.t) in
        let* α6 : i32.t := M.read cmparg in
        M.pure
          (BinOp.Pure.bit_or
            (BinOp.Pure.bit_or (BinOp.Pure.bit_or α1 α3) α5)
            (BinOp.Pure.bit_and α6 ((Integer.of_Z 4095) : i32.t))).
      
      Definition KEXEC_ON_CRASH : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 1) : i32.t)).
      
      Definition KEXEC_PRESERVE_CONTEXT : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 2) : i32.t)).
      
      Definition KEXEC_ARCH_MASK : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 4294901760) : i32.t)).
      
      Definition KEXEC_FILE_UNLOAD : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 1) : i32.t)).
      
      Definition KEXEC_FILE_ON_CRASH : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 2) : i32.t)).
      
      Definition KEXEC_FILE_NO_INITRAMFS : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 4) : i32.t)).
      
      Definition LINUX_REBOOT_MAGIC1 : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 4276215469) : i32.t)).
      
      Definition LINUX_REBOOT_MAGIC2 : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 672274793) : i32.t)).
      
      Definition LINUX_REBOOT_MAGIC2A : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 85072278) : i32.t)).
      
      Definition LINUX_REBOOT_MAGIC2B : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 369367448) : i32.t)).
      
      Definition LINUX_REBOOT_MAGIC2C : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 537993216) : i32.t)).
      
      Definition LINUX_REBOOT_CMD_RESTART : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 19088743) : i32.t)).
      
      Definition LINUX_REBOOT_CMD_HALT : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 3454992675) : i32.t)).
      
      Definition LINUX_REBOOT_CMD_CAD_ON : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 2309737967) : i32.t)).
      
      Definition LINUX_REBOOT_CMD_CAD_OFF : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 0) : i32.t)).
      
      Definition LINUX_REBOOT_CMD_POWER_OFF : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 1126301404) : i32.t)).
      
      Definition LINUX_REBOOT_CMD_RESTART2 : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 2712847316) : i32.t)).
      
      Definition LINUX_REBOOT_CMD_SW_SUSPEND : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 3489725666) : i32.t)).
      
      Definition LINUX_REBOOT_CMD_KEXEC : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 1163412803) : i32.t)).
      
      Definition REG_EXTENDED : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 1) : i32.t)).
      
      Definition REG_ICASE : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 2) : i32.t)).
      
      Definition REG_NEWLINE : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 4) : i32.t)).
      
      Definition REG_NOSUB : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 8) : i32.t)).
      
      Definition REG_NOTBOL : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 1) : i32.t)).
      
      Definition REG_NOTEOL : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 2) : i32.t)).
      
      Definition REG_ENOSYS : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z (-1)) : i32.t)).
      
      Definition REG_NOMATCH : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 1) : i32.t)).
      
      Definition REG_BADPAT : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 2) : i32.t)).
      
      Definition REG_ECOLLATE : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 3) : i32.t)).
      
      Definition REG_ECTYPE : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 4) : i32.t)).
      
      Definition REG_EESCAPE : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 5) : i32.t)).
      
      Definition REG_ESUBREG : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 6) : i32.t)).
      
      Definition REG_EBRACK : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 7) : i32.t)).
      
      Definition REG_EPAREN : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 8) : i32.t)).
      
      Definition REG_EBRACE : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 9) : i32.t)).
      
      Definition REG_BADBR : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 10) : i32.t)).
      
      Definition REG_ERANGE : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 11) : i32.t)).
      
      Definition REG_ESPACE : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 12) : i32.t)).
      
      Definition REG_BADRPT : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 13) : i32.t)).
      
      Definition SO_EE_ORIGIN_NONE : M.Val u8.t :=
        M.run (M.alloc ((Integer.of_Z 0) : u8.t)).
      
      Definition SO_EE_ORIGIN_LOCAL : M.Val u8.t :=
        M.run (M.alloc ((Integer.of_Z 1) : u8.t)).
      
      Definition SO_EE_ORIGIN_ICMP : M.Val u8.t :=
        M.run (M.alloc ((Integer.of_Z 2) : u8.t)).
      
      Definition SO_EE_ORIGIN_ICMP6 : M.Val u8.t :=
        M.run (M.alloc ((Integer.of_Z 3) : u8.t)).
      
      Definition SO_EE_ORIGIN_TXSTATUS : M.Val u8.t :=
        M.run (M.alloc ((Integer.of_Z 4) : u8.t)).
      
      Definition SO_EE_ORIGIN_TIMESTAMPING : M.Val u8.t :=
        M.run (M.pure libc.unix.linux_like.linux.SO_EE_ORIGIN_TXSTATUS).
      
      Definition EPERM : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 1) : i32.t)).
      
      Definition ENOENT : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 2) : i32.t)).
      
      Definition ESRCH : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 3) : i32.t)).
      
      Definition EINTR : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 4) : i32.t)).
      
      Definition EIO : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 5) : i32.t)).
      
      Definition ENXIO : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 6) : i32.t)).
      
      Definition E2BIG : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 7) : i32.t)).
      
      Definition ENOEXEC : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 8) : i32.t)).
      
      Definition EBADF : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 9) : i32.t)).
      
      Definition ECHILD : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 10) : i32.t)).
      
      Definition EAGAIN : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 11) : i32.t)).
      
      Definition ENOMEM : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 12) : i32.t)).
      
      Definition EACCES : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 13) : i32.t)).
      
      Definition EFAULT : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 14) : i32.t)).
      
      Definition ENOTBLK : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 15) : i32.t)).
      
      Definition EBUSY : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 16) : i32.t)).
      
      Definition EEXIST : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 17) : i32.t)).
      
      Definition EXDEV : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 18) : i32.t)).
      
      Definition ENODEV : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 19) : i32.t)).
      
      Definition ENOTDIR : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 20) : i32.t)).
      
      Definition EISDIR : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 21) : i32.t)).
      
      Definition EINVAL : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 22) : i32.t)).
      
      Definition ENFILE : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 23) : i32.t)).
      
      Definition EMFILE : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 24) : i32.t)).
      
      Definition ENOTTY : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 25) : i32.t)).
      
      Definition ETXTBSY : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 26) : i32.t)).
      
      Definition EFBIG : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 27) : i32.t)).
      
      Definition ENOSPC : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 28) : i32.t)).
      
      Definition ESPIPE : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 29) : i32.t)).
      
      Definition EROFS : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 30) : i32.t)).
      
      Definition EMLINK : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 31) : i32.t)).
      
      Definition EPIPE : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 32) : i32.t)).
      
      Definition EDOM : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 33) : i32.t)).
      
      Definition ERANGE : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 34) : i32.t)).
      
      Definition EWOULDBLOCK : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.pure libc.unix.linux_like.linux.EAGAIN).
      
      Definition CAN_EFF_FLAG
          : M.Val ltac:(libc.unix.linux_like.linux.canid_t) :=
        M.run (M.alloc ((Integer.of_Z 2147483648) : u32.t)).
      
      Definition CAN_RTR_FLAG
          : M.Val ltac:(libc.unix.linux_like.linux.canid_t) :=
        M.run (M.alloc ((Integer.of_Z 1073741824) : u32.t)).
      
      Definition CAN_ERR_FLAG
          : M.Val ltac:(libc.unix.linux_like.linux.canid_t) :=
        M.run (M.alloc ((Integer.of_Z 536870912) : u32.t)).
      
      Definition CAN_SFF_MASK
          : M.Val ltac:(libc.unix.linux_like.linux.canid_t) :=
        M.run (M.alloc ((Integer.of_Z 2047) : u32.t)).
      
      Definition CAN_EFF_MASK
          : M.Val ltac:(libc.unix.linux_like.linux.canid_t) :=
        M.run (M.alloc ((Integer.of_Z 536870911) : u32.t)).
      
      Definition CAN_ERR_MASK
          : M.Val ltac:(libc.unix.linux_like.linux.canid_t) :=
        M.run (M.alloc ((Integer.of_Z 536870911) : u32.t)).
      
      Definition CANXL_PRIO_MASK
          : M.Val ltac:(libc.unix.linux_like.linux.canid_t) :=
        M.run (M.pure libc.unix.linux_like.linux.CAN_SFF_MASK).
      
      Definition CAN_SFF_ID_BITS : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 11) : i32.t)).
      
      Definition CAN_EFF_ID_BITS : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 29) : i32.t)).
      
      Definition CANXL_PRIO_BITS : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.pure libc.unix.linux_like.linux.CAN_SFF_ID_BITS).
      
      Definition CAN_MAX_DLC : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 8) : i32.t)).
      
      Definition CAN_MAX_DLEN : M.Val usize.t :=
        M.run (M.alloc ((Integer.of_Z 8) : usize.t)).
      
      Definition CANFD_MAX_DLC : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 15) : i32.t)).
      
      Definition CANFD_MAX_DLEN : M.Val usize.t :=
        M.run (M.alloc ((Integer.of_Z 64) : usize.t)).
      
      Definition CANFD_BRS : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 1) : i32.t)).
      
      Definition CANFD_ESI : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 2) : i32.t)).
      
      Definition CANXL_MIN_DLC : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 0) : i32.t)).
      
      Definition CANXL_MAX_DLC : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 2047) : i32.t)).
      
      Definition CANXL_MAX_DLC_MASK : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 2047) : i32.t)).
      
      Definition CANXL_MIN_DLEN : M.Val usize.t :=
        M.run (M.alloc ((Integer.of_Z 1) : usize.t)).
      
      Definition CANXL_MAX_DLEN : M.Val usize.t :=
        M.run (M.alloc ((Integer.of_Z 2048) : usize.t)).
      
      Definition CANXL_XLF : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 128) : i32.t)).
      
      Definition CANXL_SEC : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 1) : i32.t)).
      
      Definition CAN_MTU : M.Val usize.t :=
        M.run
          (let* α0 : usize.t := M.call core.mem.size_of in
          M.alloc α0).
      
      Definition CANFD_MTU : M.Val usize.t :=
        M.run
          (let* α0 : usize.t := M.call core.mem.size_of in
          M.alloc α0).
      
      Definition CANXL_MTU : M.Val usize.t :=
        M.run
          (let* α0 : usize.t := M.call core.mem.size_of in
          M.alloc α0).
      
      Definition CANXL_HDR_SIZE : M.Val usize.t :=
        M.run (M.alloc ((Integer.of_Z 12) : usize.t)).
      
      Definition CANXL_MIN_MTU : M.Val usize.t :=
        M.run
          (let* α0 : usize.t :=
            M.read libc.unix.linux_like.linux.CANXL_HDR_SIZE in
          let* α1 : usize.t :=
            BinOp.Panic.add α0 ((Integer.of_Z 64) : usize.t) in
          M.alloc α1).
      
      Definition CANXL_MAX_MTU : M.Val usize.t :=
        M.run (M.pure libc.unix.linux_like.linux.CANXL_MTU).
      
      Definition CAN_RAW : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 1) : i32.t)).
      
      Definition CAN_BCM : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 2) : i32.t)).
      
      Definition CAN_TP16 : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 3) : i32.t)).
      
      Definition CAN_TP20 : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 4) : i32.t)).
      
      Definition CAN_MCNET : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 5) : i32.t)).
      
      Definition CAN_ISOTP : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 6) : i32.t)).
      
      Definition CAN_J1939 : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 7) : i32.t)).
      
      Definition CAN_NPROTO : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 8) : i32.t)).
      
      Definition SOL_CAN_BASE : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 100) : i32.t)).
      
      Definition CAN_INV_FILTER
          : M.Val ltac:(libc.unix.linux_like.linux.canid_t) :=
        M.run (M.alloc ((Integer.of_Z 536870912) : u32.t)).
      
      Definition CAN_RAW_FILTER_MAX : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 512) : i32.t)).
      
      Definition SOL_CAN_RAW : M.Val ltac:(libc.unix.c_int) :=
        M.run
          (let* α0 : i32.t := M.read libc.unix.linux_like.linux.SOL_CAN_BASE in
          let* α1 : i32.t := M.read libc.unix.linux_like.linux.CAN_RAW in
          let* α2 : i32.t := BinOp.Panic.add α0 α1 in
          M.alloc α2).
      
      Definition CAN_RAW_FILTER : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 1) : i32.t)).
      
      Definition CAN_RAW_ERR_FILTER : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 2) : i32.t)).
      
      Definition CAN_RAW_LOOPBACK : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 3) : i32.t)).
      
      Definition CAN_RAW_RECV_OWN_MSGS : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 4) : i32.t)).
      
      Definition CAN_RAW_FD_FRAMES : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 5) : i32.t)).
      
      Definition CAN_RAW_JOIN_FILTERS : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 6) : i32.t)).
      
      Definition CAN_RAW_XL_FRAMES : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 7) : i32.t)).
      
      Definition SOL_CAN_J1939 : M.Val ltac:(libc.unix.c_int) :=
        M.run
          (let* α0 : i32.t := M.read libc.unix.linux_like.linux.SOL_CAN_BASE in
          let* α1 : i32.t := M.read libc.unix.linux_like.linux.CAN_J1939 in
          let* α2 : i32.t := BinOp.Panic.add α0 α1 in
          M.alloc α2).
      
      Definition J1939_MAX_UNICAST_ADDR : M.Val ltac:(libc.unix.c_uchar) :=
        M.run (M.alloc ((Integer.of_Z 253) : u8.t)).
      
      Definition J1939_IDLE_ADDR : M.Val ltac:(libc.unix.c_uchar) :=
        M.run (M.alloc ((Integer.of_Z 254) : u8.t)).
      
      Definition J1939_NO_ADDR : M.Val ltac:(libc.unix.c_uchar) :=
        M.run (M.alloc ((Integer.of_Z 255) : u8.t)).
      
      Definition J1939_NO_NAME
          :
            M.Val
              ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_ulong) :=
        M.run (M.alloc ((Integer.of_Z 0) : u64.t)).
      
      Definition J1939_PGN_REQUEST : M.Val ltac:(libc.unix.c_uint) :=
        M.run (M.alloc ((Integer.of_Z 59904) : u32.t)).
      
      Definition J1939_PGN_ADDRESS_CLAIMED : M.Val ltac:(libc.unix.c_uint) :=
        M.run (M.alloc ((Integer.of_Z 60928) : u32.t)).
      
      Definition J1939_PGN_ADDRESS_COMMANDED : M.Val ltac:(libc.unix.c_uint) :=
        M.run (M.alloc ((Integer.of_Z 65240) : u32.t)).
      
      Definition J1939_PGN_PDU1_MAX : M.Val ltac:(libc.unix.c_uint) :=
        M.run (M.alloc ((Integer.of_Z 261888) : u32.t)).
      
      Definition J1939_PGN_MAX : M.Val ltac:(libc.unix.c_uint) :=
        M.run (M.alloc ((Integer.of_Z 262143) : u32.t)).
      
      Definition J1939_NO_PGN : M.Val ltac:(libc.unix.c_uint) :=
        M.run (M.alloc ((Integer.of_Z 262144) : u32.t)).
      
      Definition SO_J1939_FILTER : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 1) : i32.t)).
      
      Definition SO_J1939_PROMISC : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 2) : i32.t)).
      
      Definition SO_J1939_SEND_PRIO : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 3) : i32.t)).
      
      Definition SO_J1939_ERRQUEUE : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 4) : i32.t)).
      
      Definition SCM_J1939_DEST_ADDR : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 1) : i32.t)).
      
      Definition SCM_J1939_DEST_NAME : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 2) : i32.t)).
      
      Definition SCM_J1939_PRIO : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 3) : i32.t)).
      
      Definition SCM_J1939_ERRQUEUE : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 4) : i32.t)).
      
      Definition J1939_NLA_PAD : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 0) : i32.t)).
      
      Definition J1939_NLA_BYTES_ACKED : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 1) : i32.t)).
      
      Definition J1939_NLA_TOTAL_SIZE : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 2) : i32.t)).
      
      Definition J1939_NLA_PGN : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 3) : i32.t)).
      
      Definition J1939_NLA_SRC_NAME : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 4) : i32.t)).
      
      Definition J1939_NLA_DEST_NAME : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 5) : i32.t)).
      
      Definition J1939_NLA_SRC_ADDR : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 6) : i32.t)).
      
      Definition J1939_NLA_DEST_ADDR : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 7) : i32.t)).
      
      Definition J1939_EE_INFO_NONE : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 0) : i32.t)).
      
      Definition J1939_EE_INFO_TX_ABORT : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 1) : i32.t)).
      
      Definition J1939_EE_INFO_RX_RTS : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 2) : i32.t)).
      
      Definition J1939_EE_INFO_RX_DPO : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 3) : i32.t)).
      
      Definition J1939_EE_INFO_RX_ABORT : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 4) : i32.t)).
      
      Definition J1939_FILTER_MAX : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 512) : i32.t)).
      
      Definition SCTP_FUTURE_ASSOC : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 0) : i32.t)).
      
      Definition SCTP_CURRENT_ASSOC : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 1) : i32.t)).
      
      Definition SCTP_ALL_ASSOC : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 2) : i32.t)).
      
      Definition SCTP_RTOINFO : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 0) : i32.t)).
      
      Definition SCTP_ASSOCINFO : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 1) : i32.t)).
      
      Definition SCTP_INITMSG : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 2) : i32.t)).
      
      Definition SCTP_NODELAY : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 3) : i32.t)).
      
      Definition SCTP_AUTOCLOSE : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 4) : i32.t)).
      
      Definition SCTP_SET_PEER_PRIMARY_ADDR : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 5) : i32.t)).
      
      Definition SCTP_PRIMARY_ADDR : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 6) : i32.t)).
      
      Definition SCTP_ADAPTATION_LAYER : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 7) : i32.t)).
      
      Definition SCTP_DISABLE_FRAGMENTS : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 8) : i32.t)).
      
      Definition SCTP_PEER_ADDR_PARAMS : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 9) : i32.t)).
      
      Definition SCTP_DEFAULT_SEND_PARAM : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 10) : i32.t)).
      
      Definition SCTP_EVENTS : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 11) : i32.t)).
      
      Definition SCTP_I_WANT_MAPPED_V4_ADDR : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 12) : i32.t)).
      
      Definition SCTP_MAXSEG : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 13) : i32.t)).
      
      Definition SCTP_STATUS : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 14) : i32.t)).
      
      Definition SCTP_GET_PEER_ADDR_INFO : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 15) : i32.t)).
      
      Definition SCTP_DELAYED_ACK_TIME : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 16) : i32.t)).
      
      Definition SCTP_DELAYED_ACK : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.pure libc.unix.linux_like.linux.SCTP_DELAYED_ACK_TIME).
      
      Definition SCTP_DELAYED_SACK : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.pure libc.unix.linux_like.linux.SCTP_DELAYED_ACK_TIME).
      
      Definition SCTP_CONTEXT : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 17) : i32.t)).
      
      Definition SCTP_FRAGMENT_INTERLEAVE : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 18) : i32.t)).
      
      Definition SCTP_PARTIAL_DELIVERY_POINT : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 19) : i32.t)).
      
      Definition SCTP_MAX_BURST : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 20) : i32.t)).
      
      Definition SCTP_AUTH_CHUNK : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 21) : i32.t)).
      
      Definition SCTP_HMAC_IDENT : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 22) : i32.t)).
      
      Definition SCTP_AUTH_KEY : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 23) : i32.t)).
      
      Definition SCTP_AUTH_ACTIVE_KEY : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 24) : i32.t)).
      
      Definition SCTP_AUTH_DELETE_KEY : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 25) : i32.t)).
      
      Definition SCTP_PEER_AUTH_CHUNKS : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 26) : i32.t)).
      
      Definition SCTP_LOCAL_AUTH_CHUNKS : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 27) : i32.t)).
      
      Definition SCTP_GET_ASSOC_NUMBER : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 28) : i32.t)).
      
      Definition SCTP_GET_ASSOC_ID_LIST : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 29) : i32.t)).
      
      Definition SCTP_AUTO_ASCONF : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 30) : i32.t)).
      
      Definition SCTP_PEER_ADDR_THLDS : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 31) : i32.t)).
      
      Definition SCTP_RECVRCVINFO : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 32) : i32.t)).
      
      Definition SCTP_RECVNXTINFO : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 33) : i32.t)).
      
      Definition SCTP_DEFAULT_SNDINFO : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 34) : i32.t)).
      
      Definition SCTP_AUTH_DEACTIVATE_KEY : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 35) : i32.t)).
      
      Definition SCTP_REUSE_PORT : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 36) : i32.t)).
      
      Definition SCTP_PEER_ADDR_THLDS_V2 : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 37) : i32.t)).
      
      Definition SCTP_PR_SCTP_NONE : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 0) : i32.t)).
      
      Definition SCTP_PR_SCTP_TTL : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 16) : i32.t)).
      
      Definition SCTP_PR_SCTP_RTX : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 32) : i32.t)).
      
      Definition SCTP_PR_SCTP_PRIO : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 48) : i32.t)).
      
      Definition SCTP_PR_SCTP_MAX : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.pure libc.unix.linux_like.linux.SCTP_PR_SCTP_PRIO).
      
      Definition SCTP_PR_SCTP_MASK : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 48) : i32.t)).
      
      Definition SCTP_ENABLE_RESET_STREAM_REQ : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 1) : i32.t)).
      
      Definition SCTP_ENABLE_RESET_ASSOC_REQ : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 2) : i32.t)).
      
      Definition SCTP_ENABLE_CHANGE_ASSOC_REQ : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 4) : i32.t)).
      
      Definition SCTP_ENABLE_STRRESET_MASK : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 7) : i32.t)).
      
      Definition SCTP_STREAM_RESET_INCOMING : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 1) : i32.t)).
      
      Definition SCTP_STREAM_RESET_OUTGOING : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 2) : i32.t)).
      
      Definition SCTP_INIT : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 0) : i32.t)).
      
      Definition SCTP_SNDRCV : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 1) : i32.t)).
      
      Definition SCTP_SNDINFO : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 2) : i32.t)).
      
      Definition SCTP_RCVINFO : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 3) : i32.t)).
      
      Definition SCTP_NXTINFO : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 4) : i32.t)).
      
      Definition SCTP_PRINFO : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 5) : i32.t)).
      
      Definition SCTP_AUTHINFO : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 6) : i32.t)).
      
      Definition SCTP_DSTADDRV4 : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 7) : i32.t)).
      
      Definition SCTP_DSTADDRV6 : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 8) : i32.t)).
      
      Definition SCTP_UNORDERED : M.Val ltac:(libc.unix.c_int) :=
        M.run
          (let* α0 : i32.t :=
            BinOp.Panic.shl
              ((Integer.of_Z 1) : i32.t)
              ((Integer.of_Z 0) : i32.t) in
          M.alloc α0).
      
      Definition SCTP_ADDR_OVER : M.Val ltac:(libc.unix.c_int) :=
        M.run
          (let* α0 : i32.t :=
            BinOp.Panic.shl
              ((Integer.of_Z 1) : i32.t)
              ((Integer.of_Z 1) : i32.t) in
          M.alloc α0).
      
      Definition SCTP_ABORT : M.Val ltac:(libc.unix.c_int) :=
        M.run
          (let* α0 : i32.t :=
            BinOp.Panic.shl
              ((Integer.of_Z 1) : i32.t)
              ((Integer.of_Z 2) : i32.t) in
          M.alloc α0).
      
      Definition SCTP_SACK_IMMEDIATELY : M.Val ltac:(libc.unix.c_int) :=
        M.run
          (let* α0 : i32.t :=
            BinOp.Panic.shl
              ((Integer.of_Z 1) : i32.t)
              ((Integer.of_Z 3) : i32.t) in
          M.alloc α0).
      
      Definition SCTP_SENDALL : M.Val ltac:(libc.unix.c_int) :=
        M.run
          (let* α0 : i32.t :=
            BinOp.Panic.shl
              ((Integer.of_Z 1) : i32.t)
              ((Integer.of_Z 6) : i32.t) in
          M.alloc α0).
      
      Definition SCTP_PR_SCTP_ALL : M.Val ltac:(libc.unix.c_int) :=
        M.run
          (let* α0 : i32.t :=
            BinOp.Panic.shl
              ((Integer.of_Z 1) : i32.t)
              ((Integer.of_Z 7) : i32.t) in
          M.alloc α0).
      
      Definition SCTP_NOTIFICATION : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.pure libc.unix.linux_like.linux.MSG_NOTIFICATION).
      
      Definition SCTP_EOF : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.pure libc.unix.linux_like.MSG_FIN).
      
      Definition DCCP_SOCKOPT_PACKET_SIZE : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 1) : i32.t)).
      
      Definition DCCP_SOCKOPT_SERVICE : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 2) : i32.t)).
      
      Definition DCCP_SOCKOPT_CHANGE_L : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 3) : i32.t)).
      
      Definition DCCP_SOCKOPT_CHANGE_R : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 4) : i32.t)).
      
      Definition DCCP_SOCKOPT_GET_CUR_MPS : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 5) : i32.t)).
      
      Definition DCCP_SOCKOPT_SERVER_TIMEWAIT : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 6) : i32.t)).
      
      Definition DCCP_SOCKOPT_SEND_CSCOV : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 10) : i32.t)).
      
      Definition DCCP_SOCKOPT_RECV_CSCOV : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 11) : i32.t)).
      
      Definition DCCP_SOCKOPT_AVAILABLE_CCIDS : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 12) : i32.t)).
      
      Definition DCCP_SOCKOPT_CCID : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 13) : i32.t)).
      
      Definition DCCP_SOCKOPT_TX_CCID : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 14) : i32.t)).
      
      Definition DCCP_SOCKOPT_RX_CCID : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 15) : i32.t)).
      
      Definition DCCP_SOCKOPT_QPOLICY_ID : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 16) : i32.t)).
      
      Definition DCCP_SOCKOPT_QPOLICY_TXQLEN : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 17) : i32.t)).
      
      Definition DCCP_SOCKOPT_CCID_RX_INFO : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 128) : i32.t)).
      
      Definition DCCP_SOCKOPT_CCID_TX_INFO : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 192) : i32.t)).
      
      Definition DCCP_SERVICE_LIST_MAX_LEN : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 32) : i32.t)).
      
      Definition CTL_KERN : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 1) : i32.t)).
      
      Definition CTL_VM : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 2) : i32.t)).
      
      Definition CTL_NET : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 3) : i32.t)).
      
      Definition CTL_FS : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 5) : i32.t)).
      
      Definition CTL_DEBUG : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 6) : i32.t)).
      
      Definition CTL_DEV : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 7) : i32.t)).
      
      Definition CTL_BUS : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 8) : i32.t)).
      
      Definition CTL_ABI : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 9) : i32.t)).
      
      Definition CTL_CPU : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 10) : i32.t)).
      
      Definition CTL_BUS_ISA : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 1) : i32.t)).
      
      Definition INOTIFY_MAX_USER_INSTANCES : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 1) : i32.t)).
      
      Definition INOTIFY_MAX_USER_WATCHES : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 2) : i32.t)).
      
      Definition INOTIFY_MAX_QUEUED_EVENTS : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 3) : i32.t)).
      
      Definition KERN_OSTYPE : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 1) : i32.t)).
      
      Definition KERN_OSRELEASE : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 2) : i32.t)).
      
      Definition KERN_OSREV : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 3) : i32.t)).
      
      Definition KERN_VERSION : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 4) : i32.t)).
      
      Definition KERN_SECUREMASK : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 5) : i32.t)).
      
      Definition KERN_PROF : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 6) : i32.t)).
      
      Definition KERN_NODENAME : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 7) : i32.t)).
      
      Definition KERN_DOMAINNAME : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 8) : i32.t)).
      
      Definition KERN_PANIC : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 15) : i32.t)).
      
      Definition KERN_REALROOTDEV : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 16) : i32.t)).
      
      Definition KERN_SPARC_REBOOT : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 21) : i32.t)).
      
      Definition KERN_CTLALTDEL : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 22) : i32.t)).
      
      Definition KERN_PRINTK : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 23) : i32.t)).
      
      Definition KERN_NAMETRANS : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 24) : i32.t)).
      
      Definition KERN_PPC_HTABRECLAIM : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 25) : i32.t)).
      
      Definition KERN_PPC_ZEROPAGED : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 26) : i32.t)).
      
      Definition KERN_PPC_POWERSAVE_NAP : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 27) : i32.t)).
      
      Definition KERN_MODPROBE : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 28) : i32.t)).
      
      Definition KERN_SG_BIG_BUFF : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 29) : i32.t)).
      
      Definition KERN_ACCT : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 30) : i32.t)).
      
      Definition KERN_PPC_L2CR : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 31) : i32.t)).
      
      Definition KERN_RTSIGNR : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 32) : i32.t)).
      
      Definition KERN_RTSIGMAX : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 33) : i32.t)).
      
      Definition KERN_SHMMAX : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 34) : i32.t)).
      
      Definition KERN_MSGMAX : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 35) : i32.t)).
      
      Definition KERN_MSGMNB : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 36) : i32.t)).
      
      Definition KERN_MSGPOOL : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 37) : i32.t)).
      
      Definition KERN_SYSRQ : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 38) : i32.t)).
      
      Definition KERN_MAX_THREADS : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 39) : i32.t)).
      
      Definition KERN_RANDOM : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 40) : i32.t)).
      
      Definition KERN_SHMALL : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 41) : i32.t)).
      
      Definition KERN_MSGMNI : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 42) : i32.t)).
      
      Definition KERN_SEM : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 43) : i32.t)).
      
      Definition KERN_SPARC_STOP_A : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 44) : i32.t)).
      
      Definition KERN_SHMMNI : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 45) : i32.t)).
      
      Definition KERN_OVERFLOWUID : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 46) : i32.t)).
      
      Definition KERN_OVERFLOWGID : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 47) : i32.t)).
      
      Definition KERN_SHMPATH : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 48) : i32.t)).
      
      Definition KERN_HOTPLUG : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 49) : i32.t)).
      
      Definition KERN_IEEE_EMULATION_WARNINGS : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 50) : i32.t)).
      
      Definition KERN_S390_USER_DEBUG_LOGGING : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 51) : i32.t)).
      
      Definition KERN_CORE_USES_PID : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 52) : i32.t)).
      
      Definition KERN_TAINTED : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 53) : i32.t)).
      
      Definition KERN_CADPID : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 54) : i32.t)).
      
      Definition KERN_PIDMAX : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 55) : i32.t)).
      
      Definition KERN_CORE_PATTERN : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 56) : i32.t)).
      
      Definition KERN_PANIC_ON_OOPS : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 57) : i32.t)).
      
      Definition KERN_HPPA_PWRSW : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 58) : i32.t)).
      
      Definition KERN_HPPA_UNALIGNED : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 59) : i32.t)).
      
      Definition KERN_PRINTK_RATELIMIT : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 60) : i32.t)).
      
      Definition KERN_PRINTK_RATELIMIT_BURST : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 61) : i32.t)).
      
      Definition KERN_PTY : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 62) : i32.t)).
      
      Definition KERN_NGROUPS_MAX : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 63) : i32.t)).
      
      Definition KERN_SPARC_SCONS_PWROFF : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 64) : i32.t)).
      
      Definition KERN_HZ_TIMER : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 65) : i32.t)).
      
      Definition KERN_UNKNOWN_NMI_PANIC : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 66) : i32.t)).
      
      Definition KERN_BOOTLOADER_TYPE : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 67) : i32.t)).
      
      Definition KERN_RANDOMIZE : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 68) : i32.t)).
      
      Definition KERN_SETUID_DUMPABLE : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 69) : i32.t)).
      
      Definition KERN_SPIN_RETRY : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 70) : i32.t)).
      
      Definition KERN_ACPI_VIDEO_FLAGS : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 71) : i32.t)).
      
      Definition KERN_IA64_UNALIGNED : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 72) : i32.t)).
      
      Definition KERN_COMPAT_LOG : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 73) : i32.t)).
      
      Definition KERN_MAX_LOCK_DEPTH : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 74) : i32.t)).
      
      Definition KERN_NMI_WATCHDOG : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 75) : i32.t)).
      
      Definition KERN_PANIC_ON_NMI : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 76) : i32.t)).
      
      Definition VM_OVERCOMMIT_MEMORY : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 5) : i32.t)).
      
      Definition VM_PAGE_CLUSTER : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 10) : i32.t)).
      
      Definition VM_DIRTY_BACKGROUND : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 11) : i32.t)).
      
      Definition VM_DIRTY_RATIO : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 12) : i32.t)).
      
      Definition VM_DIRTY_WB_CS : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 13) : i32.t)).
      
      Definition VM_DIRTY_EXPIRE_CS : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 14) : i32.t)).
      
      Definition VM_NR_PDFLUSH_THREADS : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 15) : i32.t)).
      
      Definition VM_OVERCOMMIT_RATIO : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 16) : i32.t)).
      
      Definition VM_PAGEBUF : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 17) : i32.t)).
      
      Definition VM_HUGETLB_PAGES : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 18) : i32.t)).
      
      Definition VM_SWAPPINESS : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 19) : i32.t)).
      
      Definition VM_LOWMEM_RESERVE_RATIO : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 20) : i32.t)).
      
      Definition VM_MIN_FREE_KBYTES : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 21) : i32.t)).
      
      Definition VM_MAX_MAP_COUNT : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 22) : i32.t)).
      
      Definition VM_LAPTOP_MODE : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 23) : i32.t)).
      
      Definition VM_BLOCK_DUMP : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 24) : i32.t)).
      
      Definition VM_HUGETLB_GROUP : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 25) : i32.t)).
      
      Definition VM_VFS_CACHE_PRESSURE : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 26) : i32.t)).
      
      Definition VM_LEGACY_VA_LAYOUT : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 27) : i32.t)).
      
      Definition VM_SWAP_TOKEN_TIMEOUT : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 28) : i32.t)).
      
      Definition VM_DROP_PAGECACHE : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 29) : i32.t)).
      
      Definition VM_PERCPU_PAGELIST_FRACTION : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 30) : i32.t)).
      
      Definition VM_ZONE_RECLAIM_MODE : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 31) : i32.t)).
      
      Definition VM_MIN_UNMAPPED : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 32) : i32.t)).
      
      Definition VM_PANIC_ON_OOM : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 33) : i32.t)).
      
      Definition VM_VDSO_ENABLED : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 34) : i32.t)).
      
      Definition VM_MIN_SLAB : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 35) : i32.t)).
      
      Definition NET_CORE : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 1) : i32.t)).
      
      Definition NET_ETHER : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 2) : i32.t)).
      
      Definition NET_802 : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 3) : i32.t)).
      
      Definition NET_UNIX : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 4) : i32.t)).
      
      Definition NET_IPV4 : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 5) : i32.t)).
      
      Definition NET_IPX : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 6) : i32.t)).
      
      Definition NET_ATALK : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 7) : i32.t)).
      
      Definition NET_NETROM : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 8) : i32.t)).
      
      Definition NET_AX25 : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 9) : i32.t)).
      
      Definition NET_BRIDGE : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 10) : i32.t)).
      
      Definition NET_ROSE : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 11) : i32.t)).
      
      Definition NET_IPV6 : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 12) : i32.t)).
      
      Definition NET_X25 : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 13) : i32.t)).
      
      Definition NET_TR : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 14) : i32.t)).
      
      Definition NET_DECNET : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 15) : i32.t)).
      
      Definition NET_ECONET : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 16) : i32.t)).
      
      Definition NET_SCTP : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 17) : i32.t)).
      
      Definition NET_LLC : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 18) : i32.t)).
      
      Definition NET_NETFILTER : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 19) : i32.t)).
      
      Definition NET_DCCP : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 20) : i32.t)).
      
      Definition NET_IRDA : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 412) : i32.t)).
      
      Definition PF_VCPU : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 1) : i32.t)).
      
      Definition PF_IDLE : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 2) : i32.t)).
      
      Definition PF_EXITING : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 4) : i32.t)).
      
      Definition PF_POSTCOREDUMP : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 8) : i32.t)).
      
      Definition PF_IO_WORKER : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 16) : i32.t)).
      
      Definition PF_WQ_WORKER : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 32) : i32.t)).
      
      Definition PF_FORKNOEXEC : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 64) : i32.t)).
      
      Definition PF_MCE_PROCESS : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 128) : i32.t)).
      
      Definition PF_SUPERPRIV : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 256) : i32.t)).
      
      Definition PF_DUMPCORE : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 512) : i32.t)).
      
      Definition PF_SIGNALED : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 1024) : i32.t)).
      
      Definition PF_MEMALLOC : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 2048) : i32.t)).
      
      Definition PF_NPROC_EXCEEDED : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 4096) : i32.t)).
      
      Definition PF_USED_MATH : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 8192) : i32.t)).
      
      Definition PF_USER_WORKER : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 16384) : i32.t)).
      
      Definition PF_NOFREEZE : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 32768) : i32.t)).
      
      Definition PF_KSWAPD : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 131072) : i32.t)).
      
      Definition PF_MEMALLOC_NOFS : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 262144) : i32.t)).
      
      Definition PF_MEMALLOC_NOIO : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 524288) : i32.t)).
      
      Definition PF_LOCAL_THROTTLE : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 1048576) : i32.t)).
      
      Definition PF_KTHREAD : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 2097152) : i32.t)).
      
      Definition PF_RANDOMIZE : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 4194304) : i32.t)).
      
      Definition PF_NO_SETAFFINITY : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 67108864) : i32.t)).
      
      Definition PF_MCE_EARLY : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 134217728) : i32.t)).
      
      Definition PF_MEMALLOC_PIN : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 268435456) : i32.t)).
      
      Definition CSIGNAL : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 255) : i32.t)).
      
      Definition SCHED_NORMAL : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 0) : i32.t)).
      
      Definition SCHED_OTHER : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 0) : i32.t)).
      
      Definition SCHED_FIFO : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 1) : i32.t)).
      
      Definition SCHED_RR : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 2) : i32.t)).
      
      Definition SCHED_BATCH : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 3) : i32.t)).
      
      Definition SCHED_IDLE : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 5) : i32.t)).
      
      Definition SCHED_DEADLINE : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 6) : i32.t)).
      
      Definition SCHED_RESET_ON_FORK : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 1073741824) : i32.t)).
      
      Definition CLONE_PIDFD : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 4096) : i32.t)).
      
      Definition SCHED_FLAG_RESET_ON_FORK : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 1) : i32.t)).
      
      Definition SCHED_FLAG_RECLAIM : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 2) : i32.t)).
      
      Definition SCHED_FLAG_DL_OVERRUN : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 4) : i32.t)).
      
      Definition SCHED_FLAG_KEEP_POLICY : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 8) : i32.t)).
      
      Definition SCHED_FLAG_KEEP_PARAMS : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 16) : i32.t)).
      
      Definition SCHED_FLAG_UTIL_CLAMP_MIN : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 32) : i32.t)).
      
      Definition SCHED_FLAG_UTIL_CLAMP_MAX : M.Val ltac:(libc.unix.c_int) :=
        M.run (M.alloc ((Integer.of_Z 64) : i32.t)).
      
      Definition SCHED_FLAG_KEEP_ALL : M.Val ltac:(libc.unix.c_int) :=
        M.run
          (let* α0 : i32.t :=
            M.read libc.unix.linux_like.linux.SCHED_FLAG_KEEP_POLICY in
          let* α1 : i32.t :=
            M.read libc.unix.linux_like.linux.SCHED_FLAG_KEEP_PARAMS in
          M.alloc (BinOp.Pure.bit_or α0 α1)).
      
      Definition SCHED_FLAG_UTIL_CLAMP : M.Val ltac:(libc.unix.c_int) :=
        M.run
          (let* α0 : i32.t :=
            M.read libc.unix.linux_like.linux.SCHED_FLAG_UTIL_CLAMP_MIN in
          let* α1 : i32.t :=
            M.read libc.unix.linux_like.linux.SCHED_FLAG_UTIL_CLAMP_MAX in
          M.alloc (BinOp.Pure.bit_or α0 α1)).
      
      Definition SCHED_FLAG_ALL : M.Val ltac:(libc.unix.c_int) :=
        M.run
          (let* α0 : i32.t :=
            M.read libc.unix.linux_like.linux.SCHED_FLAG_RESET_ON_FORK in
          let* α1 : i32.t :=
            M.read libc.unix.linux_like.linux.SCHED_FLAG_RECLAIM in
          let* α2 : i32.t :=
            M.read libc.unix.linux_like.linux.SCHED_FLAG_DL_OVERRUN in
          let* α3 : i32.t :=
            M.read libc.unix.linux_like.linux.SCHED_FLAG_KEEP_ALL in
          let* α4 : i32.t :=
            M.read libc.unix.linux_like.linux.SCHED_FLAG_UTIL_CLAMP in
          M.alloc
            (BinOp.Pure.bit_or
              (BinOp.Pure.bit_or
                (BinOp.Pure.bit_or (BinOp.Pure.bit_or α0 α1) α2)
                α3)
              α4)).
      
      (*
                      pub unsafe extern fn $i($($arg: $argty),*
                      ) -> $ret {
                          $($body);*
                      }
      *)
      Definition NLA_ALIGN
          (len : ltac:(libc.unix.c_int))
          : M ltac:(libc.unix.c_int) :=
        let* len := M.alloc len in
        let return_ := M.return_ (R := ltac:(libc.unix.c_int)) in
        M.catch_return
          (let* α0 : i32.t := M.read len in
          let* α1 : i32.t := M.read libc.unix.linux_like.linux.NLA_ALIGNTO in
          let* α2 : i32.t := BinOp.Panic.add α0 α1 in
          let* α3 : i32.t := BinOp.Panic.sub α2 ((Integer.of_Z 1) : i32.t) in
          let* α4 : i32.t := M.read libc.unix.linux_like.linux.NLA_ALIGNTO in
          let* α5 : i32.t := BinOp.Panic.sub α4 ((Integer.of_Z 1) : i32.t) in
          let* α6 : M.Val never.t :=
            return_ (BinOp.Pure.bit_and α3 (UnOp.not α5)) in
          let* α7 := M.read α6 in
          never_to_any α7).
      
      (*
                      pub unsafe extern fn $i($($arg: $argty),*
                      ) -> $ret {
                          $($body);*
                      }
      *)
      Definition CMSG_NXTHDR
          (mhdr : ref libc.unix.linux_like.linux.gnu.msghdr.t)
          (cmsg : ref libc.unix.linux_like.linux.gnu.cmsghdr.t)
          : M (mut_ref libc.unix.linux_like.linux.gnu.cmsghdr.t) :=
        let* mhdr := M.alloc mhdr in
        let* cmsg := M.alloc cmsg in
        let return_ :=
          M.return_ (R := mut_ref libc.unix.linux_like.linux.gnu.cmsghdr.t) in
        M.catch_return
          (let* _ : M.Val unit :=
            let* α0 : ref libc.unix.linux_like.linux.gnu.cmsghdr.t :=
              M.read cmsg in
            let* α1 : usize.t :=
              M.read
                (use
                  (libc.unix.linux_like.linux.gnu.cmsghdr.Get_cmsg_len
                    (deref α0))) in
            let* α2 : usize.t := M.call core.mem.size_of in
            let* α3 : M.Val bool.t := M.alloc (BinOp.Pure.lt α1 α2) in
            let* α4 : bool.t := M.read (use α3) in
            if α4 then
              let* α0 : M.Val never.t :=
                return_ (rust_cast ((Integer.of_Z 0) : usize.t)) in
              let* α1 := M.read α0 in
              let* α2 : unit := never_to_any α1 in
              M.alloc α2
            else
              M.alloc tt in
          let* next :
              M.Val (mut_ref libc.unix.linux_like.linux.gnu.cmsghdr.t) :=
            let* α0 : ref libc.unix.linux_like.linux.gnu.cmsghdr.t :=
              M.read cmsg in
            let* α1 : ref libc.unix.linux_like.linux.gnu.cmsghdr.t :=
              M.read cmsg in
            let* α2 : usize.t :=
              M.read
                (use
                  (libc.unix.linux_like.linux.gnu.cmsghdr.Get_cmsg_len
                    (deref α1))) in
            let* α3 : usize.t := M.call (libc.unix.linux_like.CMSG_ALIGN α2) in
            let* α4 : usize.t := BinOp.Panic.add (rust_cast α0) α3 in
            M.alloc (rust_cast α4) in
          let* max : M.Val usize.t :=
            let* α0 : ref libc.unix.linux_like.linux.gnu.msghdr.t :=
              M.read mhdr in
            let* α1 : mut_ref core.ffi.c_void.t :=
              M.read
                (libc.unix.linux_like.linux.gnu.msghdr.Get_msg_control
                  (deref α0)) in
            let* α2 : ref libc.unix.linux_like.linux.gnu.msghdr.t :=
              M.read mhdr in
            let* α3 : usize.t :=
              M.read
                (use
                  (libc.unix.linux_like.linux.gnu.msghdr.Get_msg_controllen
                    (deref α2))) in
            let* α4 : usize.t := BinOp.Panic.add (rust_cast α1) α3 in
            M.alloc α4 in
          let* α0 : mut_ref libc.unix.linux_like.linux.gnu.cmsghdr.t :=
            M.read next in
          let* α1 : mut_ref libc.unix.linux_like.linux.gnu.cmsghdr.t :=
            M.call
              ((mut_ref libc.unix.linux_like.linux.gnu.cmsghdr.t)::["offset"]
                α0
                ((Integer.of_Z 1) : isize.t)) in
          let* α2 : usize.t := M.read max in
          let* α3 : mut_ref libc.unix.linux_like.linux.gnu.cmsghdr.t :=
            M.read next in
          let* α4 : mut_ref libc.unix.linux_like.linux.gnu.cmsghdr.t :=
            M.read next in
          let* α5 : usize.t :=
            M.read
              (use
                (libc.unix.linux_like.linux.gnu.cmsghdr.Get_cmsg_len
                  (deref α4))) in
          let* α6 : usize.t := M.call (libc.unix.linux_like.CMSG_ALIGN α5) in
          let* α7 : usize.t := BinOp.Panic.add (rust_cast α3) α6 in
          let* α8 : usize.t := M.read max in
          let* α9 : M.Val bool.t :=
            M.alloc
              (BinOp.Pure.or
                (BinOp.Pure.gt (rust_cast α1) α2)
                (BinOp.Pure.gt α7 α8)) in
          let* α10 : bool.t := M.read (use α9) in
          let* α0 : M.Val (mut_ref libc.unix.linux_like.linux.gnu.cmsghdr.t) :=
            if α10 then
              M.alloc (rust_cast ((Integer.of_Z 0) : usize.t))
            else
              let* α0 : mut_ref libc.unix.linux_like.linux.gnu.cmsghdr.t :=
                M.read next in
              M.alloc (rust_cast α0) in
          M.read α0).
      
      (*
                      pub unsafe extern fn $i($($arg: $argty),*
                      ) -> $ret {
                          $($body);*
                      }
      *)
      Definition CPU_ALLOC_SIZE
          (count : ltac:(libc.unix.c_int))
          : M ltac:(libc.unix.size_t) :=
        let* count := M.alloc count in
        let* _dummy : M.Val libc.unix.linux_like.linux.cpu_set_t.t :=
          let* α0 : libc.unix.linux_like.linux.cpu_set_t.t :=
            M.call core.mem.zeroed in
          M.alloc α0 in
        let* size_in_bits : M.Val usize.t :=
          let* α0 : usize.t :=
            M.call
              (core.mem.size_of_val
                (borrow
                  (libc.unix.linux_like.linux.cpu_set_t.Get_bits _dummy)[M.alloc
                      ((Integer.of_Z 0) : usize.t)])) in
          let* α1 : usize.t :=
            BinOp.Panic.mul ((Integer.of_Z 8) : usize.t) α0 in
          M.alloc α1 in
        let* α0 : i32.t := M.read count in
        let* α1 : usize.t := M.read size_in_bits in
        let* α2 : usize.t := BinOp.Panic.add (rust_cast α0) α1 in
        let* α3 : usize.t := BinOp.Panic.sub α2 ((Integer.of_Z 1) : usize.t) in
        let* α4 : usize.t := BinOp.Panic.div α3 ((Integer.of_Z 8) : usize.t) in
        let* α5 : M.Val usize.t := M.alloc α4 in
        M.read (use α5).
      
      (*
                      pub unsafe extern fn $i($($arg: $argty),*
                      ) -> $ret {
                          $($body);*
                      }
      *)
      Definition CPU_ZERO
          (cpuset : mut_ref libc.unix.linux_like.linux.cpu_set_t.t)
          : M unit :=
        let* cpuset := M.alloc cpuset in
        let* α0 : (core.slice.iter.IterMut.t u64.t) -> M _ :=
          ltac:(M.get_method (fun ℐ =>
            core.iter.traits.collect.IntoIterator.into_iter
              (Self := core.slice.iter.IterMut.t u64.t)
              (Trait := ℐ))) in
        let* α1 : mut_ref libc.unix.linux_like.linux.cpu_set_t.t :=
          M.read cpuset in
        let* α2 : core.slice.iter.IterMut.t u64.t :=
          M.call
            ((slice u64.t)::["iter_mut"]
              (pointer_coercion
                "Unsize"
                (borrow_mut
                  (libc.unix.linux_like.linux.cpu_set_t.Get_bits
                    (deref α1))))) in
        let* α3 : core.slice.iter.IterMut.t u64.t := M.call (α0 α2) in
        let* α4 : M.Val (core.slice.iter.IterMut.t u64.t) := M.alloc α3 in
        let* α5 : M.Val unit :=
          match_operator
            α4
            [
              fun γ =>
                (let* iter := M.copy γ in
                M.loop
                  (let* _ : M.Val unit :=
                    let* α0 :
                        (mut_ref (core.slice.iter.IterMut.t u64.t)) ->
                          M (core.option.Option.t _) :=
                      ltac:(M.get_method (fun ℐ =>
                        core.iter.traits.iterator.Iterator.next
                          (Self := core.slice.iter.IterMut.t u64.t)
                          (Trait := ℐ))) in
                    let* α1 : core.option.Option.t (mut_ref u64.t) :=
                      M.call (α0 (borrow_mut iter)) in
                    let* α2 : M.Val (core.option.Option.t (mut_ref u64.t)) :=
                      M.alloc α1 in
                    match_operator
                      α2
                      [
                        fun γ =>
                          (let* α0 := M.read γ in
                          match α0 with
                          | core.option.Option.None =>
                            let* α0 : M.Val never.t := M.break in
                            let* α1 := M.read α0 in
                            let* α2 : unit := never_to_any α1 in
                            M.alloc α2
                          | _ => M.break_match
                          end) :
                          M (M.Val unit);
                        fun γ =>
                          (let* α0 := M.read γ in
                          match α0 with
                          | core.option.Option.Some _ =>
                            let γ0_0 := core.option.Option.Get_Some_0 γ in
                            let* slot := M.copy γ0_0 in
                            let* _ : M.Val unit :=
                              let* α0 : mut_ref u64.t := M.read slot in
                              assign (deref α0) ((Integer.of_Z 0) : u64.t) in
                            M.alloc tt
                          | _ => M.break_match
                          end) :
                          M (M.Val unit)
                      ] in
                  M.alloc tt)) :
                M (M.Val unit)
            ] in
        M.read (use α5).
      
      (*
                      pub unsafe extern fn $i($($arg: $argty),*
                      ) -> $ret {
                          $($body);*
                      }
      *)
      Definition CPU_SET
          (cpu : usize.t)
          (cpuset : mut_ref libc.unix.linux_like.linux.cpu_set_t.t)
          : M unit :=
        let* cpu := M.alloc cpu in
        let* cpuset := M.alloc cpuset in
        let* size_in_bits : M.Val usize.t :=
          let* α0 : mut_ref libc.unix.linux_like.linux.cpu_set_t.t :=
            M.read cpuset in
          let* α1 : usize.t :=
            M.call
              (core.mem.size_of_val
                (borrow
                  (libc.unix.linux_like.linux.cpu_set_t.Get_bits
                      (deref α0))[M.alloc ((Integer.of_Z 0) : usize.t)])) in
          let* α2 : usize.t :=
            BinOp.Panic.mul ((Integer.of_Z 8) : usize.t) α1 in
          M.alloc α2 in
        let* α0 : usize.t := M.read cpu in
        let* α1 : usize.t := M.read size_in_bits in
        let* α2 : usize.t := BinOp.Panic.div α0 α1 in
        let* α3 : usize.t := M.read cpu in
        let* α4 : usize.t := M.read size_in_bits in
        let* α5 : usize.t := BinOp.Panic.rem α3 α4 in
        let* α6 : M.Val (usize.t * usize.t) := M.alloc (α2, α5) in
        let* α0 : M.Val unit :=
          match_operator
            α6
            [
              fun γ =>
                (let* α0 := M.read γ in
                match α0 with
                | (_, _) =>
                  let γ0_0 := Tuple.Access.left γ in
                  let γ0_1 := Tuple.Access.right γ in
                  let* idx := M.copy γ0_0 in
                  let* offset := M.copy γ0_1 in
                  let* _ : M.Val unit :=
                    let* β : M.Val u64.t :=
                      let* α0 :
                          mut_ref libc.unix.linux_like.linux.cpu_set_t.t :=
                        M.read cpuset in
                      M.pure
                        (libc.unix.linux_like.linux.cpu_set_t.Get_bits
                            (deref α0))[idx] in
                    let* α0 := M.read β in
                    let* α1 : usize.t := M.read offset in
                    let* α2 : u64.t :=
                      BinOp.Panic.shl ((Integer.of_Z 1) : u64.t) α1 in
                    assign β (BinOp.Pure.bit_or α0 α2) in
                  M.alloc tt
                end) :
                M (M.Val unit)
            ] in
        M.read α0.
      
      (*
                      pub unsafe extern fn $i($($arg: $argty),*
                      ) -> $ret {
                          $($body);*
                      }
      *)
      Definition CPU_CLR
          (cpu : usize.t)
          (cpuset : mut_ref libc.unix.linux_like.linux.cpu_set_t.t)
          : M unit :=
        let* cpu := M.alloc cpu in
        let* cpuset := M.alloc cpuset in
        let* size_in_bits : M.Val usize.t :=
          let* α0 : mut_ref libc.unix.linux_like.linux.cpu_set_t.t :=
            M.read cpuset in
          let* α1 : usize.t :=
            M.call
              (core.mem.size_of_val
                (borrow
                  (libc.unix.linux_like.linux.cpu_set_t.Get_bits
                      (deref α0))[M.alloc ((Integer.of_Z 0) : usize.t)])) in
          let* α2 : usize.t :=
            BinOp.Panic.mul ((Integer.of_Z 8) : usize.t) α1 in
          M.alloc α2 in
        let* α0 : usize.t := M.read cpu in
        let* α1 : usize.t := M.read size_in_bits in
        let* α2 : usize.t := BinOp.Panic.div α0 α1 in
        let* α3 : usize.t := M.read cpu in
        let* α4 : usize.t := M.read size_in_bits in
        let* α5 : usize.t := BinOp.Panic.rem α3 α4 in
        let* α6 : M.Val (usize.t * usize.t) := M.alloc (α2, α5) in
        let* α0 : M.Val unit :=
          match_operator
            α6
            [
              fun γ =>
                (let* α0 := M.read γ in
                match α0 with
                | (_, _) =>
                  let γ0_0 := Tuple.Access.left γ in
                  let γ0_1 := Tuple.Access.right γ in
                  let* idx := M.copy γ0_0 in
                  let* offset := M.copy γ0_1 in
                  let* _ : M.Val unit :=
                    let* β : M.Val u64.t :=
                      let* α0 :
                          mut_ref libc.unix.linux_like.linux.cpu_set_t.t :=
                        M.read cpuset in
                      M.pure
                        (libc.unix.linux_like.linux.cpu_set_t.Get_bits
                            (deref α0))[idx] in
                    let* α0 := M.read β in
                    let* α1 : usize.t := M.read offset in
                    let* α2 : u64.t :=
                      BinOp.Panic.shl ((Integer.of_Z 1) : u64.t) α1 in
                    assign β (BinOp.Pure.bit_and α0 (UnOp.not α2)) in
                  M.alloc tt
                end) :
                M (M.Val unit)
            ] in
        M.read α0.
      
      (*
                      pub unsafe extern fn $i($($arg: $argty),*
                      ) -> $ret {
                          $($body);*
                      }
      *)
      Definition CPU_ISSET
          (cpu : usize.t)
          (cpuset : ref libc.unix.linux_like.linux.cpu_set_t.t)
          : M bool.t :=
        let* cpu := M.alloc cpu in
        let* cpuset := M.alloc cpuset in
        let* size_in_bits : M.Val usize.t :=
          let* α0 : ref libc.unix.linux_like.linux.cpu_set_t.t :=
            M.read cpuset in
          let* α1 : usize.t :=
            M.call
              (core.mem.size_of_val
                (borrow
                  (libc.unix.linux_like.linux.cpu_set_t.Get_bits
                      (deref α0))[M.alloc ((Integer.of_Z 0) : usize.t)])) in
          let* α2 : usize.t :=
            BinOp.Panic.mul ((Integer.of_Z 8) : usize.t) α1 in
          M.alloc α2 in
        let* α0 : usize.t := M.read cpu in
        let* α1 : usize.t := M.read size_in_bits in
        let* α2 : usize.t := BinOp.Panic.div α0 α1 in
        let* α3 : usize.t := M.read cpu in
        let* α4 : usize.t := M.read size_in_bits in
        let* α5 : usize.t := BinOp.Panic.rem α3 α4 in
        let* α6 : M.Val (usize.t * usize.t) := M.alloc (α2, α5) in
        let* α0 : M.Val bool.t :=
          match_operator
            α6
            [
              fun γ =>
                (let* α0 := M.read γ in
                match α0 with
                | (_, _) =>
                  let γ0_0 := Tuple.Access.left γ in
                  let γ0_1 := Tuple.Access.right γ in
                  let* idx := M.copy γ0_0 in
                  let* offset := M.copy γ0_1 in
                  let* α0 : ref libc.unix.linux_like.linux.cpu_set_t.t :=
                    M.read cpuset in
                  let* α1 : u64.t :=
                    M.read
                      (libc.unix.linux_like.linux.cpu_set_t.Get_bits
                          (deref α0))[idx] in
                  let* α2 : usize.t := M.read offset in
                  let* α3 : u64.t :=
                    BinOp.Panic.shl ((Integer.of_Z 1) : u64.t) α2 in
                  M.alloc
                    (BinOp.Pure.ne
                      ((Integer.of_Z 0) : u64.t)
                      (BinOp.Pure.bit_and α1 α3))
                end) :
                M (M.Val bool.t)
            ] in
        M.read α0.
      
      (*
                      pub unsafe extern fn $i($($arg: $argty),*
                      ) -> $ret {
                          $($body);*
                      }
      *)
      Definition CPU_COUNT_S
          (size : usize.t)
          (cpuset : ref libc.unix.linux_like.linux.cpu_set_t.t)
          : M ltac:(libc.unix.c_int) :=
        let* size := M.alloc size in
        let* cpuset := M.alloc cpuset in
        let* s : M.Val u32.t := M.alloc ((Integer.of_Z 0) : u32.t) in
        let* size_of_mask : M.Val usize.t :=
          let* α0 : ref libc.unix.linux_like.linux.cpu_set_t.t :=
            M.read cpuset in
          let* α1 : usize.t :=
            M.call
              (core.mem.size_of_val
                (borrow
                  (libc.unix.linux_like.linux.cpu_set_t.Get_bits
                      (deref α0))[M.alloc ((Integer.of_Z 0) : usize.t)])) in
          M.alloc α1 in
        let* _ : M.Val unit :=
          let* α0 : (core.slice.iter.Iter.t u64.t) -> M _ :=
            ltac:(M.get_method (fun ℐ =>
              core.iter.traits.collect.IntoIterator.into_iter
                (Self := core.slice.iter.Iter.t u64.t)
                (Trait := ℐ))) in
          let* α1 :
              (ref (array u64.t)) ->
                (core.ops.range.RangeTo.t usize.t) ->
                M (ref _) :=
            ltac:(M.get_method (fun ℐ =>
              core.ops.index.Index.index
                (Self := array u64.t)
                (Idx := core.ops.range.RangeTo.t usize.t)
                (Trait := ℐ))) in
          let* α2 : ref libc.unix.linux_like.linux.cpu_set_t.t :=
            M.read cpuset in
          let* α3 : usize.t := M.read size in
          let* α4 : usize.t := M.read size_of_mask in
          let* α5 : usize.t := BinOp.Panic.div α3 α4 in
          let* α6 : ref (slice u64.t) :=
            M.call
              (α1
                (borrow
                  (libc.unix.linux_like.linux.cpu_set_t.Get_bits (deref α2)))
                {| core.ops.range.RangeTo.end_ := α5; |}) in
          let* α7 : core.slice.iter.Iter.t u64.t :=
            M.call ((slice u64.t)::["iter"] α6) in
          let* α8 : core.slice.iter.Iter.t u64.t := M.call (α0 α7) in
          let* α9 : M.Val (core.slice.iter.Iter.t u64.t) := M.alloc α8 in
          let* α10 : M.Val unit :=
            match_operator
              α9
              [
                fun γ =>
                  (let* iter := M.copy γ in
                  M.loop
                    (let* _ : M.Val unit :=
                      let* α0 :
                          (mut_ref (core.slice.iter.Iter.t u64.t)) ->
                            M (core.option.Option.t _) :=
                        ltac:(M.get_method (fun ℐ =>
                          core.iter.traits.iterator.Iterator.next
                            (Self := core.slice.iter.Iter.t u64.t)
                            (Trait := ℐ))) in
                      let* α1 : core.option.Option.t (ref u64.t) :=
                        M.call (α0 (borrow_mut iter)) in
                      let* α2 : M.Val (core.option.Option.t (ref u64.t)) :=
                        M.alloc α1 in
                      match_operator
                        α2
                        [
                          fun γ =>
                            (let* α0 := M.read γ in
                            match α0 with
                            | core.option.Option.None =>
                              let* α0 : M.Val never.t := M.break in
                              let* α1 := M.read α0 in
                              let* α2 : unit := never_to_any α1 in
                              M.alloc α2
                            | _ => M.break_match
                            end) :
                            M (M.Val unit);
                          fun γ =>
                            (let* α0 := M.read γ in
                            match α0 with
                            | core.option.Option.Some _ =>
                              let γ0_0 := core.option.Option.Get_Some_0 γ in
                              let* i := M.copy γ0_0 in
                              let* _ : M.Val unit :=
                                let β : M.Val u32.t := s in
                                let* α0 := M.read β in
                                let* α1 : ref u64.t := M.read i in
                                let* α2 : u64.t := M.read (deref α1) in
                                let* α3 : u32.t :=
                                  M.call (u64.t::["count_ones"] α2) in
                                let* α4 := BinOp.Panic.add α0 α3 in
                                assign β α4 in
                              M.alloc tt
                            | _ => M.break_match
                            end) :
                            M (M.Val unit)
                        ] in
                    M.alloc tt)) :
                  M (M.Val unit)
              ] in
          M.pure (use α10) in
        let* α0 : u32.t := M.read s in
        let* α0 : M.Val i32.t := M.alloc (rust_cast α0) in
        M.read α0.
      
      (*
                      pub unsafe extern fn $i($($arg: $argty),*
                      ) -> $ret {
                          $($body);*
                      }
      *)
      Definition CPU_COUNT
          (cpuset : ref libc.unix.linux_like.linux.cpu_set_t.t)
          : M ltac:(libc.unix.c_int) :=
        let* cpuset := M.alloc cpuset in
        let* α0 : usize.t := M.call core.mem.size_of in
        let* α1 : ref libc.unix.linux_like.linux.cpu_set_t.t := M.read cpuset in
        M.call (libc.unix.linux_like.linux.CPU_COUNT_S α0 α1).
      
      (*
                      pub unsafe extern fn $i($($arg: $argty),*
                      ) -> $ret {
                          $($body);*
                      }
      *)
      Definition CPU_EQUAL
          (set1 : ref libc.unix.linux_like.linux.cpu_set_t.t)
          (set2 : ref libc.unix.linux_like.linux.cpu_set_t.t)
          : M bool.t :=
        let* set1 := M.alloc set1 in
        let* set2 := M.alloc set2 in
        let* α0 : (ref (array u64.t)) -> (ref (array u64.t)) -> M bool.t :=
          ltac:(M.get_method (fun ℐ =>
            core.cmp.PartialEq.eq
              (Self := array u64.t)
              (Rhs := array u64.t)
              (Trait := ℐ))) in
        let* α1 : ref libc.unix.linux_like.linux.cpu_set_t.t := M.read set1 in
        let* α2 : ref libc.unix.linux_like.linux.cpu_set_t.t := M.read set2 in
        M.call
          (α0
            (borrow (libc.unix.linux_like.linux.cpu_set_t.Get_bits (deref α1)))
            (borrow
              (libc.unix.linux_like.linux.cpu_set_t.Get_bits (deref α2)))).
      
      (*
                      pub unsafe extern fn $i($($arg: $argty),*
                      ) -> $ret {
                          $($body);*
                      }
      *)
      Definition SCTP_PR_INDEX
          (policy : ltac:(libc.unix.c_int))
          : M ltac:(libc.unix.c_int) :=
        let* policy := M.alloc policy in
        let* α0 : i32.t := M.read policy in
        let* α1 : i32.t :=
          BinOp.Panic.sub
            ((Integer.of_Z 4) : i32.t)
            ((Integer.of_Z 1) : i32.t) in
        BinOp.Panic.shr α0 α1.
      
      (*
                      pub unsafe extern fn $i($($arg: $argty),*
                      ) -> $ret {
                          $($body);*
                      }
      *)
      Definition SCTP_PR_POLICY
          (policy : ltac:(libc.unix.c_int))
          : M ltac:(libc.unix.c_int) :=
        let* policy := M.alloc policy in
        let* α0 : i32.t := M.read policy in
        let* α1 : i32.t :=
          M.read libc.unix.linux_like.linux.SCTP_PR_SCTP_MASK in
        M.pure (BinOp.Pure.bit_and α0 α1).
      
      (*
                      pub unsafe extern fn $i($($arg: $argty),*
                      ) -> $ret {
                          $($body);*
                      }
      *)
      Definition SCTP_PR_SET_POLICY
          (flags : mut_ref ltac:(libc.unix.c_int))
          (policy : ltac:(libc.unix.c_int))
          : M unit :=
        let* flags := M.alloc flags in
        let* policy := M.alloc policy in
        let* _ : M.Val unit :=
          let* β : M.Val i32.t :=
            let* α0 : mut_ref i32.t := M.read flags in
            M.pure (deref α0) in
          let* α0 := M.read β in
          let* α1 : i32.t :=
            M.read libc.unix.linux_like.linux.SCTP_PR_SCTP_MASK in
          assign β (BinOp.Pure.bit_and α0 (UnOp.not α1)) in
        let* _ : M.Val unit :=
          let* β : M.Val i32.t :=
            let* α0 : mut_ref i32.t := M.read flags in
            M.pure (deref α0) in
          let* α0 := M.read β in
          let* α1 : i32.t := M.read policy in
          assign β (BinOp.Pure.bit_or α0 α1) in
        let* α0 : M.Val unit := M.alloc tt in
        M.read α0.
      
      (*
                      pub unsafe extern fn $i($($arg: $argty),*
                      ) -> $ret {
                          $($body);*
                      }
      *)
      Definition major
          (dev : ltac:(libc.unix.linux_like.linux.dev_t))
          : M ltac:(libc.unix.c_uint) :=
        let* dev := M.alloc dev in
        let* major : M.Val u64.t := M.alloc ((Integer.of_Z 0) : u64.t) in
        let* _ : M.Val unit :=
          let β : M.Val u64.t := major in
          let* α0 := M.read β in
          let* α1 : u64.t := M.read dev in
          let* α2 : u64.t :=
            BinOp.Panic.shr
              (BinOp.Pure.bit_and α1 ((Integer.of_Z 1048320) : u64.t))
              ((Integer.of_Z 8) : i32.t) in
          assign β (BinOp.Pure.bit_or α0 α2) in
        let* _ : M.Val unit :=
          let β : M.Val u64.t := major in
          let* α0 := M.read β in
          let* α1 : u64.t := M.read dev in
          let* α2 : u64.t :=
            BinOp.Panic.shr
              (BinOp.Pure.bit_and
                α1
                ((Integer.of_Z 18446726481523507200) : u64.t))
              ((Integer.of_Z 32) : i32.t) in
          assign β (BinOp.Pure.bit_or α0 α2) in
        let* α0 : u64.t := M.read major in
        let* α0 : M.Val u32.t := M.alloc (rust_cast α0) in
        M.read α0.
      
      (*
                      pub unsafe extern fn $i($($arg: $argty),*
                      ) -> $ret {
                          $($body);*
                      }
      *)
      Definition minor
          (dev : ltac:(libc.unix.linux_like.linux.dev_t))
          : M ltac:(libc.unix.c_uint) :=
        let* dev := M.alloc dev in
        let* minor : M.Val u64.t := M.alloc ((Integer.of_Z 0) : u64.t) in
        let* _ : M.Val unit :=
          let β : M.Val u64.t := minor in
          let* α0 := M.read β in
          let* α1 : u64.t := M.read dev in
          let* α2 : u64.t :=
            BinOp.Panic.shr
              (BinOp.Pure.bit_and α1 ((Integer.of_Z 255) : u64.t))
              ((Integer.of_Z 0) : i32.t) in
          assign β (BinOp.Pure.bit_or α0 α2) in
        let* _ : M.Val unit :=
          let β : M.Val u64.t := minor in
          let* α0 := M.read β in
          let* α1 : u64.t := M.read dev in
          let* α2 : u64.t :=
            BinOp.Panic.shr
              (BinOp.Pure.bit_and α1 ((Integer.of_Z 17592184995840) : u64.t))
              ((Integer.of_Z 12) : i32.t) in
          assign β (BinOp.Pure.bit_or α0 α2) in
        let* α0 : u64.t := M.read minor in
        let* α0 : M.Val u32.t := M.alloc (rust_cast α0) in
        M.read α0.
      
      (*
                      pub unsafe extern fn $i($($arg: $argty),*
                      ) -> $ret {
                          $($body);*
                      }
      *)
      Definition IPTOS_TOS (tos : u8.t) : M u8.t :=
        let* tos := M.alloc tos in
        let* α0 : u8.t := M.read tos in
        let* α1 : u8.t := M.read libc.unix.linux_like.linux.IPTOS_TOS_MASK in
        M.pure (BinOp.Pure.bit_and α0 α1).
      
      (*
                      pub unsafe extern fn $i($($arg: $argty),*
                      ) -> $ret {
                          $($body);*
                      }
      *)
      Definition IPTOS_PREC (tos : u8.t) : M u8.t :=
        let* tos := M.alloc tos in
        let* α0 : u8.t := M.read tos in
        let* α1 : u8.t := M.read libc.unix.linux_like.linux.IPTOS_PREC_MASK in
        M.pure (BinOp.Pure.bit_and α0 α1).
      
      (*
                      pub unsafe extern fn $i($($arg: $argty),*
                      ) -> $ret {
                          $($body);*
                      }
      *)
      Definition RT_TOS (tos : u8.t) : M u8.t :=
        let* tos := M.alloc tos in
        let* α0 : u8.t := M.read tos in
        let* α1 : u8.t := M.read libc.unix.linux_like.linux.IPTOS_TOS_MASK in
        M.pure (BinOp.Pure.bit_and α0 α1).
      
      (*
                      pub unsafe extern fn $i($($arg: $argty),*
                      ) -> $ret {
                          $($body);*
                      }
      *)
      Definition RT_ADDRCLASS (flags : u32.t) : M u32.t :=
        let* flags := M.alloc flags in
        let* α0 : u32.t := M.read flags in
        BinOp.Panic.shr α0 ((Integer.of_Z 23) : i32.t).
      
      (*
                      pub unsafe extern fn $i($($arg: $argty),*
                      ) -> $ret {
                          $($body);*
                      }
      *)
      Definition RT_LOCALADDR (flags : u32.t) : M bool.t :=
        let* flags := M.alloc flags in
        let* α0 : u32.t := M.read flags in
        let* α1 : u32.t :=
          M.read libc.unix.linux_like.linux.RTF_ADDRCLASSMASK in
        let* α2 : u32.t := M.read libc.unix.linux_like.linux.RTF_LOCAL in
        let* α3 : u32.t := M.read libc.unix.linux_like.linux.RTF_INTERFACE in
        M.pure
          (BinOp.Pure.eq (BinOp.Pure.bit_and α0 α1) (BinOp.Pure.bit_or α2 α3)).
      
      (*
                      pub unsafe extern fn $i($($arg: $argty),*
                      ) -> $ret {
                          $($body);*
                      }
      *)
      Definition SO_EE_OFFENDER
          (ee : ref libc.unix.linux_like.linux.sock_extended_err.t)
          : M (mut_ref libc.unix.linux_like.sockaddr.t) :=
        let* ee := M.alloc ee in
        let* α0 : ref libc.unix.linux_like.linux.sock_extended_err.t :=
          M.read ee in
        let* α1 : ref libc.unix.linux_like.linux.sock_extended_err.t :=
          M.call
            ((ref libc.unix.linux_like.linux.sock_extended_err.t)::["offset"]
              α0
              ((Integer.of_Z 1) : isize.t)) in
        M.pure (rust_cast α1).
      
      (*
                      pub unsafe extern fn $i($($arg: $argty),*
                      ) -> $ret {
                          $($body);*
                      }
      *)
      Definition TPACKET_ALIGN (x : usize.t) : M usize.t :=
        let* x := M.alloc x in
        let* α0 : usize.t := M.read x in
        let* α1 : usize.t :=
          M.read libc.unix.linux_like.linux.TPACKET_ALIGNMENT in
        let* α2 : usize.t := BinOp.Panic.add α0 α1 in
        let* α3 : usize.t := BinOp.Panic.sub α2 ((Integer.of_Z 1) : usize.t) in
        let* α4 : usize.t :=
          M.read libc.unix.linux_like.linux.TPACKET_ALIGNMENT in
        let* α5 : usize.t := BinOp.Panic.sub α4 ((Integer.of_Z 1) : usize.t) in
        M.pure (BinOp.Pure.bit_and α3 (UnOp.not α5)).
      
      (*
                      pub unsafe extern fn $i($($arg: $argty),*
                      ) -> $ret {
                          $($body);*
                      }
      *)
      Definition BPF_RVAL
          (code : ltac:(libc.unix.linux_like.linux.__u32))
          : M ltac:(libc.unix.linux_like.linux.__u32) :=
        let* code := M.alloc code in
        let* α0 : u32.t := M.read code in
        M.pure (BinOp.Pure.bit_and α0 ((Integer.of_Z 24) : u32.t)).
      
      (*
                      pub unsafe extern fn $i($($arg: $argty),*
                      ) -> $ret {
                          $($body);*
                      }
      *)
      Definition BPF_MISCOP
          (code : ltac:(libc.unix.linux_like.linux.__u32))
          : M ltac:(libc.unix.linux_like.linux.__u32) :=
        let* code := M.alloc code in
        let* α0 : u32.t := M.read code in
        M.pure (BinOp.Pure.bit_and α0 ((Integer.of_Z 248) : u32.t)).
      
      (*
                      pub unsafe extern fn $i($($arg: $argty),*
                      ) -> $ret {
                          $($body);*
                      }
      *)
      Definition BPF_STMT
          (code : ltac:(libc.unix.linux_like.linux.__u16))
          (k : ltac:(libc.unix.linux_like.linux.__u32))
          : M libc.unix.linux_like.linux.sock_filter.t :=
        let* code := M.alloc code in
        let* k := M.alloc k in
        let* α0 : u16.t := M.read code in
        let* α1 : u32.t := M.read k in
        M.pure
          {|
            libc.unix.linux_like.linux.sock_filter.code := α0;
            libc.unix.linux_like.linux.sock_filter.jt :=
              (Integer.of_Z 0) : u8.t;
            libc.unix.linux_like.linux.sock_filter.jf :=
              (Integer.of_Z 0) : u8.t;
            libc.unix.linux_like.linux.sock_filter.k := α1;
          |}.
      
      (*
                      pub unsafe extern fn $i($($arg: $argty),*
                      ) -> $ret {
                          $($body);*
                      }
      *)
      Definition BPF_JUMP
          (code : ltac:(libc.unix.linux_like.linux.__u16))
          (k : ltac:(libc.unix.linux_like.linux.__u32))
          (jt : ltac:(libc.unix.linux_like.linux.__u8))
          (jf : ltac:(libc.unix.linux_like.linux.__u8))
          : M libc.unix.linux_like.linux.sock_filter.t :=
        let* code := M.alloc code in
        let* k := M.alloc k in
        let* jt := M.alloc jt in
        let* jf := M.alloc jf in
        let* α0 : u16.t := M.read code in
        let* α1 : u8.t := M.read jt in
        let* α2 : u8.t := M.read jf in
        let* α3 : u32.t := M.read k in
        M.pure
          {|
            libc.unix.linux_like.linux.sock_filter.code := α0;
            libc.unix.linux_like.linux.sock_filter.jt := α1;
            libc.unix.linux_like.linux.sock_filter.jf := α2;
            libc.unix.linux_like.linux.sock_filter.k := α3;
          |}.
      
      (*
                      pub unsafe extern fn $i($($arg: $argty),*
                      ) -> $ret {
                          $($body);*
                      }
      *)
      Definition ELF32_R_SYM
          (val : ltac:(libc.unix.linux_like.linux.Elf32_Word))
          : M ltac:(libc.unix.linux_like.linux.Elf32_Word) :=
        let* val := M.alloc val in
        let* α0 : u32.t := M.read val in
        BinOp.Panic.shr α0 ((Integer.of_Z 8) : i32.t).
      
      (*
                      pub unsafe extern fn $i($($arg: $argty),*
                      ) -> $ret {
                          $($body);*
                      }
      *)
      Definition ELF32_R_TYPE
          (val : ltac:(libc.unix.linux_like.linux.Elf32_Word))
          : M ltac:(libc.unix.linux_like.linux.Elf32_Word) :=
        let* val := M.alloc val in
        let* α0 : u32.t := M.read val in
        M.pure (BinOp.Pure.bit_and α0 ((Integer.of_Z 255) : u32.t)).
      
      (*
                      pub unsafe extern fn $i($($arg: $argty),*
                      ) -> $ret {
                          $($body);*
                      }
      *)
      Definition ELF32_R_INFO
          (sym : ltac:(libc.unix.linux_like.linux.Elf32_Word))
          (t : ltac:(libc.unix.linux_like.linux.Elf32_Word))
          : M ltac:(libc.unix.linux_like.linux.Elf32_Word) :=
        let* sym := M.alloc sym in
        let* t := M.alloc t in
        let* α0 : u32.t := M.read sym in
        let* α1 : u32.t := M.read t in
        let* α2 : u32.t := BinOp.Panic.add ((Integer.of_Z 8) : u32.t) α1 in
        let* α3 : u32.t := BinOp.Panic.shl α0 α2 in
        M.pure (BinOp.Pure.bit_and α3 ((Integer.of_Z 255) : u32.t)).
      
      (*
                      pub unsafe extern fn $i($($arg: $argty),*
                      ) -> $ret {
                          $($body);*
                      }
      *)
      Definition ELF64_R_SYM
          (val : ltac:(libc.unix.linux_like.linux.Elf64_Xword))
          : M ltac:(libc.unix.linux_like.linux.Elf64_Xword) :=
        let* val := M.alloc val in
        let* α0 : u64.t := M.read val in
        BinOp.Panic.shr α0 ((Integer.of_Z 32) : i32.t).
      
      (*
                      pub unsafe extern fn $i($($arg: $argty),*
                      ) -> $ret {
                          $($body);*
                      }
      *)
      Definition ELF64_R_TYPE
          (val : ltac:(libc.unix.linux_like.linux.Elf64_Xword))
          : M ltac:(libc.unix.linux_like.linux.Elf64_Xword) :=
        let* val := M.alloc val in
        let* α0 : u64.t := M.read val in
        M.pure (BinOp.Pure.bit_and α0 ((Integer.of_Z 4294967295) : u64.t)).
      
      (*
                      pub unsafe extern fn $i($($arg: $argty),*
                      ) -> $ret {
                          $($body);*
                      }
      *)
      Definition ELF64_R_INFO
          (sym : ltac:(libc.unix.linux_like.linux.Elf64_Xword))
          (t : ltac:(libc.unix.linux_like.linux.Elf64_Xword))
          : M ltac:(libc.unix.linux_like.linux.Elf64_Xword) :=
        let* sym := M.alloc sym in
        let* t := M.alloc t in
        let* α0 : u64.t := M.read sym in
        let* α1 : u64.t := M.read t in
        let* α2 : u64.t := BinOp.Panic.add ((Integer.of_Z 32) : u64.t) α1 in
        BinOp.Panic.shl α0 α2.
      
      (*
                      pub extern fn $i($($arg: $argty),*
                      ) -> $ret {
                          $($body);*
                      }
      *)
      Definition makedev
          (major : ltac:(libc.unix.c_uint))
          (minor : ltac:(libc.unix.c_uint))
          : M ltac:(libc.unix.linux_like.linux.dev_t) :=
        let* major := M.alloc major in
        let* minor := M.alloc minor in
        let* major : M.Val u64.t :=
          let* α0 : u32.t := M.read major in
          M.alloc (rust_cast α0) in
        let* minor : M.Val u64.t :=
          let* α0 : u32.t := M.read minor in
          M.alloc (rust_cast α0) in
        let* dev : M.Val u64.t := M.alloc ((Integer.of_Z 0) : u64.t) in
        let* _ : M.Val unit :=
          let β : M.Val u64.t := dev in
          let* α0 := M.read β in
          let* α1 : u64.t := M.read major in
          let* α2 : u64.t :=
            BinOp.Panic.shl
              (BinOp.Pure.bit_and α1 ((Integer.of_Z 4095) : u64.t))
              ((Integer.of_Z 8) : i32.t) in
          assign β (BinOp.Pure.bit_or α0 α2) in
        let* _ : M.Val unit :=
          let β : M.Val u64.t := dev in
          let* α0 := M.read β in
          let* α1 : u64.t := M.read major in
          let* α2 : u64.t :=
            BinOp.Panic.shl
              (BinOp.Pure.bit_and α1 ((Integer.of_Z 4294963200) : u64.t))
              ((Integer.of_Z 32) : i32.t) in
          assign β (BinOp.Pure.bit_or α0 α2) in
        let* _ : M.Val unit :=
          let β : M.Val u64.t := dev in
          let* α0 := M.read β in
          let* α1 : u64.t := M.read minor in
          let* α2 : u64.t :=
            BinOp.Panic.shl
              (BinOp.Pure.bit_and α1 ((Integer.of_Z 255) : u64.t))
              ((Integer.of_Z 0) : i32.t) in
          assign β (BinOp.Pure.bit_or α0 α2) in
        let* _ : M.Val unit :=
          let β : M.Val u64.t := dev in
          let* α0 := M.read β in
          let* α1 : u64.t := M.read minor in
          let* α2 : u64.t :=
            BinOp.Panic.shl
              (BinOp.Pure.bit_and α1 ((Integer.of_Z 4294967040) : u64.t))
              ((Integer.of_Z 12) : i32.t) in
          assign β (BinOp.Pure.bit_or α0 α2) in
        M.read dev.
      
      (*
                      pub extern fn $i($($arg: $argty),*
                      ) -> $ret {
                          $($body);*
                      }
      *)
      Definition SCTP_PR_TTL_ENABLED
          (policy : ltac:(libc.unix.c_int))
          : M bool.t :=
        let* policy := M.alloc policy in
        let* α0 : i32.t := M.read policy in
        let* α1 : i32.t := M.read libc.unix.linux_like.linux.SCTP_PR_SCTP_TTL in
        M.pure (BinOp.Pure.eq α0 α1).
      
      (*
                      pub extern fn $i($($arg: $argty),*
                      ) -> $ret {
                          $($body);*
                      }
      *)
      Definition SCTP_PR_RTX_ENABLED
          (policy : ltac:(libc.unix.c_int))
          : M bool.t :=
        let* policy := M.alloc policy in
        let* α0 : i32.t := M.read policy in
        let* α1 : i32.t := M.read libc.unix.linux_like.linux.SCTP_PR_SCTP_RTX in
        M.pure (BinOp.Pure.eq α0 α1).
      
      (*
                      pub extern fn $i($($arg: $argty),*
                      ) -> $ret {
                          $($body);*
                      }
      *)
      Definition SCTP_PR_PRIO_ENABLED
          (policy : ltac:(libc.unix.c_int))
          : M bool.t :=
        let* policy := M.alloc policy in
        let* α0 : i32.t := M.read policy in
        let* α1 : i32.t :=
          M.read libc.unix.linux_like.linux.SCTP_PR_SCTP_PRIO in
        M.pure (BinOp.Pure.eq α0 α1).
      
      Error ForeignMod.
      
      Error ForeignMod.
      
      Error ForeignMod.
      
      Error ForeignMod.
      
      Error ForeignMod.
      
      Module gnu.
        Ltac pthread_t :=
          exact
            ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_ulong).
        
        Ltac __priority_which_t := exact ltac:(libc.unix.c_uint).
        
        Ltac __rlimit_resource_t := exact ltac:(libc.unix.c_uint).
        
        Ltac Lmid_t :=
          exact ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_long).
        
        Ltac regoff_t := exact ltac:(libc.unix.c_int).
        
        Ltac __kernel_rwf_t := exact ltac:(libc.unix.c_int).
        
        Ltac Ioctl :=
          exact
            ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_ulong).
        
        Module  statx.
        Section statx.
          Record t : Set := {
            stx_mask : u32.t;
            stx_blksize : u32.t;
            stx_attributes : u64.t;
            stx_nlink : u32.t;
            stx_uid : u32.t;
            stx_gid : u32.t;
            stx_mode : u16.t;
            __statx_pad1 : array u16.t;
            stx_ino : u64.t;
            stx_size : u64.t;
            stx_blocks : u64.t;
            stx_attributes_mask : u64.t;
            stx_atime : libc.unix.linux_like.linux.gnu.statx_timestamp.t;
            stx_btime : libc.unix.linux_like.linux.gnu.statx_timestamp.t;
            stx_ctime : libc.unix.linux_like.linux.gnu.statx_timestamp.t;
            stx_mtime : libc.unix.linux_like.linux.gnu.statx_timestamp.t;
            stx_rdev_major : u32.t;
            stx_rdev_minor : u32.t;
            stx_dev_major : u32.t;
            stx_dev_minor : u32.t;
            stx_mnt_id : u64.t;
            stx_dio_mem_align : u32.t;
            stx_dio_offset_align : u32.t;
            __statx_pad3 : array u64.t;
          }.
          
          Definition Get_stx_mask :=
            Ref.map
              (fun α => Some α.(stx_mask))
              (fun β α => Some (α <| stx_mask := β |>)).
          Definition Get_stx_blksize :=
            Ref.map
              (fun α => Some α.(stx_blksize))
              (fun β α => Some (α <| stx_blksize := β |>)).
          Definition Get_stx_attributes :=
            Ref.map
              (fun α => Some α.(stx_attributes))
              (fun β α => Some (α <| stx_attributes := β |>)).
          Definition Get_stx_nlink :=
            Ref.map
              (fun α => Some α.(stx_nlink))
              (fun β α => Some (α <| stx_nlink := β |>)).
          Definition Get_stx_uid :=
            Ref.map
              (fun α => Some α.(stx_uid))
              (fun β α => Some (α <| stx_uid := β |>)).
          Definition Get_stx_gid :=
            Ref.map
              (fun α => Some α.(stx_gid))
              (fun β α => Some (α <| stx_gid := β |>)).
          Definition Get_stx_mode :=
            Ref.map
              (fun α => Some α.(stx_mode))
              (fun β α => Some (α <| stx_mode := β |>)).
          Definition Get___statx_pad1 :=
            Ref.map
              (fun α => Some α.(__statx_pad1))
              (fun β α => Some (α <| __statx_pad1 := β |>)).
          Definition Get_stx_ino :=
            Ref.map
              (fun α => Some α.(stx_ino))
              (fun β α => Some (α <| stx_ino := β |>)).
          Definition Get_stx_size :=
            Ref.map
              (fun α => Some α.(stx_size))
              (fun β α => Some (α <| stx_size := β |>)).
          Definition Get_stx_blocks :=
            Ref.map
              (fun α => Some α.(stx_blocks))
              (fun β α => Some (α <| stx_blocks := β |>)).
          Definition Get_stx_attributes_mask :=
            Ref.map
              (fun α => Some α.(stx_attributes_mask))
              (fun β α => Some (α <| stx_attributes_mask := β |>)).
          Definition Get_stx_atime :=
            Ref.map
              (fun α => Some α.(stx_atime))
              (fun β α => Some (α <| stx_atime := β |>)).
          Definition Get_stx_btime :=
            Ref.map
              (fun α => Some α.(stx_btime))
              (fun β α => Some (α <| stx_btime := β |>)).
          Definition Get_stx_ctime :=
            Ref.map
              (fun α => Some α.(stx_ctime))
              (fun β α => Some (α <| stx_ctime := β |>)).
          Definition Get_stx_mtime :=
            Ref.map
              (fun α => Some α.(stx_mtime))
              (fun β α => Some (α <| stx_mtime := β |>)).
          Definition Get_stx_rdev_major :=
            Ref.map
              (fun α => Some α.(stx_rdev_major))
              (fun β α => Some (α <| stx_rdev_major := β |>)).
          Definition Get_stx_rdev_minor :=
            Ref.map
              (fun α => Some α.(stx_rdev_minor))
              (fun β α => Some (α <| stx_rdev_minor := β |>)).
          Definition Get_stx_dev_major :=
            Ref.map
              (fun α => Some α.(stx_dev_major))
              (fun β α => Some (α <| stx_dev_major := β |>)).
          Definition Get_stx_dev_minor :=
            Ref.map
              (fun α => Some α.(stx_dev_minor))
              (fun β α => Some (α <| stx_dev_minor := β |>)).
          Definition Get_stx_mnt_id :=
            Ref.map
              (fun α => Some α.(stx_mnt_id))
              (fun β α => Some (α <| stx_mnt_id := β |>)).
          Definition Get_stx_dio_mem_align :=
            Ref.map
              (fun α => Some α.(stx_dio_mem_align))
              (fun β α => Some (α <| stx_dio_mem_align := β |>)).
          Definition Get_stx_dio_offset_align :=
            Ref.map
              (fun α => Some α.(stx_dio_offset_align))
              (fun β α => Some (α <| stx_dio_offset_align := β |>)).
          Definition Get___statx_pad3 :=
            Ref.map
              (fun α => Some α.(__statx_pad3))
              (fun β α => Some (α <| __statx_pad3 := β |>)).
        End statx.
        End statx.
        
        Module  Impl_core_marker_Copy_for_libc_unix_linux_like_linux_gnu_statx_t.
        Section Impl_core_marker_Copy_for_libc_unix_linux_like_linux_gnu_statx_t.
          Definition Self : Set := libc.unix.linux_like.linux.gnu.statx.t.
          
          Global Instance ℐ : core.marker.Copy.Trait Self := {
          }.
        End Impl_core_marker_Copy_for_libc_unix_linux_like_linux_gnu_statx_t.
        End Impl_core_marker_Copy_for_libc_unix_linux_like_linux_gnu_statx_t.
        
        Module  Impl_core_clone_Clone_for_libc_unix_linux_like_linux_gnu_statx_t.
        Section Impl_core_clone_Clone_for_libc_unix_linux_like_linux_gnu_statx_t.
          Definition Self : Set := libc.unix.linux_like.linux.gnu.statx.t.
          
          (*
                      fn clone(&self) -> $i { *self }
          *)
          Definition clone
              (self : ref Self)
              : M libc.unix.linux_like.linux.gnu.statx.t :=
            let* self := M.alloc self in
            let* α0 : ref libc.unix.linux_like.linux.gnu.statx.t :=
              M.read self in
            M.read (deref α0).
          
          Global Instance AssociatedFunction_clone :
            Notations.DoubleColon Self "clone" := {
            Notations.double_colon := clone;
          }.
          
          Global Instance ℐ : core.clone.Clone.Required.Trait Self := {
            core.clone.Clone.clone := clone;
            core.clone.Clone.clone_from := Datatypes.None;
          }.
        End Impl_core_clone_Clone_for_libc_unix_linux_like_linux_gnu_statx_t.
        End Impl_core_clone_Clone_for_libc_unix_linux_like_linux_gnu_statx_t.
        
        Module  statx_timestamp.
        Section statx_timestamp.
          Record t : Set := {
            tv_sec : i64.t;
            tv_nsec : u32.t;
            __statx_timestamp_pad1 : array i32.t;
          }.
          
          Definition Get_tv_sec :=
            Ref.map
              (fun α => Some α.(tv_sec))
              (fun β α => Some (α <| tv_sec := β |>)).
          Definition Get_tv_nsec :=
            Ref.map
              (fun α => Some α.(tv_nsec))
              (fun β α => Some (α <| tv_nsec := β |>)).
          Definition Get___statx_timestamp_pad1 :=
            Ref.map
              (fun α => Some α.(__statx_timestamp_pad1))
              (fun β α => Some (α <| __statx_timestamp_pad1 := β |>)).
        End statx_timestamp.
        End statx_timestamp.
        
        Module  Impl_core_marker_Copy_for_libc_unix_linux_like_linux_gnu_statx_timestamp_t.
        Section Impl_core_marker_Copy_for_libc_unix_linux_like_linux_gnu_statx_timestamp_t.
          Definition Self : Set :=
            libc.unix.linux_like.linux.gnu.statx_timestamp.t.
          
          Global Instance ℐ : core.marker.Copy.Trait Self := {
          }.
        End Impl_core_marker_Copy_for_libc_unix_linux_like_linux_gnu_statx_timestamp_t.
        End Impl_core_marker_Copy_for_libc_unix_linux_like_linux_gnu_statx_timestamp_t.
        
        Module  Impl_core_clone_Clone_for_libc_unix_linux_like_linux_gnu_statx_timestamp_t.
        Section Impl_core_clone_Clone_for_libc_unix_linux_like_linux_gnu_statx_timestamp_t.
          Definition Self : Set :=
            libc.unix.linux_like.linux.gnu.statx_timestamp.t.
          
          (*
                      fn clone(&self) -> $i { *self }
          *)
          Definition clone
              (self : ref Self)
              : M libc.unix.linux_like.linux.gnu.statx_timestamp.t :=
            let* self := M.alloc self in
            let* α0 : ref libc.unix.linux_like.linux.gnu.statx_timestamp.t :=
              M.read self in
            M.read (deref α0).
          
          Global Instance AssociatedFunction_clone :
            Notations.DoubleColon Self "clone" := {
            Notations.double_colon := clone;
          }.
          
          Global Instance ℐ : core.clone.Clone.Required.Trait Self := {
            core.clone.Clone.clone := clone;
            core.clone.Clone.clone_from := Datatypes.None;
          }.
        End Impl_core_clone_Clone_for_libc_unix_linux_like_linux_gnu_statx_timestamp_t.
        End Impl_core_clone_Clone_for_libc_unix_linux_like_linux_gnu_statx_timestamp_t.
        
        Module  aiocb.
        Section aiocb.
          Record t : Set := {
            aio_fildes : ltac:(libc.unix.c_int);
            aio_lio_opcode : ltac:(libc.unix.c_int);
            aio_reqprio : ltac:(libc.unix.c_int);
            aio_buf : mut_ref core.ffi.c_void.t;
            aio_nbytes : ltac:(libc.unix.size_t);
            aio_sigevent : libc.unix.linux_like.sigevent.t;
            __next_prio : mut_ref libc.unix.linux_like.linux.gnu.aiocb.t;
            __abs_prio : ltac:(libc.unix.c_int);
            __policy : ltac:(libc.unix.c_int);
            __error_code : ltac:(libc.unix.c_int);
            __return_value : ltac:(libc.unix.ssize_t);
            aio_offset : ltac:(libc.unix.linux_like.linux.gnu.b64.off_t);
            __glibc_reserved :
              array ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.c_char);
          }.
          
          Definition Get_aio_fildes :=
            Ref.map
              (fun α => Some α.(aio_fildes))
              (fun β α => Some (α <| aio_fildes := β |>)).
          Definition Get_aio_lio_opcode :=
            Ref.map
              (fun α => Some α.(aio_lio_opcode))
              (fun β α => Some (α <| aio_lio_opcode := β |>)).
          Definition Get_aio_reqprio :=
            Ref.map
              (fun α => Some α.(aio_reqprio))
              (fun β α => Some (α <| aio_reqprio := β |>)).
          Definition Get_aio_buf :=
            Ref.map
              (fun α => Some α.(aio_buf))
              (fun β α => Some (α <| aio_buf := β |>)).
          Definition Get_aio_nbytes :=
            Ref.map
              (fun α => Some α.(aio_nbytes))
              (fun β α => Some (α <| aio_nbytes := β |>)).
          Definition Get_aio_sigevent :=
            Ref.map
              (fun α => Some α.(aio_sigevent))
              (fun β α => Some (α <| aio_sigevent := β |>)).
          Definition Get___next_prio :=
            Ref.map
              (fun α => Some α.(__next_prio))
              (fun β α => Some (α <| __next_prio := β |>)).
          Definition Get___abs_prio :=
            Ref.map
              (fun α => Some α.(__abs_prio))
              (fun β α => Some (α <| __abs_prio := β |>)).
          Definition Get___policy :=
            Ref.map
              (fun α => Some α.(__policy))
              (fun β α => Some (α <| __policy := β |>)).
          Definition Get___error_code :=
            Ref.map
              (fun α => Some α.(__error_code))
              (fun β α => Some (α <| __error_code := β |>)).
          Definition Get___return_value :=
            Ref.map
              (fun α => Some α.(__return_value))
              (fun β α => Some (α <| __return_value := β |>)).
          Definition Get_aio_offset :=
            Ref.map
              (fun α => Some α.(aio_offset))
              (fun β α => Some (α <| aio_offset := β |>)).
          Definition Get___glibc_reserved :=
            Ref.map
              (fun α => Some α.(__glibc_reserved))
              (fun β α => Some (α <| __glibc_reserved := β |>)).
        End aiocb.
        End aiocb.
        
        Module  Impl_core_marker_Copy_for_libc_unix_linux_like_linux_gnu_aiocb_t.
        Section Impl_core_marker_Copy_for_libc_unix_linux_like_linux_gnu_aiocb_t.
          Definition Self : Set := libc.unix.linux_like.linux.gnu.aiocb.t.
          
          Global Instance ℐ : core.marker.Copy.Trait Self := {
          }.
        End Impl_core_marker_Copy_for_libc_unix_linux_like_linux_gnu_aiocb_t.
        End Impl_core_marker_Copy_for_libc_unix_linux_like_linux_gnu_aiocb_t.
        
        Module  Impl_core_clone_Clone_for_libc_unix_linux_like_linux_gnu_aiocb_t.
        Section Impl_core_clone_Clone_for_libc_unix_linux_like_linux_gnu_aiocb_t.
          Definition Self : Set := libc.unix.linux_like.linux.gnu.aiocb.t.
          
          (*
                      fn clone(&self) -> $i { *self }
          *)
          Definition clone
              (self : ref Self)
              : M libc.unix.linux_like.linux.gnu.aiocb.t :=
            let* self := M.alloc self in
            let* α0 : ref libc.unix.linux_like.linux.gnu.aiocb.t :=
              M.read self in
            M.read (deref α0).
          
          Global Instance AssociatedFunction_clone :
            Notations.DoubleColon Self "clone" := {
            Notations.double_colon := clone;
          }.
          
          Global Instance ℐ : core.clone.Clone.Required.Trait Self := {
            core.clone.Clone.clone := clone;
            core.clone.Clone.clone_from := Datatypes.None;
          }.
        End Impl_core_clone_Clone_for_libc_unix_linux_like_linux_gnu_aiocb_t.
        End Impl_core_clone_Clone_for_libc_unix_linux_like_linux_gnu_aiocb_t.
        
        Module  __exit_status.
        Section __exit_status.
          Record t : Set := {
            e_termination : ltac:(libc.unix.c_short);
            e_exit : ltac:(libc.unix.c_short);
          }.
          
          Definition Get_e_termination :=
            Ref.map
              (fun α => Some α.(e_termination))
              (fun β α => Some (α <| e_termination := β |>)).
          Definition Get_e_exit :=
            Ref.map
              (fun α => Some α.(e_exit))
              (fun β α => Some (α <| e_exit := β |>)).
        End __exit_status.
        End __exit_status.
        
        Module  Impl_core_marker_Copy_for_libc_unix_linux_like_linux_gnu___exit_status_t.
        Section Impl_core_marker_Copy_for_libc_unix_linux_like_linux_gnu___exit_status_t.
          Definition Self : Set :=
            libc.unix.linux_like.linux.gnu.__exit_status.t.
          
          Global Instance ℐ : core.marker.Copy.Trait Self := {
          }.
        End Impl_core_marker_Copy_for_libc_unix_linux_like_linux_gnu___exit_status_t.
        End Impl_core_marker_Copy_for_libc_unix_linux_like_linux_gnu___exit_status_t.
        
        Module  Impl_core_clone_Clone_for_libc_unix_linux_like_linux_gnu___exit_status_t.
        Section Impl_core_clone_Clone_for_libc_unix_linux_like_linux_gnu___exit_status_t.
          Definition Self : Set :=
            libc.unix.linux_like.linux.gnu.__exit_status.t.
          
          (*
                      fn clone(&self) -> $i { *self }
          *)
          Definition clone
              (self : ref Self)
              : M libc.unix.linux_like.linux.gnu.__exit_status.t :=
            let* self := M.alloc self in
            let* α0 : ref libc.unix.linux_like.linux.gnu.__exit_status.t :=
              M.read self in
            M.read (deref α0).
          
          Global Instance AssociatedFunction_clone :
            Notations.DoubleColon Self "clone" := {
            Notations.double_colon := clone;
          }.
          
          Global Instance ℐ : core.clone.Clone.Required.Trait Self := {
            core.clone.Clone.clone := clone;
            core.clone.Clone.clone_from := Datatypes.None;
          }.
        End Impl_core_clone_Clone_for_libc_unix_linux_like_linux_gnu___exit_status_t.
        End Impl_core_clone_Clone_for_libc_unix_linux_like_linux_gnu___exit_status_t.
        
        Module  __timeval.
        Section __timeval.
          Record t : Set := {
            tv_sec : i32.t;
            tv_usec : i32.t;
          }.
          
          Definition Get_tv_sec :=
            Ref.map
              (fun α => Some α.(tv_sec))
              (fun β α => Some (α <| tv_sec := β |>)).
          Definition Get_tv_usec :=
            Ref.map
              (fun α => Some α.(tv_usec))
              (fun β α => Some (α <| tv_usec := β |>)).
        End __timeval.
        End __timeval.
        
        Module  Impl_core_marker_Copy_for_libc_unix_linux_like_linux_gnu___timeval_t.
        Section Impl_core_marker_Copy_for_libc_unix_linux_like_linux_gnu___timeval_t.
          Definition Self : Set := libc.unix.linux_like.linux.gnu.__timeval.t.
          
          Global Instance ℐ : core.marker.Copy.Trait Self := {
          }.
        End Impl_core_marker_Copy_for_libc_unix_linux_like_linux_gnu___timeval_t.
        End Impl_core_marker_Copy_for_libc_unix_linux_like_linux_gnu___timeval_t.
        
        Module  Impl_core_clone_Clone_for_libc_unix_linux_like_linux_gnu___timeval_t.
        Section Impl_core_clone_Clone_for_libc_unix_linux_like_linux_gnu___timeval_t.
          Definition Self : Set := libc.unix.linux_like.linux.gnu.__timeval.t.
          
          (*
                      fn clone(&self) -> $i { *self }
          *)
          Definition clone
              (self : ref Self)
              : M libc.unix.linux_like.linux.gnu.__timeval.t :=
            let* self := M.alloc self in
            let* α0 : ref libc.unix.linux_like.linux.gnu.__timeval.t :=
              M.read self in
            M.read (deref α0).
          
          Global Instance AssociatedFunction_clone :
            Notations.DoubleColon Self "clone" := {
            Notations.double_colon := clone;
          }.
          
          Global Instance ℐ : core.clone.Clone.Required.Trait Self := {
            core.clone.Clone.clone := clone;
            core.clone.Clone.clone_from := Datatypes.None;
          }.
        End Impl_core_clone_Clone_for_libc_unix_linux_like_linux_gnu___timeval_t.
        End Impl_core_clone_Clone_for_libc_unix_linux_like_linux_gnu___timeval_t.
        
        Module  glob64_t.
        Section glob64_t.
          Record t : Set := {
            gl_pathc : ltac:(libc.unix.size_t);
            gl_pathv :
              mut_ref
                (mut_ref
                  ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.c_char));
            gl_offs : ltac:(libc.unix.size_t);
            gl_flags : ltac:(libc.unix.c_int);
            __unused1 : mut_ref core.ffi.c_void.t;
            __unused2 : mut_ref core.ffi.c_void.t;
            __unused3 : mut_ref core.ffi.c_void.t;
            __unused4 : mut_ref core.ffi.c_void.t;
            __unused5 : mut_ref core.ffi.c_void.t;
          }.
          
          Definition Get_gl_pathc :=
            Ref.map
              (fun α => Some α.(gl_pathc))
              (fun β α => Some (α <| gl_pathc := β |>)).
          Definition Get_gl_pathv :=
            Ref.map
              (fun α => Some α.(gl_pathv))
              (fun β α => Some (α <| gl_pathv := β |>)).
          Definition Get_gl_offs :=
            Ref.map
              (fun α => Some α.(gl_offs))
              (fun β α => Some (α <| gl_offs := β |>)).
          Definition Get_gl_flags :=
            Ref.map
              (fun α => Some α.(gl_flags))
              (fun β α => Some (α <| gl_flags := β |>)).
          Definition Get___unused1 :=
            Ref.map
              (fun α => Some α.(__unused1))
              (fun β α => Some (α <| __unused1 := β |>)).
          Definition Get___unused2 :=
            Ref.map
              (fun α => Some α.(__unused2))
              (fun β α => Some (α <| __unused2 := β |>)).
          Definition Get___unused3 :=
            Ref.map
              (fun α => Some α.(__unused3))
              (fun β α => Some (α <| __unused3 := β |>)).
          Definition Get___unused4 :=
            Ref.map
              (fun α => Some α.(__unused4))
              (fun β α => Some (α <| __unused4 := β |>)).
          Definition Get___unused5 :=
            Ref.map
              (fun α => Some α.(__unused5))
              (fun β α => Some (α <| __unused5 := β |>)).
        End glob64_t.
        End glob64_t.
        
        Module  Impl_core_marker_Copy_for_libc_unix_linux_like_linux_gnu_glob64_t_t.
        Section Impl_core_marker_Copy_for_libc_unix_linux_like_linux_gnu_glob64_t_t.
          Definition Self : Set := libc.unix.linux_like.linux.gnu.glob64_t.t.
          
          Global Instance ℐ : core.marker.Copy.Trait Self := {
          }.
        End Impl_core_marker_Copy_for_libc_unix_linux_like_linux_gnu_glob64_t_t.
        End Impl_core_marker_Copy_for_libc_unix_linux_like_linux_gnu_glob64_t_t.
        
        Module  Impl_core_clone_Clone_for_libc_unix_linux_like_linux_gnu_glob64_t_t.
        Section Impl_core_clone_Clone_for_libc_unix_linux_like_linux_gnu_glob64_t_t.
          Definition Self : Set := libc.unix.linux_like.linux.gnu.glob64_t.t.
          
          (*
                      fn clone(&self) -> $i { *self }
          *)
          Definition clone
              (self : ref Self)
              : M libc.unix.linux_like.linux.gnu.glob64_t.t :=
            let* self := M.alloc self in
            let* α0 : ref libc.unix.linux_like.linux.gnu.glob64_t.t :=
              M.read self in
            M.read (deref α0).
          
          Global Instance AssociatedFunction_clone :
            Notations.DoubleColon Self "clone" := {
            Notations.double_colon := clone;
          }.
          
          Global Instance ℐ : core.clone.Clone.Required.Trait Self := {
            core.clone.Clone.clone := clone;
            core.clone.Clone.clone_from := Datatypes.None;
          }.
        End Impl_core_clone_Clone_for_libc_unix_linux_like_linux_gnu_glob64_t_t.
        End Impl_core_clone_Clone_for_libc_unix_linux_like_linux_gnu_glob64_t_t.
        
        Module  msghdr.
        Section msghdr.
          Record t : Set := {
            msg_name : mut_ref core.ffi.c_void.t;
            msg_namelen : ltac:(libc.unix.linux_like.linux.socklen_t);
            msg_iov : mut_ref libc.unix.iovec.t;
            msg_iovlen : ltac:(libc.unix.size_t);
            msg_control : mut_ref core.ffi.c_void.t;
            msg_controllen : ltac:(libc.unix.size_t);
            msg_flags : ltac:(libc.unix.c_int);
          }.
          
          Definition Get_msg_name :=
            Ref.map
              (fun α => Some α.(msg_name))
              (fun β α => Some (α <| msg_name := β |>)).
          Definition Get_msg_namelen :=
            Ref.map
              (fun α => Some α.(msg_namelen))
              (fun β α => Some (α <| msg_namelen := β |>)).
          Definition Get_msg_iov :=
            Ref.map
              (fun α => Some α.(msg_iov))
              (fun β α => Some (α <| msg_iov := β |>)).
          Definition Get_msg_iovlen :=
            Ref.map
              (fun α => Some α.(msg_iovlen))
              (fun β α => Some (α <| msg_iovlen := β |>)).
          Definition Get_msg_control :=
            Ref.map
              (fun α => Some α.(msg_control))
              (fun β α => Some (α <| msg_control := β |>)).
          Definition Get_msg_controllen :=
            Ref.map
              (fun α => Some α.(msg_controllen))
              (fun β α => Some (α <| msg_controllen := β |>)).
          Definition Get_msg_flags :=
            Ref.map
              (fun α => Some α.(msg_flags))
              (fun β α => Some (α <| msg_flags := β |>)).
        End msghdr.
        End msghdr.
        
        Module  Impl_core_marker_Copy_for_libc_unix_linux_like_linux_gnu_msghdr_t.
        Section Impl_core_marker_Copy_for_libc_unix_linux_like_linux_gnu_msghdr_t.
          Definition Self : Set := libc.unix.linux_like.linux.gnu.msghdr.t.
          
          Global Instance ℐ : core.marker.Copy.Trait Self := {
          }.
        End Impl_core_marker_Copy_for_libc_unix_linux_like_linux_gnu_msghdr_t.
        End Impl_core_marker_Copy_for_libc_unix_linux_like_linux_gnu_msghdr_t.
        
        Module  Impl_core_clone_Clone_for_libc_unix_linux_like_linux_gnu_msghdr_t.
        Section Impl_core_clone_Clone_for_libc_unix_linux_like_linux_gnu_msghdr_t.
          Definition Self : Set := libc.unix.linux_like.linux.gnu.msghdr.t.
          
          (*
                      fn clone(&self) -> $i { *self }
          *)
          Definition clone
              (self : ref Self)
              : M libc.unix.linux_like.linux.gnu.msghdr.t :=
            let* self := M.alloc self in
            let* α0 : ref libc.unix.linux_like.linux.gnu.msghdr.t :=
              M.read self in
            M.read (deref α0).
          
          Global Instance AssociatedFunction_clone :
            Notations.DoubleColon Self "clone" := {
            Notations.double_colon := clone;
          }.
          
          Global Instance ℐ : core.clone.Clone.Required.Trait Self := {
            core.clone.Clone.clone := clone;
            core.clone.Clone.clone_from := Datatypes.None;
          }.
        End Impl_core_clone_Clone_for_libc_unix_linux_like_linux_gnu_msghdr_t.
        End Impl_core_clone_Clone_for_libc_unix_linux_like_linux_gnu_msghdr_t.
        
        Module  cmsghdr.
        Section cmsghdr.
          Record t : Set := {
            cmsg_len : ltac:(libc.unix.size_t);
            cmsg_level : ltac:(libc.unix.c_int);
            cmsg_type : ltac:(libc.unix.c_int);
          }.
          
          Definition Get_cmsg_len :=
            Ref.map
              (fun α => Some α.(cmsg_len))
              (fun β α => Some (α <| cmsg_len := β |>)).
          Definition Get_cmsg_level :=
            Ref.map
              (fun α => Some α.(cmsg_level))
              (fun β α => Some (α <| cmsg_level := β |>)).
          Definition Get_cmsg_type :=
            Ref.map
              (fun α => Some α.(cmsg_type))
              (fun β α => Some (α <| cmsg_type := β |>)).
        End cmsghdr.
        End cmsghdr.
        
        Module  Impl_core_marker_Copy_for_libc_unix_linux_like_linux_gnu_cmsghdr_t.
        Section Impl_core_marker_Copy_for_libc_unix_linux_like_linux_gnu_cmsghdr_t.
          Definition Self : Set := libc.unix.linux_like.linux.gnu.cmsghdr.t.
          
          Global Instance ℐ : core.marker.Copy.Trait Self := {
          }.
        End Impl_core_marker_Copy_for_libc_unix_linux_like_linux_gnu_cmsghdr_t.
        End Impl_core_marker_Copy_for_libc_unix_linux_like_linux_gnu_cmsghdr_t.
        
        Module  Impl_core_clone_Clone_for_libc_unix_linux_like_linux_gnu_cmsghdr_t.
        Section Impl_core_clone_Clone_for_libc_unix_linux_like_linux_gnu_cmsghdr_t.
          Definition Self : Set := libc.unix.linux_like.linux.gnu.cmsghdr.t.
          
          (*
                      fn clone(&self) -> $i { *self }
          *)
          Definition clone
              (self : ref Self)
              : M libc.unix.linux_like.linux.gnu.cmsghdr.t :=
            let* self := M.alloc self in
            let* α0 : ref libc.unix.linux_like.linux.gnu.cmsghdr.t :=
              M.read self in
            M.read (deref α0).
          
          Global Instance AssociatedFunction_clone :
            Notations.DoubleColon Self "clone" := {
            Notations.double_colon := clone;
          }.
          
          Global Instance ℐ : core.clone.Clone.Required.Trait Self := {
            core.clone.Clone.clone := clone;
            core.clone.Clone.clone_from := Datatypes.None;
          }.
        End Impl_core_clone_Clone_for_libc_unix_linux_like_linux_gnu_cmsghdr_t.
        End Impl_core_clone_Clone_for_libc_unix_linux_like_linux_gnu_cmsghdr_t.
        
        Module  termios.
        Section termios.
          Record t : Set := {
            c_iflag : ltac:(libc.unix.linux_like.tcflag_t);
            c_oflag : ltac:(libc.unix.linux_like.tcflag_t);
            c_cflag : ltac:(libc.unix.linux_like.tcflag_t);
            c_lflag : ltac:(libc.unix.linux_like.tcflag_t);
            c_line : ltac:(libc.unix.cc_t);
            c_cc : array ltac:(libc.unix.cc_t);
            c_ispeed : ltac:(libc.unix.linux_like.speed_t);
            c_ospeed : ltac:(libc.unix.linux_like.speed_t);
          }.
          
          Definition Get_c_iflag :=
            Ref.map
              (fun α => Some α.(c_iflag))
              (fun β α => Some (α <| c_iflag := β |>)).
          Definition Get_c_oflag :=
            Ref.map
              (fun α => Some α.(c_oflag))
              (fun β α => Some (α <| c_oflag := β |>)).
          Definition Get_c_cflag :=
            Ref.map
              (fun α => Some α.(c_cflag))
              (fun β α => Some (α <| c_cflag := β |>)).
          Definition Get_c_lflag :=
            Ref.map
              (fun α => Some α.(c_lflag))
              (fun β α => Some (α <| c_lflag := β |>)).
          Definition Get_c_line :=
            Ref.map
              (fun α => Some α.(c_line))
              (fun β α => Some (α <| c_line := β |>)).
          Definition Get_c_cc :=
            Ref.map
              (fun α => Some α.(c_cc))
              (fun β α => Some (α <| c_cc := β |>)).
          Definition Get_c_ispeed :=
            Ref.map
              (fun α => Some α.(c_ispeed))
              (fun β α => Some (α <| c_ispeed := β |>)).
          Definition Get_c_ospeed :=
            Ref.map
              (fun α => Some α.(c_ospeed))
              (fun β α => Some (α <| c_ospeed := β |>)).
        End termios.
        End termios.
        
        Module  Impl_core_marker_Copy_for_libc_unix_linux_like_linux_gnu_termios_t.
        Section Impl_core_marker_Copy_for_libc_unix_linux_like_linux_gnu_termios_t.
          Definition Self : Set := libc.unix.linux_like.linux.gnu.termios.t.
          
          Global Instance ℐ : core.marker.Copy.Trait Self := {
          }.
        End Impl_core_marker_Copy_for_libc_unix_linux_like_linux_gnu_termios_t.
        End Impl_core_marker_Copy_for_libc_unix_linux_like_linux_gnu_termios_t.
        
        Module  Impl_core_clone_Clone_for_libc_unix_linux_like_linux_gnu_termios_t.
        Section Impl_core_clone_Clone_for_libc_unix_linux_like_linux_gnu_termios_t.
          Definition Self : Set := libc.unix.linux_like.linux.gnu.termios.t.
          
          (*
                      fn clone(&self) -> $i { *self }
          *)
          Definition clone
              (self : ref Self)
              : M libc.unix.linux_like.linux.gnu.termios.t :=
            let* self := M.alloc self in
            let* α0 : ref libc.unix.linux_like.linux.gnu.termios.t :=
              M.read self in
            M.read (deref α0).
          
          Global Instance AssociatedFunction_clone :
            Notations.DoubleColon Self "clone" := {
            Notations.double_colon := clone;
          }.
          
          Global Instance ℐ : core.clone.Clone.Required.Trait Self := {
            core.clone.Clone.clone := clone;
            core.clone.Clone.clone_from := Datatypes.None;
          }.
        End Impl_core_clone_Clone_for_libc_unix_linux_like_linux_gnu_termios_t.
        End Impl_core_clone_Clone_for_libc_unix_linux_like_linux_gnu_termios_t.
        
        Module  mallinfo.
        Section mallinfo.
          Record t : Set := {
            arena : ltac:(libc.unix.c_int);
            ordblks : ltac:(libc.unix.c_int);
            smblks : ltac:(libc.unix.c_int);
            hblks : ltac:(libc.unix.c_int);
            hblkhd : ltac:(libc.unix.c_int);
            usmblks : ltac:(libc.unix.c_int);
            fsmblks : ltac:(libc.unix.c_int);
            uordblks : ltac:(libc.unix.c_int);
            fordblks : ltac:(libc.unix.c_int);
            keepcost : ltac:(libc.unix.c_int);
          }.
          
          Definition Get_arena :=
            Ref.map
              (fun α => Some α.(arena))
              (fun β α => Some (α <| arena := β |>)).
          Definition Get_ordblks :=
            Ref.map
              (fun α => Some α.(ordblks))
              (fun β α => Some (α <| ordblks := β |>)).
          Definition Get_smblks :=
            Ref.map
              (fun α => Some α.(smblks))
              (fun β α => Some (α <| smblks := β |>)).
          Definition Get_hblks :=
            Ref.map
              (fun α => Some α.(hblks))
              (fun β α => Some (α <| hblks := β |>)).
          Definition Get_hblkhd :=
            Ref.map
              (fun α => Some α.(hblkhd))
              (fun β α => Some (α <| hblkhd := β |>)).
          Definition Get_usmblks :=
            Ref.map
              (fun α => Some α.(usmblks))
              (fun β α => Some (α <| usmblks := β |>)).
          Definition Get_fsmblks :=
            Ref.map
              (fun α => Some α.(fsmblks))
              (fun β α => Some (α <| fsmblks := β |>)).
          Definition Get_uordblks :=
            Ref.map
              (fun α => Some α.(uordblks))
              (fun β α => Some (α <| uordblks := β |>)).
          Definition Get_fordblks :=
            Ref.map
              (fun α => Some α.(fordblks))
              (fun β α => Some (α <| fordblks := β |>)).
          Definition Get_keepcost :=
            Ref.map
              (fun α => Some α.(keepcost))
              (fun β α => Some (α <| keepcost := β |>)).
        End mallinfo.
        End mallinfo.
        
        Module  Impl_core_marker_Copy_for_libc_unix_linux_like_linux_gnu_mallinfo_t.
        Section Impl_core_marker_Copy_for_libc_unix_linux_like_linux_gnu_mallinfo_t.
          Definition Self : Set := libc.unix.linux_like.linux.gnu.mallinfo.t.
          
          Global Instance ℐ : core.marker.Copy.Trait Self := {
          }.
        End Impl_core_marker_Copy_for_libc_unix_linux_like_linux_gnu_mallinfo_t.
        End Impl_core_marker_Copy_for_libc_unix_linux_like_linux_gnu_mallinfo_t.
        
        Module  Impl_core_clone_Clone_for_libc_unix_linux_like_linux_gnu_mallinfo_t.
        Section Impl_core_clone_Clone_for_libc_unix_linux_like_linux_gnu_mallinfo_t.
          Definition Self : Set := libc.unix.linux_like.linux.gnu.mallinfo.t.
          
          (*
                      fn clone(&self) -> $i { *self }
          *)
          Definition clone
              (self : ref Self)
              : M libc.unix.linux_like.linux.gnu.mallinfo.t :=
            let* self := M.alloc self in
            let* α0 : ref libc.unix.linux_like.linux.gnu.mallinfo.t :=
              M.read self in
            M.read (deref α0).
          
          Global Instance AssociatedFunction_clone :
            Notations.DoubleColon Self "clone" := {
            Notations.double_colon := clone;
          }.
          
          Global Instance ℐ : core.clone.Clone.Required.Trait Self := {
            core.clone.Clone.clone := clone;
            core.clone.Clone.clone_from := Datatypes.None;
          }.
        End Impl_core_clone_Clone_for_libc_unix_linux_like_linux_gnu_mallinfo_t.
        End Impl_core_clone_Clone_for_libc_unix_linux_like_linux_gnu_mallinfo_t.
        
        Module  mallinfo2.
        Section mallinfo2.
          Record t : Set := {
            arena : ltac:(libc.unix.size_t);
            ordblks : ltac:(libc.unix.size_t);
            smblks : ltac:(libc.unix.size_t);
            hblks : ltac:(libc.unix.size_t);
            hblkhd : ltac:(libc.unix.size_t);
            usmblks : ltac:(libc.unix.size_t);
            fsmblks : ltac:(libc.unix.size_t);
            uordblks : ltac:(libc.unix.size_t);
            fordblks : ltac:(libc.unix.size_t);
            keepcost : ltac:(libc.unix.size_t);
          }.
          
          Definition Get_arena :=
            Ref.map
              (fun α => Some α.(arena))
              (fun β α => Some (α <| arena := β |>)).
          Definition Get_ordblks :=
            Ref.map
              (fun α => Some α.(ordblks))
              (fun β α => Some (α <| ordblks := β |>)).
          Definition Get_smblks :=
            Ref.map
              (fun α => Some α.(smblks))
              (fun β α => Some (α <| smblks := β |>)).
          Definition Get_hblks :=
            Ref.map
              (fun α => Some α.(hblks))
              (fun β α => Some (α <| hblks := β |>)).
          Definition Get_hblkhd :=
            Ref.map
              (fun α => Some α.(hblkhd))
              (fun β α => Some (α <| hblkhd := β |>)).
          Definition Get_usmblks :=
            Ref.map
              (fun α => Some α.(usmblks))
              (fun β α => Some (α <| usmblks := β |>)).
          Definition Get_fsmblks :=
            Ref.map
              (fun α => Some α.(fsmblks))
              (fun β α => Some (α <| fsmblks := β |>)).
          Definition Get_uordblks :=
            Ref.map
              (fun α => Some α.(uordblks))
              (fun β α => Some (α <| uordblks := β |>)).
          Definition Get_fordblks :=
            Ref.map
              (fun α => Some α.(fordblks))
              (fun β α => Some (α <| fordblks := β |>)).
          Definition Get_keepcost :=
            Ref.map
              (fun α => Some α.(keepcost))
              (fun β α => Some (α <| keepcost := β |>)).
        End mallinfo2.
        End mallinfo2.
        
        Module  Impl_core_marker_Copy_for_libc_unix_linux_like_linux_gnu_mallinfo2_t.
        Section Impl_core_marker_Copy_for_libc_unix_linux_like_linux_gnu_mallinfo2_t.
          Definition Self : Set := libc.unix.linux_like.linux.gnu.mallinfo2.t.
          
          Global Instance ℐ : core.marker.Copy.Trait Self := {
          }.
        End Impl_core_marker_Copy_for_libc_unix_linux_like_linux_gnu_mallinfo2_t.
        End Impl_core_marker_Copy_for_libc_unix_linux_like_linux_gnu_mallinfo2_t.
        
        Module  Impl_core_clone_Clone_for_libc_unix_linux_like_linux_gnu_mallinfo2_t.
        Section Impl_core_clone_Clone_for_libc_unix_linux_like_linux_gnu_mallinfo2_t.
          Definition Self : Set := libc.unix.linux_like.linux.gnu.mallinfo2.t.
          
          (*
                      fn clone(&self) -> $i { *self }
          *)
          Definition clone
              (self : ref Self)
              : M libc.unix.linux_like.linux.gnu.mallinfo2.t :=
            let* self := M.alloc self in
            let* α0 : ref libc.unix.linux_like.linux.gnu.mallinfo2.t :=
              M.read self in
            M.read (deref α0).
          
          Global Instance AssociatedFunction_clone :
            Notations.DoubleColon Self "clone" := {
            Notations.double_colon := clone;
          }.
          
          Global Instance ℐ : core.clone.Clone.Required.Trait Self := {
            core.clone.Clone.clone := clone;
            core.clone.Clone.clone_from := Datatypes.None;
          }.
        End Impl_core_clone_Clone_for_libc_unix_linux_like_linux_gnu_mallinfo2_t.
        End Impl_core_clone_Clone_for_libc_unix_linux_like_linux_gnu_mallinfo2_t.
        
        Module  nl_pktinfo.
        Section nl_pktinfo.
          Record t : Set := {
            group : u32.t;
          }.
          
          Definition Get_group :=
            Ref.map
              (fun α => Some α.(group))
              (fun β α => Some (α <| group := β |>)).
        End nl_pktinfo.
        End nl_pktinfo.
        
        Module  Impl_core_marker_Copy_for_libc_unix_linux_like_linux_gnu_nl_pktinfo_t.
        Section Impl_core_marker_Copy_for_libc_unix_linux_like_linux_gnu_nl_pktinfo_t.
          Definition Self : Set := libc.unix.linux_like.linux.gnu.nl_pktinfo.t.
          
          Global Instance ℐ : core.marker.Copy.Trait Self := {
          }.
        End Impl_core_marker_Copy_for_libc_unix_linux_like_linux_gnu_nl_pktinfo_t.
        End Impl_core_marker_Copy_for_libc_unix_linux_like_linux_gnu_nl_pktinfo_t.
        
        Module  Impl_core_clone_Clone_for_libc_unix_linux_like_linux_gnu_nl_pktinfo_t.
        Section Impl_core_clone_Clone_for_libc_unix_linux_like_linux_gnu_nl_pktinfo_t.
          Definition Self : Set := libc.unix.linux_like.linux.gnu.nl_pktinfo.t.
          
          (*
                      fn clone(&self) -> $i { *self }
          *)
          Definition clone
              (self : ref Self)
              : M libc.unix.linux_like.linux.gnu.nl_pktinfo.t :=
            let* self := M.alloc self in
            let* α0 : ref libc.unix.linux_like.linux.gnu.nl_pktinfo.t :=
              M.read self in
            M.read (deref α0).
          
          Global Instance AssociatedFunction_clone :
            Notations.DoubleColon Self "clone" := {
            Notations.double_colon := clone;
          }.
          
          Global Instance ℐ : core.clone.Clone.Required.Trait Self := {
            core.clone.Clone.clone := clone;
            core.clone.Clone.clone_from := Datatypes.None;
          }.
        End Impl_core_clone_Clone_for_libc_unix_linux_like_linux_gnu_nl_pktinfo_t.
        End Impl_core_clone_Clone_for_libc_unix_linux_like_linux_gnu_nl_pktinfo_t.
        
        Module  nl_mmap_req.
        Section nl_mmap_req.
          Record t : Set := {
            nm_block_size : ltac:(libc.unix.c_uint);
            nm_block_nr : ltac:(libc.unix.c_uint);
            nm_frame_size : ltac:(libc.unix.c_uint);
            nm_frame_nr : ltac:(libc.unix.c_uint);
          }.
          
          Definition Get_nm_block_size :=
            Ref.map
              (fun α => Some α.(nm_block_size))
              (fun β α => Some (α <| nm_block_size := β |>)).
          Definition Get_nm_block_nr :=
            Ref.map
              (fun α => Some α.(nm_block_nr))
              (fun β α => Some (α <| nm_block_nr := β |>)).
          Definition Get_nm_frame_size :=
            Ref.map
              (fun α => Some α.(nm_frame_size))
              (fun β α => Some (α <| nm_frame_size := β |>)).
          Definition Get_nm_frame_nr :=
            Ref.map
              (fun α => Some α.(nm_frame_nr))
              (fun β α => Some (α <| nm_frame_nr := β |>)).
        End nl_mmap_req.
        End nl_mmap_req.
        
        Module  Impl_core_marker_Copy_for_libc_unix_linux_like_linux_gnu_nl_mmap_req_t.
        Section Impl_core_marker_Copy_for_libc_unix_linux_like_linux_gnu_nl_mmap_req_t.
          Definition Self : Set := libc.unix.linux_like.linux.gnu.nl_mmap_req.t.
          
          Global Instance ℐ : core.marker.Copy.Trait Self := {
          }.
        End Impl_core_marker_Copy_for_libc_unix_linux_like_linux_gnu_nl_mmap_req_t.
        End Impl_core_marker_Copy_for_libc_unix_linux_like_linux_gnu_nl_mmap_req_t.
        
        Module  Impl_core_clone_Clone_for_libc_unix_linux_like_linux_gnu_nl_mmap_req_t.
        Section Impl_core_clone_Clone_for_libc_unix_linux_like_linux_gnu_nl_mmap_req_t.
          Definition Self : Set := libc.unix.linux_like.linux.gnu.nl_mmap_req.t.
          
          (*
                      fn clone(&self) -> $i { *self }
          *)
          Definition clone
              (self : ref Self)
              : M libc.unix.linux_like.linux.gnu.nl_mmap_req.t :=
            let* self := M.alloc self in
            let* α0 : ref libc.unix.linux_like.linux.gnu.nl_mmap_req.t :=
              M.read self in
            M.read (deref α0).
          
          Global Instance AssociatedFunction_clone :
            Notations.DoubleColon Self "clone" := {
            Notations.double_colon := clone;
          }.
          
          Global Instance ℐ : core.clone.Clone.Required.Trait Self := {
            core.clone.Clone.clone := clone;
            core.clone.Clone.clone_from := Datatypes.None;
          }.
        End Impl_core_clone_Clone_for_libc_unix_linux_like_linux_gnu_nl_mmap_req_t.
        End Impl_core_clone_Clone_for_libc_unix_linux_like_linux_gnu_nl_mmap_req_t.
        
        Module  nl_mmap_hdr.
        Section nl_mmap_hdr.
          Record t : Set := {
            nm_status : ltac:(libc.unix.c_uint);
            nm_len : ltac:(libc.unix.c_uint);
            nm_group : u32.t;
            nm_pid : u32.t;
            nm_uid : u32.t;
            nm_gid : u32.t;
          }.
          
          Definition Get_nm_status :=
            Ref.map
              (fun α => Some α.(nm_status))
              (fun β α => Some (α <| nm_status := β |>)).
          Definition Get_nm_len :=
            Ref.map
              (fun α => Some α.(nm_len))
              (fun β α => Some (α <| nm_len := β |>)).
          Definition Get_nm_group :=
            Ref.map
              (fun α => Some α.(nm_group))
              (fun β α => Some (α <| nm_group := β |>)).
          Definition Get_nm_pid :=
            Ref.map
              (fun α => Some α.(nm_pid))
              (fun β α => Some (α <| nm_pid := β |>)).
          Definition Get_nm_uid :=
            Ref.map
              (fun α => Some α.(nm_uid))
              (fun β α => Some (α <| nm_uid := β |>)).
          Definition Get_nm_gid :=
            Ref.map
              (fun α => Some α.(nm_gid))
              (fun β α => Some (α <| nm_gid := β |>)).
        End nl_mmap_hdr.
        End nl_mmap_hdr.
        
        Module  Impl_core_marker_Copy_for_libc_unix_linux_like_linux_gnu_nl_mmap_hdr_t.
        Section Impl_core_marker_Copy_for_libc_unix_linux_like_linux_gnu_nl_mmap_hdr_t.
          Definition Self : Set := libc.unix.linux_like.linux.gnu.nl_mmap_hdr.t.
          
          Global Instance ℐ : core.marker.Copy.Trait Self := {
          }.
        End Impl_core_marker_Copy_for_libc_unix_linux_like_linux_gnu_nl_mmap_hdr_t.
        End Impl_core_marker_Copy_for_libc_unix_linux_like_linux_gnu_nl_mmap_hdr_t.
        
        Module  Impl_core_clone_Clone_for_libc_unix_linux_like_linux_gnu_nl_mmap_hdr_t.
        Section Impl_core_clone_Clone_for_libc_unix_linux_like_linux_gnu_nl_mmap_hdr_t.
          Definition Self : Set := libc.unix.linux_like.linux.gnu.nl_mmap_hdr.t.
          
          (*
                      fn clone(&self) -> $i { *self }
          *)
          Definition clone
              (self : ref Self)
              : M libc.unix.linux_like.linux.gnu.nl_mmap_hdr.t :=
            let* self := M.alloc self in
            let* α0 : ref libc.unix.linux_like.linux.gnu.nl_mmap_hdr.t :=
              M.read self in
            M.read (deref α0).
          
          Global Instance AssociatedFunction_clone :
            Notations.DoubleColon Self "clone" := {
            Notations.double_colon := clone;
          }.
          
          Global Instance ℐ : core.clone.Clone.Required.Trait Self := {
            core.clone.Clone.clone := clone;
            core.clone.Clone.clone_from := Datatypes.None;
          }.
        End Impl_core_clone_Clone_for_libc_unix_linux_like_linux_gnu_nl_mmap_hdr_t.
        End Impl_core_clone_Clone_for_libc_unix_linux_like_linux_gnu_nl_mmap_hdr_t.
        
        Module  rtentry.
        Section rtentry.
          Record t : Set := {
            rt_pad1 :
              ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_ulong);
            rt_dst : libc.unix.linux_like.sockaddr.t;
            rt_gateway : libc.unix.linux_like.sockaddr.t;
            rt_genmask : libc.unix.linux_like.sockaddr.t;
            rt_flags : ltac:(libc.unix.c_ushort);
            rt_pad2 : ltac:(libc.unix.c_short);
            rt_pad3 :
              ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_ulong);
            rt_tos : ltac:(libc.unix.c_uchar);
            rt_class : ltac:(libc.unix.c_uchar);
            rt_pad4 : array ltac:(libc.unix.c_short);
            rt_metric : ltac:(libc.unix.c_short);
            rt_dev :
              mut_ref ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.c_char);
            rt_mtu :
              ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_ulong);
            rt_window :
              ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_ulong);
            rt_irtt : ltac:(libc.unix.c_ushort);
          }.
          
          Definition Get_rt_pad1 :=
            Ref.map
              (fun α => Some α.(rt_pad1))
              (fun β α => Some (α <| rt_pad1 := β |>)).
          Definition Get_rt_dst :=
            Ref.map
              (fun α => Some α.(rt_dst))
              (fun β α => Some (α <| rt_dst := β |>)).
          Definition Get_rt_gateway :=
            Ref.map
              (fun α => Some α.(rt_gateway))
              (fun β α => Some (α <| rt_gateway := β |>)).
          Definition Get_rt_genmask :=
            Ref.map
              (fun α => Some α.(rt_genmask))
              (fun β α => Some (α <| rt_genmask := β |>)).
          Definition Get_rt_flags :=
            Ref.map
              (fun α => Some α.(rt_flags))
              (fun β α => Some (α <| rt_flags := β |>)).
          Definition Get_rt_pad2 :=
            Ref.map
              (fun α => Some α.(rt_pad2))
              (fun β α => Some (α <| rt_pad2 := β |>)).
          Definition Get_rt_pad3 :=
            Ref.map
              (fun α => Some α.(rt_pad3))
              (fun β α => Some (α <| rt_pad3 := β |>)).
          Definition Get_rt_tos :=
            Ref.map
              (fun α => Some α.(rt_tos))
              (fun β α => Some (α <| rt_tos := β |>)).
          Definition Get_rt_class :=
            Ref.map
              (fun α => Some α.(rt_class))
              (fun β α => Some (α <| rt_class := β |>)).
          Definition Get_rt_pad4 :=
            Ref.map
              (fun α => Some α.(rt_pad4))
              (fun β α => Some (α <| rt_pad4 := β |>)).
          Definition Get_rt_metric :=
            Ref.map
              (fun α => Some α.(rt_metric))
              (fun β α => Some (α <| rt_metric := β |>)).
          Definition Get_rt_dev :=
            Ref.map
              (fun α => Some α.(rt_dev))
              (fun β α => Some (α <| rt_dev := β |>)).
          Definition Get_rt_mtu :=
            Ref.map
              (fun α => Some α.(rt_mtu))
              (fun β α => Some (α <| rt_mtu := β |>)).
          Definition Get_rt_window :=
            Ref.map
              (fun α => Some α.(rt_window))
              (fun β α => Some (α <| rt_window := β |>)).
          Definition Get_rt_irtt :=
            Ref.map
              (fun α => Some α.(rt_irtt))
              (fun β α => Some (α <| rt_irtt := β |>)).
        End rtentry.
        End rtentry.
        
        Module  Impl_core_marker_Copy_for_libc_unix_linux_like_linux_gnu_rtentry_t.
        Section Impl_core_marker_Copy_for_libc_unix_linux_like_linux_gnu_rtentry_t.
          Definition Self : Set := libc.unix.linux_like.linux.gnu.rtentry.t.
          
          Global Instance ℐ : core.marker.Copy.Trait Self := {
          }.
        End Impl_core_marker_Copy_for_libc_unix_linux_like_linux_gnu_rtentry_t.
        End Impl_core_marker_Copy_for_libc_unix_linux_like_linux_gnu_rtentry_t.
        
        Module  Impl_core_clone_Clone_for_libc_unix_linux_like_linux_gnu_rtentry_t.
        Section Impl_core_clone_Clone_for_libc_unix_linux_like_linux_gnu_rtentry_t.
          Definition Self : Set := libc.unix.linux_like.linux.gnu.rtentry.t.
          
          (*
                      fn clone(&self) -> $i { *self }
          *)
          Definition clone
              (self : ref Self)
              : M libc.unix.linux_like.linux.gnu.rtentry.t :=
            let* self := M.alloc self in
            let* α0 : ref libc.unix.linux_like.linux.gnu.rtentry.t :=
              M.read self in
            M.read (deref α0).
          
          Global Instance AssociatedFunction_clone :
            Notations.DoubleColon Self "clone" := {
            Notations.double_colon := clone;
          }.
          
          Global Instance ℐ : core.clone.Clone.Required.Trait Self := {
            core.clone.Clone.clone := clone;
            core.clone.Clone.clone_from := Datatypes.None;
          }.
        End Impl_core_clone_Clone_for_libc_unix_linux_like_linux_gnu_rtentry_t.
        End Impl_core_clone_Clone_for_libc_unix_linux_like_linux_gnu_rtentry_t.
        
        Module  timex.
        Section timex.
          Record t : Set := {
            modes : ltac:(libc.unix.c_uint);
            offset :
              ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_long);
            freq :
              ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_long);
            maxerror :
              ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_long);
            esterror :
              ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_long);
            status : ltac:(libc.unix.c_int);
            constant :
              ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_long);
            precision :
              ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_long);
            tolerance :
              ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_long);
            time : libc.unix.timeval.t;
            tick :
              ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_long);
            ppsfreq :
              ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_long);
            jitter :
              ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_long);
            shift : ltac:(libc.unix.c_int);
            stabil :
              ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_long);
            jitcnt :
              ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_long);
            calcnt :
              ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_long);
            errcnt :
              ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_long);
            stbcnt :
              ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_long);
            tai : ltac:(libc.unix.c_int);
            __unused1 : i32.t;
            __unused2 : i32.t;
            __unused3 : i32.t;
            __unused4 : i32.t;
            __unused5 : i32.t;
            __unused6 : i32.t;
            __unused7 : i32.t;
            __unused8 : i32.t;
            __unused9 : i32.t;
            __unused10 : i32.t;
            __unused11 : i32.t;
          }.
          
          Definition Get_modes :=
            Ref.map
              (fun α => Some α.(modes))
              (fun β α => Some (α <| modes := β |>)).
          Definition Get_offset :=
            Ref.map
              (fun α => Some α.(offset))
              (fun β α => Some (α <| offset := β |>)).
          Definition Get_freq :=
            Ref.map
              (fun α => Some α.(freq))
              (fun β α => Some (α <| freq := β |>)).
          Definition Get_maxerror :=
            Ref.map
              (fun α => Some α.(maxerror))
              (fun β α => Some (α <| maxerror := β |>)).
          Definition Get_esterror :=
            Ref.map
              (fun α => Some α.(esterror))
              (fun β α => Some (α <| esterror := β |>)).
          Definition Get_status :=
            Ref.map
              (fun α => Some α.(status))
              (fun β α => Some (α <| status := β |>)).
          Definition Get_constant :=
            Ref.map
              (fun α => Some α.(constant))
              (fun β α => Some (α <| constant := β |>)).
          Definition Get_precision :=
            Ref.map
              (fun α => Some α.(precision))
              (fun β α => Some (α <| precision := β |>)).
          Definition Get_tolerance :=
            Ref.map
              (fun α => Some α.(tolerance))
              (fun β α => Some (α <| tolerance := β |>)).
          Definition Get_time :=
            Ref.map
              (fun α => Some α.(time))
              (fun β α => Some (α <| time := β |>)).
          Definition Get_tick :=
            Ref.map
              (fun α => Some α.(tick))
              (fun β α => Some (α <| tick := β |>)).
          Definition Get_ppsfreq :=
            Ref.map
              (fun α => Some α.(ppsfreq))
              (fun β α => Some (α <| ppsfreq := β |>)).
          Definition Get_jitter :=
            Ref.map
              (fun α => Some α.(jitter))
              (fun β α => Some (α <| jitter := β |>)).
          Definition Get_shift :=
            Ref.map
              (fun α => Some α.(shift))
              (fun β α => Some (α <| shift := β |>)).
          Definition Get_stabil :=
            Ref.map
              (fun α => Some α.(stabil))
              (fun β α => Some (α <| stabil := β |>)).
          Definition Get_jitcnt :=
            Ref.map
              (fun α => Some α.(jitcnt))
              (fun β α => Some (α <| jitcnt := β |>)).
          Definition Get_calcnt :=
            Ref.map
              (fun α => Some α.(calcnt))
              (fun β α => Some (α <| calcnt := β |>)).
          Definition Get_errcnt :=
            Ref.map
              (fun α => Some α.(errcnt))
              (fun β α => Some (α <| errcnt := β |>)).
          Definition Get_stbcnt :=
            Ref.map
              (fun α => Some α.(stbcnt))
              (fun β α => Some (α <| stbcnt := β |>)).
          Definition Get_tai :=
            Ref.map
              (fun α => Some α.(tai))
              (fun β α => Some (α <| tai := β |>)).
          Definition Get___unused1 :=
            Ref.map
              (fun α => Some α.(__unused1))
              (fun β α => Some (α <| __unused1 := β |>)).
          Definition Get___unused2 :=
            Ref.map
              (fun α => Some α.(__unused2))
              (fun β α => Some (α <| __unused2 := β |>)).
          Definition Get___unused3 :=
            Ref.map
              (fun α => Some α.(__unused3))
              (fun β α => Some (α <| __unused3 := β |>)).
          Definition Get___unused4 :=
            Ref.map
              (fun α => Some α.(__unused4))
              (fun β α => Some (α <| __unused4 := β |>)).
          Definition Get___unused5 :=
            Ref.map
              (fun α => Some α.(__unused5))
              (fun β α => Some (α <| __unused5 := β |>)).
          Definition Get___unused6 :=
            Ref.map
              (fun α => Some α.(__unused6))
              (fun β α => Some (α <| __unused6 := β |>)).
          Definition Get___unused7 :=
            Ref.map
              (fun α => Some α.(__unused7))
              (fun β α => Some (α <| __unused7 := β |>)).
          Definition Get___unused8 :=
            Ref.map
              (fun α => Some α.(__unused8))
              (fun β α => Some (α <| __unused8 := β |>)).
          Definition Get___unused9 :=
            Ref.map
              (fun α => Some α.(__unused9))
              (fun β α => Some (α <| __unused9 := β |>)).
          Definition Get___unused10 :=
            Ref.map
              (fun α => Some α.(__unused10))
              (fun β α => Some (α <| __unused10 := β |>)).
          Definition Get___unused11 :=
            Ref.map
              (fun α => Some α.(__unused11))
              (fun β α => Some (α <| __unused11 := β |>)).
        End timex.
        End timex.
        
        Module  Impl_core_marker_Copy_for_libc_unix_linux_like_linux_gnu_timex_t.
        Section Impl_core_marker_Copy_for_libc_unix_linux_like_linux_gnu_timex_t.
          Definition Self : Set := libc.unix.linux_like.linux.gnu.timex.t.
          
          Global Instance ℐ : core.marker.Copy.Trait Self := {
          }.
        End Impl_core_marker_Copy_for_libc_unix_linux_like_linux_gnu_timex_t.
        End Impl_core_marker_Copy_for_libc_unix_linux_like_linux_gnu_timex_t.
        
        Module  Impl_core_clone_Clone_for_libc_unix_linux_like_linux_gnu_timex_t.
        Section Impl_core_clone_Clone_for_libc_unix_linux_like_linux_gnu_timex_t.
          Definition Self : Set := libc.unix.linux_like.linux.gnu.timex.t.
          
          (*
                      fn clone(&self) -> $i { *self }
          *)
          Definition clone
              (self : ref Self)
              : M libc.unix.linux_like.linux.gnu.timex.t :=
            let* self := M.alloc self in
            let* α0 : ref libc.unix.linux_like.linux.gnu.timex.t :=
              M.read self in
            M.read (deref α0).
          
          Global Instance AssociatedFunction_clone :
            Notations.DoubleColon Self "clone" := {
            Notations.double_colon := clone;
          }.
          
          Global Instance ℐ : core.clone.Clone.Required.Trait Self := {
            core.clone.Clone.clone := clone;
            core.clone.Clone.clone_from := Datatypes.None;
          }.
        End Impl_core_clone_Clone_for_libc_unix_linux_like_linux_gnu_timex_t.
        End Impl_core_clone_Clone_for_libc_unix_linux_like_linux_gnu_timex_t.
        
        Module  ntptimeval.
        Section ntptimeval.
          Record t : Set := {
            time : libc.unix.timeval.t;
            maxerror :
              ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_long);
            esterror :
              ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_long);
            tai :
              ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_long);
            __glibc_reserved1 :
              ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_long);
            __glibc_reserved2 :
              ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_long);
            __glibc_reserved3 :
              ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_long);
            __glibc_reserved4 :
              ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_long);
          }.
          
          Definition Get_time :=
            Ref.map
              (fun α => Some α.(time))
              (fun β α => Some (α <| time := β |>)).
          Definition Get_maxerror :=
            Ref.map
              (fun α => Some α.(maxerror))
              (fun β α => Some (α <| maxerror := β |>)).
          Definition Get_esterror :=
            Ref.map
              (fun α => Some α.(esterror))
              (fun β α => Some (α <| esterror := β |>)).
          Definition Get_tai :=
            Ref.map
              (fun α => Some α.(tai))
              (fun β α => Some (α <| tai := β |>)).
          Definition Get___glibc_reserved1 :=
            Ref.map
              (fun α => Some α.(__glibc_reserved1))
              (fun β α => Some (α <| __glibc_reserved1 := β |>)).
          Definition Get___glibc_reserved2 :=
            Ref.map
              (fun α => Some α.(__glibc_reserved2))
              (fun β α => Some (α <| __glibc_reserved2 := β |>)).
          Definition Get___glibc_reserved3 :=
            Ref.map
              (fun α => Some α.(__glibc_reserved3))
              (fun β α => Some (α <| __glibc_reserved3 := β |>)).
          Definition Get___glibc_reserved4 :=
            Ref.map
              (fun α => Some α.(__glibc_reserved4))
              (fun β α => Some (α <| __glibc_reserved4 := β |>)).
        End ntptimeval.
        End ntptimeval.
        
        Module  Impl_core_marker_Copy_for_libc_unix_linux_like_linux_gnu_ntptimeval_t.
        Section Impl_core_marker_Copy_for_libc_unix_linux_like_linux_gnu_ntptimeval_t.
          Definition Self : Set := libc.unix.linux_like.linux.gnu.ntptimeval.t.
          
          Global Instance ℐ : core.marker.Copy.Trait Self := {
          }.
        End Impl_core_marker_Copy_for_libc_unix_linux_like_linux_gnu_ntptimeval_t.
        End Impl_core_marker_Copy_for_libc_unix_linux_like_linux_gnu_ntptimeval_t.
        
        Module  Impl_core_clone_Clone_for_libc_unix_linux_like_linux_gnu_ntptimeval_t.
        Section Impl_core_clone_Clone_for_libc_unix_linux_like_linux_gnu_ntptimeval_t.
          Definition Self : Set := libc.unix.linux_like.linux.gnu.ntptimeval.t.
          
          (*
                      fn clone(&self) -> $i { *self }
          *)
          Definition clone
              (self : ref Self)
              : M libc.unix.linux_like.linux.gnu.ntptimeval.t :=
            let* self := M.alloc self in
            let* α0 : ref libc.unix.linux_like.linux.gnu.ntptimeval.t :=
              M.read self in
            M.read (deref α0).
          
          Global Instance AssociatedFunction_clone :
            Notations.DoubleColon Self "clone" := {
            Notations.double_colon := clone;
          }.
          
          Global Instance ℐ : core.clone.Clone.Required.Trait Self := {
            core.clone.Clone.clone := clone;
            core.clone.Clone.clone_from := Datatypes.None;
          }.
        End Impl_core_clone_Clone_for_libc_unix_linux_like_linux_gnu_ntptimeval_t.
        End Impl_core_clone_Clone_for_libc_unix_linux_like_linux_gnu_ntptimeval_t.
        
        Module  regex_t.
        Section regex_t.
          Record t : Set := {
            __buffer : mut_ref core.ffi.c_void.t;
            __allocated : ltac:(libc.unix.size_t);
            __used : ltac:(libc.unix.size_t);
            __syntax :
              ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_ulong);
            __fastmap :
              mut_ref ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.c_char);
            __translate :
              mut_ref ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.c_char);
            __re_nsub : ltac:(libc.unix.size_t);
            __bitfield : u8.t;
          }.
          
          Definition Get___buffer :=
            Ref.map
              (fun α => Some α.(__buffer))
              (fun β α => Some (α <| __buffer := β |>)).
          Definition Get___allocated :=
            Ref.map
              (fun α => Some α.(__allocated))
              (fun β α => Some (α <| __allocated := β |>)).
          Definition Get___used :=
            Ref.map
              (fun α => Some α.(__used))
              (fun β α => Some (α <| __used := β |>)).
          Definition Get___syntax :=
            Ref.map
              (fun α => Some α.(__syntax))
              (fun β α => Some (α <| __syntax := β |>)).
          Definition Get___fastmap :=
            Ref.map
              (fun α => Some α.(__fastmap))
              (fun β α => Some (α <| __fastmap := β |>)).
          Definition Get___translate :=
            Ref.map
              (fun α => Some α.(__translate))
              (fun β α => Some (α <| __translate := β |>)).
          Definition Get___re_nsub :=
            Ref.map
              (fun α => Some α.(__re_nsub))
              (fun β α => Some (α <| __re_nsub := β |>)).
          Definition Get___bitfield :=
            Ref.map
              (fun α => Some α.(__bitfield))
              (fun β α => Some (α <| __bitfield := β |>)).
        End regex_t.
        End regex_t.
        
        Module  Impl_core_marker_Copy_for_libc_unix_linux_like_linux_gnu_regex_t_t.
        Section Impl_core_marker_Copy_for_libc_unix_linux_like_linux_gnu_regex_t_t.
          Definition Self : Set := libc.unix.linux_like.linux.gnu.regex_t.t.
          
          Global Instance ℐ : core.marker.Copy.Trait Self := {
          }.
        End Impl_core_marker_Copy_for_libc_unix_linux_like_linux_gnu_regex_t_t.
        End Impl_core_marker_Copy_for_libc_unix_linux_like_linux_gnu_regex_t_t.
        
        Module  Impl_core_clone_Clone_for_libc_unix_linux_like_linux_gnu_regex_t_t.
        Section Impl_core_clone_Clone_for_libc_unix_linux_like_linux_gnu_regex_t_t.
          Definition Self : Set := libc.unix.linux_like.linux.gnu.regex_t.t.
          
          (*
                      fn clone(&self) -> $i { *self }
          *)
          Definition clone
              (self : ref Self)
              : M libc.unix.linux_like.linux.gnu.regex_t.t :=
            let* self := M.alloc self in
            let* α0 : ref libc.unix.linux_like.linux.gnu.regex_t.t :=
              M.read self in
            M.read (deref α0).
          
          Global Instance AssociatedFunction_clone :
            Notations.DoubleColon Self "clone" := {
            Notations.double_colon := clone;
          }.
          
          Global Instance ℐ : core.clone.Clone.Required.Trait Self := {
            core.clone.Clone.clone := clone;
            core.clone.Clone.clone_from := Datatypes.None;
          }.
        End Impl_core_clone_Clone_for_libc_unix_linux_like_linux_gnu_regex_t_t.
        End Impl_core_clone_Clone_for_libc_unix_linux_like_linux_gnu_regex_t_t.
        
        Module  Elf64_Chdr.
        Section Elf64_Chdr.
          Record t : Set := {
            ch_type : ltac:(libc.unix.linux_like.linux.Elf64_Word);
            ch_reserved : ltac:(libc.unix.linux_like.linux.Elf64_Word);
            ch_size : ltac:(libc.unix.linux_like.linux.Elf64_Xword);
            ch_addralign : ltac:(libc.unix.linux_like.linux.Elf64_Xword);
          }.
          
          Definition Get_ch_type :=
            Ref.map
              (fun α => Some α.(ch_type))
              (fun β α => Some (α <| ch_type := β |>)).
          Definition Get_ch_reserved :=
            Ref.map
              (fun α => Some α.(ch_reserved))
              (fun β α => Some (α <| ch_reserved := β |>)).
          Definition Get_ch_size :=
            Ref.map
              (fun α => Some α.(ch_size))
              (fun β α => Some (α <| ch_size := β |>)).
          Definition Get_ch_addralign :=
            Ref.map
              (fun α => Some α.(ch_addralign))
              (fun β α => Some (α <| ch_addralign := β |>)).
        End Elf64_Chdr.
        End Elf64_Chdr.
        
        Module  Impl_core_marker_Copy_for_libc_unix_linux_like_linux_gnu_Elf64_Chdr_t.
        Section Impl_core_marker_Copy_for_libc_unix_linux_like_linux_gnu_Elf64_Chdr_t.
          Definition Self : Set := libc.unix.linux_like.linux.gnu.Elf64_Chdr.t.
          
          Global Instance ℐ : core.marker.Copy.Trait Self := {
          }.
        End Impl_core_marker_Copy_for_libc_unix_linux_like_linux_gnu_Elf64_Chdr_t.
        End Impl_core_marker_Copy_for_libc_unix_linux_like_linux_gnu_Elf64_Chdr_t.
        
        Module  Impl_core_clone_Clone_for_libc_unix_linux_like_linux_gnu_Elf64_Chdr_t.
        Section Impl_core_clone_Clone_for_libc_unix_linux_like_linux_gnu_Elf64_Chdr_t.
          Definition Self : Set := libc.unix.linux_like.linux.gnu.Elf64_Chdr.t.
          
          (*
                      fn clone(&self) -> $i { *self }
          *)
          Definition clone
              (self : ref Self)
              : M libc.unix.linux_like.linux.gnu.Elf64_Chdr.t :=
            let* self := M.alloc self in
            let* α0 : ref libc.unix.linux_like.linux.gnu.Elf64_Chdr.t :=
              M.read self in
            M.read (deref α0).
          
          Global Instance AssociatedFunction_clone :
            Notations.DoubleColon Self "clone" := {
            Notations.double_colon := clone;
          }.
          
          Global Instance ℐ : core.clone.Clone.Required.Trait Self := {
            core.clone.Clone.clone := clone;
            core.clone.Clone.clone_from := Datatypes.None;
          }.
        End Impl_core_clone_Clone_for_libc_unix_linux_like_linux_gnu_Elf64_Chdr_t.
        End Impl_core_clone_Clone_for_libc_unix_linux_like_linux_gnu_Elf64_Chdr_t.
        
        Module  Elf32_Chdr.
        Section Elf32_Chdr.
          Record t : Set := {
            ch_type : ltac:(libc.unix.linux_like.linux.Elf32_Word);
            ch_size : ltac:(libc.unix.linux_like.linux.Elf32_Word);
            ch_addralign : ltac:(libc.unix.linux_like.linux.Elf32_Word);
          }.
          
          Definition Get_ch_type :=
            Ref.map
              (fun α => Some α.(ch_type))
              (fun β α => Some (α <| ch_type := β |>)).
          Definition Get_ch_size :=
            Ref.map
              (fun α => Some α.(ch_size))
              (fun β α => Some (α <| ch_size := β |>)).
          Definition Get_ch_addralign :=
            Ref.map
              (fun α => Some α.(ch_addralign))
              (fun β α => Some (α <| ch_addralign := β |>)).
        End Elf32_Chdr.
        End Elf32_Chdr.
        
        Module  Impl_core_marker_Copy_for_libc_unix_linux_like_linux_gnu_Elf32_Chdr_t.
        Section Impl_core_marker_Copy_for_libc_unix_linux_like_linux_gnu_Elf32_Chdr_t.
          Definition Self : Set := libc.unix.linux_like.linux.gnu.Elf32_Chdr.t.
          
          Global Instance ℐ : core.marker.Copy.Trait Self := {
          }.
        End Impl_core_marker_Copy_for_libc_unix_linux_like_linux_gnu_Elf32_Chdr_t.
        End Impl_core_marker_Copy_for_libc_unix_linux_like_linux_gnu_Elf32_Chdr_t.
        
        Module  Impl_core_clone_Clone_for_libc_unix_linux_like_linux_gnu_Elf32_Chdr_t.
        Section Impl_core_clone_Clone_for_libc_unix_linux_like_linux_gnu_Elf32_Chdr_t.
          Definition Self : Set := libc.unix.linux_like.linux.gnu.Elf32_Chdr.t.
          
          (*
                      fn clone(&self) -> $i { *self }
          *)
          Definition clone
              (self : ref Self)
              : M libc.unix.linux_like.linux.gnu.Elf32_Chdr.t :=
            let* self := M.alloc self in
            let* α0 : ref libc.unix.linux_like.linux.gnu.Elf32_Chdr.t :=
              M.read self in
            M.read (deref α0).
          
          Global Instance AssociatedFunction_clone :
            Notations.DoubleColon Self "clone" := {
            Notations.double_colon := clone;
          }.
          
          Global Instance ℐ : core.clone.Clone.Required.Trait Self := {
            core.clone.Clone.clone := clone;
            core.clone.Clone.clone_from := Datatypes.None;
          }.
        End Impl_core_clone_Clone_for_libc_unix_linux_like_linux_gnu_Elf32_Chdr_t.
        End Impl_core_clone_Clone_for_libc_unix_linux_like_linux_gnu_Elf32_Chdr_t.
        
        Module  seminfo.
        Section seminfo.
          Record t : Set := {
            semmap : ltac:(libc.unix.c_int);
            semmni : ltac:(libc.unix.c_int);
            semmns : ltac:(libc.unix.c_int);
            semmnu : ltac:(libc.unix.c_int);
            semmsl : ltac:(libc.unix.c_int);
            semopm : ltac:(libc.unix.c_int);
            semume : ltac:(libc.unix.c_int);
            semusz : ltac:(libc.unix.c_int);
            semvmx : ltac:(libc.unix.c_int);
            semaem : ltac:(libc.unix.c_int);
          }.
          
          Definition Get_semmap :=
            Ref.map
              (fun α => Some α.(semmap))
              (fun β α => Some (α <| semmap := β |>)).
          Definition Get_semmni :=
            Ref.map
              (fun α => Some α.(semmni))
              (fun β α => Some (α <| semmni := β |>)).
          Definition Get_semmns :=
            Ref.map
              (fun α => Some α.(semmns))
              (fun β α => Some (α <| semmns := β |>)).
          Definition Get_semmnu :=
            Ref.map
              (fun α => Some α.(semmnu))
              (fun β α => Some (α <| semmnu := β |>)).
          Definition Get_semmsl :=
            Ref.map
              (fun α => Some α.(semmsl))
              (fun β α => Some (α <| semmsl := β |>)).
          Definition Get_semopm :=
            Ref.map
              (fun α => Some α.(semopm))
              (fun β α => Some (α <| semopm := β |>)).
          Definition Get_semume :=
            Ref.map
              (fun α => Some α.(semume))
              (fun β α => Some (α <| semume := β |>)).
          Definition Get_semusz :=
            Ref.map
              (fun α => Some α.(semusz))
              (fun β α => Some (α <| semusz := β |>)).
          Definition Get_semvmx :=
            Ref.map
              (fun α => Some α.(semvmx))
              (fun β α => Some (α <| semvmx := β |>)).
          Definition Get_semaem :=
            Ref.map
              (fun α => Some α.(semaem))
              (fun β α => Some (α <| semaem := β |>)).
        End seminfo.
        End seminfo.
        
        Module  Impl_core_marker_Copy_for_libc_unix_linux_like_linux_gnu_seminfo_t.
        Section Impl_core_marker_Copy_for_libc_unix_linux_like_linux_gnu_seminfo_t.
          Definition Self : Set := libc.unix.linux_like.linux.gnu.seminfo.t.
          
          Global Instance ℐ : core.marker.Copy.Trait Self := {
          }.
        End Impl_core_marker_Copy_for_libc_unix_linux_like_linux_gnu_seminfo_t.
        End Impl_core_marker_Copy_for_libc_unix_linux_like_linux_gnu_seminfo_t.
        
        Module  Impl_core_clone_Clone_for_libc_unix_linux_like_linux_gnu_seminfo_t.
        Section Impl_core_clone_Clone_for_libc_unix_linux_like_linux_gnu_seminfo_t.
          Definition Self : Set := libc.unix.linux_like.linux.gnu.seminfo.t.
          
          (*
                      fn clone(&self) -> $i { *self }
          *)
          Definition clone
              (self : ref Self)
              : M libc.unix.linux_like.linux.gnu.seminfo.t :=
            let* self := M.alloc self in
            let* α0 : ref libc.unix.linux_like.linux.gnu.seminfo.t :=
              M.read self in
            M.read (deref α0).
          
          Global Instance AssociatedFunction_clone :
            Notations.DoubleColon Self "clone" := {
            Notations.double_colon := clone;
          }.
          
          Global Instance ℐ : core.clone.Clone.Required.Trait Self := {
            core.clone.Clone.clone := clone;
            core.clone.Clone.clone_from := Datatypes.None;
          }.
        End Impl_core_clone_Clone_for_libc_unix_linux_like_linux_gnu_seminfo_t.
        End Impl_core_clone_Clone_for_libc_unix_linux_like_linux_gnu_seminfo_t.
        
        Module  ptrace_peeksiginfo_args.
        Section ptrace_peeksiginfo_args.
          Record t : Set := {
            off : ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.__u64);
            flags : ltac:(libc.unix.linux_like.linux.__u32);
            nr : ltac:(libc.unix.linux_like.linux.__s32);
          }.
          
          Definition Get_off :=
            Ref.map
              (fun α => Some α.(off))
              (fun β α => Some (α <| off := β |>)).
          Definition Get_flags :=
            Ref.map
              (fun α => Some α.(flags))
              (fun β α => Some (α <| flags := β |>)).
          Definition Get_nr :=
            Ref.map (fun α => Some α.(nr)) (fun β α => Some (α <| nr := β |>)).
        End ptrace_peeksiginfo_args.
        End ptrace_peeksiginfo_args.
        
        Module  Impl_core_marker_Copy_for_libc_unix_linux_like_linux_gnu_ptrace_peeksiginfo_args_t.
        Section Impl_core_marker_Copy_for_libc_unix_linux_like_linux_gnu_ptrace_peeksiginfo_args_t.
          Definition Self : Set :=
            libc.unix.linux_like.linux.gnu.ptrace_peeksiginfo_args.t.
          
          Global Instance ℐ : core.marker.Copy.Trait Self := {
          }.
        End Impl_core_marker_Copy_for_libc_unix_linux_like_linux_gnu_ptrace_peeksiginfo_args_t.
        End Impl_core_marker_Copy_for_libc_unix_linux_like_linux_gnu_ptrace_peeksiginfo_args_t.
        
        Module  Impl_core_clone_Clone_for_libc_unix_linux_like_linux_gnu_ptrace_peeksiginfo_args_t.
        Section Impl_core_clone_Clone_for_libc_unix_linux_like_linux_gnu_ptrace_peeksiginfo_args_t.
          Definition Self : Set :=
            libc.unix.linux_like.linux.gnu.ptrace_peeksiginfo_args.t.
          
          (*
                      fn clone(&self) -> $i { *self }
          *)
          Definition clone
              (self : ref Self)
              : M libc.unix.linux_like.linux.gnu.ptrace_peeksiginfo_args.t :=
            let* self := M.alloc self in
            let* α0 :
                ref libc.unix.linux_like.linux.gnu.ptrace_peeksiginfo_args.t :=
              M.read self in
            M.read (deref α0).
          
          Global Instance AssociatedFunction_clone :
            Notations.DoubleColon Self "clone" := {
            Notations.double_colon := clone;
          }.
          
          Global Instance ℐ : core.clone.Clone.Required.Trait Self := {
            core.clone.Clone.clone := clone;
            core.clone.Clone.clone_from := Datatypes.None;
          }.
        End Impl_core_clone_Clone_for_libc_unix_linux_like_linux_gnu_ptrace_peeksiginfo_args_t.
        End Impl_core_clone_Clone_for_libc_unix_linux_like_linux_gnu_ptrace_peeksiginfo_args_t.
        
        Module  __c_anonymous_ptrace_syscall_info_entry.
        Section __c_anonymous_ptrace_syscall_info_entry.
          Record t : Set := {
            nr : ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.__u64);
            args : array ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.__u64);
          }.
          
          Definition Get_nr :=
            Ref.map (fun α => Some α.(nr)) (fun β α => Some (α <| nr := β |>)).
          Definition Get_args :=
            Ref.map
              (fun α => Some α.(args))
              (fun β α => Some (α <| args := β |>)).
        End __c_anonymous_ptrace_syscall_info_entry.
        End __c_anonymous_ptrace_syscall_info_entry.
        
        Module  Impl_core_marker_Copy_for_libc_unix_linux_like_linux_gnu___c_anonymous_ptrace_syscall_info_entry_t.
        Section Impl_core_marker_Copy_for_libc_unix_linux_like_linux_gnu___c_anonymous_ptrace_syscall_info_entry_t.
          Definition Self : Set :=
            libc.unix.linux_like.linux.gnu.__c_anonymous_ptrace_syscall_info_entry.t.
          
          Global Instance ℐ : core.marker.Copy.Trait Self := {
          }.
        End Impl_core_marker_Copy_for_libc_unix_linux_like_linux_gnu___c_anonymous_ptrace_syscall_info_entry_t.
        End Impl_core_marker_Copy_for_libc_unix_linux_like_linux_gnu___c_anonymous_ptrace_syscall_info_entry_t.
        
        Module  Impl_core_clone_Clone_for_libc_unix_linux_like_linux_gnu___c_anonymous_ptrace_syscall_info_entry_t.
        Section Impl_core_clone_Clone_for_libc_unix_linux_like_linux_gnu___c_anonymous_ptrace_syscall_info_entry_t.
          Definition Self : Set :=
            libc.unix.linux_like.linux.gnu.__c_anonymous_ptrace_syscall_info_entry.t.
          
          (*
                      fn clone(&self) -> $i { *self }
          *)
          Definition clone
              (self : ref Self)
              :
                M
                  libc.unix.linux_like.linux.gnu.__c_anonymous_ptrace_syscall_info_entry.t :=
            let* self := M.alloc self in
            let* α0 :
                ref
                  libc.unix.linux_like.linux.gnu.__c_anonymous_ptrace_syscall_info_entry.t :=
              M.read self in
            M.read (deref α0).
          
          Global Instance AssociatedFunction_clone :
            Notations.DoubleColon Self "clone" := {
            Notations.double_colon := clone;
          }.
          
          Global Instance ℐ : core.clone.Clone.Required.Trait Self := {
            core.clone.Clone.clone := clone;
            core.clone.Clone.clone_from := Datatypes.None;
          }.
        End Impl_core_clone_Clone_for_libc_unix_linux_like_linux_gnu___c_anonymous_ptrace_syscall_info_entry_t.
        End Impl_core_clone_Clone_for_libc_unix_linux_like_linux_gnu___c_anonymous_ptrace_syscall_info_entry_t.
        
        Module  __c_anonymous_ptrace_syscall_info_exit.
        Section __c_anonymous_ptrace_syscall_info_exit.
          Record t : Set := {
            sval : ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.__s64);
            is_error : ltac:(libc.unix.linux_like.linux.__u8);
          }.
          
          Definition Get_sval :=
            Ref.map
              (fun α => Some α.(sval))
              (fun β α => Some (α <| sval := β |>)).
          Definition Get_is_error :=
            Ref.map
              (fun α => Some α.(is_error))
              (fun β α => Some (α <| is_error := β |>)).
        End __c_anonymous_ptrace_syscall_info_exit.
        End __c_anonymous_ptrace_syscall_info_exit.
        
        Module  Impl_core_marker_Copy_for_libc_unix_linux_like_linux_gnu___c_anonymous_ptrace_syscall_info_exit_t.
        Section Impl_core_marker_Copy_for_libc_unix_linux_like_linux_gnu___c_anonymous_ptrace_syscall_info_exit_t.
          Definition Self : Set :=
            libc.unix.linux_like.linux.gnu.__c_anonymous_ptrace_syscall_info_exit.t.
          
          Global Instance ℐ : core.marker.Copy.Trait Self := {
          }.
        End Impl_core_marker_Copy_for_libc_unix_linux_like_linux_gnu___c_anonymous_ptrace_syscall_info_exit_t.
        End Impl_core_marker_Copy_for_libc_unix_linux_like_linux_gnu___c_anonymous_ptrace_syscall_info_exit_t.
        
        Module  Impl_core_clone_Clone_for_libc_unix_linux_like_linux_gnu___c_anonymous_ptrace_syscall_info_exit_t.
        Section Impl_core_clone_Clone_for_libc_unix_linux_like_linux_gnu___c_anonymous_ptrace_syscall_info_exit_t.
          Definition Self : Set :=
            libc.unix.linux_like.linux.gnu.__c_anonymous_ptrace_syscall_info_exit.t.
          
          (*
                      fn clone(&self) -> $i { *self }
          *)
          Definition clone
              (self : ref Self)
              :
                M
                  libc.unix.linux_like.linux.gnu.__c_anonymous_ptrace_syscall_info_exit.t :=
            let* self := M.alloc self in
            let* α0 :
                ref
                  libc.unix.linux_like.linux.gnu.__c_anonymous_ptrace_syscall_info_exit.t :=
              M.read self in
            M.read (deref α0).
          
          Global Instance AssociatedFunction_clone :
            Notations.DoubleColon Self "clone" := {
            Notations.double_colon := clone;
          }.
          
          Global Instance ℐ : core.clone.Clone.Required.Trait Self := {
            core.clone.Clone.clone := clone;
            core.clone.Clone.clone_from := Datatypes.None;
          }.
        End Impl_core_clone_Clone_for_libc_unix_linux_like_linux_gnu___c_anonymous_ptrace_syscall_info_exit_t.
        End Impl_core_clone_Clone_for_libc_unix_linux_like_linux_gnu___c_anonymous_ptrace_syscall_info_exit_t.
        
        Module  __c_anonymous_ptrace_syscall_info_seccomp.
        Section __c_anonymous_ptrace_syscall_info_seccomp.
          Record t : Set := {
            nr : ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.__u64);
            args : array ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.__u64);
            ret_data : ltac:(libc.unix.linux_like.linux.__u32);
          }.
          
          Definition Get_nr :=
            Ref.map (fun α => Some α.(nr)) (fun β α => Some (α <| nr := β |>)).
          Definition Get_args :=
            Ref.map
              (fun α => Some α.(args))
              (fun β α => Some (α <| args := β |>)).
          Definition Get_ret_data :=
            Ref.map
              (fun α => Some α.(ret_data))
              (fun β α => Some (α <| ret_data := β |>)).
        End __c_anonymous_ptrace_syscall_info_seccomp.
        End __c_anonymous_ptrace_syscall_info_seccomp.
        
        Module  Impl_core_marker_Copy_for_libc_unix_linux_like_linux_gnu___c_anonymous_ptrace_syscall_info_seccomp_t.
        Section Impl_core_marker_Copy_for_libc_unix_linux_like_linux_gnu___c_anonymous_ptrace_syscall_info_seccomp_t.
          Definition Self : Set :=
            libc.unix.linux_like.linux.gnu.__c_anonymous_ptrace_syscall_info_seccomp.t.
          
          Global Instance ℐ : core.marker.Copy.Trait Self := {
          }.
        End Impl_core_marker_Copy_for_libc_unix_linux_like_linux_gnu___c_anonymous_ptrace_syscall_info_seccomp_t.
        End Impl_core_marker_Copy_for_libc_unix_linux_like_linux_gnu___c_anonymous_ptrace_syscall_info_seccomp_t.
        
        Module  Impl_core_clone_Clone_for_libc_unix_linux_like_linux_gnu___c_anonymous_ptrace_syscall_info_seccomp_t.
        Section Impl_core_clone_Clone_for_libc_unix_linux_like_linux_gnu___c_anonymous_ptrace_syscall_info_seccomp_t.
          Definition Self : Set :=
            libc.unix.linux_like.linux.gnu.__c_anonymous_ptrace_syscall_info_seccomp.t.
          
          (*
                      fn clone(&self) -> $i { *self }
          *)
          Definition clone
              (self : ref Self)
              :
                M
                  libc.unix.linux_like.linux.gnu.__c_anonymous_ptrace_syscall_info_seccomp.t :=
            let* self := M.alloc self in
            let* α0 :
                ref
                  libc.unix.linux_like.linux.gnu.__c_anonymous_ptrace_syscall_info_seccomp.t :=
              M.read self in
            M.read (deref α0).
          
          Global Instance AssociatedFunction_clone :
            Notations.DoubleColon Self "clone" := {
            Notations.double_colon := clone;
          }.
          
          Global Instance ℐ : core.clone.Clone.Required.Trait Self := {
            core.clone.Clone.clone := clone;
            core.clone.Clone.clone_from := Datatypes.None;
          }.
        End Impl_core_clone_Clone_for_libc_unix_linux_like_linux_gnu___c_anonymous_ptrace_syscall_info_seccomp_t.
        End Impl_core_clone_Clone_for_libc_unix_linux_like_linux_gnu___c_anonymous_ptrace_syscall_info_seccomp_t.
        
        Module  ptrace_syscall_info.
        Section ptrace_syscall_info.
          Record t : Set := {
            op : ltac:(libc.unix.linux_like.linux.__u8);
            pad : array ltac:(libc.unix.linux_like.linux.__u8);
            arch : ltac:(libc.unix.linux_like.linux.__u32);
            instruction_pointer :
              ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.__u64);
            stack_pointer :
              ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.__u64);
            u :
              libc.unix.linux_like.linux.gnu.__c_anonymous_ptrace_syscall_info_data.t;
          }.
          
          Definition Get_op :=
            Ref.map (fun α => Some α.(op)) (fun β α => Some (α <| op := β |>)).
          Definition Get_pad :=
            Ref.map
              (fun α => Some α.(pad))
              (fun β α => Some (α <| pad := β |>)).
          Definition Get_arch :=
            Ref.map
              (fun α => Some α.(arch))
              (fun β α => Some (α <| arch := β |>)).
          Definition Get_instruction_pointer :=
            Ref.map
              (fun α => Some α.(instruction_pointer))
              (fun β α => Some (α <| instruction_pointer := β |>)).
          Definition Get_stack_pointer :=
            Ref.map
              (fun α => Some α.(stack_pointer))
              (fun β α => Some (α <| stack_pointer := β |>)).
          Definition Get_u :=
            Ref.map (fun α => Some α.(u)) (fun β α => Some (α <| u := β |>)).
        End ptrace_syscall_info.
        End ptrace_syscall_info.
        
        Module  Impl_core_marker_Copy_for_libc_unix_linux_like_linux_gnu_ptrace_syscall_info_t.
        Section Impl_core_marker_Copy_for_libc_unix_linux_like_linux_gnu_ptrace_syscall_info_t.
          Definition Self : Set :=
            libc.unix.linux_like.linux.gnu.ptrace_syscall_info.t.
          
          Global Instance ℐ : core.marker.Copy.Trait Self := {
          }.
        End Impl_core_marker_Copy_for_libc_unix_linux_like_linux_gnu_ptrace_syscall_info_t.
        End Impl_core_marker_Copy_for_libc_unix_linux_like_linux_gnu_ptrace_syscall_info_t.
        
        Module  Impl_core_clone_Clone_for_libc_unix_linux_like_linux_gnu_ptrace_syscall_info_t.
        Section Impl_core_clone_Clone_for_libc_unix_linux_like_linux_gnu_ptrace_syscall_info_t.
          Definition Self : Set :=
            libc.unix.linux_like.linux.gnu.ptrace_syscall_info.t.
          
          (*
                      fn clone(&self) -> $i { *self }
          *)
          Definition clone
              (self : ref Self)
              : M libc.unix.linux_like.linux.gnu.ptrace_syscall_info.t :=
            let* self := M.alloc self in
            let* α0 :
                ref libc.unix.linux_like.linux.gnu.ptrace_syscall_info.t :=
              M.read self in
            M.read (deref α0).
          
          Global Instance AssociatedFunction_clone :
            Notations.DoubleColon Self "clone" := {
            Notations.double_colon := clone;
          }.
          
          Global Instance ℐ : core.clone.Clone.Required.Trait Self := {
            core.clone.Clone.clone := clone;
            core.clone.Clone.clone_from := Datatypes.None;
          }.
        End Impl_core_clone_Clone_for_libc_unix_linux_like_linux_gnu_ptrace_syscall_info_t.
        End Impl_core_clone_Clone_for_libc_unix_linux_like_linux_gnu_ptrace_syscall_info_t.
        
        Module  sockaddr_xdp.
        Section sockaddr_xdp.
          Record t : Set := {
            sxdp_family : ltac:(libc.unix.linux_like.linux.__u16);
            sxdp_flags : ltac:(libc.unix.linux_like.linux.__u16);
            sxdp_ifindex : ltac:(libc.unix.linux_like.linux.__u32);
            sxdp_queue_id : ltac:(libc.unix.linux_like.linux.__u32);
            sxdp_shared_umem_fd : ltac:(libc.unix.linux_like.linux.__u32);
          }.
          
          Definition Get_sxdp_family :=
            Ref.map
              (fun α => Some α.(sxdp_family))
              (fun β α => Some (α <| sxdp_family := β |>)).
          Definition Get_sxdp_flags :=
            Ref.map
              (fun α => Some α.(sxdp_flags))
              (fun β α => Some (α <| sxdp_flags := β |>)).
          Definition Get_sxdp_ifindex :=
            Ref.map
              (fun α => Some α.(sxdp_ifindex))
              (fun β α => Some (α <| sxdp_ifindex := β |>)).
          Definition Get_sxdp_queue_id :=
            Ref.map
              (fun α => Some α.(sxdp_queue_id))
              (fun β α => Some (α <| sxdp_queue_id := β |>)).
          Definition Get_sxdp_shared_umem_fd :=
            Ref.map
              (fun α => Some α.(sxdp_shared_umem_fd))
              (fun β α => Some (α <| sxdp_shared_umem_fd := β |>)).
        End sockaddr_xdp.
        End sockaddr_xdp.
        
        Module  Impl_core_marker_Copy_for_libc_unix_linux_like_linux_gnu_sockaddr_xdp_t.
        Section Impl_core_marker_Copy_for_libc_unix_linux_like_linux_gnu_sockaddr_xdp_t.
          Definition Self : Set :=
            libc.unix.linux_like.linux.gnu.sockaddr_xdp.t.
          
          Global Instance ℐ : core.marker.Copy.Trait Self := {
          }.
        End Impl_core_marker_Copy_for_libc_unix_linux_like_linux_gnu_sockaddr_xdp_t.
        End Impl_core_marker_Copy_for_libc_unix_linux_like_linux_gnu_sockaddr_xdp_t.
        
        Module  Impl_core_clone_Clone_for_libc_unix_linux_like_linux_gnu_sockaddr_xdp_t.
        Section Impl_core_clone_Clone_for_libc_unix_linux_like_linux_gnu_sockaddr_xdp_t.
          Definition Self : Set :=
            libc.unix.linux_like.linux.gnu.sockaddr_xdp.t.
          
          (*
                      fn clone(&self) -> $i { *self }
          *)
          Definition clone
              (self : ref Self)
              : M libc.unix.linux_like.linux.gnu.sockaddr_xdp.t :=
            let* self := M.alloc self in
            let* α0 : ref libc.unix.linux_like.linux.gnu.sockaddr_xdp.t :=
              M.read self in
            M.read (deref α0).
          
          Global Instance AssociatedFunction_clone :
            Notations.DoubleColon Self "clone" := {
            Notations.double_colon := clone;
          }.
          
          Global Instance ℐ : core.clone.Clone.Required.Trait Self := {
            core.clone.Clone.clone := clone;
            core.clone.Clone.clone_from := Datatypes.None;
          }.
        End Impl_core_clone_Clone_for_libc_unix_linux_like_linux_gnu_sockaddr_xdp_t.
        End Impl_core_clone_Clone_for_libc_unix_linux_like_linux_gnu_sockaddr_xdp_t.
        
        Module  xdp_ring_offset.
        Section xdp_ring_offset.
          Record t : Set := {
            producer : ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.__u64);
            consumer : ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.__u64);
            desc : ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.__u64);
            flags : ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.__u64);
          }.
          
          Definition Get_producer :=
            Ref.map
              (fun α => Some α.(producer))
              (fun β α => Some (α <| producer := β |>)).
          Definition Get_consumer :=
            Ref.map
              (fun α => Some α.(consumer))
              (fun β α => Some (α <| consumer := β |>)).
          Definition Get_desc :=
            Ref.map
              (fun α => Some α.(desc))
              (fun β α => Some (α <| desc := β |>)).
          Definition Get_flags :=
            Ref.map
              (fun α => Some α.(flags))
              (fun β α => Some (α <| flags := β |>)).
        End xdp_ring_offset.
        End xdp_ring_offset.
        
        Module  Impl_core_marker_Copy_for_libc_unix_linux_like_linux_gnu_xdp_ring_offset_t.
        Section Impl_core_marker_Copy_for_libc_unix_linux_like_linux_gnu_xdp_ring_offset_t.
          Definition Self : Set :=
            libc.unix.linux_like.linux.gnu.xdp_ring_offset.t.
          
          Global Instance ℐ : core.marker.Copy.Trait Self := {
          }.
        End Impl_core_marker_Copy_for_libc_unix_linux_like_linux_gnu_xdp_ring_offset_t.
        End Impl_core_marker_Copy_for_libc_unix_linux_like_linux_gnu_xdp_ring_offset_t.
        
        Module  Impl_core_clone_Clone_for_libc_unix_linux_like_linux_gnu_xdp_ring_offset_t.
        Section Impl_core_clone_Clone_for_libc_unix_linux_like_linux_gnu_xdp_ring_offset_t.
          Definition Self : Set :=
            libc.unix.linux_like.linux.gnu.xdp_ring_offset.t.
          
          (*
                      fn clone(&self) -> $i { *self }
          *)
          Definition clone
              (self : ref Self)
              : M libc.unix.linux_like.linux.gnu.xdp_ring_offset.t :=
            let* self := M.alloc self in
            let* α0 : ref libc.unix.linux_like.linux.gnu.xdp_ring_offset.t :=
              M.read self in
            M.read (deref α0).
          
          Global Instance AssociatedFunction_clone :
            Notations.DoubleColon Self "clone" := {
            Notations.double_colon := clone;
          }.
          
          Global Instance ℐ : core.clone.Clone.Required.Trait Self := {
            core.clone.Clone.clone := clone;
            core.clone.Clone.clone_from := Datatypes.None;
          }.
        End Impl_core_clone_Clone_for_libc_unix_linux_like_linux_gnu_xdp_ring_offset_t.
        End Impl_core_clone_Clone_for_libc_unix_linux_like_linux_gnu_xdp_ring_offset_t.
        
        Module  xdp_mmap_offsets.
        Section xdp_mmap_offsets.
          Record t : Set := {
            rx : libc.unix.linux_like.linux.gnu.xdp_ring_offset.t;
            tx : libc.unix.linux_like.linux.gnu.xdp_ring_offset.t;
            fr : libc.unix.linux_like.linux.gnu.xdp_ring_offset.t;
            cr : libc.unix.linux_like.linux.gnu.xdp_ring_offset.t;
          }.
          
          Definition Get_rx :=
            Ref.map (fun α => Some α.(rx)) (fun β α => Some (α <| rx := β |>)).
          Definition Get_tx :=
            Ref.map (fun α => Some α.(tx)) (fun β α => Some (α <| tx := β |>)).
          Definition Get_fr :=
            Ref.map (fun α => Some α.(fr)) (fun β α => Some (α <| fr := β |>)).
          Definition Get_cr :=
            Ref.map (fun α => Some α.(cr)) (fun β α => Some (α <| cr := β |>)).
        End xdp_mmap_offsets.
        End xdp_mmap_offsets.
        
        Module  Impl_core_marker_Copy_for_libc_unix_linux_like_linux_gnu_xdp_mmap_offsets_t.
        Section Impl_core_marker_Copy_for_libc_unix_linux_like_linux_gnu_xdp_mmap_offsets_t.
          Definition Self : Set :=
            libc.unix.linux_like.linux.gnu.xdp_mmap_offsets.t.
          
          Global Instance ℐ : core.marker.Copy.Trait Self := {
          }.
        End Impl_core_marker_Copy_for_libc_unix_linux_like_linux_gnu_xdp_mmap_offsets_t.
        End Impl_core_marker_Copy_for_libc_unix_linux_like_linux_gnu_xdp_mmap_offsets_t.
        
        Module  Impl_core_clone_Clone_for_libc_unix_linux_like_linux_gnu_xdp_mmap_offsets_t.
        Section Impl_core_clone_Clone_for_libc_unix_linux_like_linux_gnu_xdp_mmap_offsets_t.
          Definition Self : Set :=
            libc.unix.linux_like.linux.gnu.xdp_mmap_offsets.t.
          
          (*
                      fn clone(&self) -> $i { *self }
          *)
          Definition clone
              (self : ref Self)
              : M libc.unix.linux_like.linux.gnu.xdp_mmap_offsets.t :=
            let* self := M.alloc self in
            let* α0 : ref libc.unix.linux_like.linux.gnu.xdp_mmap_offsets.t :=
              M.read self in
            M.read (deref α0).
          
          Global Instance AssociatedFunction_clone :
            Notations.DoubleColon Self "clone" := {
            Notations.double_colon := clone;
          }.
          
          Global Instance ℐ : core.clone.Clone.Required.Trait Self := {
            core.clone.Clone.clone := clone;
            core.clone.Clone.clone_from := Datatypes.None;
          }.
        End Impl_core_clone_Clone_for_libc_unix_linux_like_linux_gnu_xdp_mmap_offsets_t.
        End Impl_core_clone_Clone_for_libc_unix_linux_like_linux_gnu_xdp_mmap_offsets_t.
        
        Module  xdp_ring_offset_v1.
        Section xdp_ring_offset_v1.
          Record t : Set := {
            producer : ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.__u64);
            consumer : ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.__u64);
            desc : ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.__u64);
          }.
          
          Definition Get_producer :=
            Ref.map
              (fun α => Some α.(producer))
              (fun β α => Some (α <| producer := β |>)).
          Definition Get_consumer :=
            Ref.map
              (fun α => Some α.(consumer))
              (fun β α => Some (α <| consumer := β |>)).
          Definition Get_desc :=
            Ref.map
              (fun α => Some α.(desc))
              (fun β α => Some (α <| desc := β |>)).
        End xdp_ring_offset_v1.
        End xdp_ring_offset_v1.
        
        Module  Impl_core_marker_Copy_for_libc_unix_linux_like_linux_gnu_xdp_ring_offset_v1_t.
        Section Impl_core_marker_Copy_for_libc_unix_linux_like_linux_gnu_xdp_ring_offset_v1_t.
          Definition Self : Set :=
            libc.unix.linux_like.linux.gnu.xdp_ring_offset_v1.t.
          
          Global Instance ℐ : core.marker.Copy.Trait Self := {
          }.
        End Impl_core_marker_Copy_for_libc_unix_linux_like_linux_gnu_xdp_ring_offset_v1_t.
        End Impl_core_marker_Copy_for_libc_unix_linux_like_linux_gnu_xdp_ring_offset_v1_t.
        
        Module  Impl_core_clone_Clone_for_libc_unix_linux_like_linux_gnu_xdp_ring_offset_v1_t.
        Section Impl_core_clone_Clone_for_libc_unix_linux_like_linux_gnu_xdp_ring_offset_v1_t.
          Definition Self : Set :=
            libc.unix.linux_like.linux.gnu.xdp_ring_offset_v1.t.
          
          (*
                      fn clone(&self) -> $i { *self }
          *)
          Definition clone
              (self : ref Self)
              : M libc.unix.linux_like.linux.gnu.xdp_ring_offset_v1.t :=
            let* self := M.alloc self in
            let* α0 : ref libc.unix.linux_like.linux.gnu.xdp_ring_offset_v1.t :=
              M.read self in
            M.read (deref α0).
          
          Global Instance AssociatedFunction_clone :
            Notations.DoubleColon Self "clone" := {
            Notations.double_colon := clone;
          }.
          
          Global Instance ℐ : core.clone.Clone.Required.Trait Self := {
            core.clone.Clone.clone := clone;
            core.clone.Clone.clone_from := Datatypes.None;
          }.
        End Impl_core_clone_Clone_for_libc_unix_linux_like_linux_gnu_xdp_ring_offset_v1_t.
        End Impl_core_clone_Clone_for_libc_unix_linux_like_linux_gnu_xdp_ring_offset_v1_t.
        
        Module  xdp_mmap_offsets_v1.
        Section xdp_mmap_offsets_v1.
          Record t : Set := {
            rx : libc.unix.linux_like.linux.gnu.xdp_ring_offset_v1.t;
            tx : libc.unix.linux_like.linux.gnu.xdp_ring_offset_v1.t;
            fr : libc.unix.linux_like.linux.gnu.xdp_ring_offset_v1.t;
            cr : libc.unix.linux_like.linux.gnu.xdp_ring_offset_v1.t;
          }.
          
          Definition Get_rx :=
            Ref.map (fun α => Some α.(rx)) (fun β α => Some (α <| rx := β |>)).
          Definition Get_tx :=
            Ref.map (fun α => Some α.(tx)) (fun β α => Some (α <| tx := β |>)).
          Definition Get_fr :=
            Ref.map (fun α => Some α.(fr)) (fun β α => Some (α <| fr := β |>)).
          Definition Get_cr :=
            Ref.map (fun α => Some α.(cr)) (fun β α => Some (α <| cr := β |>)).
        End xdp_mmap_offsets_v1.
        End xdp_mmap_offsets_v1.
        
        Module  Impl_core_marker_Copy_for_libc_unix_linux_like_linux_gnu_xdp_mmap_offsets_v1_t.
        Section Impl_core_marker_Copy_for_libc_unix_linux_like_linux_gnu_xdp_mmap_offsets_v1_t.
          Definition Self : Set :=
            libc.unix.linux_like.linux.gnu.xdp_mmap_offsets_v1.t.
          
          Global Instance ℐ : core.marker.Copy.Trait Self := {
          }.
        End Impl_core_marker_Copy_for_libc_unix_linux_like_linux_gnu_xdp_mmap_offsets_v1_t.
        End Impl_core_marker_Copy_for_libc_unix_linux_like_linux_gnu_xdp_mmap_offsets_v1_t.
        
        Module  Impl_core_clone_Clone_for_libc_unix_linux_like_linux_gnu_xdp_mmap_offsets_v1_t.
        Section Impl_core_clone_Clone_for_libc_unix_linux_like_linux_gnu_xdp_mmap_offsets_v1_t.
          Definition Self : Set :=
            libc.unix.linux_like.linux.gnu.xdp_mmap_offsets_v1.t.
          
          (*
                      fn clone(&self) -> $i { *self }
          *)
          Definition clone
              (self : ref Self)
              : M libc.unix.linux_like.linux.gnu.xdp_mmap_offsets_v1.t :=
            let* self := M.alloc self in
            let* α0 :
                ref libc.unix.linux_like.linux.gnu.xdp_mmap_offsets_v1.t :=
              M.read self in
            M.read (deref α0).
          
          Global Instance AssociatedFunction_clone :
            Notations.DoubleColon Self "clone" := {
            Notations.double_colon := clone;
          }.
          
          Global Instance ℐ : core.clone.Clone.Required.Trait Self := {
            core.clone.Clone.clone := clone;
            core.clone.Clone.clone_from := Datatypes.None;
          }.
        End Impl_core_clone_Clone_for_libc_unix_linux_like_linux_gnu_xdp_mmap_offsets_v1_t.
        End Impl_core_clone_Clone_for_libc_unix_linux_like_linux_gnu_xdp_mmap_offsets_v1_t.
        
        Module  xdp_umem_reg.
        Section xdp_umem_reg.
          Record t : Set := {
            addr : ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.__u64);
            len : ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.__u64);
            chunk_size : ltac:(libc.unix.linux_like.linux.__u32);
            headroom : ltac:(libc.unix.linux_like.linux.__u32);
            flags : ltac:(libc.unix.linux_like.linux.__u32);
          }.
          
          Definition Get_addr :=
            Ref.map
              (fun α => Some α.(addr))
              (fun β α => Some (α <| addr := β |>)).
          Definition Get_len :=
            Ref.map
              (fun α => Some α.(len))
              (fun β α => Some (α <| len := β |>)).
          Definition Get_chunk_size :=
            Ref.map
              (fun α => Some α.(chunk_size))
              (fun β α => Some (α <| chunk_size := β |>)).
          Definition Get_headroom :=
            Ref.map
              (fun α => Some α.(headroom))
              (fun β α => Some (α <| headroom := β |>)).
          Definition Get_flags :=
            Ref.map
              (fun α => Some α.(flags))
              (fun β α => Some (α <| flags := β |>)).
        End xdp_umem_reg.
        End xdp_umem_reg.
        
        Module  Impl_core_marker_Copy_for_libc_unix_linux_like_linux_gnu_xdp_umem_reg_t.
        Section Impl_core_marker_Copy_for_libc_unix_linux_like_linux_gnu_xdp_umem_reg_t.
          Definition Self : Set :=
            libc.unix.linux_like.linux.gnu.xdp_umem_reg.t.
          
          Global Instance ℐ : core.marker.Copy.Trait Self := {
          }.
        End Impl_core_marker_Copy_for_libc_unix_linux_like_linux_gnu_xdp_umem_reg_t.
        End Impl_core_marker_Copy_for_libc_unix_linux_like_linux_gnu_xdp_umem_reg_t.
        
        Module  Impl_core_clone_Clone_for_libc_unix_linux_like_linux_gnu_xdp_umem_reg_t.
        Section Impl_core_clone_Clone_for_libc_unix_linux_like_linux_gnu_xdp_umem_reg_t.
          Definition Self : Set :=
            libc.unix.linux_like.linux.gnu.xdp_umem_reg.t.
          
          (*
                      fn clone(&self) -> $i { *self }
          *)
          Definition clone
              (self : ref Self)
              : M libc.unix.linux_like.linux.gnu.xdp_umem_reg.t :=
            let* self := M.alloc self in
            let* α0 : ref libc.unix.linux_like.linux.gnu.xdp_umem_reg.t :=
              M.read self in
            M.read (deref α0).
          
          Global Instance AssociatedFunction_clone :
            Notations.DoubleColon Self "clone" := {
            Notations.double_colon := clone;
          }.
          
          Global Instance ℐ : core.clone.Clone.Required.Trait Self := {
            core.clone.Clone.clone := clone;
            core.clone.Clone.clone_from := Datatypes.None;
          }.
        End Impl_core_clone_Clone_for_libc_unix_linux_like_linux_gnu_xdp_umem_reg_t.
        End Impl_core_clone_Clone_for_libc_unix_linux_like_linux_gnu_xdp_umem_reg_t.
        
        Module  xdp_umem_reg_v1.
        Section xdp_umem_reg_v1.
          Record t : Set := {
            addr : ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.__u64);
            len : ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.__u64);
            chunk_size : ltac:(libc.unix.linux_like.linux.__u32);
            headroom : ltac:(libc.unix.linux_like.linux.__u32);
          }.
          
          Definition Get_addr :=
            Ref.map
              (fun α => Some α.(addr))
              (fun β α => Some (α <| addr := β |>)).
          Definition Get_len :=
            Ref.map
              (fun α => Some α.(len))
              (fun β α => Some (α <| len := β |>)).
          Definition Get_chunk_size :=
            Ref.map
              (fun α => Some α.(chunk_size))
              (fun β α => Some (α <| chunk_size := β |>)).
          Definition Get_headroom :=
            Ref.map
              (fun α => Some α.(headroom))
              (fun β α => Some (α <| headroom := β |>)).
        End xdp_umem_reg_v1.
        End xdp_umem_reg_v1.
        
        Module  Impl_core_marker_Copy_for_libc_unix_linux_like_linux_gnu_xdp_umem_reg_v1_t.
        Section Impl_core_marker_Copy_for_libc_unix_linux_like_linux_gnu_xdp_umem_reg_v1_t.
          Definition Self : Set :=
            libc.unix.linux_like.linux.gnu.xdp_umem_reg_v1.t.
          
          Global Instance ℐ : core.marker.Copy.Trait Self := {
          }.
        End Impl_core_marker_Copy_for_libc_unix_linux_like_linux_gnu_xdp_umem_reg_v1_t.
        End Impl_core_marker_Copy_for_libc_unix_linux_like_linux_gnu_xdp_umem_reg_v1_t.
        
        Module  Impl_core_clone_Clone_for_libc_unix_linux_like_linux_gnu_xdp_umem_reg_v1_t.
        Section Impl_core_clone_Clone_for_libc_unix_linux_like_linux_gnu_xdp_umem_reg_v1_t.
          Definition Self : Set :=
            libc.unix.linux_like.linux.gnu.xdp_umem_reg_v1.t.
          
          (*
                      fn clone(&self) -> $i { *self }
          *)
          Definition clone
              (self : ref Self)
              : M libc.unix.linux_like.linux.gnu.xdp_umem_reg_v1.t :=
            let* self := M.alloc self in
            let* α0 : ref libc.unix.linux_like.linux.gnu.xdp_umem_reg_v1.t :=
              M.read self in
            M.read (deref α0).
          
          Global Instance AssociatedFunction_clone :
            Notations.DoubleColon Self "clone" := {
            Notations.double_colon := clone;
          }.
          
          Global Instance ℐ : core.clone.Clone.Required.Trait Self := {
            core.clone.Clone.clone := clone;
            core.clone.Clone.clone_from := Datatypes.None;
          }.
        End Impl_core_clone_Clone_for_libc_unix_linux_like_linux_gnu_xdp_umem_reg_v1_t.
        End Impl_core_clone_Clone_for_libc_unix_linux_like_linux_gnu_xdp_umem_reg_v1_t.
        
        Module  xdp_statistics.
        Section xdp_statistics.
          Record t : Set := {
            rx_dropped : ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.__u64);
            rx_invalid_descs :
              ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.__u64);
            tx_invalid_descs :
              ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.__u64);
            rx_ring_full :
              ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.__u64);
            rx_fill_ring_empty_descs :
              ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.__u64);
            tx_ring_empty_descs :
              ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.__u64);
          }.
          
          Definition Get_rx_dropped :=
            Ref.map
              (fun α => Some α.(rx_dropped))
              (fun β α => Some (α <| rx_dropped := β |>)).
          Definition Get_rx_invalid_descs :=
            Ref.map
              (fun α => Some α.(rx_invalid_descs))
              (fun β α => Some (α <| rx_invalid_descs := β |>)).
          Definition Get_tx_invalid_descs :=
            Ref.map
              (fun α => Some α.(tx_invalid_descs))
              (fun β α => Some (α <| tx_invalid_descs := β |>)).
          Definition Get_rx_ring_full :=
            Ref.map
              (fun α => Some α.(rx_ring_full))
              (fun β α => Some (α <| rx_ring_full := β |>)).
          Definition Get_rx_fill_ring_empty_descs :=
            Ref.map
              (fun α => Some α.(rx_fill_ring_empty_descs))
              (fun β α => Some (α <| rx_fill_ring_empty_descs := β |>)).
          Definition Get_tx_ring_empty_descs :=
            Ref.map
              (fun α => Some α.(tx_ring_empty_descs))
              (fun β α => Some (α <| tx_ring_empty_descs := β |>)).
        End xdp_statistics.
        End xdp_statistics.
        
        Module  Impl_core_marker_Copy_for_libc_unix_linux_like_linux_gnu_xdp_statistics_t.
        Section Impl_core_marker_Copy_for_libc_unix_linux_like_linux_gnu_xdp_statistics_t.
          Definition Self : Set :=
            libc.unix.linux_like.linux.gnu.xdp_statistics.t.
          
          Global Instance ℐ : core.marker.Copy.Trait Self := {
          }.
        End Impl_core_marker_Copy_for_libc_unix_linux_like_linux_gnu_xdp_statistics_t.
        End Impl_core_marker_Copy_for_libc_unix_linux_like_linux_gnu_xdp_statistics_t.
        
        Module  Impl_core_clone_Clone_for_libc_unix_linux_like_linux_gnu_xdp_statistics_t.
        Section Impl_core_clone_Clone_for_libc_unix_linux_like_linux_gnu_xdp_statistics_t.
          Definition Self : Set :=
            libc.unix.linux_like.linux.gnu.xdp_statistics.t.
          
          (*
                      fn clone(&self) -> $i { *self }
          *)
          Definition clone
              (self : ref Self)
              : M libc.unix.linux_like.linux.gnu.xdp_statistics.t :=
            let* self := M.alloc self in
            let* α0 : ref libc.unix.linux_like.linux.gnu.xdp_statistics.t :=
              M.read self in
            M.read (deref α0).
          
          Global Instance AssociatedFunction_clone :
            Notations.DoubleColon Self "clone" := {
            Notations.double_colon := clone;
          }.
          
          Global Instance ℐ : core.clone.Clone.Required.Trait Self := {
            core.clone.Clone.clone := clone;
            core.clone.Clone.clone_from := Datatypes.None;
          }.
        End Impl_core_clone_Clone_for_libc_unix_linux_like_linux_gnu_xdp_statistics_t.
        End Impl_core_clone_Clone_for_libc_unix_linux_like_linux_gnu_xdp_statistics_t.
        
        Module  xdp_statistics_v1.
        Section xdp_statistics_v1.
          Record t : Set := {
            rx_dropped : ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.__u64);
            rx_invalid_descs :
              ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.__u64);
            tx_invalid_descs :
              ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.__u64);
          }.
          
          Definition Get_rx_dropped :=
            Ref.map
              (fun α => Some α.(rx_dropped))
              (fun β α => Some (α <| rx_dropped := β |>)).
          Definition Get_rx_invalid_descs :=
            Ref.map
              (fun α => Some α.(rx_invalid_descs))
              (fun β α => Some (α <| rx_invalid_descs := β |>)).
          Definition Get_tx_invalid_descs :=
            Ref.map
              (fun α => Some α.(tx_invalid_descs))
              (fun β α => Some (α <| tx_invalid_descs := β |>)).
        End xdp_statistics_v1.
        End xdp_statistics_v1.
        
        Module  Impl_core_marker_Copy_for_libc_unix_linux_like_linux_gnu_xdp_statistics_v1_t.
        Section Impl_core_marker_Copy_for_libc_unix_linux_like_linux_gnu_xdp_statistics_v1_t.
          Definition Self : Set :=
            libc.unix.linux_like.linux.gnu.xdp_statistics_v1.t.
          
          Global Instance ℐ : core.marker.Copy.Trait Self := {
          }.
        End Impl_core_marker_Copy_for_libc_unix_linux_like_linux_gnu_xdp_statistics_v1_t.
        End Impl_core_marker_Copy_for_libc_unix_linux_like_linux_gnu_xdp_statistics_v1_t.
        
        Module  Impl_core_clone_Clone_for_libc_unix_linux_like_linux_gnu_xdp_statistics_v1_t.
        Section Impl_core_clone_Clone_for_libc_unix_linux_like_linux_gnu_xdp_statistics_v1_t.
          Definition Self : Set :=
            libc.unix.linux_like.linux.gnu.xdp_statistics_v1.t.
          
          (*
                      fn clone(&self) -> $i { *self }
          *)
          Definition clone
              (self : ref Self)
              : M libc.unix.linux_like.linux.gnu.xdp_statistics_v1.t :=
            let* self := M.alloc self in
            let* α0 : ref libc.unix.linux_like.linux.gnu.xdp_statistics_v1.t :=
              M.read self in
            M.read (deref α0).
          
          Global Instance AssociatedFunction_clone :
            Notations.DoubleColon Self "clone" := {
            Notations.double_colon := clone;
          }.
          
          Global Instance ℐ : core.clone.Clone.Required.Trait Self := {
            core.clone.Clone.clone := clone;
            core.clone.Clone.clone_from := Datatypes.None;
          }.
        End Impl_core_clone_Clone_for_libc_unix_linux_like_linux_gnu_xdp_statistics_v1_t.
        End Impl_core_clone_Clone_for_libc_unix_linux_like_linux_gnu_xdp_statistics_v1_t.
        
        Module  xdp_options.
        Section xdp_options.
          Record t : Set := {
            flags : ltac:(libc.unix.linux_like.linux.__u32);
          }.
          
          Definition Get_flags :=
            Ref.map
              (fun α => Some α.(flags))
              (fun β α => Some (α <| flags := β |>)).
        End xdp_options.
        End xdp_options.
        
        Module  Impl_core_marker_Copy_for_libc_unix_linux_like_linux_gnu_xdp_options_t.
        Section Impl_core_marker_Copy_for_libc_unix_linux_like_linux_gnu_xdp_options_t.
          Definition Self : Set := libc.unix.linux_like.linux.gnu.xdp_options.t.
          
          Global Instance ℐ : core.marker.Copy.Trait Self := {
          }.
        End Impl_core_marker_Copy_for_libc_unix_linux_like_linux_gnu_xdp_options_t.
        End Impl_core_marker_Copy_for_libc_unix_linux_like_linux_gnu_xdp_options_t.
        
        Module  Impl_core_clone_Clone_for_libc_unix_linux_like_linux_gnu_xdp_options_t.
        Section Impl_core_clone_Clone_for_libc_unix_linux_like_linux_gnu_xdp_options_t.
          Definition Self : Set := libc.unix.linux_like.linux.gnu.xdp_options.t.
          
          (*
                      fn clone(&self) -> $i { *self }
          *)
          Definition clone
              (self : ref Self)
              : M libc.unix.linux_like.linux.gnu.xdp_options.t :=
            let* self := M.alloc self in
            let* α0 : ref libc.unix.linux_like.linux.gnu.xdp_options.t :=
              M.read self in
            M.read (deref α0).
          
          Global Instance AssociatedFunction_clone :
            Notations.DoubleColon Self "clone" := {
            Notations.double_colon := clone;
          }.
          
          Global Instance ℐ : core.clone.Clone.Required.Trait Self := {
            core.clone.Clone.clone := clone;
            core.clone.Clone.clone_from := Datatypes.None;
          }.
        End Impl_core_clone_Clone_for_libc_unix_linux_like_linux_gnu_xdp_options_t.
        End Impl_core_clone_Clone_for_libc_unix_linux_like_linux_gnu_xdp_options_t.
        
        Module  xdp_desc.
        Section xdp_desc.
          Record t : Set := {
            addr : ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.__u64);
            len : ltac:(libc.unix.linux_like.linux.__u32);
            options : ltac:(libc.unix.linux_like.linux.__u32);
          }.
          
          Definition Get_addr :=
            Ref.map
              (fun α => Some α.(addr))
              (fun β α => Some (α <| addr := β |>)).
          Definition Get_len :=
            Ref.map
              (fun α => Some α.(len))
              (fun β α => Some (α <| len := β |>)).
          Definition Get_options :=
            Ref.map
              (fun α => Some α.(options))
              (fun β α => Some (α <| options := β |>)).
        End xdp_desc.
        End xdp_desc.
        
        Module  Impl_core_marker_Copy_for_libc_unix_linux_like_linux_gnu_xdp_desc_t.
        Section Impl_core_marker_Copy_for_libc_unix_linux_like_linux_gnu_xdp_desc_t.
          Definition Self : Set := libc.unix.linux_like.linux.gnu.xdp_desc.t.
          
          Global Instance ℐ : core.marker.Copy.Trait Self := {
          }.
        End Impl_core_marker_Copy_for_libc_unix_linux_like_linux_gnu_xdp_desc_t.
        End Impl_core_marker_Copy_for_libc_unix_linux_like_linux_gnu_xdp_desc_t.
        
        Module  Impl_core_clone_Clone_for_libc_unix_linux_like_linux_gnu_xdp_desc_t.
        Section Impl_core_clone_Clone_for_libc_unix_linux_like_linux_gnu_xdp_desc_t.
          Definition Self : Set := libc.unix.linux_like.linux.gnu.xdp_desc.t.
          
          (*
                      fn clone(&self) -> $i { *self }
          *)
          Definition clone
              (self : ref Self)
              : M libc.unix.linux_like.linux.gnu.xdp_desc.t :=
            let* self := M.alloc self in
            let* α0 : ref libc.unix.linux_like.linux.gnu.xdp_desc.t :=
              M.read self in
            M.read (deref α0).
          
          Global Instance AssociatedFunction_clone :
            Notations.DoubleColon Self "clone" := {
            Notations.double_colon := clone;
          }.
          
          Global Instance ℐ : core.clone.Clone.Required.Trait Self := {
            core.clone.Clone.clone := clone;
            core.clone.Clone.clone_from := Datatypes.None;
          }.
        End Impl_core_clone_Clone_for_libc_unix_linux_like_linux_gnu_xdp_desc_t.
        End Impl_core_clone_Clone_for_libc_unix_linux_like_linux_gnu_xdp_desc_t.
        
        Module  iocb.
        Section iocb.
          Record t : Set := {
            aio_data : ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.__u64);
            aio_key : ltac:(libc.unix.linux_like.linux.__u32);
            aio_rw_flags : ltac:(libc.unix.linux_like.linux.gnu.__kernel_rwf_t);
            aio_lio_opcode : ltac:(libc.unix.linux_like.linux.__u16);
            aio_reqprio : ltac:(libc.unix.linux_like.linux.__s16);
            aio_fildes : ltac:(libc.unix.linux_like.linux.__u32);
            aio_buf : ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.__u64);
            aio_nbytes : ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.__u64);
            aio_offset : ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.__s64);
            aio_reserved2 :
              ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.__u64);
            aio_flags : ltac:(libc.unix.linux_like.linux.__u32);
            aio_resfd : ltac:(libc.unix.linux_like.linux.__u32);
          }.
          
          Definition Get_aio_data :=
            Ref.map
              (fun α => Some α.(aio_data))
              (fun β α => Some (α <| aio_data := β |>)).
          Definition Get_aio_key :=
            Ref.map
              (fun α => Some α.(aio_key))
              (fun β α => Some (α <| aio_key := β |>)).
          Definition Get_aio_rw_flags :=
            Ref.map
              (fun α => Some α.(aio_rw_flags))
              (fun β α => Some (α <| aio_rw_flags := β |>)).
          Definition Get_aio_lio_opcode :=
            Ref.map
              (fun α => Some α.(aio_lio_opcode))
              (fun β α => Some (α <| aio_lio_opcode := β |>)).
          Definition Get_aio_reqprio :=
            Ref.map
              (fun α => Some α.(aio_reqprio))
              (fun β α => Some (α <| aio_reqprio := β |>)).
          Definition Get_aio_fildes :=
            Ref.map
              (fun α => Some α.(aio_fildes))
              (fun β α => Some (α <| aio_fildes := β |>)).
          Definition Get_aio_buf :=
            Ref.map
              (fun α => Some α.(aio_buf))
              (fun β α => Some (α <| aio_buf := β |>)).
          Definition Get_aio_nbytes :=
            Ref.map
              (fun α => Some α.(aio_nbytes))
              (fun β α => Some (α <| aio_nbytes := β |>)).
          Definition Get_aio_offset :=
            Ref.map
              (fun α => Some α.(aio_offset))
              (fun β α => Some (α <| aio_offset := β |>)).
          Definition Get_aio_reserved2 :=
            Ref.map
              (fun α => Some α.(aio_reserved2))
              (fun β α => Some (α <| aio_reserved2 := β |>)).
          Definition Get_aio_flags :=
            Ref.map
              (fun α => Some α.(aio_flags))
              (fun β α => Some (α <| aio_flags := β |>)).
          Definition Get_aio_resfd :=
            Ref.map
              (fun α => Some α.(aio_resfd))
              (fun β α => Some (α <| aio_resfd := β |>)).
        End iocb.
        End iocb.
        
        Module  Impl_core_marker_Copy_for_libc_unix_linux_like_linux_gnu_iocb_t.
        Section Impl_core_marker_Copy_for_libc_unix_linux_like_linux_gnu_iocb_t.
          Definition Self : Set := libc.unix.linux_like.linux.gnu.iocb.t.
          
          Global Instance ℐ : core.marker.Copy.Trait Self := {
          }.
        End Impl_core_marker_Copy_for_libc_unix_linux_like_linux_gnu_iocb_t.
        End Impl_core_marker_Copy_for_libc_unix_linux_like_linux_gnu_iocb_t.
        
        Module  Impl_core_clone_Clone_for_libc_unix_linux_like_linux_gnu_iocb_t.
        Section Impl_core_clone_Clone_for_libc_unix_linux_like_linux_gnu_iocb_t.
          Definition Self : Set := libc.unix.linux_like.linux.gnu.iocb.t.
          
          (*
                      fn clone(&self) -> $i { *self }
          *)
          Definition clone
              (self : ref Self)
              : M libc.unix.linux_like.linux.gnu.iocb.t :=
            let* self := M.alloc self in
            let* α0 : ref libc.unix.linux_like.linux.gnu.iocb.t :=
              M.read self in
            M.read (deref α0).
          
          Global Instance AssociatedFunction_clone :
            Notations.DoubleColon Self "clone" := {
            Notations.double_colon := clone;
          }.
          
          Global Instance ℐ : core.clone.Clone.Required.Trait Self := {
            core.clone.Clone.clone := clone;
            core.clone.Clone.clone_from := Datatypes.None;
          }.
        End Impl_core_clone_Clone_for_libc_unix_linux_like_linux_gnu_iocb_t.
        End Impl_core_clone_Clone_for_libc_unix_linux_like_linux_gnu_iocb_t.
        
        Module  Impl_libc_unix_linux_like_linux_gnu_b64_x86_64_siginfo_t_t.
        Section Impl_libc_unix_linux_like_linux_gnu_b64_x86_64_siginfo_t_t.
          Definition Self : Set :=
            libc.unix.linux_like.linux.gnu.b64.x86_64.siginfo_t.t.
          
          (*
              pub unsafe fn si_addr(&self) -> *mut ::c_void {
                  #[repr(C)]
                  struct siginfo_sigfault {
                      _si_signo: ::c_int,
                      _si_errno: ::c_int,
                      _si_code: ::c_int,
                      si_addr: *mut ::c_void,
                  }
                  ( *(self as *const siginfo_t as *const siginfo_sigfault)).si_addr
              }
          *)
          Definition si_addr
              (self : ref Self)
              : M (mut_ref core.ffi.c_void.t) :=
            let* self := M.alloc self in
            let* α0 :
                ref libc.unix.linux_like.linux.gnu.b64.x86_64.siginfo_t.t :=
              M.read self in
            let* α1 :
                M.Val
                  (ref libc.unix.linux_like.linux.gnu.b64.x86_64.siginfo_t.t) :=
              M.alloc (addr_of (deref α0)) in
            let* α2 :
                ref libc.unix.linux_like.linux.gnu.b64.x86_64.siginfo_t.t :=
              M.read (use α1) in
            M.read
              (libc.unix.linux_like.linux.gnu.si_addr.siginfo_sigfault.Get_si_addr
                (deref (rust_cast α2))).
          
          Global Instance AssociatedFunction_si_addr :
            Notations.DoubleColon Self "si_addr" := {
            Notations.double_colon := si_addr;
          }.
          
          (*
              pub unsafe fn si_value(&self) -> ::sigval {
                  #[repr(C)]
                  struct siginfo_timer {
                      _si_signo: ::c_int,
                      _si_errno: ::c_int,
                      _si_code: ::c_int,
                      _si_tid: ::c_int,
                      _si_overrun: ::c_int,
                      si_sigval: ::sigval,
                  }
                  ( *(self as *const siginfo_t as *const siginfo_timer)).si_sigval
              }
          *)
          Definition si_value (self : ref Self) : M libc.unix.sigval.t :=
            let* self := M.alloc self in
            let* α0 :
                ref libc.unix.linux_like.linux.gnu.b64.x86_64.siginfo_t.t :=
              M.read self in
            let* α1 :
                M.Val
                  (ref libc.unix.linux_like.linux.gnu.b64.x86_64.siginfo_t.t) :=
              M.alloc (addr_of (deref α0)) in
            let* α2 :
                ref libc.unix.linux_like.linux.gnu.b64.x86_64.siginfo_t.t :=
              M.read (use α1) in
            M.read
              (libc.unix.linux_like.linux.gnu.si_value.siginfo_timer.Get_si_sigval
                (deref (rust_cast α2))).
          
          Global Instance AssociatedFunction_si_value :
            Notations.DoubleColon Self "si_value" := {
            Notations.double_colon := si_value;
          }.
        End Impl_libc_unix_linux_like_linux_gnu_b64_x86_64_siginfo_t_t.
        End Impl_libc_unix_linux_like_linux_gnu_b64_x86_64_siginfo_t_t.
        
        Module  sifields_sigchld.
        Section sifields_sigchld.
          Record t : Set := {
            si_pid : ltac:(libc.unix.pid_t);
            si_uid : ltac:(libc.unix.uid_t);
            si_status : ltac:(libc.unix.c_int);
            si_utime :
              ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_long);
            si_stime :
              ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_long);
          }.
          
          Definition Get_si_pid :=
            Ref.map
              (fun α => Some α.(si_pid))
              (fun β α => Some (α <| si_pid := β |>)).
          Definition Get_si_uid :=
            Ref.map
              (fun α => Some α.(si_uid))
              (fun β α => Some (α <| si_uid := β |>)).
          Definition Get_si_status :=
            Ref.map
              (fun α => Some α.(si_status))
              (fun β α => Some (α <| si_status := β |>)).
          Definition Get_si_utime :=
            Ref.map
              (fun α => Some α.(si_utime))
              (fun β α => Some (α <| si_utime := β |>)).
          Definition Get_si_stime :=
            Ref.map
              (fun α => Some α.(si_stime))
              (fun β α => Some (α <| si_stime := β |>)).
        End sifields_sigchld.
        End sifields_sigchld.
        
        Module  Impl_core_marker_Copy_for_libc_unix_linux_like_linux_gnu_sifields_sigchld_t.
        Section Impl_core_marker_Copy_for_libc_unix_linux_like_linux_gnu_sifields_sigchld_t.
          Definition Self : Set :=
            libc.unix.linux_like.linux.gnu.sifields_sigchld.t.
          
          Global Instance ℐ : core.marker.Copy.Trait Self := {
          }.
        End Impl_core_marker_Copy_for_libc_unix_linux_like_linux_gnu_sifields_sigchld_t.
        End Impl_core_marker_Copy_for_libc_unix_linux_like_linux_gnu_sifields_sigchld_t.
        
        Module  Impl_core_clone_Clone_for_libc_unix_linux_like_linux_gnu_sifields_sigchld_t.
        Section Impl_core_clone_Clone_for_libc_unix_linux_like_linux_gnu_sifields_sigchld_t.
          Definition Self : Set :=
            libc.unix.linux_like.linux.gnu.sifields_sigchld.t.
          
          (*
              fn clone(&self) -> sifields_sigchld {
                  *self
              }
          *)
          Definition clone
              (self : ref Self)
              : M libc.unix.linux_like.linux.gnu.sifields_sigchld.t :=
            let* self := M.alloc self in
            let* α0 : ref libc.unix.linux_like.linux.gnu.sifields_sigchld.t :=
              M.read self in
            M.read (deref α0).
          
          Global Instance AssociatedFunction_clone :
            Notations.DoubleColon Self "clone" := {
            Notations.double_colon := clone;
          }.
          
          Global Instance ℐ : core.clone.Clone.Required.Trait Self := {
            core.clone.Clone.clone := clone;
            core.clone.Clone.clone_from := Datatypes.None;
          }.
        End Impl_core_clone_Clone_for_libc_unix_linux_like_linux_gnu_sifields_sigchld_t.
        End Impl_core_clone_Clone_for_libc_unix_linux_like_linux_gnu_sifields_sigchld_t.
        
        Error Union.
        
        Module  siginfo_f.
        Section siginfo_f.
          Record t : Set := {
            _siginfo_base : array ltac:(libc.unix.c_int);
            sifields : libc.unix.linux_like.linux.gnu.sifields.t;
          }.
          
          Definition Get__siginfo_base :=
            Ref.map
              (fun α => Some α.(_siginfo_base))
              (fun β α => Some (α <| _siginfo_base := β |>)).
          Definition Get_sifields :=
            Ref.map
              (fun α => Some α.(sifields))
              (fun β α => Some (α <| sifields := β |>)).
        End siginfo_f.
        End siginfo_f.
        
        Module  Impl_libc_unix_linux_like_linux_gnu_b64_x86_64_siginfo_t_t_2.
        Section Impl_libc_unix_linux_like_linux_gnu_b64_x86_64_siginfo_t_t_2.
          Definition Self : Set :=
            libc.unix.linux_like.linux.gnu.b64.x86_64.siginfo_t.t.
          
          (*
              unsafe fn sifields(&self) -> &sifields {
                  &( *(self as *const siginfo_t as *const siginfo_f)).sifields
              }
          *)
          Definition sifields
              (self : ref Self)
              : M (ref libc.unix.linux_like.linux.gnu.sifields.t) :=
            let* self := M.alloc self in
            let* α0 :
                ref libc.unix.linux_like.linux.gnu.b64.x86_64.siginfo_t.t :=
              M.read self in
            let* α1 :
                M.Val
                  (ref libc.unix.linux_like.linux.gnu.b64.x86_64.siginfo_t.t) :=
              M.alloc (addr_of (deref α0)) in
            let* α2 :
                ref libc.unix.linux_like.linux.gnu.b64.x86_64.siginfo_t.t :=
              M.read (use α1) in
            M.pure
              (borrow
                (libc.unix.linux_like.linux.gnu.siginfo_f.Get_sifields
                  (deref (rust_cast α2)))).
          
          Global Instance AssociatedFunction_sifields :
            Notations.DoubleColon Self "sifields" := {
            Notations.double_colon := sifields;
          }.
          
          (*
              pub unsafe fn si_pid(&self) -> ::pid_t {
                  self.sifields().sigchld.si_pid
              }
          *)
          Definition si_pid (self : ref Self) : M ltac:(libc.unix.pid_t) :=
            let* self := M.alloc self in
            let* α0 :
                ref libc.unix.linux_like.linux.gnu.b64.x86_64.siginfo_t.t :=
              M.read self in
            let* α1 : ref libc.unix.linux_like.linux.gnu.sifields.t :=
              M.call
                (libc.unix.linux_like.linux.gnu.b64.x86_64.siginfo_t.t::["sifields"]
                  α0) in
            M.read
              (libc.unix.linux_like.linux.gnu.sifields_sigchld.Get_si_pid
                (libc.unix.linux_like.linux.gnu.sifields.Get_sigchld
                  (deref α1))).
          
          Global Instance AssociatedFunction_si_pid :
            Notations.DoubleColon Self "si_pid" := {
            Notations.double_colon := si_pid;
          }.
          
          (*
              pub unsafe fn si_uid(&self) -> ::uid_t {
                  self.sifields().sigchld.si_uid
              }
          *)
          Definition si_uid (self : ref Self) : M ltac:(libc.unix.uid_t) :=
            let* self := M.alloc self in
            let* α0 :
                ref libc.unix.linux_like.linux.gnu.b64.x86_64.siginfo_t.t :=
              M.read self in
            let* α1 : ref libc.unix.linux_like.linux.gnu.sifields.t :=
              M.call
                (libc.unix.linux_like.linux.gnu.b64.x86_64.siginfo_t.t::["sifields"]
                  α0) in
            M.read
              (libc.unix.linux_like.linux.gnu.sifields_sigchld.Get_si_uid
                (libc.unix.linux_like.linux.gnu.sifields.Get_sigchld
                  (deref α1))).
          
          Global Instance AssociatedFunction_si_uid :
            Notations.DoubleColon Self "si_uid" := {
            Notations.double_colon := si_uid;
          }.
          
          (*
              pub unsafe fn si_status(&self) -> ::c_int {
                  self.sifields().sigchld.si_status
              }
          *)
          Definition si_status (self : ref Self) : M ltac:(libc.unix.c_int) :=
            let* self := M.alloc self in
            let* α0 :
                ref libc.unix.linux_like.linux.gnu.b64.x86_64.siginfo_t.t :=
              M.read self in
            let* α1 : ref libc.unix.linux_like.linux.gnu.sifields.t :=
              M.call
                (libc.unix.linux_like.linux.gnu.b64.x86_64.siginfo_t.t::["sifields"]
                  α0) in
            M.read
              (libc.unix.linux_like.linux.gnu.sifields_sigchld.Get_si_status
                (libc.unix.linux_like.linux.gnu.sifields.Get_sigchld
                  (deref α1))).
          
          Global Instance AssociatedFunction_si_status :
            Notations.DoubleColon Self "si_status" := {
            Notations.double_colon := si_status;
          }.
          
          (*
              pub unsafe fn si_utime(&self) -> ::c_long {
                  self.sifields().sigchld.si_utime
              }
          *)
          Definition si_utime
              (self : ref Self)
              :
                M
                  ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_long) :=
            let* self := M.alloc self in
            let* α0 :
                ref libc.unix.linux_like.linux.gnu.b64.x86_64.siginfo_t.t :=
              M.read self in
            let* α1 : ref libc.unix.linux_like.linux.gnu.sifields.t :=
              M.call
                (libc.unix.linux_like.linux.gnu.b64.x86_64.siginfo_t.t::["sifields"]
                  α0) in
            M.read
              (libc.unix.linux_like.linux.gnu.sifields_sigchld.Get_si_utime
                (libc.unix.linux_like.linux.gnu.sifields.Get_sigchld
                  (deref α1))).
          
          Global Instance AssociatedFunction_si_utime :
            Notations.DoubleColon Self "si_utime" := {
            Notations.double_colon := si_utime;
          }.
          
          (*
              pub unsafe fn si_stime(&self) -> ::c_long {
                  self.sifields().sigchld.si_stime
              }
          *)
          Definition si_stime
              (self : ref Self)
              :
                M
                  ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_long) :=
            let* self := M.alloc self in
            let* α0 :
                ref libc.unix.linux_like.linux.gnu.b64.x86_64.siginfo_t.t :=
              M.read self in
            let* α1 : ref libc.unix.linux_like.linux.gnu.sifields.t :=
              M.call
                (libc.unix.linux_like.linux.gnu.b64.x86_64.siginfo_t.t::["sifields"]
                  α0) in
            M.read
              (libc.unix.linux_like.linux.gnu.sifields_sigchld.Get_si_stime
                (libc.unix.linux_like.linux.gnu.sifields.Get_sigchld
                  (deref α1))).
          
          Global Instance AssociatedFunction_si_stime :
            Notations.DoubleColon Self "si_stime" := {
            Notations.double_colon := si_stime;
          }.
        End Impl_libc_unix_linux_like_linux_gnu_b64_x86_64_siginfo_t_t_2.
        End Impl_libc_unix_linux_like_linux_gnu_b64_x86_64_siginfo_t_t_2.
        
        Error Union.
        
        Module  Impl_core_marker_Copy_for_libc_unix_linux_like_linux_gnu___c_anonymous_ptrace_syscall_info_data_t.
        Section Impl_core_marker_Copy_for_libc_unix_linux_like_linux_gnu___c_anonymous_ptrace_syscall_info_data_t.
          Definition Self : Set :=
            libc.unix.linux_like.linux.gnu.__c_anonymous_ptrace_syscall_info_data.t.
          
          Global Instance ℐ : core.marker.Copy.Trait Self := {
          }.
        End Impl_core_marker_Copy_for_libc_unix_linux_like_linux_gnu___c_anonymous_ptrace_syscall_info_data_t.
        End Impl_core_marker_Copy_for_libc_unix_linux_like_linux_gnu___c_anonymous_ptrace_syscall_info_data_t.
        
        Module  Impl_core_clone_Clone_for_libc_unix_linux_like_linux_gnu___c_anonymous_ptrace_syscall_info_data_t.
        Section Impl_core_clone_Clone_for_libc_unix_linux_like_linux_gnu___c_anonymous_ptrace_syscall_info_data_t.
          Definition Self : Set :=
            libc.unix.linux_like.linux.gnu.__c_anonymous_ptrace_syscall_info_data.t.
          
          (*
              fn clone(&self) -> __c_anonymous_ptrace_syscall_info_data {
                  *self
              }
          *)
          Definition clone
              (self : ref Self)
              :
                M
                  libc.unix.linux_like.linux.gnu.__c_anonymous_ptrace_syscall_info_data.t :=
            let* self := M.alloc self in
            let* α0 :
                ref
                  libc.unix.linux_like.linux.gnu.__c_anonymous_ptrace_syscall_info_data.t :=
              M.read self in
            M.read (deref α0).
          
          Global Instance AssociatedFunction_clone :
            Notations.DoubleColon Self "clone" := {
            Notations.double_colon := clone;
          }.
          
          Global Instance ℐ : core.clone.Clone.Required.Trait Self := {
            core.clone.Clone.clone := clone;
            core.clone.Clone.clone_from := Datatypes.None;
          }.
        End Impl_core_clone_Clone_for_libc_unix_linux_like_linux_gnu___c_anonymous_ptrace_syscall_info_data_t.
        End Impl_core_clone_Clone_for_libc_unix_linux_like_linux_gnu___c_anonymous_ptrace_syscall_info_data_t.
        
        Module  utmpx.
        Section utmpx.
          Record t : Set := {
            ut_type : ltac:(libc.unix.c_short);
            ut_pid : ltac:(libc.unix.pid_t);
            ut_line :
              array ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.c_char);
            ut_id :
              array ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.c_char);
            ut_user :
              array ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.c_char);
            ut_host :
              array ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.c_char);
            ut_exit : libc.unix.linux_like.linux.gnu.__exit_status.t;
            ut_session : i32.t;
            ut_tv : libc.unix.linux_like.linux.gnu.__timeval.t;
            ut_addr_v6 : array i32.t;
            __glibc_reserved :
              array ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.c_char);
          }.
          
          Definition Get_ut_type :=
            Ref.map
              (fun α => Some α.(ut_type))
              (fun β α => Some (α <| ut_type := β |>)).
          Definition Get_ut_pid :=
            Ref.map
              (fun α => Some α.(ut_pid))
              (fun β α => Some (α <| ut_pid := β |>)).
          Definition Get_ut_line :=
            Ref.map
              (fun α => Some α.(ut_line))
              (fun β α => Some (α <| ut_line := β |>)).
          Definition Get_ut_id :=
            Ref.map
              (fun α => Some α.(ut_id))
              (fun β α => Some (α <| ut_id := β |>)).
          Definition Get_ut_user :=
            Ref.map
              (fun α => Some α.(ut_user))
              (fun β α => Some (α <| ut_user := β |>)).
          Definition Get_ut_host :=
            Ref.map
              (fun α => Some α.(ut_host))
              (fun β α => Some (α <| ut_host := β |>)).
          Definition Get_ut_exit :=
            Ref.map
              (fun α => Some α.(ut_exit))
              (fun β α => Some (α <| ut_exit := β |>)).
          Definition Get_ut_session :=
            Ref.map
              (fun α => Some α.(ut_session))
              (fun β α => Some (α <| ut_session := β |>)).
          Definition Get_ut_tv :=
            Ref.map
              (fun α => Some α.(ut_tv))
              (fun β α => Some (α <| ut_tv := β |>)).
          Definition Get_ut_addr_v6 :=
            Ref.map
              (fun α => Some α.(ut_addr_v6))
              (fun β α => Some (α <| ut_addr_v6 := β |>)).
          Definition Get___glibc_reserved :=
            Ref.map
              (fun α => Some α.(__glibc_reserved))
              (fun β α => Some (α <| __glibc_reserved := β |>)).
        End utmpx.
        End utmpx.
        
        Module  Impl_core_marker_Copy_for_libc_unix_linux_like_linux_gnu_utmpx_t.
        Section Impl_core_marker_Copy_for_libc_unix_linux_like_linux_gnu_utmpx_t.
          Definition Self : Set := libc.unix.linux_like.linux.gnu.utmpx.t.
          
          Global Instance ℐ : core.marker.Copy.Trait Self := {
          }.
        End Impl_core_marker_Copy_for_libc_unix_linux_like_linux_gnu_utmpx_t.
        End Impl_core_marker_Copy_for_libc_unix_linux_like_linux_gnu_utmpx_t.
        
        Module  Impl_core_clone_Clone_for_libc_unix_linux_like_linux_gnu_utmpx_t.
        Section Impl_core_clone_Clone_for_libc_unix_linux_like_linux_gnu_utmpx_t.
          Definition Self : Set := libc.unix.linux_like.linux.gnu.utmpx.t.
          
          (*
                      fn clone(&self) -> $i { *self }
          *)
          Definition clone
              (self : ref Self)
              : M libc.unix.linux_like.linux.gnu.utmpx.t :=
            let* self := M.alloc self in
            let* α0 : ref libc.unix.linux_like.linux.gnu.utmpx.t :=
              M.read self in
            M.read (deref α0).
          
          Global Instance AssociatedFunction_clone :
            Notations.DoubleColon Self "clone" := {
            Notations.double_colon := clone;
          }.
          
          Global Instance ℐ : core.clone.Clone.Required.Trait Self := {
            core.clone.Clone.clone := clone;
            core.clone.Clone.clone_from := Datatypes.None;
          }.
        End Impl_core_clone_Clone_for_libc_unix_linux_like_linux_gnu_utmpx_t.
        End Impl_core_clone_Clone_for_libc_unix_linux_like_linux_gnu_utmpx_t.
        
        Definition HUGETLB_FLAG_ENCODE_SHIFT : M.Val ltac:(libc.unix.c_int) :=
          M.run (M.alloc ((Integer.of_Z 26) : i32.t)).
        
        Definition HUGETLB_FLAG_ENCODE_MASK : M.Val ltac:(libc.unix.c_int) :=
          M.run (M.alloc ((Integer.of_Z 63) : i32.t)).
        
        Definition HUGETLB_FLAG_ENCODE_64KB : M.Val ltac:(libc.unix.c_int) :=
          M.run
            (let* α0 : i32.t :=
              M.read libc.unix.linux_like.linux.gnu.HUGETLB_FLAG_ENCODE_SHIFT in
            let* α1 : i32.t := BinOp.Panic.shl ((Integer.of_Z 16) : i32.t) α0 in
            M.alloc α1).
        
        Definition HUGETLB_FLAG_ENCODE_512KB : M.Val ltac:(libc.unix.c_int) :=
          M.run
            (let* α0 : i32.t :=
              M.read libc.unix.linux_like.linux.gnu.HUGETLB_FLAG_ENCODE_SHIFT in
            let* α1 : i32.t := BinOp.Panic.shl ((Integer.of_Z 19) : i32.t) α0 in
            M.alloc α1).
        
        Definition HUGETLB_FLAG_ENCODE_1MB : M.Val ltac:(libc.unix.c_int) :=
          M.run
            (let* α0 : i32.t :=
              M.read libc.unix.linux_like.linux.gnu.HUGETLB_FLAG_ENCODE_SHIFT in
            let* α1 : i32.t := BinOp.Panic.shl ((Integer.of_Z 20) : i32.t) α0 in
            M.alloc α1).
        
        Definition HUGETLB_FLAG_ENCODE_2MB : M.Val ltac:(libc.unix.c_int) :=
          M.run
            (let* α0 : i32.t :=
              M.read libc.unix.linux_like.linux.gnu.HUGETLB_FLAG_ENCODE_SHIFT in
            let* α1 : i32.t := BinOp.Panic.shl ((Integer.of_Z 21) : i32.t) α0 in
            M.alloc α1).
        
        Definition HUGETLB_FLAG_ENCODE_8MB : M.Val ltac:(libc.unix.c_int) :=
          M.run
            (let* α0 : i32.t :=
              M.read libc.unix.linux_like.linux.gnu.HUGETLB_FLAG_ENCODE_SHIFT in
            let* α1 : i32.t := BinOp.Panic.shl ((Integer.of_Z 23) : i32.t) α0 in
            M.alloc α1).
        
        Definition HUGETLB_FLAG_ENCODE_16MB : M.Val ltac:(libc.unix.c_int) :=
          M.run
            (let* α0 : i32.t :=
              M.read libc.unix.linux_like.linux.gnu.HUGETLB_FLAG_ENCODE_SHIFT in
            let* α1 : i32.t := BinOp.Panic.shl ((Integer.of_Z 24) : i32.t) α0 in
            M.alloc α1).
        
        Definition HUGETLB_FLAG_ENCODE_32MB : M.Val ltac:(libc.unix.c_int) :=
          M.run
            (let* α0 : i32.t :=
              M.read libc.unix.linux_like.linux.gnu.HUGETLB_FLAG_ENCODE_SHIFT in
            let* α1 : i32.t := BinOp.Panic.shl ((Integer.of_Z 25) : i32.t) α0 in
            M.alloc α1).
        
        Definition HUGETLB_FLAG_ENCODE_256MB : M.Val ltac:(libc.unix.c_int) :=
          M.run
            (let* α0 : i32.t :=
              M.read libc.unix.linux_like.linux.gnu.HUGETLB_FLAG_ENCODE_SHIFT in
            let* α1 : i32.t := BinOp.Panic.shl ((Integer.of_Z 28) : i32.t) α0 in
            M.alloc α1).
        
        Definition HUGETLB_FLAG_ENCODE_512MB : M.Val ltac:(libc.unix.c_int) :=
          M.run
            (let* α0 : i32.t :=
              M.read libc.unix.linux_like.linux.gnu.HUGETLB_FLAG_ENCODE_SHIFT in
            let* α1 : i32.t := BinOp.Panic.shl ((Integer.of_Z 29) : i32.t) α0 in
            M.alloc α1).
        
        Definition HUGETLB_FLAG_ENCODE_1GB : M.Val ltac:(libc.unix.c_int) :=
          M.run
            (let* α0 : i32.t :=
              M.read libc.unix.linux_like.linux.gnu.HUGETLB_FLAG_ENCODE_SHIFT in
            let* α1 : i32.t := BinOp.Panic.shl ((Integer.of_Z 30) : i32.t) α0 in
            M.alloc α1).
        
        Definition HUGETLB_FLAG_ENCODE_2GB : M.Val ltac:(libc.unix.c_int) :=
          M.run
            (let* α0 : i32.t :=
              M.read libc.unix.linux_like.linux.gnu.HUGETLB_FLAG_ENCODE_SHIFT in
            let* α1 : i32.t := BinOp.Panic.shl ((Integer.of_Z 31) : i32.t) α0 in
            M.alloc α1).
        
        Definition HUGETLB_FLAG_ENCODE_16GB : M.Val ltac:(libc.unix.c_int) :=
          M.run
            (let* α0 : i32.t :=
              M.read libc.unix.linux_like.linux.gnu.HUGETLB_FLAG_ENCODE_SHIFT in
            let* α1 : i32.t := BinOp.Panic.shl ((Integer.of_Z 34) : i32.t) α0 in
            M.alloc α1).
        
        Definition MAP_HUGE_SHIFT : M.Val ltac:(libc.unix.c_int) :=
          M.run
            (M.pure libc.unix.linux_like.linux.gnu.HUGETLB_FLAG_ENCODE_SHIFT).
        
        Definition MAP_HUGE_MASK : M.Val ltac:(libc.unix.c_int) :=
          M.run
            (M.pure libc.unix.linux_like.linux.gnu.HUGETLB_FLAG_ENCODE_MASK).
        
        Definition MAP_HUGE_64KB : M.Val ltac:(libc.unix.c_int) :=
          M.run
            (M.pure libc.unix.linux_like.linux.gnu.HUGETLB_FLAG_ENCODE_64KB).
        
        Definition MAP_HUGE_512KB : M.Val ltac:(libc.unix.c_int) :=
          M.run
            (M.pure libc.unix.linux_like.linux.gnu.HUGETLB_FLAG_ENCODE_512KB).
        
        Definition MAP_HUGE_1MB : M.Val ltac:(libc.unix.c_int) :=
          M.run (M.pure libc.unix.linux_like.linux.gnu.HUGETLB_FLAG_ENCODE_1MB).
        
        Definition MAP_HUGE_2MB : M.Val ltac:(libc.unix.c_int) :=
          M.run (M.pure libc.unix.linux_like.linux.gnu.HUGETLB_FLAG_ENCODE_2MB).
        
        Definition MAP_HUGE_8MB : M.Val ltac:(libc.unix.c_int) :=
          M.run (M.pure libc.unix.linux_like.linux.gnu.HUGETLB_FLAG_ENCODE_8MB).
        
        Definition MAP_HUGE_16MB : M.Val ltac:(libc.unix.c_int) :=
          M.run
            (M.pure libc.unix.linux_like.linux.gnu.HUGETLB_FLAG_ENCODE_16MB).
        
        Definition MAP_HUGE_32MB : M.Val ltac:(libc.unix.c_int) :=
          M.run
            (M.pure libc.unix.linux_like.linux.gnu.HUGETLB_FLAG_ENCODE_32MB).
        
        Definition MAP_HUGE_256MB : M.Val ltac:(libc.unix.c_int) :=
          M.run
            (M.pure libc.unix.linux_like.linux.gnu.HUGETLB_FLAG_ENCODE_256MB).
        
        Definition MAP_HUGE_512MB : M.Val ltac:(libc.unix.c_int) :=
          M.run
            (M.pure libc.unix.linux_like.linux.gnu.HUGETLB_FLAG_ENCODE_512MB).
        
        Definition MAP_HUGE_1GB : M.Val ltac:(libc.unix.c_int) :=
          M.run (M.pure libc.unix.linux_like.linux.gnu.HUGETLB_FLAG_ENCODE_1GB).
        
        Definition MAP_HUGE_2GB : M.Val ltac:(libc.unix.c_int) :=
          M.run (M.pure libc.unix.linux_like.linux.gnu.HUGETLB_FLAG_ENCODE_2GB).
        
        Definition MAP_HUGE_16GB : M.Val ltac:(libc.unix.c_int) :=
          M.run
            (M.pure libc.unix.linux_like.linux.gnu.HUGETLB_FLAG_ENCODE_16GB).
        
        Definition PRIO_PROCESS
            : M.Val ltac:(libc.unix.linux_like.linux.gnu.__priority_which_t) :=
          M.run (M.alloc ((Integer.of_Z 0) : u32.t)).
        
        Definition PRIO_PGRP
            : M.Val ltac:(libc.unix.linux_like.linux.gnu.__priority_which_t) :=
          M.run (M.alloc ((Integer.of_Z 1) : u32.t)).
        
        Definition PRIO_USER
            : M.Val ltac:(libc.unix.linux_like.linux.gnu.__priority_which_t) :=
          M.run (M.alloc ((Integer.of_Z 2) : u32.t)).
        
        Definition MS_RMT_MASK
            :
              M.Val
                ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_ulong) :=
          M.run (M.alloc ((Integer.of_Z 41943121) : u64.t)).
        
        Definition __UT_LINESIZE : M.Val usize.t :=
          M.run (M.alloc ((Integer.of_Z 32) : usize.t)).
        
        Definition __UT_NAMESIZE : M.Val usize.t :=
          M.run (M.alloc ((Integer.of_Z 32) : usize.t)).
        
        Definition __UT_HOSTSIZE : M.Val usize.t :=
          M.run (M.alloc ((Integer.of_Z 256) : usize.t)).
        
        Definition EMPTY : M.Val ltac:(libc.unix.c_short) :=
          M.run (M.alloc ((Integer.of_Z 0) : i16.t)).
        
        Definition RUN_LVL : M.Val ltac:(libc.unix.c_short) :=
          M.run (M.alloc ((Integer.of_Z 1) : i16.t)).
        
        Definition BOOT_TIME : M.Val ltac:(libc.unix.c_short) :=
          M.run (M.alloc ((Integer.of_Z 2) : i16.t)).
        
        Definition NEW_TIME : M.Val ltac:(libc.unix.c_short) :=
          M.run (M.alloc ((Integer.of_Z 3) : i16.t)).
        
        Definition OLD_TIME : M.Val ltac:(libc.unix.c_short) :=
          M.run (M.alloc ((Integer.of_Z 4) : i16.t)).
        
        Definition INIT_PROCESS : M.Val ltac:(libc.unix.c_short) :=
          M.run (M.alloc ((Integer.of_Z 5) : i16.t)).
        
        Definition LOGIN_PROCESS : M.Val ltac:(libc.unix.c_short) :=
          M.run (M.alloc ((Integer.of_Z 6) : i16.t)).
        
        Definition USER_PROCESS : M.Val ltac:(libc.unix.c_short) :=
          M.run (M.alloc ((Integer.of_Z 7) : i16.t)).
        
        Definition DEAD_PROCESS : M.Val ltac:(libc.unix.c_short) :=
          M.run (M.alloc ((Integer.of_Z 8) : i16.t)).
        
        Definition ACCOUNTING : M.Val ltac:(libc.unix.c_short) :=
          M.run (M.alloc ((Integer.of_Z 9) : i16.t)).
        
        Definition LM_ID_BASE
            :
              M.Val
                ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_long) :=
          M.run (M.alloc ((Integer.of_Z 0) : i64.t)).
        
        Definition LM_ID_NEWLM
            :
              M.Val
                ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_long) :=
          M.run (M.alloc ((Integer.of_Z (-1)) : i64.t)).
        
        Definition RTLD_DI_LMID : M.Val ltac:(libc.unix.c_int) :=
          M.run (M.alloc ((Integer.of_Z 1) : i32.t)).
        
        Definition RTLD_DI_LINKMAP : M.Val ltac:(libc.unix.c_int) :=
          M.run (M.alloc ((Integer.of_Z 2) : i32.t)).
        
        Definition RTLD_DI_CONFIGADDR : M.Val ltac:(libc.unix.c_int) :=
          M.run (M.alloc ((Integer.of_Z 3) : i32.t)).
        
        Definition RTLD_DI_SERINFO : M.Val ltac:(libc.unix.c_int) :=
          M.run (M.alloc ((Integer.of_Z 4) : i32.t)).
        
        Definition RTLD_DI_SERINFOSIZE : M.Val ltac:(libc.unix.c_int) :=
          M.run (M.alloc ((Integer.of_Z 5) : i32.t)).
        
        Definition RTLD_DI_ORIGIN : M.Val ltac:(libc.unix.c_int) :=
          M.run (M.alloc ((Integer.of_Z 6) : i32.t)).
        
        Definition RTLD_DI_PROFILENAME : M.Val ltac:(libc.unix.c_int) :=
          M.run (M.alloc ((Integer.of_Z 7) : i32.t)).
        
        Definition RTLD_DI_PROFILEOUT : M.Val ltac:(libc.unix.c_int) :=
          M.run (M.alloc ((Integer.of_Z 8) : i32.t)).
        
        Definition RTLD_DI_TLS_MODID : M.Val ltac:(libc.unix.c_int) :=
          M.run (M.alloc ((Integer.of_Z 9) : i32.t)).
        
        Definition RTLD_DI_TLS_DATA : M.Val ltac:(libc.unix.c_int) :=
          M.run (M.alloc ((Integer.of_Z 10) : i32.t)).
        
        Definition SOCK_NONBLOCK : M.Val ltac:(libc.unix.c_int) :=
          M.run (M.pure libc.unix.linux_like.linux.gnu.b64.x86_64.O_NONBLOCK).
        
        Definition PIDFD_NONBLOCK : M.Val ltac:(libc.unix.c_uint) :=
          M.run
            (let* α0 : i32.t :=
              M.read libc.unix.linux_like.linux.gnu.b64.x86_64.O_NONBLOCK in
            M.alloc (rust_cast α0)).
        
        Definition SOL_RXRPC : M.Val ltac:(libc.unix.c_int) :=
          M.run (M.alloc ((Integer.of_Z 272) : i32.t)).
        
        Definition SOL_PPPOL2TP : M.Val ltac:(libc.unix.c_int) :=
          M.run (M.alloc ((Integer.of_Z 273) : i32.t)).
        
        Definition SOL_PNPIPE : M.Val ltac:(libc.unix.c_int) :=
          M.run (M.alloc ((Integer.of_Z 275) : i32.t)).
        
        Definition SOL_RDS : M.Val ltac:(libc.unix.c_int) :=
          M.run (M.alloc ((Integer.of_Z 276) : i32.t)).
        
        Definition SOL_IUCV : M.Val ltac:(libc.unix.c_int) :=
          M.run (M.alloc ((Integer.of_Z 277) : i32.t)).
        
        Definition SOL_CAIF : M.Val ltac:(libc.unix.c_int) :=
          M.run (M.alloc ((Integer.of_Z 278) : i32.t)).
        
        Definition SOL_NFC : M.Val ltac:(libc.unix.c_int) :=
          M.run (M.alloc ((Integer.of_Z 280) : i32.t)).
        
        Definition SOL_XDP : M.Val ltac:(libc.unix.c_int) :=
          M.run (M.alloc ((Integer.of_Z 283) : i32.t)).
        
        Definition MSG_TRYHARD : M.Val ltac:(libc.unix.c_int) :=
          M.run (M.alloc ((Integer.of_Z 4) : i32.t)).
        
        Definition LC_PAPER : M.Val ltac:(libc.unix.c_int) :=
          M.run (M.alloc ((Integer.of_Z 7) : i32.t)).
        
        Definition LC_NAME : M.Val ltac:(libc.unix.c_int) :=
          M.run (M.alloc ((Integer.of_Z 8) : i32.t)).
        
        Definition LC_ADDRESS : M.Val ltac:(libc.unix.c_int) :=
          M.run (M.alloc ((Integer.of_Z 9) : i32.t)).
        
        Definition LC_TELEPHONE : M.Val ltac:(libc.unix.c_int) :=
          M.run (M.alloc ((Integer.of_Z 10) : i32.t)).
        
        Definition LC_MEASUREMENT : M.Val ltac:(libc.unix.c_int) :=
          M.run (M.alloc ((Integer.of_Z 11) : i32.t)).
        
        Definition LC_IDENTIFICATION : M.Val ltac:(libc.unix.c_int) :=
          M.run (M.alloc ((Integer.of_Z 12) : i32.t)).
        
        Definition LC_PAPER_MASK : M.Val ltac:(libc.unix.c_int) :=
          M.run
            (let* α0 : i32.t :=
              M.read libc.unix.linux_like.linux.gnu.LC_PAPER in
            let* α1 : i32.t := BinOp.Panic.shl ((Integer.of_Z 1) : i32.t) α0 in
            M.alloc α1).
        
        Definition LC_NAME_MASK : M.Val ltac:(libc.unix.c_int) :=
          M.run
            (let* α0 : i32.t := M.read libc.unix.linux_like.linux.gnu.LC_NAME in
            let* α1 : i32.t := BinOp.Panic.shl ((Integer.of_Z 1) : i32.t) α0 in
            M.alloc α1).
        
        Definition LC_ADDRESS_MASK : M.Val ltac:(libc.unix.c_int) :=
          M.run
            (let* α0 : i32.t :=
              M.read libc.unix.linux_like.linux.gnu.LC_ADDRESS in
            let* α1 : i32.t := BinOp.Panic.shl ((Integer.of_Z 1) : i32.t) α0 in
            M.alloc α1).
        
        Definition LC_TELEPHONE_MASK : M.Val ltac:(libc.unix.c_int) :=
          M.run
            (let* α0 : i32.t :=
              M.read libc.unix.linux_like.linux.gnu.LC_TELEPHONE in
            let* α1 : i32.t := BinOp.Panic.shl ((Integer.of_Z 1) : i32.t) α0 in
            M.alloc α1).
        
        Definition LC_MEASUREMENT_MASK : M.Val ltac:(libc.unix.c_int) :=
          M.run
            (let* α0 : i32.t :=
              M.read libc.unix.linux_like.linux.gnu.LC_MEASUREMENT in
            let* α1 : i32.t := BinOp.Panic.shl ((Integer.of_Z 1) : i32.t) α0 in
            M.alloc α1).
        
        Definition LC_IDENTIFICATION_MASK : M.Val ltac:(libc.unix.c_int) :=
          M.run
            (let* α0 : i32.t :=
              M.read libc.unix.linux_like.linux.gnu.LC_IDENTIFICATION in
            let* α1 : i32.t := BinOp.Panic.shl ((Integer.of_Z 1) : i32.t) α0 in
            M.alloc α1).
        
        Definition LC_ALL_MASK : M.Val ltac:(libc.unix.c_int) :=
          M.run
            (let* α0 : i32.t := M.read libc.unix.linux_like.LC_CTYPE_MASK in
            let* α1 : i32.t := M.read libc.unix.linux_like.LC_NUMERIC_MASK in
            let* α2 : i32.t := M.read libc.unix.linux_like.LC_TIME_MASK in
            let* α3 : i32.t := M.read libc.unix.linux_like.LC_COLLATE_MASK in
            let* α4 : i32.t := M.read libc.unix.linux_like.LC_MONETARY_MASK in
            let* α5 : i32.t := M.read libc.unix.linux_like.LC_MESSAGES_MASK in
            let* α6 : i32.t :=
              M.read libc.unix.linux_like.linux.gnu.LC_PAPER_MASK in
            let* α7 : i32.t :=
              M.read libc.unix.linux_like.linux.gnu.LC_NAME_MASK in
            let* α8 : i32.t :=
              M.read libc.unix.linux_like.linux.gnu.LC_ADDRESS_MASK in
            let* α9 : i32.t :=
              M.read libc.unix.linux_like.linux.gnu.LC_TELEPHONE_MASK in
            let* α10 : i32.t :=
              M.read libc.unix.linux_like.linux.gnu.LC_MEASUREMENT_MASK in
            let* α11 : i32.t :=
              M.read libc.unix.linux_like.linux.gnu.LC_IDENTIFICATION_MASK in
            M.alloc
              (BinOp.Pure.bit_or
                (BinOp.Pure.bit_or
                  (BinOp.Pure.bit_or
                    (BinOp.Pure.bit_or
                      (BinOp.Pure.bit_or
                        (BinOp.Pure.bit_or
                          (BinOp.Pure.bit_or
                            (BinOp.Pure.bit_or
                              (BinOp.Pure.bit_or
                                (BinOp.Pure.bit_or (BinOp.Pure.bit_or α0 α1) α2)
                                α3)
                              α4)
                            α5)
                          α6)
                        α7)
                      α8)
                    α9)
                  α10)
                α11)).
        
        Definition ENOTSUP : M.Val ltac:(libc.unix.c_int) :=
          M.run (M.pure libc.unix.linux_like.linux.gnu.b64.x86_64.EOPNOTSUPP).
        
        Definition SOCK_SEQPACKET : M.Val ltac:(libc.unix.c_int) :=
          M.run (M.alloc ((Integer.of_Z 5) : i32.t)).
        
        Definition SOCK_DCCP : M.Val ltac:(libc.unix.c_int) :=
          M.run (M.alloc ((Integer.of_Z 6) : i32.t)).
        
        Definition SOCK_PACKET : M.Val ltac:(libc.unix.c_int) :=
          M.run (M.alloc ((Integer.of_Z 10) : i32.t)).
        
        Definition AF_IB : M.Val ltac:(libc.unix.c_int) :=
          M.run (M.alloc ((Integer.of_Z 27) : i32.t)).
        
        Definition AF_MPLS : M.Val ltac:(libc.unix.c_int) :=
          M.run (M.alloc ((Integer.of_Z 28) : i32.t)).
        
        Definition AF_NFC : M.Val ltac:(libc.unix.c_int) :=
          M.run (M.alloc ((Integer.of_Z 39) : i32.t)).
        
        Definition AF_VSOCK : M.Val ltac:(libc.unix.c_int) :=
          M.run (M.alloc ((Integer.of_Z 40) : i32.t)).
        
        Definition AF_XDP : M.Val ltac:(libc.unix.c_int) :=
          M.run (M.alloc ((Integer.of_Z 44) : i32.t)).
        
        Definition PF_IB : M.Val ltac:(libc.unix.c_int) :=
          M.run (M.pure libc.unix.linux_like.linux.gnu.AF_IB).
        
        Definition PF_MPLS : M.Val ltac:(libc.unix.c_int) :=
          M.run (M.pure libc.unix.linux_like.linux.gnu.AF_MPLS).
        
        Definition PF_NFC : M.Val ltac:(libc.unix.c_int) :=
          M.run (M.pure libc.unix.linux_like.linux.gnu.AF_NFC).
        
        Definition PF_VSOCK : M.Val ltac:(libc.unix.c_int) :=
          M.run (M.pure libc.unix.linux_like.linux.gnu.AF_VSOCK).
        
        Definition PF_XDP : M.Val ltac:(libc.unix.c_int) :=
          M.run (M.pure libc.unix.linux_like.linux.gnu.AF_XDP).
        
        Definition SIGEV_THREAD_ID : M.Val ltac:(libc.unix.c_int) :=
          M.run (M.alloc ((Integer.of_Z 4) : i32.t)).
        
        Definition BUFSIZ : M.Val ltac:(libc.unix.c_uint) :=
          M.run (M.alloc ((Integer.of_Z 8192) : u32.t)).
        
        Definition TMP_MAX : M.Val ltac:(libc.unix.c_uint) :=
          M.run (M.alloc ((Integer.of_Z 238328) : u32.t)).
        
        Definition FOPEN_MAX : M.Val ltac:(libc.unix.c_uint) :=
          M.run (M.alloc ((Integer.of_Z 16) : u32.t)).
        
        Definition FILENAME_MAX : M.Val ltac:(libc.unix.c_uint) :=
          M.run (M.alloc ((Integer.of_Z 4096) : u32.t)).
        
        Definition POSIX_MADV_DONTNEED : M.Val ltac:(libc.unix.c_int) :=
          M.run (M.alloc ((Integer.of_Z 4) : i32.t)).
        
        Definition _SC_EQUIV_CLASS_MAX : M.Val ltac:(libc.unix.c_int) :=
          M.run (M.alloc ((Integer.of_Z 41) : i32.t)).
        
        Definition _SC_CHARCLASS_NAME_MAX : M.Val ltac:(libc.unix.c_int) :=
          M.run (M.alloc ((Integer.of_Z 45) : i32.t)).
        
        Definition _SC_PII : M.Val ltac:(libc.unix.c_int) :=
          M.run (M.alloc ((Integer.of_Z 53) : i32.t)).
        
        Definition _SC_PII_XTI : M.Val ltac:(libc.unix.c_int) :=
          M.run (M.alloc ((Integer.of_Z 54) : i32.t)).
        
        Definition _SC_PII_SOCKET : M.Val ltac:(libc.unix.c_int) :=
          M.run (M.alloc ((Integer.of_Z 55) : i32.t)).
        
        Definition _SC_PII_INTERNET : M.Val ltac:(libc.unix.c_int) :=
          M.run (M.alloc ((Integer.of_Z 56) : i32.t)).
        
        Definition _SC_PII_OSI : M.Val ltac:(libc.unix.c_int) :=
          M.run (M.alloc ((Integer.of_Z 57) : i32.t)).
        
        Definition _SC_POLL : M.Val ltac:(libc.unix.c_int) :=
          M.run (M.alloc ((Integer.of_Z 58) : i32.t)).
        
        Definition _SC_SELECT : M.Val ltac:(libc.unix.c_int) :=
          M.run (M.alloc ((Integer.of_Z 59) : i32.t)).
        
        Definition _SC_PII_INTERNET_STREAM : M.Val ltac:(libc.unix.c_int) :=
          M.run (M.alloc ((Integer.of_Z 61) : i32.t)).
        
        Definition _SC_PII_INTERNET_DGRAM : M.Val ltac:(libc.unix.c_int) :=
          M.run (M.alloc ((Integer.of_Z 62) : i32.t)).
        
        Definition _SC_PII_OSI_COTS : M.Val ltac:(libc.unix.c_int) :=
          M.run (M.alloc ((Integer.of_Z 63) : i32.t)).
        
        Definition _SC_PII_OSI_CLTS : M.Val ltac:(libc.unix.c_int) :=
          M.run (M.alloc ((Integer.of_Z 64) : i32.t)).
        
        Definition _SC_PII_OSI_M : M.Val ltac:(libc.unix.c_int) :=
          M.run (M.alloc ((Integer.of_Z 65) : i32.t)).
        
        Definition _SC_T_IOV_MAX : M.Val ltac:(libc.unix.c_int) :=
          M.run (M.alloc ((Integer.of_Z 66) : i32.t)).
        
        Definition _SC_2_C_VERSION : M.Val ltac:(libc.unix.c_int) :=
          M.run (M.alloc ((Integer.of_Z 96) : i32.t)).
        
        Definition _SC_CHAR_BIT : M.Val ltac:(libc.unix.c_int) :=
          M.run (M.alloc ((Integer.of_Z 101) : i32.t)).
        
        Definition _SC_CHAR_MAX : M.Val ltac:(libc.unix.c_int) :=
          M.run (M.alloc ((Integer.of_Z 102) : i32.t)).
        
        Definition _SC_CHAR_MIN : M.Val ltac:(libc.unix.c_int) :=
          M.run (M.alloc ((Integer.of_Z 103) : i32.t)).
        
        Definition _SC_INT_MAX : M.Val ltac:(libc.unix.c_int) :=
          M.run (M.alloc ((Integer.of_Z 104) : i32.t)).
        
        Definition _SC_INT_MIN : M.Val ltac:(libc.unix.c_int) :=
          M.run (M.alloc ((Integer.of_Z 105) : i32.t)).
        
        Definition _SC_LONG_BIT : M.Val ltac:(libc.unix.c_int) :=
          M.run (M.alloc ((Integer.of_Z 106) : i32.t)).
        
        Definition _SC_WORD_BIT : M.Val ltac:(libc.unix.c_int) :=
          M.run (M.alloc ((Integer.of_Z 107) : i32.t)).
        
        Definition _SC_MB_LEN_MAX : M.Val ltac:(libc.unix.c_int) :=
          M.run (M.alloc ((Integer.of_Z 108) : i32.t)).
        
        Definition _SC_SSIZE_MAX : M.Val ltac:(libc.unix.c_int) :=
          M.run (M.alloc ((Integer.of_Z 110) : i32.t)).
        
        Definition _SC_SCHAR_MAX : M.Val ltac:(libc.unix.c_int) :=
          M.run (M.alloc ((Integer.of_Z 111) : i32.t)).
        
        Definition _SC_SCHAR_MIN : M.Val ltac:(libc.unix.c_int) :=
          M.run (M.alloc ((Integer.of_Z 112) : i32.t)).
        
        Definition _SC_SHRT_MAX : M.Val ltac:(libc.unix.c_int) :=
          M.run (M.alloc ((Integer.of_Z 113) : i32.t)).
        
        Definition _SC_SHRT_MIN : M.Val ltac:(libc.unix.c_int) :=
          M.run (M.alloc ((Integer.of_Z 114) : i32.t)).
        
        Definition _SC_UCHAR_MAX : M.Val ltac:(libc.unix.c_int) :=
          M.run (M.alloc ((Integer.of_Z 115) : i32.t)).
        
        Definition _SC_UINT_MAX : M.Val ltac:(libc.unix.c_int) :=
          M.run (M.alloc ((Integer.of_Z 116) : i32.t)).
        
        Definition _SC_ULONG_MAX : M.Val ltac:(libc.unix.c_int) :=
          M.run (M.alloc ((Integer.of_Z 117) : i32.t)).
        
        Definition _SC_USHRT_MAX : M.Val ltac:(libc.unix.c_int) :=
          M.run (M.alloc ((Integer.of_Z 118) : i32.t)).
        
        Definition _SC_NL_ARGMAX : M.Val ltac:(libc.unix.c_int) :=
          M.run (M.alloc ((Integer.of_Z 119) : i32.t)).
        
        Definition _SC_NL_LANGMAX : M.Val ltac:(libc.unix.c_int) :=
          M.run (M.alloc ((Integer.of_Z 120) : i32.t)).
        
        Definition _SC_NL_MSGMAX : M.Val ltac:(libc.unix.c_int) :=
          M.run (M.alloc ((Integer.of_Z 121) : i32.t)).
        
        Definition _SC_NL_NMAX : M.Val ltac:(libc.unix.c_int) :=
          M.run (M.alloc ((Integer.of_Z 122) : i32.t)).
        
        Definition _SC_NL_SETMAX : M.Val ltac:(libc.unix.c_int) :=
          M.run (M.alloc ((Integer.of_Z 123) : i32.t)).
        
        Definition _SC_NL_TEXTMAX : M.Val ltac:(libc.unix.c_int) :=
          M.run (M.alloc ((Integer.of_Z 124) : i32.t)).
        
        Definition _SC_BASE : M.Val ltac:(libc.unix.c_int) :=
          M.run (M.alloc ((Integer.of_Z 134) : i32.t)).
        
        Definition _SC_C_LANG_SUPPORT : M.Val ltac:(libc.unix.c_int) :=
          M.run (M.alloc ((Integer.of_Z 135) : i32.t)).
        
        Definition _SC_C_LANG_SUPPORT_R : M.Val ltac:(libc.unix.c_int) :=
          M.run (M.alloc ((Integer.of_Z 136) : i32.t)).
        
        Definition _SC_DEVICE_IO : M.Val ltac:(libc.unix.c_int) :=
          M.run (M.alloc ((Integer.of_Z 140) : i32.t)).
        
        Definition _SC_DEVICE_SPECIFIC : M.Val ltac:(libc.unix.c_int) :=
          M.run (M.alloc ((Integer.of_Z 141) : i32.t)).
        
        Definition _SC_DEVICE_SPECIFIC_R : M.Val ltac:(libc.unix.c_int) :=
          M.run (M.alloc ((Integer.of_Z 142) : i32.t)).
        
        Definition _SC_FD_MGMT : M.Val ltac:(libc.unix.c_int) :=
          M.run (M.alloc ((Integer.of_Z 143) : i32.t)).
        
        Definition _SC_FIFO : M.Val ltac:(libc.unix.c_int) :=
          M.run (M.alloc ((Integer.of_Z 144) : i32.t)).
        
        Definition _SC_PIPE : M.Val ltac:(libc.unix.c_int) :=
          M.run (M.alloc ((Integer.of_Z 145) : i32.t)).
        
        Definition _SC_FILE_ATTRIBUTES : M.Val ltac:(libc.unix.c_int) :=
          M.run (M.alloc ((Integer.of_Z 146) : i32.t)).
        
        Definition _SC_FILE_LOCKING : M.Val ltac:(libc.unix.c_int) :=
          M.run (M.alloc ((Integer.of_Z 147) : i32.t)).
        
        Definition _SC_FILE_SYSTEM : M.Val ltac:(libc.unix.c_int) :=
          M.run (M.alloc ((Integer.of_Z 148) : i32.t)).
        
        Definition _SC_MULTI_PROCESS : M.Val ltac:(libc.unix.c_int) :=
          M.run (M.alloc ((Integer.of_Z 150) : i32.t)).
        
        Definition _SC_SINGLE_PROCESS : M.Val ltac:(libc.unix.c_int) :=
          M.run (M.alloc ((Integer.of_Z 151) : i32.t)).
        
        Definition _SC_NETWORKING : M.Val ltac:(libc.unix.c_int) :=
          M.run (M.alloc ((Integer.of_Z 152) : i32.t)).
        
        Definition _SC_REGEX_VERSION : M.Val ltac:(libc.unix.c_int) :=
          M.run (M.alloc ((Integer.of_Z 156) : i32.t)).
        
        Definition _SC_SIGNALS : M.Val ltac:(libc.unix.c_int) :=
          M.run (M.alloc ((Integer.of_Z 158) : i32.t)).
        
        Definition _SC_SYSTEM_DATABASE : M.Val ltac:(libc.unix.c_int) :=
          M.run (M.alloc ((Integer.of_Z 162) : i32.t)).
        
        Definition _SC_SYSTEM_DATABASE_R : M.Val ltac:(libc.unix.c_int) :=
          M.run (M.alloc ((Integer.of_Z 163) : i32.t)).
        
        Definition _SC_USER_GROUPS : M.Val ltac:(libc.unix.c_int) :=
          M.run (M.alloc ((Integer.of_Z 166) : i32.t)).
        
        Definition _SC_USER_GROUPS_R : M.Val ltac:(libc.unix.c_int) :=
          M.run (M.alloc ((Integer.of_Z 167) : i32.t)).
        
        Definition _SC_LEVEL1_ICACHE_SIZE : M.Val ltac:(libc.unix.c_int) :=
          M.run (M.alloc ((Integer.of_Z 185) : i32.t)).
        
        Definition _SC_LEVEL1_ICACHE_ASSOC : M.Val ltac:(libc.unix.c_int) :=
          M.run (M.alloc ((Integer.of_Z 186) : i32.t)).
        
        Definition _SC_LEVEL1_ICACHE_LINESIZE : M.Val ltac:(libc.unix.c_int) :=
          M.run (M.alloc ((Integer.of_Z 187) : i32.t)).
        
        Definition _SC_LEVEL1_DCACHE_SIZE : M.Val ltac:(libc.unix.c_int) :=
          M.run (M.alloc ((Integer.of_Z 188) : i32.t)).
        
        Definition _SC_LEVEL1_DCACHE_ASSOC : M.Val ltac:(libc.unix.c_int) :=
          M.run (M.alloc ((Integer.of_Z 189) : i32.t)).
        
        Definition _SC_LEVEL1_DCACHE_LINESIZE : M.Val ltac:(libc.unix.c_int) :=
          M.run (M.alloc ((Integer.of_Z 190) : i32.t)).
        
        Definition _SC_LEVEL2_CACHE_SIZE : M.Val ltac:(libc.unix.c_int) :=
          M.run (M.alloc ((Integer.of_Z 191) : i32.t)).
        
        Definition _SC_LEVEL2_CACHE_ASSOC : M.Val ltac:(libc.unix.c_int) :=
          M.run (M.alloc ((Integer.of_Z 192) : i32.t)).
        
        Definition _SC_LEVEL2_CACHE_LINESIZE : M.Val ltac:(libc.unix.c_int) :=
          M.run (M.alloc ((Integer.of_Z 193) : i32.t)).
        
        Definition _SC_LEVEL3_CACHE_SIZE : M.Val ltac:(libc.unix.c_int) :=
          M.run (M.alloc ((Integer.of_Z 194) : i32.t)).
        
        Definition _SC_LEVEL3_CACHE_ASSOC : M.Val ltac:(libc.unix.c_int) :=
          M.run (M.alloc ((Integer.of_Z 195) : i32.t)).
        
        Definition _SC_LEVEL3_CACHE_LINESIZE : M.Val ltac:(libc.unix.c_int) :=
          M.run (M.alloc ((Integer.of_Z 196) : i32.t)).
        
        Definition _SC_LEVEL4_CACHE_SIZE : M.Val ltac:(libc.unix.c_int) :=
          M.run (M.alloc ((Integer.of_Z 197) : i32.t)).
        
        Definition _SC_LEVEL4_CACHE_ASSOC : M.Val ltac:(libc.unix.c_int) :=
          M.run (M.alloc ((Integer.of_Z 198) : i32.t)).
        
        Definition _SC_LEVEL4_CACHE_LINESIZE : M.Val ltac:(libc.unix.c_int) :=
          M.run (M.alloc ((Integer.of_Z 199) : i32.t)).
        
        Definition O_ACCMODE : M.Val ltac:(libc.unix.c_int) :=
          M.run (M.alloc ((Integer.of_Z 3) : i32.t)).
        
        Definition ST_RELATIME
            :
              M.Val
                ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_ulong) :=
          M.run (M.alloc ((Integer.of_Z 4096) : u64.t)).
        
        Definition NI_MAXHOST
            : M.Val ltac:(libc.unix.linux_like.linux.socklen_t) :=
          M.run (M.alloc ((Integer.of_Z 1025) : u32.t)).
        
        Definition BINDERFS_SUPER_MAGIC
            :
              M.Val
                ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_long) :=
          M.run (M.alloc ((Integer.of_Z 1819242352) : i64.t)).
        
        Definition XFS_SUPER_MAGIC
            :
              M.Val
                ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_long) :=
          M.run (M.alloc ((Integer.of_Z 1481003842) : i64.t)).
        
        Definition CPU_SETSIZE : M.Val ltac:(libc.unix.c_int) :=
          M.run (M.alloc ((Integer.of_Z 1024) : i32.t)).
        
        Definition PTRACE_TRACEME : M.Val ltac:(libc.unix.c_uint) :=
          M.run (M.alloc ((Integer.of_Z 0) : u32.t)).
        
        Definition PTRACE_PEEKTEXT : M.Val ltac:(libc.unix.c_uint) :=
          M.run (M.alloc ((Integer.of_Z 1) : u32.t)).
        
        Definition PTRACE_PEEKDATA : M.Val ltac:(libc.unix.c_uint) :=
          M.run (M.alloc ((Integer.of_Z 2) : u32.t)).
        
        Definition PTRACE_PEEKUSER : M.Val ltac:(libc.unix.c_uint) :=
          M.run (M.alloc ((Integer.of_Z 3) : u32.t)).
        
        Definition PTRACE_POKETEXT : M.Val ltac:(libc.unix.c_uint) :=
          M.run (M.alloc ((Integer.of_Z 4) : u32.t)).
        
        Definition PTRACE_POKEDATA : M.Val ltac:(libc.unix.c_uint) :=
          M.run (M.alloc ((Integer.of_Z 5) : u32.t)).
        
        Definition PTRACE_POKEUSER : M.Val ltac:(libc.unix.c_uint) :=
          M.run (M.alloc ((Integer.of_Z 6) : u32.t)).
        
        Definition PTRACE_CONT : M.Val ltac:(libc.unix.c_uint) :=
          M.run (M.alloc ((Integer.of_Z 7) : u32.t)).
        
        Definition PTRACE_KILL : M.Val ltac:(libc.unix.c_uint) :=
          M.run (M.alloc ((Integer.of_Z 8) : u32.t)).
        
        Definition PTRACE_SINGLESTEP : M.Val ltac:(libc.unix.c_uint) :=
          M.run (M.alloc ((Integer.of_Z 9) : u32.t)).
        
        Definition PTRACE_ATTACH : M.Val ltac:(libc.unix.c_uint) :=
          M.run (M.alloc ((Integer.of_Z 16) : u32.t)).
        
        Definition PTRACE_SYSCALL : M.Val ltac:(libc.unix.c_uint) :=
          M.run (M.alloc ((Integer.of_Z 24) : u32.t)).
        
        Definition PTRACE_SETOPTIONS : M.Val ltac:(libc.unix.c_uint) :=
          M.run (M.alloc ((Integer.of_Z 16896) : u32.t)).
        
        Definition PTRACE_GETEVENTMSG : M.Val ltac:(libc.unix.c_uint) :=
          M.run (M.alloc ((Integer.of_Z 16897) : u32.t)).
        
        Definition PTRACE_GETSIGINFO : M.Val ltac:(libc.unix.c_uint) :=
          M.run (M.alloc ((Integer.of_Z 16898) : u32.t)).
        
        Definition PTRACE_SETSIGINFO : M.Val ltac:(libc.unix.c_uint) :=
          M.run (M.alloc ((Integer.of_Z 16899) : u32.t)).
        
        Definition PTRACE_GETREGSET : M.Val ltac:(libc.unix.c_uint) :=
          M.run (M.alloc ((Integer.of_Z 16900) : u32.t)).
        
        Definition PTRACE_SETREGSET : M.Val ltac:(libc.unix.c_uint) :=
          M.run (M.alloc ((Integer.of_Z 16901) : u32.t)).
        
        Definition PTRACE_SEIZE : M.Val ltac:(libc.unix.c_uint) :=
          M.run (M.alloc ((Integer.of_Z 16902) : u32.t)).
        
        Definition PTRACE_INTERRUPT : M.Val ltac:(libc.unix.c_uint) :=
          M.run (M.alloc ((Integer.of_Z 16903) : u32.t)).
        
        Definition PTRACE_LISTEN : M.Val ltac:(libc.unix.c_uint) :=
          M.run (M.alloc ((Integer.of_Z 16904) : u32.t)).
        
        Definition PTRACE_PEEKSIGINFO : M.Val ltac:(libc.unix.c_uint) :=
          M.run (M.alloc ((Integer.of_Z 16905) : u32.t)).
        
        Definition PTRACE_GETSIGMASK : M.Val ltac:(libc.unix.c_uint) :=
          M.run (M.alloc ((Integer.of_Z 16906) : u32.t)).
        
        Definition PTRACE_SETSIGMASK : M.Val ltac:(libc.unix.c_uint) :=
          M.run (M.alloc ((Integer.of_Z 16907) : u32.t)).
        
        Definition PTRACE_GET_SYSCALL_INFO : M.Val ltac:(libc.unix.c_uint) :=
          M.run (M.alloc ((Integer.of_Z 16910) : u32.t)).
        
        Definition PTRACE_SYSCALL_INFO_NONE
            : M.Val ltac:(libc.unix.linux_like.linux.__u8) :=
          M.run (M.alloc ((Integer.of_Z 0) : u8.t)).
        
        Definition PTRACE_SYSCALL_INFO_ENTRY
            : M.Val ltac:(libc.unix.linux_like.linux.__u8) :=
          M.run (M.alloc ((Integer.of_Z 1) : u8.t)).
        
        Definition PTRACE_SYSCALL_INFO_EXIT
            : M.Val ltac:(libc.unix.linux_like.linux.__u8) :=
          M.run (M.alloc ((Integer.of_Z 2) : u8.t)).
        
        Definition PTRACE_SYSCALL_INFO_SECCOMP
            : M.Val ltac:(libc.unix.linux_like.linux.__u8) :=
          M.run (M.alloc ((Integer.of_Z 3) : u8.t)).
        
        Definition RWF_HIPRI : M.Val ltac:(libc.unix.c_int) :=
          M.run (M.alloc ((Integer.of_Z 1) : i32.t)).
        
        Definition RWF_DSYNC : M.Val ltac:(libc.unix.c_int) :=
          M.run (M.alloc ((Integer.of_Z 2) : i32.t)).
        
        Definition RWF_SYNC : M.Val ltac:(libc.unix.c_int) :=
          M.run (M.alloc ((Integer.of_Z 4) : i32.t)).
        
        Definition RWF_NOWAIT : M.Val ltac:(libc.unix.c_int) :=
          M.run (M.alloc ((Integer.of_Z 8) : i32.t)).
        
        Definition RWF_APPEND : M.Val ltac:(libc.unix.c_int) :=
          M.run (M.alloc ((Integer.of_Z 16) : i32.t)).
        
        Definition TCA_PAD : M.Val ltac:(libc.unix.c_ushort) :=
          M.run (M.alloc ((Integer.of_Z 9) : u16.t)).
        
        Definition TCA_DUMP_INVISIBLE : M.Val ltac:(libc.unix.c_ushort) :=
          M.run (M.alloc ((Integer.of_Z 10) : u16.t)).
        
        Definition TCA_CHAIN : M.Val ltac:(libc.unix.c_ushort) :=
          M.run (M.alloc ((Integer.of_Z 11) : u16.t)).
        
        Definition TCA_HW_OFFLOAD : M.Val ltac:(libc.unix.c_ushort) :=
          M.run (M.alloc ((Integer.of_Z 12) : u16.t)).
        
        Definition RTM_DELNETCONF : M.Val u16.t :=
          M.run (M.alloc ((Integer.of_Z 81) : u16.t)).
        
        Definition RTM_NEWSTATS : M.Val u16.t :=
          M.run (M.alloc ((Integer.of_Z 92) : u16.t)).
        
        Definition RTM_GETSTATS : M.Val u16.t :=
          M.run (M.alloc ((Integer.of_Z 94) : u16.t)).
        
        Definition RTM_NEWCACHEREPORT : M.Val u16.t :=
          M.run (M.alloc ((Integer.of_Z 96) : u16.t)).
        
        Definition RTM_F_LOOKUP_TABLE : M.Val ltac:(libc.unix.c_uint) :=
          M.run (M.alloc ((Integer.of_Z 4096) : u32.t)).
        
        Definition RTM_F_FIB_MATCH : M.Val ltac:(libc.unix.c_uint) :=
          M.run (M.alloc ((Integer.of_Z 8192) : u32.t)).
        
        Definition RTA_VIA : M.Val ltac:(libc.unix.c_ushort) :=
          M.run (M.alloc ((Integer.of_Z 18) : u16.t)).
        
        Definition RTA_NEWDST : M.Val ltac:(libc.unix.c_ushort) :=
          M.run (M.alloc ((Integer.of_Z 19) : u16.t)).
        
        Definition RTA_PREF : M.Val ltac:(libc.unix.c_ushort) :=
          M.run (M.alloc ((Integer.of_Z 20) : u16.t)).
        
        Definition RTA_ENCAP_TYPE : M.Val ltac:(libc.unix.c_ushort) :=
          M.run (M.alloc ((Integer.of_Z 21) : u16.t)).
        
        Definition RTA_ENCAP : M.Val ltac:(libc.unix.c_ushort) :=
          M.run (M.alloc ((Integer.of_Z 22) : u16.t)).
        
        Definition RTA_EXPIRES : M.Val ltac:(libc.unix.c_ushort) :=
          M.run (M.alloc ((Integer.of_Z 23) : u16.t)).
        
        Definition RTA_PAD : M.Val ltac:(libc.unix.c_ushort) :=
          M.run (M.alloc ((Integer.of_Z 24) : u16.t)).
        
        Definition RTA_UID : M.Val ltac:(libc.unix.c_ushort) :=
          M.run (M.alloc ((Integer.of_Z 25) : u16.t)).
        
        Definition RTA_TTL_PROPAGATE : M.Val ltac:(libc.unix.c_ushort) :=
          M.run (M.alloc ((Integer.of_Z 26) : u16.t)).
        
        Definition NTF_EXT_LEARNED : M.Val u8.t :=
          M.run (M.alloc ((Integer.of_Z 16) : u8.t)).
        
        Definition NTF_OFFLOADED : M.Val u8.t :=
          M.run (M.alloc ((Integer.of_Z 32) : u8.t)).
        
        Definition NDA_MASTER : M.Val ltac:(libc.unix.c_ushort) :=
          M.run (M.alloc ((Integer.of_Z 9) : u16.t)).
        
        Definition NDA_LINK_NETNSID : M.Val ltac:(libc.unix.c_ushort) :=
          M.run (M.alloc ((Integer.of_Z 10) : u16.t)).
        
        Definition NDA_SRC_VNI : M.Val ltac:(libc.unix.c_ushort) :=
          M.run (M.alloc ((Integer.of_Z 11) : u16.t)).
        
        Definition UNAME26 : M.Val ltac:(libc.unix.c_int) :=
          M.run (M.alloc ((Integer.of_Z 131072) : i32.t)).
        
        Definition FDPIC_FUNCPTRS : M.Val ltac:(libc.unix.c_int) :=
          M.run (M.alloc ((Integer.of_Z 524288) : i32.t)).
        
        Definition IFA_FLAGS : M.Val ltac:(libc.unix.c_ushort) :=
          M.run (M.alloc ((Integer.of_Z 8) : u16.t)).
        
        Definition IFA_F_MANAGETEMPADDR : M.Val u32.t :=
          M.run (M.alloc ((Integer.of_Z 256) : u32.t)).
        
        Definition IFA_F_NOPREFIXROUTE : M.Val u32.t :=
          M.run (M.alloc ((Integer.of_Z 512) : u32.t)).
        
        Definition IFA_F_MCAUTOJOIN : M.Val u32.t :=
          M.run (M.alloc ((Integer.of_Z 1024) : u32.t)).
        
        Definition IFA_F_STABLE_PRIVACY : M.Val u32.t :=
          M.run (M.alloc ((Integer.of_Z 2048) : u32.t)).
        
        Definition MAX_LINKS : M.Val ltac:(libc.unix.c_int) :=
          M.run (M.alloc ((Integer.of_Z 32) : i32.t)).
        
        Definition GENL_UNS_ADMIN_PERM : M.Val ltac:(libc.unix.c_int) :=
          M.run (M.alloc ((Integer.of_Z 16) : i32.t)).
        
        Definition GENL_ID_VFS_DQUOT : M.Val ltac:(libc.unix.c_int) :=
          M.run
            (let* α0 : i32.t :=
              M.read libc.unix.linux_like.linux.NLMSG_MIN_TYPE in
            let* α1 : i32.t := BinOp.Panic.add α0 ((Integer.of_Z 1) : i32.t) in
            M.alloc α1).
        
        Definition GENL_ID_PMCRAID : M.Val ltac:(libc.unix.c_int) :=
          M.run
            (let* α0 : i32.t :=
              M.read libc.unix.linux_like.linux.NLMSG_MIN_TYPE in
            let* α1 : i32.t := BinOp.Panic.add α0 ((Integer.of_Z 2) : i32.t) in
            M.alloc α1).
        
        Definition XDP_SHARED_UMEM
            : M.Val ltac:(libc.unix.linux_like.linux.__u16) :=
          M.run
            (let* α0 : u16.t :=
              BinOp.Panic.shl
                ((Integer.of_Z 1) : u16.t)
                ((Integer.of_Z 0) : i32.t) in
            M.alloc α0).
        
        Definition XDP_COPY : M.Val ltac:(libc.unix.linux_like.linux.__u16) :=
          M.run
            (let* α0 : u16.t :=
              BinOp.Panic.shl
                ((Integer.of_Z 1) : u16.t)
                ((Integer.of_Z 1) : i32.t) in
            M.alloc α0).
        
        Definition XDP_ZEROCOPY
            : M.Val ltac:(libc.unix.linux_like.linux.__u16) :=
          M.run
            (let* α0 : u16.t :=
              BinOp.Panic.shl
                ((Integer.of_Z 1) : u16.t)
                ((Integer.of_Z 2) : i32.t) in
            M.alloc α0).
        
        Definition XDP_USE_NEED_WAKEUP
            : M.Val ltac:(libc.unix.linux_like.linux.__u16) :=
          M.run
            (let* α0 : u16.t :=
              BinOp.Panic.shl
                ((Integer.of_Z 1) : u16.t)
                ((Integer.of_Z 3) : i32.t) in
            M.alloc α0).
        
        Definition XDP_USE_SG : M.Val ltac:(libc.unix.linux_like.linux.__u16) :=
          M.run
            (let* α0 : u16.t :=
              BinOp.Panic.shl
                ((Integer.of_Z 1) : u16.t)
                ((Integer.of_Z 4) : i32.t) in
            M.alloc α0).
        
        Definition XDP_UMEM_UNALIGNED_CHUNK_FLAG
            : M.Val ltac:(libc.unix.linux_like.linux.__u32) :=
          M.run
            (let* α0 : u32.t :=
              BinOp.Panic.shl
                ((Integer.of_Z 1) : u32.t)
                ((Integer.of_Z 0) : i32.t) in
            M.alloc α0).
        
        Definition XDP_RING_NEED_WAKEUP
            : M.Val ltac:(libc.unix.linux_like.linux.__u32) :=
          M.run
            (let* α0 : u32.t :=
              BinOp.Panic.shl
                ((Integer.of_Z 1) : u32.t)
                ((Integer.of_Z 0) : i32.t) in
            M.alloc α0).
        
        Definition XDP_MMAP_OFFSETS : M.Val ltac:(libc.unix.c_int) :=
          M.run (M.alloc ((Integer.of_Z 1) : i32.t)).
        
        Definition XDP_RX_RING : M.Val ltac:(libc.unix.c_int) :=
          M.run (M.alloc ((Integer.of_Z 2) : i32.t)).
        
        Definition XDP_TX_RING : M.Val ltac:(libc.unix.c_int) :=
          M.run (M.alloc ((Integer.of_Z 3) : i32.t)).
        
        Definition XDP_UMEM_REG : M.Val ltac:(libc.unix.c_int) :=
          M.run (M.alloc ((Integer.of_Z 4) : i32.t)).
        
        Definition XDP_UMEM_FILL_RING : M.Val ltac:(libc.unix.c_int) :=
          M.run (M.alloc ((Integer.of_Z 5) : i32.t)).
        
        Definition XDP_UMEM_COMPLETION_RING : M.Val ltac:(libc.unix.c_int) :=
          M.run (M.alloc ((Integer.of_Z 6) : i32.t)).
        
        Definition XDP_STATISTICS : M.Val ltac:(libc.unix.c_int) :=
          M.run (M.alloc ((Integer.of_Z 7) : i32.t)).
        
        Definition XDP_OPTIONS : M.Val ltac:(libc.unix.c_int) :=
          M.run (M.alloc ((Integer.of_Z 8) : i32.t)).
        
        Definition XDP_OPTIONS_ZEROCOPY
            : M.Val ltac:(libc.unix.linux_like.linux.__u32) :=
          M.run
            (let* α0 : u32.t :=
              BinOp.Panic.shl
                ((Integer.of_Z 1) : u32.t)
                ((Integer.of_Z 0) : i32.t) in
            M.alloc α0).
        
        Definition XDP_PGOFF_RX_RING
            : M.Val ltac:(libc.unix.linux_like.linux.gnu.b64.off_t) :=
          M.run (M.alloc ((Integer.of_Z 0) : i64.t)).
        
        Definition XDP_PGOFF_TX_RING
            : M.Val ltac:(libc.unix.linux_like.linux.gnu.b64.off_t) :=
          M.run (M.alloc ((Integer.of_Z 2147483648) : i64.t)).
        
        Definition XDP_UMEM_PGOFF_FILL_RING
            : M.Val ltac:(libc.unix.c_ulonglong) :=
          M.run (M.alloc ((Integer.of_Z 4294967296) : u64.t)).
        
        Definition XDP_UMEM_PGOFF_COMPLETION_RING
            : M.Val ltac:(libc.unix.c_ulonglong) :=
          M.run (M.alloc ((Integer.of_Z 6442450944) : u64.t)).
        
        Definition XSK_UNALIGNED_BUF_OFFSET_SHIFT
            : M.Val ltac:(libc.unix.c_int) :=
          M.run (M.alloc ((Integer.of_Z 48) : i32.t)).
        
        Definition XSK_UNALIGNED_BUF_ADDR_MASK
            : M.Val ltac:(libc.unix.c_ulonglong) :=
          M.run
            (let* α0 : i32.t :=
              M.read
                libc.unix.linux_like.linux.gnu.XSK_UNALIGNED_BUF_OFFSET_SHIFT in
            let* α1 : u64.t := BinOp.Panic.shl ((Integer.of_Z 1) : u64.t) α0 in
            let* α2 : u64.t := BinOp.Panic.sub α1 ((Integer.of_Z 1) : u64.t) in
            M.alloc α2).
        
        Definition XDP_PKT_CONTD
            : M.Val ltac:(libc.unix.linux_like.linux.__u32) :=
          M.run
            (let* α0 : u32.t :=
              BinOp.Panic.shl
                ((Integer.of_Z 1) : u32.t)
                ((Integer.of_Z 0) : i32.t) in
            M.alloc α0).
        
        Definition NT_PRSTATUS : M.Val ltac:(libc.unix.c_int) :=
          M.run (M.alloc ((Integer.of_Z 1) : i32.t)).
        
        Definition NT_PRFPREG : M.Val ltac:(libc.unix.c_int) :=
          M.run (M.alloc ((Integer.of_Z 2) : i32.t)).
        
        Definition NT_FPREGSET : M.Val ltac:(libc.unix.c_int) :=
          M.run (M.alloc ((Integer.of_Z 2) : i32.t)).
        
        Definition NT_PRPSINFO : M.Val ltac:(libc.unix.c_int) :=
          M.run (M.alloc ((Integer.of_Z 3) : i32.t)).
        
        Definition NT_PRXREG : M.Val ltac:(libc.unix.c_int) :=
          M.run (M.alloc ((Integer.of_Z 4) : i32.t)).
        
        Definition NT_TASKSTRUCT : M.Val ltac:(libc.unix.c_int) :=
          M.run (M.alloc ((Integer.of_Z 4) : i32.t)).
        
        Definition NT_PLATFORM : M.Val ltac:(libc.unix.c_int) :=
          M.run (M.alloc ((Integer.of_Z 5) : i32.t)).
        
        Definition NT_AUXV : M.Val ltac:(libc.unix.c_int) :=
          M.run (M.alloc ((Integer.of_Z 6) : i32.t)).
        
        Definition NT_GWINDOWS : M.Val ltac:(libc.unix.c_int) :=
          M.run (M.alloc ((Integer.of_Z 7) : i32.t)).
        
        Definition NT_ASRS : M.Val ltac:(libc.unix.c_int) :=
          M.run (M.alloc ((Integer.of_Z 8) : i32.t)).
        
        Definition NT_PSTATUS : M.Val ltac:(libc.unix.c_int) :=
          M.run (M.alloc ((Integer.of_Z 10) : i32.t)).
        
        Definition NT_PSINFO : M.Val ltac:(libc.unix.c_int) :=
          M.run (M.alloc ((Integer.of_Z 13) : i32.t)).
        
        Definition NT_PRCRED : M.Val ltac:(libc.unix.c_int) :=
          M.run (M.alloc ((Integer.of_Z 14) : i32.t)).
        
        Definition NT_UTSNAME : M.Val ltac:(libc.unix.c_int) :=
          M.run (M.alloc ((Integer.of_Z 15) : i32.t)).
        
        Definition NT_LWPSTATUS : M.Val ltac:(libc.unix.c_int) :=
          M.run (M.alloc ((Integer.of_Z 16) : i32.t)).
        
        Definition NT_LWPSINFO : M.Val ltac:(libc.unix.c_int) :=
          M.run (M.alloc ((Integer.of_Z 17) : i32.t)).
        
        Definition NT_PRFPXREG : M.Val ltac:(libc.unix.c_int) :=
          M.run (M.alloc ((Integer.of_Z 20) : i32.t)).
        
        Definition ELFOSABI_ARM_AEABI : M.Val u8.t :=
          M.run (M.alloc ((Integer.of_Z 64) : u8.t)).
        
        Definition CLONE_NEWTIME : M.Val ltac:(libc.unix.c_int) :=
          M.run (M.alloc ((Integer.of_Z 128) : i32.t)).
        
        Definition CLONE_CLEAR_SIGHAND : M.Val ltac:(libc.unix.c_ulonglong) :=
          M.run (M.alloc ((Integer.of_Z 4294967296) : u64.t)).
        
        Definition CLONE_INTO_CGROUP : M.Val ltac:(libc.unix.c_ulonglong) :=
          M.run (M.alloc ((Integer.of_Z 8589934592) : u64.t)).
        
        Definition KEYCTL_DH_COMPUTE : M.Val u32.t :=
          M.run (M.alloc ((Integer.of_Z 23) : u32.t)).
        
        Definition KEYCTL_PKEY_QUERY : M.Val u32.t :=
          M.run (M.alloc ((Integer.of_Z 24) : u32.t)).
        
        Definition KEYCTL_PKEY_ENCRYPT : M.Val u32.t :=
          M.run (M.alloc ((Integer.of_Z 25) : u32.t)).
        
        Definition KEYCTL_PKEY_DECRYPT : M.Val u32.t :=
          M.run (M.alloc ((Integer.of_Z 26) : u32.t)).
        
        Definition KEYCTL_PKEY_SIGN : M.Val u32.t :=
          M.run (M.alloc ((Integer.of_Z 27) : u32.t)).
        
        Definition KEYCTL_PKEY_VERIFY : M.Val u32.t :=
          M.run (M.alloc ((Integer.of_Z 28) : u32.t)).
        
        Definition KEYCTL_RESTRICT_KEYRING : M.Val u32.t :=
          M.run (M.alloc ((Integer.of_Z 29) : u32.t)).
        
        Definition KEYCTL_SUPPORTS_ENCRYPT : M.Val u32.t :=
          M.run (M.alloc ((Integer.of_Z 1) : u32.t)).
        
        Definition KEYCTL_SUPPORTS_DECRYPT : M.Val u32.t :=
          M.run (M.alloc ((Integer.of_Z 2) : u32.t)).
        
        Definition KEYCTL_SUPPORTS_SIGN : M.Val u32.t :=
          M.run (M.alloc ((Integer.of_Z 4) : u32.t)).
        
        Definition KEYCTL_SUPPORTS_VERIFY : M.Val u32.t :=
          M.run (M.alloc ((Integer.of_Z 8) : u32.t)).
        
        Definition KEYCTL_MOVE : M.Val u32.t :=
          M.run (M.alloc ((Integer.of_Z 30) : u32.t)).
        
        Definition KEYCTL_CAPABILITIES : M.Val u32.t :=
          M.run (M.alloc ((Integer.of_Z 31) : u32.t)).
        
        Definition KEYCTL_CAPS0_CAPABILITIES : M.Val u32.t :=
          M.run (M.alloc ((Integer.of_Z 1) : u32.t)).
        
        Definition KEYCTL_CAPS0_PERSISTENT_KEYRINGS : M.Val u32.t :=
          M.run (M.alloc ((Integer.of_Z 2) : u32.t)).
        
        Definition KEYCTL_CAPS0_DIFFIE_HELLMAN : M.Val u32.t :=
          M.run (M.alloc ((Integer.of_Z 4) : u32.t)).
        
        Definition KEYCTL_CAPS0_PUBLIC_KEY : M.Val u32.t :=
          M.run (M.alloc ((Integer.of_Z 8) : u32.t)).
        
        Definition KEYCTL_CAPS0_BIG_KEY : M.Val u32.t :=
          M.run (M.alloc ((Integer.of_Z 16) : u32.t)).
        
        Definition KEYCTL_CAPS0_INVALIDATE : M.Val u32.t :=
          M.run (M.alloc ((Integer.of_Z 32) : u32.t)).
        
        Definition KEYCTL_CAPS0_RESTRICT_KEYRING : M.Val u32.t :=
          M.run (M.alloc ((Integer.of_Z 64) : u32.t)).
        
        Definition KEYCTL_CAPS0_MOVE : M.Val u32.t :=
          M.run (M.alloc ((Integer.of_Z 128) : u32.t)).
        
        Definition KEYCTL_CAPS1_NS_KEYRING_NAME : M.Val u32.t :=
          M.run (M.alloc ((Integer.of_Z 1) : u32.t)).
        
        Definition KEYCTL_CAPS1_NS_KEY_TAG : M.Val u32.t :=
          M.run (M.alloc ((Integer.of_Z 2) : u32.t)).
        
        Definition M_MXFAST : M.Val ltac:(libc.unix.c_int) :=
          M.run (M.alloc ((Integer.of_Z 1) : i32.t)).
        
        Definition M_NLBLKS : M.Val ltac:(libc.unix.c_int) :=
          M.run (M.alloc ((Integer.of_Z 2) : i32.t)).
        
        Definition M_GRAIN : M.Val ltac:(libc.unix.c_int) :=
          M.run (M.alloc ((Integer.of_Z 3) : i32.t)).
        
        Definition M_KEEP : M.Val ltac:(libc.unix.c_int) :=
          M.run (M.alloc ((Integer.of_Z 4) : i32.t)).
        
        Definition M_TRIM_THRESHOLD : M.Val ltac:(libc.unix.c_int) :=
          M.run (M.alloc ((Integer.of_Z (-1)) : i32.t)).
        
        Definition M_TOP_PAD : M.Val ltac:(libc.unix.c_int) :=
          M.run (M.alloc ((Integer.of_Z (-2)) : i32.t)).
        
        Definition M_MMAP_THRESHOLD : M.Val ltac:(libc.unix.c_int) :=
          M.run (M.alloc ((Integer.of_Z (-3)) : i32.t)).
        
        Definition M_MMAP_MAX : M.Val ltac:(libc.unix.c_int) :=
          M.run (M.alloc ((Integer.of_Z (-4)) : i32.t)).
        
        Definition M_CHECK_ACTION : M.Val ltac:(libc.unix.c_int) :=
          M.run (M.alloc ((Integer.of_Z (-5)) : i32.t)).
        
        Definition M_PERTURB : M.Val ltac:(libc.unix.c_int) :=
          M.run (M.alloc ((Integer.of_Z (-6)) : i32.t)).
        
        Definition M_ARENA_TEST : M.Val ltac:(libc.unix.c_int) :=
          M.run (M.alloc ((Integer.of_Z (-7)) : i32.t)).
        
        Definition M_ARENA_MAX : M.Val ltac:(libc.unix.c_int) :=
          M.run (M.alloc ((Integer.of_Z (-8)) : i32.t)).
        
        Definition AT_STATX_SYNC_TYPE : M.Val ltac:(libc.unix.c_int) :=
          M.run (M.alloc ((Integer.of_Z 24576) : i32.t)).
        
        Definition AT_STATX_SYNC_AS_STAT : M.Val ltac:(libc.unix.c_int) :=
          M.run (M.alloc ((Integer.of_Z 0) : i32.t)).
        
        Definition AT_STATX_FORCE_SYNC : M.Val ltac:(libc.unix.c_int) :=
          M.run (M.alloc ((Integer.of_Z 8192) : i32.t)).
        
        Definition AT_STATX_DONT_SYNC : M.Val ltac:(libc.unix.c_int) :=
          M.run (M.alloc ((Integer.of_Z 16384) : i32.t)).
        
        Definition STATX_TYPE : M.Val ltac:(libc.unix.c_uint) :=
          M.run (M.alloc ((Integer.of_Z 1) : u32.t)).
        
        Definition STATX_MODE : M.Val ltac:(libc.unix.c_uint) :=
          M.run (M.alloc ((Integer.of_Z 2) : u32.t)).
        
        Definition STATX_NLINK : M.Val ltac:(libc.unix.c_uint) :=
          M.run (M.alloc ((Integer.of_Z 4) : u32.t)).
        
        Definition STATX_UID : M.Val ltac:(libc.unix.c_uint) :=
          M.run (M.alloc ((Integer.of_Z 8) : u32.t)).
        
        Definition STATX_GID : M.Val ltac:(libc.unix.c_uint) :=
          M.run (M.alloc ((Integer.of_Z 16) : u32.t)).
        
        Definition STATX_ATIME : M.Val ltac:(libc.unix.c_uint) :=
          M.run (M.alloc ((Integer.of_Z 32) : u32.t)).
        
        Definition STATX_MTIME : M.Val ltac:(libc.unix.c_uint) :=
          M.run (M.alloc ((Integer.of_Z 64) : u32.t)).
        
        Definition STATX_CTIME : M.Val ltac:(libc.unix.c_uint) :=
          M.run (M.alloc ((Integer.of_Z 128) : u32.t)).
        
        Definition STATX_INO : M.Val ltac:(libc.unix.c_uint) :=
          M.run (M.alloc ((Integer.of_Z 256) : u32.t)).
        
        Definition STATX_SIZE : M.Val ltac:(libc.unix.c_uint) :=
          M.run (M.alloc ((Integer.of_Z 512) : u32.t)).
        
        Definition STATX_BLOCKS : M.Val ltac:(libc.unix.c_uint) :=
          M.run (M.alloc ((Integer.of_Z 1024) : u32.t)).
        
        Definition STATX_BASIC_STATS : M.Val ltac:(libc.unix.c_uint) :=
          M.run (M.alloc ((Integer.of_Z 2047) : u32.t)).
        
        Definition STATX_BTIME : M.Val ltac:(libc.unix.c_uint) :=
          M.run (M.alloc ((Integer.of_Z 2048) : u32.t)).
        
        Definition STATX_MNT_ID : M.Val ltac:(libc.unix.c_uint) :=
          M.run (M.alloc ((Integer.of_Z 4096) : u32.t)).
        
        Definition STATX_DIOALIGN : M.Val ltac:(libc.unix.c_uint) :=
          M.run (M.alloc ((Integer.of_Z 8192) : u32.t)).
        
        Definition STATX_ALL : M.Val ltac:(libc.unix.c_uint) :=
          M.run (M.alloc ((Integer.of_Z 4095) : u32.t)).
        
        Definition STATX__RESERVED : M.Val ltac:(libc.unix.c_int) :=
          M.run (M.alloc ((Integer.of_Z 2147483648) : i32.t)).
        
        Definition STATX_ATTR_COMPRESSED : M.Val ltac:(libc.unix.c_int) :=
          M.run (M.alloc ((Integer.of_Z 4) : i32.t)).
        
        Definition STATX_ATTR_IMMUTABLE : M.Val ltac:(libc.unix.c_int) :=
          M.run (M.alloc ((Integer.of_Z 16) : i32.t)).
        
        Definition STATX_ATTR_APPEND : M.Val ltac:(libc.unix.c_int) :=
          M.run (M.alloc ((Integer.of_Z 32) : i32.t)).
        
        Definition STATX_ATTR_NODUMP : M.Val ltac:(libc.unix.c_int) :=
          M.run (M.alloc ((Integer.of_Z 64) : i32.t)).
        
        Definition STATX_ATTR_ENCRYPTED : M.Val ltac:(libc.unix.c_int) :=
          M.run (M.alloc ((Integer.of_Z 2048) : i32.t)).
        
        Definition STATX_ATTR_AUTOMOUNT : M.Val ltac:(libc.unix.c_int) :=
          M.run (M.alloc ((Integer.of_Z 4096) : i32.t)).
        
        Definition STATX_ATTR_MOUNT_ROOT : M.Val ltac:(libc.unix.c_int) :=
          M.run (M.alloc ((Integer.of_Z 8192) : i32.t)).
        
        Definition STATX_ATTR_VERITY : M.Val ltac:(libc.unix.c_int) :=
          M.run (M.alloc ((Integer.of_Z 1048576) : i32.t)).
        
        Definition STATX_ATTR_DAX : M.Val ltac:(libc.unix.c_int) :=
          M.run (M.alloc ((Integer.of_Z 2097152) : i32.t)).
        
        Definition SOMAXCONN : M.Val ltac:(libc.unix.c_int) :=
          M.run (M.alloc ((Integer.of_Z 4096) : i32.t)).
        
        Definition MOVE_MOUNT_F_SYMLINKS : M.Val ltac:(libc.unix.c_uint) :=
          M.run (M.alloc ((Integer.of_Z 1) : u32.t)).
        
        Definition MOVE_MOUNT_F_AUTOMOUNTS : M.Val ltac:(libc.unix.c_uint) :=
          M.run (M.alloc ((Integer.of_Z 2) : u32.t)).
        
        Definition MOVE_MOUNT_F_EMPTY_PATH : M.Val ltac:(libc.unix.c_uint) :=
          M.run (M.alloc ((Integer.of_Z 4) : u32.t)).
        
        Definition MOVE_MOUNT_T_SYMLINKS : M.Val ltac:(libc.unix.c_uint) :=
          M.run (M.alloc ((Integer.of_Z 16) : u32.t)).
        
        Definition MOVE_MOUNT_T_AUTOMOUNTS : M.Val ltac:(libc.unix.c_uint) :=
          M.run (M.alloc ((Integer.of_Z 32) : u32.t)).
        
        Definition MOVE_MOUNT_T_EMPTY_PATH : M.Val ltac:(libc.unix.c_uint) :=
          M.run (M.alloc ((Integer.of_Z 64) : u32.t)).
        
        Definition MOVE_MOUNT_SET_GROUP : M.Val ltac:(libc.unix.c_uint) :=
          M.run (M.alloc ((Integer.of_Z 256) : u32.t)).
        
        Definition MOVE_MOUNT_BENEATH : M.Val ltac:(libc.unix.c_uint) :=
          M.run (M.alloc ((Integer.of_Z 512) : u32.t)).
        
        Definition ADJ_OFFSET : M.Val ltac:(libc.unix.c_uint) :=
          M.run (M.alloc ((Integer.of_Z 1) : u32.t)).
        
        Definition ADJ_FREQUENCY : M.Val ltac:(libc.unix.c_uint) :=
          M.run (M.alloc ((Integer.of_Z 2) : u32.t)).
        
        Definition ADJ_MAXERROR : M.Val ltac:(libc.unix.c_uint) :=
          M.run (M.alloc ((Integer.of_Z 4) : u32.t)).
        
        Definition ADJ_ESTERROR : M.Val ltac:(libc.unix.c_uint) :=
          M.run (M.alloc ((Integer.of_Z 8) : u32.t)).
        
        Definition ADJ_STATUS : M.Val ltac:(libc.unix.c_uint) :=
          M.run (M.alloc ((Integer.of_Z 16) : u32.t)).
        
        Definition ADJ_TIMECONST : M.Val ltac:(libc.unix.c_uint) :=
          M.run (M.alloc ((Integer.of_Z 32) : u32.t)).
        
        Definition ADJ_TAI : M.Val ltac:(libc.unix.c_uint) :=
          M.run (M.alloc ((Integer.of_Z 128) : u32.t)).
        
        Definition ADJ_SETOFFSET : M.Val ltac:(libc.unix.c_uint) :=
          M.run (M.alloc ((Integer.of_Z 256) : u32.t)).
        
        Definition ADJ_MICRO : M.Val ltac:(libc.unix.c_uint) :=
          M.run (M.alloc ((Integer.of_Z 4096) : u32.t)).
        
        Definition ADJ_NANO : M.Val ltac:(libc.unix.c_uint) :=
          M.run (M.alloc ((Integer.of_Z 8192) : u32.t)).
        
        Definition ADJ_TICK : M.Val ltac:(libc.unix.c_uint) :=
          M.run (M.alloc ((Integer.of_Z 16384) : u32.t)).
        
        Definition ADJ_OFFSET_SINGLESHOT : M.Val ltac:(libc.unix.c_uint) :=
          M.run (M.alloc ((Integer.of_Z 32769) : u32.t)).
        
        Definition ADJ_OFFSET_SS_READ : M.Val ltac:(libc.unix.c_uint) :=
          M.run (M.alloc ((Integer.of_Z 40961) : u32.t)).
        
        Definition MOD_OFFSET : M.Val ltac:(libc.unix.c_uint) :=
          M.run (M.pure libc.unix.linux_like.linux.gnu.ADJ_OFFSET).
        
        Definition MOD_FREQUENCY : M.Val ltac:(libc.unix.c_uint) :=
          M.run (M.pure libc.unix.linux_like.linux.gnu.ADJ_FREQUENCY).
        
        Definition MOD_MAXERROR : M.Val ltac:(libc.unix.c_uint) :=
          M.run (M.pure libc.unix.linux_like.linux.gnu.ADJ_MAXERROR).
        
        Definition MOD_ESTERROR : M.Val ltac:(libc.unix.c_uint) :=
          M.run (M.pure libc.unix.linux_like.linux.gnu.ADJ_ESTERROR).
        
        Definition MOD_STATUS : M.Val ltac:(libc.unix.c_uint) :=
          M.run (M.pure libc.unix.linux_like.linux.gnu.ADJ_STATUS).
        
        Definition MOD_TIMECONST : M.Val ltac:(libc.unix.c_uint) :=
          M.run (M.pure libc.unix.linux_like.linux.gnu.ADJ_TIMECONST).
        
        Definition MOD_CLKB : M.Val ltac:(libc.unix.c_uint) :=
          M.run (M.pure libc.unix.linux_like.linux.gnu.ADJ_TICK).
        
        Definition MOD_CLKA : M.Val ltac:(libc.unix.c_uint) :=
          M.run (M.pure libc.unix.linux_like.linux.gnu.ADJ_OFFSET_SINGLESHOT).
        
        Definition MOD_TAI : M.Val ltac:(libc.unix.c_uint) :=
          M.run (M.pure libc.unix.linux_like.linux.gnu.ADJ_TAI).
        
        Definition MOD_MICRO : M.Val ltac:(libc.unix.c_uint) :=
          M.run (M.pure libc.unix.linux_like.linux.gnu.ADJ_MICRO).
        
        Definition MOD_NANO : M.Val ltac:(libc.unix.c_uint) :=
          M.run (M.pure libc.unix.linux_like.linux.gnu.ADJ_NANO).
        
        Definition STA_PLL : M.Val ltac:(libc.unix.c_int) :=
          M.run (M.alloc ((Integer.of_Z 1) : i32.t)).
        
        Definition STA_PPSFREQ : M.Val ltac:(libc.unix.c_int) :=
          M.run (M.alloc ((Integer.of_Z 2) : i32.t)).
        
        Definition STA_PPSTIME : M.Val ltac:(libc.unix.c_int) :=
          M.run (M.alloc ((Integer.of_Z 4) : i32.t)).
        
        Definition STA_FLL : M.Val ltac:(libc.unix.c_int) :=
          M.run (M.alloc ((Integer.of_Z 8) : i32.t)).
        
        Definition STA_INS : M.Val ltac:(libc.unix.c_int) :=
          M.run (M.alloc ((Integer.of_Z 16) : i32.t)).
        
        Definition STA_DEL : M.Val ltac:(libc.unix.c_int) :=
          M.run (M.alloc ((Integer.of_Z 32) : i32.t)).
        
        Definition STA_UNSYNC : M.Val ltac:(libc.unix.c_int) :=
          M.run (M.alloc ((Integer.of_Z 64) : i32.t)).
        
        Definition STA_FREQHOLD : M.Val ltac:(libc.unix.c_int) :=
          M.run (M.alloc ((Integer.of_Z 128) : i32.t)).
        
        Definition STA_PPSSIGNAL : M.Val ltac:(libc.unix.c_int) :=
          M.run (M.alloc ((Integer.of_Z 256) : i32.t)).
        
        Definition STA_PPSJITTER : M.Val ltac:(libc.unix.c_int) :=
          M.run (M.alloc ((Integer.of_Z 512) : i32.t)).
        
        Definition STA_PPSWANDER : M.Val ltac:(libc.unix.c_int) :=
          M.run (M.alloc ((Integer.of_Z 1024) : i32.t)).
        
        Definition STA_PPSERROR : M.Val ltac:(libc.unix.c_int) :=
          M.run (M.alloc ((Integer.of_Z 2048) : i32.t)).
        
        Definition STA_CLOCKERR : M.Val ltac:(libc.unix.c_int) :=
          M.run (M.alloc ((Integer.of_Z 4096) : i32.t)).
        
        Definition STA_NANO : M.Val ltac:(libc.unix.c_int) :=
          M.run (M.alloc ((Integer.of_Z 8192) : i32.t)).
        
        Definition STA_MODE : M.Val ltac:(libc.unix.c_int) :=
          M.run (M.alloc ((Integer.of_Z 16384) : i32.t)).
        
        Definition STA_CLK : M.Val ltac:(libc.unix.c_int) :=
          M.run (M.alloc ((Integer.of_Z 32768) : i32.t)).
        
        Definition STA_RONLY : M.Val ltac:(libc.unix.c_int) :=
          M.run
            (let* α0 : i32.t :=
              M.read libc.unix.linux_like.linux.gnu.STA_PPSSIGNAL in
            let* α1 : i32.t :=
              M.read libc.unix.linux_like.linux.gnu.STA_PPSJITTER in
            let* α2 : i32.t :=
              M.read libc.unix.linux_like.linux.gnu.STA_PPSWANDER in
            let* α3 : i32.t :=
              M.read libc.unix.linux_like.linux.gnu.STA_PPSERROR in
            let* α4 : i32.t :=
              M.read libc.unix.linux_like.linux.gnu.STA_CLOCKERR in
            let* α5 : i32.t := M.read libc.unix.linux_like.linux.gnu.STA_NANO in
            let* α6 : i32.t := M.read libc.unix.linux_like.linux.gnu.STA_MODE in
            let* α7 : i32.t := M.read libc.unix.linux_like.linux.gnu.STA_CLK in
            M.alloc
              (BinOp.Pure.bit_or
                (BinOp.Pure.bit_or
                  (BinOp.Pure.bit_or
                    (BinOp.Pure.bit_or
                      (BinOp.Pure.bit_or
                        (BinOp.Pure.bit_or (BinOp.Pure.bit_or α0 α1) α2)
                        α3)
                      α4)
                    α5)
                  α6)
                α7)).
        
        Definition NTP_API : M.Val ltac:(libc.unix.c_int) :=
          M.run (M.alloc ((Integer.of_Z 4) : i32.t)).
        
        Definition TIME_OK : M.Val ltac:(libc.unix.c_int) :=
          M.run (M.alloc ((Integer.of_Z 0) : i32.t)).
        
        Definition TIME_INS : M.Val ltac:(libc.unix.c_int) :=
          M.run (M.alloc ((Integer.of_Z 1) : i32.t)).
        
        Definition TIME_DEL : M.Val ltac:(libc.unix.c_int) :=
          M.run (M.alloc ((Integer.of_Z 2) : i32.t)).
        
        Definition TIME_OOP : M.Val ltac:(libc.unix.c_int) :=
          M.run (M.alloc ((Integer.of_Z 3) : i32.t)).
        
        Definition TIME_WAIT : M.Val ltac:(libc.unix.c_int) :=
          M.run (M.alloc ((Integer.of_Z 4) : i32.t)).
        
        Definition TIME_ERROR : M.Val ltac:(libc.unix.c_int) :=
          M.run (M.alloc ((Integer.of_Z 5) : i32.t)).
        
        Definition TIME_BAD : M.Val ltac:(libc.unix.c_int) :=
          M.run (M.pure libc.unix.linux_like.linux.gnu.TIME_ERROR).
        
        Definition MAXTC
            :
              M.Val
                ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_long) :=
          M.run (M.alloc ((Integer.of_Z 6) : i64.t)).
        
        Definition GLOB_PERIOD : M.Val ltac:(libc.unix.c_int) :=
          M.run
            (let* α0 : i32.t :=
              BinOp.Panic.shl
                ((Integer.of_Z 1) : i32.t)
                ((Integer.of_Z 7) : i32.t) in
            M.alloc α0).
        
        Definition GLOB_ALTDIRFUNC : M.Val ltac:(libc.unix.c_int) :=
          M.run
            (let* α0 : i32.t :=
              BinOp.Panic.shl
                ((Integer.of_Z 1) : i32.t)
                ((Integer.of_Z 9) : i32.t) in
            M.alloc α0).
        
        Definition GLOB_BRACE : M.Val ltac:(libc.unix.c_int) :=
          M.run
            (let* α0 : i32.t :=
              BinOp.Panic.shl
                ((Integer.of_Z 1) : i32.t)
                ((Integer.of_Z 10) : i32.t) in
            M.alloc α0).
        
        Definition GLOB_NOMAGIC : M.Val ltac:(libc.unix.c_int) :=
          M.run
            (let* α0 : i32.t :=
              BinOp.Panic.shl
                ((Integer.of_Z 1) : i32.t)
                ((Integer.of_Z 11) : i32.t) in
            M.alloc α0).
        
        Definition GLOB_TILDE : M.Val ltac:(libc.unix.c_int) :=
          M.run
            (let* α0 : i32.t :=
              BinOp.Panic.shl
                ((Integer.of_Z 1) : i32.t)
                ((Integer.of_Z 12) : i32.t) in
            M.alloc α0).
        
        Definition GLOB_ONLYDIR : M.Val ltac:(libc.unix.c_int) :=
          M.run
            (let* α0 : i32.t :=
              BinOp.Panic.shl
                ((Integer.of_Z 1) : i32.t)
                ((Integer.of_Z 13) : i32.t) in
            M.alloc α0).
        
        Definition GLOB_TILDE_CHECK : M.Val ltac:(libc.unix.c_int) :=
          M.run
            (let* α0 : i32.t :=
              BinOp.Panic.shl
                ((Integer.of_Z 1) : i32.t)
                ((Integer.of_Z 14) : i32.t) in
            M.alloc α0).
        
        Definition MADV_COLLAPSE : M.Val ltac:(libc.unix.c_int) :=
          M.run (M.alloc ((Integer.of_Z 25) : i32.t)).
        
        Definition PTHREAD_STACK_MIN : M.Val ltac:(libc.unix.size_t) :=
          M.run (M.alloc ((Integer.of_Z 16384) : usize.t)).
        
        Definition PTHREAD_MUTEX_ADAPTIVE_NP : M.Val ltac:(libc.unix.c_int) :=
          M.run (M.alloc ((Integer.of_Z 3) : i32.t)).
        
        Definition REG_STARTEND : M.Val ltac:(libc.unix.c_int) :=
          M.run (M.alloc ((Integer.of_Z 4) : i32.t)).
        
        Definition REG_EEND : M.Val ltac:(libc.unix.c_int) :=
          M.run (M.alloc ((Integer.of_Z 14) : i32.t)).
        
        Definition REG_ESIZE : M.Val ltac:(libc.unix.c_int) :=
          M.run (M.alloc ((Integer.of_Z 15) : i32.t)).
        
        Definition REG_ERPAREN : M.Val ltac:(libc.unix.c_int) :=
          M.run (M.alloc ((Integer.of_Z 16) : i32.t)).
        
        Error ForeignMod.
        
        Module b64.
          Ltac ino_t := exact u64.t.
          
          Ltac off_t := exact i64.t.
          
          Ltac blkcnt_t := exact i64.t.
          
          Ltac shmatt_t := exact u64.t.
          
          Ltac msgqnum_t := exact u64.t.
          
          Ltac msglen_t := exact u64.t.
          
          Ltac fsblkcnt_t := exact u64.t.
          
          Ltac fsfilcnt_t := exact u64.t.
          
          Ltac rlim_t := exact u64.t.
          
          Ltac __syscall_ulong_t :=
            exact
              ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_ulong).
          
          Ltac __fsword_t := exact i64.t.
          
          Ltac clock_t := exact i64.t.
          
          Ltac time_t := exact i64.t.
          
          Module  sigset_t.
          Section sigset_t.
            Record t : Set := {
              __val : array u64.t;
            }.
            
            Definition Get___val :=
              Ref.map
                (fun α => Some α.(__val))
                (fun β α => Some (α <| __val := β |>)).
          End sigset_t.
          End sigset_t.
          
          Module  Impl_core_marker_Copy_for_libc_unix_linux_like_linux_gnu_b64_sigset_t_t.
          Section Impl_core_marker_Copy_for_libc_unix_linux_like_linux_gnu_b64_sigset_t_t.
            Definition Self : Set :=
              libc.unix.linux_like.linux.gnu.b64.sigset_t.t.
            
            Global Instance ℐ : core.marker.Copy.Trait Self := {
            }.
          End Impl_core_marker_Copy_for_libc_unix_linux_like_linux_gnu_b64_sigset_t_t.
          End Impl_core_marker_Copy_for_libc_unix_linux_like_linux_gnu_b64_sigset_t_t.
          
          Module  Impl_core_clone_Clone_for_libc_unix_linux_like_linux_gnu_b64_sigset_t_t.
          Section Impl_core_clone_Clone_for_libc_unix_linux_like_linux_gnu_b64_sigset_t_t.
            Definition Self : Set :=
              libc.unix.linux_like.linux.gnu.b64.sigset_t.t.
            
            (*
                        fn clone(&self) -> $i { *self }
            *)
            Definition clone
                (self : ref Self)
                : M libc.unix.linux_like.linux.gnu.b64.sigset_t.t :=
              let* self := M.alloc self in
              let* α0 : ref libc.unix.linux_like.linux.gnu.b64.sigset_t.t :=
                M.read self in
              M.read (deref α0).
            
            Global Instance AssociatedFunction_clone :
              Notations.DoubleColon Self "clone" := {
              Notations.double_colon := clone;
            }.
            
            Global Instance ℐ : core.clone.Clone.Required.Trait Self := {
              core.clone.Clone.clone := clone;
              core.clone.Clone.clone_from := Datatypes.None;
            }.
          End Impl_core_clone_Clone_for_libc_unix_linux_like_linux_gnu_b64_sigset_t_t.
          End Impl_core_clone_Clone_for_libc_unix_linux_like_linux_gnu_b64_sigset_t_t.
          
          Module  sysinfo.
          Section sysinfo.
            Record t : Set := {
              uptime : i64.t;
              loads : array u64.t;
              totalram : u64.t;
              freeram : u64.t;
              sharedram : u64.t;
              bufferram : u64.t;
              totalswap : u64.t;
              freeswap : u64.t;
              procs : ltac:(libc.unix.c_ushort);
              pad : ltac:(libc.unix.c_ushort);
              totalhigh : u64.t;
              freehigh : u64.t;
              mem_unit : ltac:(libc.unix.c_uint);
              _f :
                array ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.c_char);
            }.
            
            Definition Get_uptime :=
              Ref.map
                (fun α => Some α.(uptime))
                (fun β α => Some (α <| uptime := β |>)).
            Definition Get_loads :=
              Ref.map
                (fun α => Some α.(loads))
                (fun β α => Some (α <| loads := β |>)).
            Definition Get_totalram :=
              Ref.map
                (fun α => Some α.(totalram))
                (fun β α => Some (α <| totalram := β |>)).
            Definition Get_freeram :=
              Ref.map
                (fun α => Some α.(freeram))
                (fun β α => Some (α <| freeram := β |>)).
            Definition Get_sharedram :=
              Ref.map
                (fun α => Some α.(sharedram))
                (fun β α => Some (α <| sharedram := β |>)).
            Definition Get_bufferram :=
              Ref.map
                (fun α => Some α.(bufferram))
                (fun β α => Some (α <| bufferram := β |>)).
            Definition Get_totalswap :=
              Ref.map
                (fun α => Some α.(totalswap))
                (fun β α => Some (α <| totalswap := β |>)).
            Definition Get_freeswap :=
              Ref.map
                (fun α => Some α.(freeswap))
                (fun β α => Some (α <| freeswap := β |>)).
            Definition Get_procs :=
              Ref.map
                (fun α => Some α.(procs))
                (fun β α => Some (α <| procs := β |>)).
            Definition Get_pad :=
              Ref.map
                (fun α => Some α.(pad))
                (fun β α => Some (α <| pad := β |>)).
            Definition Get_totalhigh :=
              Ref.map
                (fun α => Some α.(totalhigh))
                (fun β α => Some (α <| totalhigh := β |>)).
            Definition Get_freehigh :=
              Ref.map
                (fun α => Some α.(freehigh))
                (fun β α => Some (α <| freehigh := β |>)).
            Definition Get_mem_unit :=
              Ref.map
                (fun α => Some α.(mem_unit))
                (fun β α => Some (α <| mem_unit := β |>)).
            Definition Get__f :=
              Ref.map
                (fun α => Some α.(_f))
                (fun β α => Some (α <| _f := β |>)).
          End sysinfo.
          End sysinfo.
          
          Module  Impl_core_marker_Copy_for_libc_unix_linux_like_linux_gnu_b64_sysinfo_t.
          Section Impl_core_marker_Copy_for_libc_unix_linux_like_linux_gnu_b64_sysinfo_t.
            Definition Self : Set :=
              libc.unix.linux_like.linux.gnu.b64.sysinfo.t.
            
            Global Instance ℐ : core.marker.Copy.Trait Self := {
            }.
          End Impl_core_marker_Copy_for_libc_unix_linux_like_linux_gnu_b64_sysinfo_t.
          End Impl_core_marker_Copy_for_libc_unix_linux_like_linux_gnu_b64_sysinfo_t.
          
          Module  Impl_core_clone_Clone_for_libc_unix_linux_like_linux_gnu_b64_sysinfo_t.
          Section Impl_core_clone_Clone_for_libc_unix_linux_like_linux_gnu_b64_sysinfo_t.
            Definition Self : Set :=
              libc.unix.linux_like.linux.gnu.b64.sysinfo.t.
            
            (*
                        fn clone(&self) -> $i { *self }
            *)
            Definition clone
                (self : ref Self)
                : M libc.unix.linux_like.linux.gnu.b64.sysinfo.t :=
              let* self := M.alloc self in
              let* α0 : ref libc.unix.linux_like.linux.gnu.b64.sysinfo.t :=
                M.read self in
              M.read (deref α0).
            
            Global Instance AssociatedFunction_clone :
              Notations.DoubleColon Self "clone" := {
              Notations.double_colon := clone;
            }.
            
            Global Instance ℐ : core.clone.Clone.Required.Trait Self := {
              core.clone.Clone.clone := clone;
              core.clone.Clone.clone_from := Datatypes.None;
            }.
          End Impl_core_clone_Clone_for_libc_unix_linux_like_linux_gnu_b64_sysinfo_t.
          End Impl_core_clone_Clone_for_libc_unix_linux_like_linux_gnu_b64_sysinfo_t.
          
          Module  msqid_ds.
          Section msqid_ds.
            Record t : Set := {
              msg_perm : libc.unix.linux_like.linux.gnu.b64.x86_64.ipc_perm.t;
              msg_stime : ltac:(libc.unix.linux_like.linux.gnu.b64.time_t);
              msg_rtime : ltac:(libc.unix.linux_like.linux.gnu.b64.time_t);
              msg_ctime : ltac:(libc.unix.linux_like.linux.gnu.b64.time_t);
              __msg_cbytes : u64.t;
              msg_qnum : ltac:(libc.unix.linux_like.linux.gnu.b64.msgqnum_t);
              msg_qbytes : ltac:(libc.unix.linux_like.linux.gnu.b64.msglen_t);
              msg_lspid : ltac:(libc.unix.pid_t);
              msg_lrpid : ltac:(libc.unix.pid_t);
              __glibc_reserved4 : u64.t;
              __glibc_reserved5 : u64.t;
            }.
            
            Definition Get_msg_perm :=
              Ref.map
                (fun α => Some α.(msg_perm))
                (fun β α => Some (α <| msg_perm := β |>)).
            Definition Get_msg_stime :=
              Ref.map
                (fun α => Some α.(msg_stime))
                (fun β α => Some (α <| msg_stime := β |>)).
            Definition Get_msg_rtime :=
              Ref.map
                (fun α => Some α.(msg_rtime))
                (fun β α => Some (α <| msg_rtime := β |>)).
            Definition Get_msg_ctime :=
              Ref.map
                (fun α => Some α.(msg_ctime))
                (fun β α => Some (α <| msg_ctime := β |>)).
            Definition Get___msg_cbytes :=
              Ref.map
                (fun α => Some α.(__msg_cbytes))
                (fun β α => Some (α <| __msg_cbytes := β |>)).
            Definition Get_msg_qnum :=
              Ref.map
                (fun α => Some α.(msg_qnum))
                (fun β α => Some (α <| msg_qnum := β |>)).
            Definition Get_msg_qbytes :=
              Ref.map
                (fun α => Some α.(msg_qbytes))
                (fun β α => Some (α <| msg_qbytes := β |>)).
            Definition Get_msg_lspid :=
              Ref.map
                (fun α => Some α.(msg_lspid))
                (fun β α => Some (α <| msg_lspid := β |>)).
            Definition Get_msg_lrpid :=
              Ref.map
                (fun α => Some α.(msg_lrpid))
                (fun β α => Some (α <| msg_lrpid := β |>)).
            Definition Get___glibc_reserved4 :=
              Ref.map
                (fun α => Some α.(__glibc_reserved4))
                (fun β α => Some (α <| __glibc_reserved4 := β |>)).
            Definition Get___glibc_reserved5 :=
              Ref.map
                (fun α => Some α.(__glibc_reserved5))
                (fun β α => Some (α <| __glibc_reserved5 := β |>)).
          End msqid_ds.
          End msqid_ds.
          
          Module  Impl_core_marker_Copy_for_libc_unix_linux_like_linux_gnu_b64_msqid_ds_t.
          Section Impl_core_marker_Copy_for_libc_unix_linux_like_linux_gnu_b64_msqid_ds_t.
            Definition Self : Set :=
              libc.unix.linux_like.linux.gnu.b64.msqid_ds.t.
            
            Global Instance ℐ : core.marker.Copy.Trait Self := {
            }.
          End Impl_core_marker_Copy_for_libc_unix_linux_like_linux_gnu_b64_msqid_ds_t.
          End Impl_core_marker_Copy_for_libc_unix_linux_like_linux_gnu_b64_msqid_ds_t.
          
          Module  Impl_core_clone_Clone_for_libc_unix_linux_like_linux_gnu_b64_msqid_ds_t.
          Section Impl_core_clone_Clone_for_libc_unix_linux_like_linux_gnu_b64_msqid_ds_t.
            Definition Self : Set :=
              libc.unix.linux_like.linux.gnu.b64.msqid_ds.t.
            
            (*
                        fn clone(&self) -> $i { *self }
            *)
            Definition clone
                (self : ref Self)
                : M libc.unix.linux_like.linux.gnu.b64.msqid_ds.t :=
              let* self := M.alloc self in
              let* α0 : ref libc.unix.linux_like.linux.gnu.b64.msqid_ds.t :=
                M.read self in
              M.read (deref α0).
            
            Global Instance AssociatedFunction_clone :
              Notations.DoubleColon Self "clone" := {
              Notations.double_colon := clone;
            }.
            
            Global Instance ℐ : core.clone.Clone.Required.Trait Self := {
              core.clone.Clone.clone := clone;
              core.clone.Clone.clone_from := Datatypes.None;
            }.
          End Impl_core_clone_Clone_for_libc_unix_linux_like_linux_gnu_b64_msqid_ds_t.
          End Impl_core_clone_Clone_for_libc_unix_linux_like_linux_gnu_b64_msqid_ds_t.
          
          Module  semid_ds.
          Section semid_ds.
            Record t : Set := {
              sem_perm : libc.unix.linux_like.linux.gnu.b64.x86_64.ipc_perm.t;
              sem_otime : ltac:(libc.unix.linux_like.linux.gnu.b64.time_t);
              __reserved :
                ltac:(libc.unix.linux_like.linux.gnu.b64.__syscall_ulong_t);
              sem_ctime : ltac:(libc.unix.linux_like.linux.gnu.b64.time_t);
              __reserved2 :
                ltac:(libc.unix.linux_like.linux.gnu.b64.__syscall_ulong_t);
              sem_nsems :
                ltac:(libc.unix.linux_like.linux.gnu.b64.__syscall_ulong_t);
              __glibc_reserved3 :
                ltac:(libc.unix.linux_like.linux.gnu.b64.__syscall_ulong_t);
              __glibc_reserved4 :
                ltac:(libc.unix.linux_like.linux.gnu.b64.__syscall_ulong_t);
            }.
            
            Definition Get_sem_perm :=
              Ref.map
                (fun α => Some α.(sem_perm))
                (fun β α => Some (α <| sem_perm := β |>)).
            Definition Get_sem_otime :=
              Ref.map
                (fun α => Some α.(sem_otime))
                (fun β α => Some (α <| sem_otime := β |>)).
            Definition Get___reserved :=
              Ref.map
                (fun α => Some α.(__reserved))
                (fun β α => Some (α <| __reserved := β |>)).
            Definition Get_sem_ctime :=
              Ref.map
                (fun α => Some α.(sem_ctime))
                (fun β α => Some (α <| sem_ctime := β |>)).
            Definition Get___reserved2 :=
              Ref.map
                (fun α => Some α.(__reserved2))
                (fun β α => Some (α <| __reserved2 := β |>)).
            Definition Get_sem_nsems :=
              Ref.map
                (fun α => Some α.(sem_nsems))
                (fun β α => Some (α <| sem_nsems := β |>)).
            Definition Get___glibc_reserved3 :=
              Ref.map
                (fun α => Some α.(__glibc_reserved3))
                (fun β α => Some (α <| __glibc_reserved3 := β |>)).
            Definition Get___glibc_reserved4 :=
              Ref.map
                (fun α => Some α.(__glibc_reserved4))
                (fun β α => Some (α <| __glibc_reserved4 := β |>)).
          End semid_ds.
          End semid_ds.
          
          Module  Impl_core_marker_Copy_for_libc_unix_linux_like_linux_gnu_b64_semid_ds_t.
          Section Impl_core_marker_Copy_for_libc_unix_linux_like_linux_gnu_b64_semid_ds_t.
            Definition Self : Set :=
              libc.unix.linux_like.linux.gnu.b64.semid_ds.t.
            
            Global Instance ℐ : core.marker.Copy.Trait Self := {
            }.
          End Impl_core_marker_Copy_for_libc_unix_linux_like_linux_gnu_b64_semid_ds_t.
          End Impl_core_marker_Copy_for_libc_unix_linux_like_linux_gnu_b64_semid_ds_t.
          
          Module  Impl_core_clone_Clone_for_libc_unix_linux_like_linux_gnu_b64_semid_ds_t.
          Section Impl_core_clone_Clone_for_libc_unix_linux_like_linux_gnu_b64_semid_ds_t.
            Definition Self : Set :=
              libc.unix.linux_like.linux.gnu.b64.semid_ds.t.
            
            (*
                        fn clone(&self) -> $i { *self }
            *)
            Definition clone
                (self : ref Self)
                : M libc.unix.linux_like.linux.gnu.b64.semid_ds.t :=
              let* self := M.alloc self in
              let* α0 : ref libc.unix.linux_like.linux.gnu.b64.semid_ds.t :=
                M.read self in
              M.read (deref α0).
            
            Global Instance AssociatedFunction_clone :
              Notations.DoubleColon Self "clone" := {
              Notations.double_colon := clone;
            }.
            
            Global Instance ℐ : core.clone.Clone.Required.Trait Self := {
              core.clone.Clone.clone := clone;
              core.clone.Clone.clone_from := Datatypes.None;
            }.
          End Impl_core_clone_Clone_for_libc_unix_linux_like_linux_gnu_b64_semid_ds_t.
          End Impl_core_clone_Clone_for_libc_unix_linux_like_linux_gnu_b64_semid_ds_t.
          
          Definition __SIZEOF_PTHREAD_RWLOCKATTR_T : M.Val usize.t :=
            M.run (M.alloc ((Integer.of_Z 8) : usize.t)).
          
          Definition O_LARGEFILE : M.Val ltac:(libc.unix.c_int) :=
            M.run (M.alloc ((Integer.of_Z 0) : i32.t)).
          
          Module x86_64.
            Ltac c_char := exact i8.t.
            
            Ltac wchar_t := exact i32.t.
            
            Ltac nlink_t := exact u64.t.
            
            Ltac blksize_t := exact i64.t.
            
            Ltac greg_t := exact i64.t.
            
            Ltac suseconds_t := exact i64.t.
            
            Ltac __u64 := exact ltac:(libc.unix.c_ulonglong).
            
            Ltac __s64 := exact ltac:(libc.unix.c_longlong).
            
            Module  sigaction.
            Section sigaction.
              Record t : Set := {
                sa_sigaction : ltac:(libc.unix.sighandler_t);
                sa_mask : libc.unix.linux_like.linux.gnu.b64.sigset_t.t;
                sa_flags : ltac:(libc.unix.c_int);
                sa_restorer : core.option.Option.t unit;
              }.
              
              Definition Get_sa_sigaction :=
                Ref.map
                  (fun α => Some α.(sa_sigaction))
                  (fun β α => Some (α <| sa_sigaction := β |>)).
              Definition Get_sa_mask :=
                Ref.map
                  (fun α => Some α.(sa_mask))
                  (fun β α => Some (α <| sa_mask := β |>)).
              Definition Get_sa_flags :=
                Ref.map
                  (fun α => Some α.(sa_flags))
                  (fun β α => Some (α <| sa_flags := β |>)).
              Definition Get_sa_restorer :=
                Ref.map
                  (fun α => Some α.(sa_restorer))
                  (fun β α => Some (α <| sa_restorer := β |>)).
            End sigaction.
            End sigaction.
            
            Module  Impl_core_marker_Copy_for_libc_unix_linux_like_linux_gnu_b64_x86_64_sigaction_t.
            Section Impl_core_marker_Copy_for_libc_unix_linux_like_linux_gnu_b64_x86_64_sigaction_t.
              Definition Self : Set :=
                libc.unix.linux_like.linux.gnu.b64.x86_64.sigaction.t.
              
              Global Instance ℐ : core.marker.Copy.Trait Self := {
              }.
            End Impl_core_marker_Copy_for_libc_unix_linux_like_linux_gnu_b64_x86_64_sigaction_t.
            End Impl_core_marker_Copy_for_libc_unix_linux_like_linux_gnu_b64_x86_64_sigaction_t.
            
            Module  Impl_core_clone_Clone_for_libc_unix_linux_like_linux_gnu_b64_x86_64_sigaction_t.
            Section Impl_core_clone_Clone_for_libc_unix_linux_like_linux_gnu_b64_x86_64_sigaction_t.
              Definition Self : Set :=
                libc.unix.linux_like.linux.gnu.b64.x86_64.sigaction.t.
              
              (*
                          fn clone(&self) -> $i { *self }
              *)
              Definition clone
                  (self : ref Self)
                  : M libc.unix.linux_like.linux.gnu.b64.x86_64.sigaction.t :=
                let* self := M.alloc self in
                let* α0 :
                    ref libc.unix.linux_like.linux.gnu.b64.x86_64.sigaction.t :=
                  M.read self in
                M.read (deref α0).
              
              Global Instance AssociatedFunction_clone :
                Notations.DoubleColon Self "clone" := {
                Notations.double_colon := clone;
              }.
              
              Global Instance ℐ : core.clone.Clone.Required.Trait Self := {
                core.clone.Clone.clone := clone;
                core.clone.Clone.clone_from := Datatypes.None;
              }.
            End Impl_core_clone_Clone_for_libc_unix_linux_like_linux_gnu_b64_x86_64_sigaction_t.
            End Impl_core_clone_Clone_for_libc_unix_linux_like_linux_gnu_b64_x86_64_sigaction_t.
            
            Module  statfs.
            Section statfs.
              Record t : Set := {
                f_type : ltac:(libc.unix.linux_like.linux.gnu.b64.__fsword_t);
                f_bsize : ltac:(libc.unix.linux_like.linux.gnu.b64.__fsword_t);
                f_blocks : ltac:(libc.unix.linux_like.linux.gnu.b64.fsblkcnt_t);
                f_bfree : ltac:(libc.unix.linux_like.linux.gnu.b64.fsblkcnt_t);
                f_bavail : ltac:(libc.unix.linux_like.linux.gnu.b64.fsblkcnt_t);
                f_files : ltac:(libc.unix.linux_like.linux.gnu.b64.fsfilcnt_t);
                f_ffree : ltac:(libc.unix.linux_like.linux.gnu.b64.fsfilcnt_t);
                f_fsid : libc.unix.linux_like.linux.fsid_t.t;
                f_namelen :
                  ltac:(libc.unix.linux_like.linux.gnu.b64.__fsword_t);
                f_frsize : ltac:(libc.unix.linux_like.linux.gnu.b64.__fsword_t);
                f_spare :
                  array ltac:(libc.unix.linux_like.linux.gnu.b64.__fsword_t);
              }.
              
              Definition Get_f_type :=
                Ref.map
                  (fun α => Some α.(f_type))
                  (fun β α => Some (α <| f_type := β |>)).
              Definition Get_f_bsize :=
                Ref.map
                  (fun α => Some α.(f_bsize))
                  (fun β α => Some (α <| f_bsize := β |>)).
              Definition Get_f_blocks :=
                Ref.map
                  (fun α => Some α.(f_blocks))
                  (fun β α => Some (α <| f_blocks := β |>)).
              Definition Get_f_bfree :=
                Ref.map
                  (fun α => Some α.(f_bfree))
                  (fun β α => Some (α <| f_bfree := β |>)).
              Definition Get_f_bavail :=
                Ref.map
                  (fun α => Some α.(f_bavail))
                  (fun β α => Some (α <| f_bavail := β |>)).
              Definition Get_f_files :=
                Ref.map
                  (fun α => Some α.(f_files))
                  (fun β α => Some (α <| f_files := β |>)).
              Definition Get_f_ffree :=
                Ref.map
                  (fun α => Some α.(f_ffree))
                  (fun β α => Some (α <| f_ffree := β |>)).
              Definition Get_f_fsid :=
                Ref.map
                  (fun α => Some α.(f_fsid))
                  (fun β α => Some (α <| f_fsid := β |>)).
              Definition Get_f_namelen :=
                Ref.map
                  (fun α => Some α.(f_namelen))
                  (fun β α => Some (α <| f_namelen := β |>)).
              Definition Get_f_frsize :=
                Ref.map
                  (fun α => Some α.(f_frsize))
                  (fun β α => Some (α <| f_frsize := β |>)).
              Definition Get_f_spare :=
                Ref.map
                  (fun α => Some α.(f_spare))
                  (fun β α => Some (α <| f_spare := β |>)).
            End statfs.
            End statfs.
            
            Module  Impl_core_marker_Copy_for_libc_unix_linux_like_linux_gnu_b64_x86_64_statfs_t.
            Section Impl_core_marker_Copy_for_libc_unix_linux_like_linux_gnu_b64_x86_64_statfs_t.
              Definition Self : Set :=
                libc.unix.linux_like.linux.gnu.b64.x86_64.statfs.t.
              
              Global Instance ℐ : core.marker.Copy.Trait Self := {
              }.
            End Impl_core_marker_Copy_for_libc_unix_linux_like_linux_gnu_b64_x86_64_statfs_t.
            End Impl_core_marker_Copy_for_libc_unix_linux_like_linux_gnu_b64_x86_64_statfs_t.
            
            Module  Impl_core_clone_Clone_for_libc_unix_linux_like_linux_gnu_b64_x86_64_statfs_t.
            Section Impl_core_clone_Clone_for_libc_unix_linux_like_linux_gnu_b64_x86_64_statfs_t.
              Definition Self : Set :=
                libc.unix.linux_like.linux.gnu.b64.x86_64.statfs.t.
              
              (*
                          fn clone(&self) -> $i { *self }
              *)
              Definition clone
                  (self : ref Self)
                  : M libc.unix.linux_like.linux.gnu.b64.x86_64.statfs.t :=
                let* self := M.alloc self in
                let* α0 :
                    ref libc.unix.linux_like.linux.gnu.b64.x86_64.statfs.t :=
                  M.read self in
                M.read (deref α0).
              
              Global Instance AssociatedFunction_clone :
                Notations.DoubleColon Self "clone" := {
                Notations.double_colon := clone;
              }.
              
              Global Instance ℐ : core.clone.Clone.Required.Trait Self := {
                core.clone.Clone.clone := clone;
                core.clone.Clone.clone_from := Datatypes.None;
              }.
            End Impl_core_clone_Clone_for_libc_unix_linux_like_linux_gnu_b64_x86_64_statfs_t.
            End Impl_core_clone_Clone_for_libc_unix_linux_like_linux_gnu_b64_x86_64_statfs_t.
            
            Module  flock.
            Section flock.
              Record t : Set := {
                l_type : ltac:(libc.unix.c_short);
                l_whence : ltac:(libc.unix.c_short);
                l_start : ltac:(libc.unix.linux_like.linux.gnu.b64.off_t);
                l_len : ltac:(libc.unix.linux_like.linux.gnu.b64.off_t);
                l_pid : ltac:(libc.unix.pid_t);
              }.
              
              Definition Get_l_type :=
                Ref.map
                  (fun α => Some α.(l_type))
                  (fun β α => Some (α <| l_type := β |>)).
              Definition Get_l_whence :=
                Ref.map
                  (fun α => Some α.(l_whence))
                  (fun β α => Some (α <| l_whence := β |>)).
              Definition Get_l_start :=
                Ref.map
                  (fun α => Some α.(l_start))
                  (fun β α => Some (α <| l_start := β |>)).
              Definition Get_l_len :=
                Ref.map
                  (fun α => Some α.(l_len))
                  (fun β α => Some (α <| l_len := β |>)).
              Definition Get_l_pid :=
                Ref.map
                  (fun α => Some α.(l_pid))
                  (fun β α => Some (α <| l_pid := β |>)).
            End flock.
            End flock.
            
            Module  Impl_core_marker_Copy_for_libc_unix_linux_like_linux_gnu_b64_x86_64_flock_t.
            Section Impl_core_marker_Copy_for_libc_unix_linux_like_linux_gnu_b64_x86_64_flock_t.
              Definition Self : Set :=
                libc.unix.linux_like.linux.gnu.b64.x86_64.flock.t.
              
              Global Instance ℐ : core.marker.Copy.Trait Self := {
              }.
            End Impl_core_marker_Copy_for_libc_unix_linux_like_linux_gnu_b64_x86_64_flock_t.
            End Impl_core_marker_Copy_for_libc_unix_linux_like_linux_gnu_b64_x86_64_flock_t.
            
            Module  Impl_core_clone_Clone_for_libc_unix_linux_like_linux_gnu_b64_x86_64_flock_t.
            Section Impl_core_clone_Clone_for_libc_unix_linux_like_linux_gnu_b64_x86_64_flock_t.
              Definition Self : Set :=
                libc.unix.linux_like.linux.gnu.b64.x86_64.flock.t.
              
              (*
                          fn clone(&self) -> $i { *self }
              *)
              Definition clone
                  (self : ref Self)
                  : M libc.unix.linux_like.linux.gnu.b64.x86_64.flock.t :=
                let* self := M.alloc self in
                let* α0 :
                    ref libc.unix.linux_like.linux.gnu.b64.x86_64.flock.t :=
                  M.read self in
                M.read (deref α0).
              
              Global Instance AssociatedFunction_clone :
                Notations.DoubleColon Self "clone" := {
                Notations.double_colon := clone;
              }.
              
              Global Instance ℐ : core.clone.Clone.Required.Trait Self := {
                core.clone.Clone.clone := clone;
                core.clone.Clone.clone_from := Datatypes.None;
              }.
            End Impl_core_clone_Clone_for_libc_unix_linux_like_linux_gnu_b64_x86_64_flock_t.
            End Impl_core_clone_Clone_for_libc_unix_linux_like_linux_gnu_b64_x86_64_flock_t.
            
            Module  flock64.
            Section flock64.
              Record t : Set := {
                l_type : ltac:(libc.unix.c_short);
                l_whence : ltac:(libc.unix.c_short);
                l_start : ltac:(libc.unix.linux_like.linux.off64_t);
                l_len : ltac:(libc.unix.linux_like.linux.off64_t);
                l_pid : ltac:(libc.unix.pid_t);
              }.
              
              Definition Get_l_type :=
                Ref.map
                  (fun α => Some α.(l_type))
                  (fun β α => Some (α <| l_type := β |>)).
              Definition Get_l_whence :=
                Ref.map
                  (fun α => Some α.(l_whence))
                  (fun β α => Some (α <| l_whence := β |>)).
              Definition Get_l_start :=
                Ref.map
                  (fun α => Some α.(l_start))
                  (fun β α => Some (α <| l_start := β |>)).
              Definition Get_l_len :=
                Ref.map
                  (fun α => Some α.(l_len))
                  (fun β α => Some (α <| l_len := β |>)).
              Definition Get_l_pid :=
                Ref.map
                  (fun α => Some α.(l_pid))
                  (fun β α => Some (α <| l_pid := β |>)).
            End flock64.
            End flock64.
            
            Module  Impl_core_marker_Copy_for_libc_unix_linux_like_linux_gnu_b64_x86_64_flock64_t.
            Section Impl_core_marker_Copy_for_libc_unix_linux_like_linux_gnu_b64_x86_64_flock64_t.
              Definition Self : Set :=
                libc.unix.linux_like.linux.gnu.b64.x86_64.flock64.t.
              
              Global Instance ℐ : core.marker.Copy.Trait Self := {
              }.
            End Impl_core_marker_Copy_for_libc_unix_linux_like_linux_gnu_b64_x86_64_flock64_t.
            End Impl_core_marker_Copy_for_libc_unix_linux_like_linux_gnu_b64_x86_64_flock64_t.
            
            Module  Impl_core_clone_Clone_for_libc_unix_linux_like_linux_gnu_b64_x86_64_flock64_t.
            Section Impl_core_clone_Clone_for_libc_unix_linux_like_linux_gnu_b64_x86_64_flock64_t.
              Definition Self : Set :=
                libc.unix.linux_like.linux.gnu.b64.x86_64.flock64.t.
              
              (*
                          fn clone(&self) -> $i { *self }
              *)
              Definition clone
                  (self : ref Self)
                  : M libc.unix.linux_like.linux.gnu.b64.x86_64.flock64.t :=
                let* self := M.alloc self in
                let* α0 :
                    ref libc.unix.linux_like.linux.gnu.b64.x86_64.flock64.t :=
                  M.read self in
                M.read (deref α0).
              
              Global Instance AssociatedFunction_clone :
                Notations.DoubleColon Self "clone" := {
                Notations.double_colon := clone;
              }.
              
              Global Instance ℐ : core.clone.Clone.Required.Trait Self := {
                core.clone.Clone.clone := clone;
                core.clone.Clone.clone_from := Datatypes.None;
              }.
            End Impl_core_clone_Clone_for_libc_unix_linux_like_linux_gnu_b64_x86_64_flock64_t.
            End Impl_core_clone_Clone_for_libc_unix_linux_like_linux_gnu_b64_x86_64_flock64_t.
            
            Module  siginfo_t.
            Section siginfo_t.
              Record t : Set := {
                si_signo : ltac:(libc.unix.c_int);
                si_errno : ltac:(libc.unix.c_int);
                si_code : ltac:(libc.unix.c_int);
                _pad : array ltac:(libc.unix.c_int);
                _align : array u64.t;
              }.
              
              Definition Get_si_signo :=
                Ref.map
                  (fun α => Some α.(si_signo))
                  (fun β α => Some (α <| si_signo := β |>)).
              Definition Get_si_errno :=
                Ref.map
                  (fun α => Some α.(si_errno))
                  (fun β α => Some (α <| si_errno := β |>)).
              Definition Get_si_code :=
                Ref.map
                  (fun α => Some α.(si_code))
                  (fun β α => Some (α <| si_code := β |>)).
              Definition Get__pad :=
                Ref.map
                  (fun α => Some α.(_pad))
                  (fun β α => Some (α <| _pad := β |>)).
              Definition Get__align :=
                Ref.map
                  (fun α => Some α.(_align))
                  (fun β α => Some (α <| _align := β |>)).
            End siginfo_t.
            End siginfo_t.
            
            Module  Impl_core_marker_Copy_for_libc_unix_linux_like_linux_gnu_b64_x86_64_siginfo_t_t.
            Section Impl_core_marker_Copy_for_libc_unix_linux_like_linux_gnu_b64_x86_64_siginfo_t_t.
              Definition Self : Set :=
                libc.unix.linux_like.linux.gnu.b64.x86_64.siginfo_t.t.
              
              Global Instance ℐ : core.marker.Copy.Trait Self := {
              }.
            End Impl_core_marker_Copy_for_libc_unix_linux_like_linux_gnu_b64_x86_64_siginfo_t_t.
            End Impl_core_marker_Copy_for_libc_unix_linux_like_linux_gnu_b64_x86_64_siginfo_t_t.
            
            Module  Impl_core_clone_Clone_for_libc_unix_linux_like_linux_gnu_b64_x86_64_siginfo_t_t.
            Section Impl_core_clone_Clone_for_libc_unix_linux_like_linux_gnu_b64_x86_64_siginfo_t_t.
              Definition Self : Set :=
                libc.unix.linux_like.linux.gnu.b64.x86_64.siginfo_t.t.
              
              (*
                          fn clone(&self) -> $i { *self }
              *)
              Definition clone
                  (self : ref Self)
                  : M libc.unix.linux_like.linux.gnu.b64.x86_64.siginfo_t.t :=
                let* self := M.alloc self in
                let* α0 :
                    ref libc.unix.linux_like.linux.gnu.b64.x86_64.siginfo_t.t :=
                  M.read self in
                M.read (deref α0).
              
              Global Instance AssociatedFunction_clone :
                Notations.DoubleColon Self "clone" := {
                Notations.double_colon := clone;
              }.
              
              Global Instance ℐ : core.clone.Clone.Required.Trait Self := {
                core.clone.Clone.clone := clone;
                core.clone.Clone.clone_from := Datatypes.None;
              }.
            End Impl_core_clone_Clone_for_libc_unix_linux_like_linux_gnu_b64_x86_64_siginfo_t_t.
            End Impl_core_clone_Clone_for_libc_unix_linux_like_linux_gnu_b64_x86_64_siginfo_t_t.
            
            Module  stack_t.
            Section stack_t.
              Record t : Set := {
                ss_sp : mut_ref core.ffi.c_void.t;
                ss_flags : ltac:(libc.unix.c_int);
                ss_size : ltac:(libc.unix.size_t);
              }.
              
              Definition Get_ss_sp :=
                Ref.map
                  (fun α => Some α.(ss_sp))
                  (fun β α => Some (α <| ss_sp := β |>)).
              Definition Get_ss_flags :=
                Ref.map
                  (fun α => Some α.(ss_flags))
                  (fun β α => Some (α <| ss_flags := β |>)).
              Definition Get_ss_size :=
                Ref.map
                  (fun α => Some α.(ss_size))
                  (fun β α => Some (α <| ss_size := β |>)).
            End stack_t.
            End stack_t.
            
            Module  Impl_core_marker_Copy_for_libc_unix_linux_like_linux_gnu_b64_x86_64_stack_t_t.
            Section Impl_core_marker_Copy_for_libc_unix_linux_like_linux_gnu_b64_x86_64_stack_t_t.
              Definition Self : Set :=
                libc.unix.linux_like.linux.gnu.b64.x86_64.stack_t.t.
              
              Global Instance ℐ : core.marker.Copy.Trait Self := {
              }.
            End Impl_core_marker_Copy_for_libc_unix_linux_like_linux_gnu_b64_x86_64_stack_t_t.
            End Impl_core_marker_Copy_for_libc_unix_linux_like_linux_gnu_b64_x86_64_stack_t_t.
            
            Module  Impl_core_clone_Clone_for_libc_unix_linux_like_linux_gnu_b64_x86_64_stack_t_t.
            Section Impl_core_clone_Clone_for_libc_unix_linux_like_linux_gnu_b64_x86_64_stack_t_t.
              Definition Self : Set :=
                libc.unix.linux_like.linux.gnu.b64.x86_64.stack_t.t.
              
              (*
                          fn clone(&self) -> $i { *self }
              *)
              Definition clone
                  (self : ref Self)
                  : M libc.unix.linux_like.linux.gnu.b64.x86_64.stack_t.t :=
                let* self := M.alloc self in
                let* α0 :
                    ref libc.unix.linux_like.linux.gnu.b64.x86_64.stack_t.t :=
                  M.read self in
                M.read (deref α0).
              
              Global Instance AssociatedFunction_clone :
                Notations.DoubleColon Self "clone" := {
                Notations.double_colon := clone;
              }.
              
              Global Instance ℐ : core.clone.Clone.Required.Trait Self := {
                core.clone.Clone.clone := clone;
                core.clone.Clone.clone_from := Datatypes.None;
              }.
            End Impl_core_clone_Clone_for_libc_unix_linux_like_linux_gnu_b64_x86_64_stack_t_t.
            End Impl_core_clone_Clone_for_libc_unix_linux_like_linux_gnu_b64_x86_64_stack_t_t.
            
            Module  stat.
            Section stat.
              Record t : Set := {
                st_dev : ltac:(libc.unix.linux_like.linux.dev_t);
                st_ino : ltac:(libc.unix.linux_like.linux.gnu.b64.ino_t);
                st_nlink :
                  ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.nlink_t);
                st_mode : ltac:(libc.unix.linux_like.linux.mode_t);
                st_uid : ltac:(libc.unix.uid_t);
                st_gid : ltac:(libc.unix.gid_t);
                __pad0 : ltac:(libc.unix.c_int);
                st_rdev : ltac:(libc.unix.linux_like.linux.dev_t);
                st_size : ltac:(libc.unix.linux_like.linux.gnu.b64.off_t);
                st_blksize :
                  ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.blksize_t);
                st_blocks : ltac:(libc.unix.linux_like.linux.gnu.b64.blkcnt_t);
                st_atime : ltac:(libc.unix.linux_like.linux.gnu.b64.time_t);
                st_atime_nsec : i64.t;
                st_mtime : ltac:(libc.unix.linux_like.linux.gnu.b64.time_t);
                st_mtime_nsec : i64.t;
                st_ctime : ltac:(libc.unix.linux_like.linux.gnu.b64.time_t);
                st_ctime_nsec : i64.t;
                __unused : array i64.t;
              }.
              
              Definition Get_st_dev :=
                Ref.map
                  (fun α => Some α.(st_dev))
                  (fun β α => Some (α <| st_dev := β |>)).
              Definition Get_st_ino :=
                Ref.map
                  (fun α => Some α.(st_ino))
                  (fun β α => Some (α <| st_ino := β |>)).
              Definition Get_st_nlink :=
                Ref.map
                  (fun α => Some α.(st_nlink))
                  (fun β α => Some (α <| st_nlink := β |>)).
              Definition Get_st_mode :=
                Ref.map
                  (fun α => Some α.(st_mode))
                  (fun β α => Some (α <| st_mode := β |>)).
              Definition Get_st_uid :=
                Ref.map
                  (fun α => Some α.(st_uid))
                  (fun β α => Some (α <| st_uid := β |>)).
              Definition Get_st_gid :=
                Ref.map
                  (fun α => Some α.(st_gid))
                  (fun β α => Some (α <| st_gid := β |>)).
              Definition Get___pad0 :=
                Ref.map
                  (fun α => Some α.(__pad0))
                  (fun β α => Some (α <| __pad0 := β |>)).
              Definition Get_st_rdev :=
                Ref.map
                  (fun α => Some α.(st_rdev))
                  (fun β α => Some (α <| st_rdev := β |>)).
              Definition Get_st_size :=
                Ref.map
                  (fun α => Some α.(st_size))
                  (fun β α => Some (α <| st_size := β |>)).
              Definition Get_st_blksize :=
                Ref.map
                  (fun α => Some α.(st_blksize))
                  (fun β α => Some (α <| st_blksize := β |>)).
              Definition Get_st_blocks :=
                Ref.map
                  (fun α => Some α.(st_blocks))
                  (fun β α => Some (α <| st_blocks := β |>)).
              Definition Get_st_atime :=
                Ref.map
                  (fun α => Some α.(st_atime))
                  (fun β α => Some (α <| st_atime := β |>)).
              Definition Get_st_atime_nsec :=
                Ref.map
                  (fun α => Some α.(st_atime_nsec))
                  (fun β α => Some (α <| st_atime_nsec := β |>)).
              Definition Get_st_mtime :=
                Ref.map
                  (fun α => Some α.(st_mtime))
                  (fun β α => Some (α <| st_mtime := β |>)).
              Definition Get_st_mtime_nsec :=
                Ref.map
                  (fun α => Some α.(st_mtime_nsec))
                  (fun β α => Some (α <| st_mtime_nsec := β |>)).
              Definition Get_st_ctime :=
                Ref.map
                  (fun α => Some α.(st_ctime))
                  (fun β α => Some (α <| st_ctime := β |>)).
              Definition Get_st_ctime_nsec :=
                Ref.map
                  (fun α => Some α.(st_ctime_nsec))
                  (fun β α => Some (α <| st_ctime_nsec := β |>)).
              Definition Get___unused :=
                Ref.map
                  (fun α => Some α.(__unused))
                  (fun β α => Some (α <| __unused := β |>)).
            End stat.
            End stat.
            
            Module  Impl_core_marker_Copy_for_libc_unix_linux_like_linux_gnu_b64_x86_64_stat_t.
            Section Impl_core_marker_Copy_for_libc_unix_linux_like_linux_gnu_b64_x86_64_stat_t.
              Definition Self : Set :=
                libc.unix.linux_like.linux.gnu.b64.x86_64.stat.t.
              
              Global Instance ℐ : core.marker.Copy.Trait Self := {
              }.
            End Impl_core_marker_Copy_for_libc_unix_linux_like_linux_gnu_b64_x86_64_stat_t.
            End Impl_core_marker_Copy_for_libc_unix_linux_like_linux_gnu_b64_x86_64_stat_t.
            
            Module  Impl_core_clone_Clone_for_libc_unix_linux_like_linux_gnu_b64_x86_64_stat_t.
            Section Impl_core_clone_Clone_for_libc_unix_linux_like_linux_gnu_b64_x86_64_stat_t.
              Definition Self : Set :=
                libc.unix.linux_like.linux.gnu.b64.x86_64.stat.t.
              
              (*
                          fn clone(&self) -> $i { *self }
              *)
              Definition clone
                  (self : ref Self)
                  : M libc.unix.linux_like.linux.gnu.b64.x86_64.stat.t :=
                let* self := M.alloc self in
                let* α0 :
                    ref libc.unix.linux_like.linux.gnu.b64.x86_64.stat.t :=
                  M.read self in
                M.read (deref α0).
              
              Global Instance AssociatedFunction_clone :
                Notations.DoubleColon Self "clone" := {
                Notations.double_colon := clone;
              }.
              
              Global Instance ℐ : core.clone.Clone.Required.Trait Self := {
                core.clone.Clone.clone := clone;
                core.clone.Clone.clone_from := Datatypes.None;
              }.
            End Impl_core_clone_Clone_for_libc_unix_linux_like_linux_gnu_b64_x86_64_stat_t.
            End Impl_core_clone_Clone_for_libc_unix_linux_like_linux_gnu_b64_x86_64_stat_t.
            
            Module  stat64.
            Section stat64.
              Record t : Set := {
                st_dev : ltac:(libc.unix.linux_like.linux.dev_t);
                st_ino : ltac:(libc.unix.linux_like.linux.ino64_t);
                st_nlink :
                  ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.nlink_t);
                st_mode : ltac:(libc.unix.linux_like.linux.mode_t);
                st_uid : ltac:(libc.unix.uid_t);
                st_gid : ltac:(libc.unix.gid_t);
                __pad0 : ltac:(libc.unix.c_int);
                st_rdev : ltac:(libc.unix.linux_like.linux.dev_t);
                st_size : ltac:(libc.unix.linux_like.linux.gnu.b64.off_t);
                st_blksize :
                  ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.blksize_t);
                st_blocks : ltac:(libc.unix.linux_like.linux.blkcnt64_t);
                st_atime : ltac:(libc.unix.linux_like.linux.gnu.b64.time_t);
                st_atime_nsec : i64.t;
                st_mtime : ltac:(libc.unix.linux_like.linux.gnu.b64.time_t);
                st_mtime_nsec : i64.t;
                st_ctime : ltac:(libc.unix.linux_like.linux.gnu.b64.time_t);
                st_ctime_nsec : i64.t;
                __reserved : array i64.t;
              }.
              
              Definition Get_st_dev :=
                Ref.map
                  (fun α => Some α.(st_dev))
                  (fun β α => Some (α <| st_dev := β |>)).
              Definition Get_st_ino :=
                Ref.map
                  (fun α => Some α.(st_ino))
                  (fun β α => Some (α <| st_ino := β |>)).
              Definition Get_st_nlink :=
                Ref.map
                  (fun α => Some α.(st_nlink))
                  (fun β α => Some (α <| st_nlink := β |>)).
              Definition Get_st_mode :=
                Ref.map
                  (fun α => Some α.(st_mode))
                  (fun β α => Some (α <| st_mode := β |>)).
              Definition Get_st_uid :=
                Ref.map
                  (fun α => Some α.(st_uid))
                  (fun β α => Some (α <| st_uid := β |>)).
              Definition Get_st_gid :=
                Ref.map
                  (fun α => Some α.(st_gid))
                  (fun β α => Some (α <| st_gid := β |>)).
              Definition Get___pad0 :=
                Ref.map
                  (fun α => Some α.(__pad0))
                  (fun β α => Some (α <| __pad0 := β |>)).
              Definition Get_st_rdev :=
                Ref.map
                  (fun α => Some α.(st_rdev))
                  (fun β α => Some (α <| st_rdev := β |>)).
              Definition Get_st_size :=
                Ref.map
                  (fun α => Some α.(st_size))
                  (fun β α => Some (α <| st_size := β |>)).
              Definition Get_st_blksize :=
                Ref.map
                  (fun α => Some α.(st_blksize))
                  (fun β α => Some (α <| st_blksize := β |>)).
              Definition Get_st_blocks :=
                Ref.map
                  (fun α => Some α.(st_blocks))
                  (fun β α => Some (α <| st_blocks := β |>)).
              Definition Get_st_atime :=
                Ref.map
                  (fun α => Some α.(st_atime))
                  (fun β α => Some (α <| st_atime := β |>)).
              Definition Get_st_atime_nsec :=
                Ref.map
                  (fun α => Some α.(st_atime_nsec))
                  (fun β α => Some (α <| st_atime_nsec := β |>)).
              Definition Get_st_mtime :=
                Ref.map
                  (fun α => Some α.(st_mtime))
                  (fun β α => Some (α <| st_mtime := β |>)).
              Definition Get_st_mtime_nsec :=
                Ref.map
                  (fun α => Some α.(st_mtime_nsec))
                  (fun β α => Some (α <| st_mtime_nsec := β |>)).
              Definition Get_st_ctime :=
                Ref.map
                  (fun α => Some α.(st_ctime))
                  (fun β α => Some (α <| st_ctime := β |>)).
              Definition Get_st_ctime_nsec :=
                Ref.map
                  (fun α => Some α.(st_ctime_nsec))
                  (fun β α => Some (α <| st_ctime_nsec := β |>)).
              Definition Get___reserved :=
                Ref.map
                  (fun α => Some α.(__reserved))
                  (fun β α => Some (α <| __reserved := β |>)).
            End stat64.
            End stat64.
            
            Module  Impl_core_marker_Copy_for_libc_unix_linux_like_linux_gnu_b64_x86_64_stat64_t.
            Section Impl_core_marker_Copy_for_libc_unix_linux_like_linux_gnu_b64_x86_64_stat64_t.
              Definition Self : Set :=
                libc.unix.linux_like.linux.gnu.b64.x86_64.stat64.t.
              
              Global Instance ℐ : core.marker.Copy.Trait Self := {
              }.
            End Impl_core_marker_Copy_for_libc_unix_linux_like_linux_gnu_b64_x86_64_stat64_t.
            End Impl_core_marker_Copy_for_libc_unix_linux_like_linux_gnu_b64_x86_64_stat64_t.
            
            Module  Impl_core_clone_Clone_for_libc_unix_linux_like_linux_gnu_b64_x86_64_stat64_t.
            Section Impl_core_clone_Clone_for_libc_unix_linux_like_linux_gnu_b64_x86_64_stat64_t.
              Definition Self : Set :=
                libc.unix.linux_like.linux.gnu.b64.x86_64.stat64.t.
              
              (*
                          fn clone(&self) -> $i { *self }
              *)
              Definition clone
                  (self : ref Self)
                  : M libc.unix.linux_like.linux.gnu.b64.x86_64.stat64.t :=
                let* self := M.alloc self in
                let* α0 :
                    ref libc.unix.linux_like.linux.gnu.b64.x86_64.stat64.t :=
                  M.read self in
                M.read (deref α0).
              
              Global Instance AssociatedFunction_clone :
                Notations.DoubleColon Self "clone" := {
                Notations.double_colon := clone;
              }.
              
              Global Instance ℐ : core.clone.Clone.Required.Trait Self := {
                core.clone.Clone.clone := clone;
                core.clone.Clone.clone_from := Datatypes.None;
              }.
            End Impl_core_clone_Clone_for_libc_unix_linux_like_linux_gnu_b64_x86_64_stat64_t.
            End Impl_core_clone_Clone_for_libc_unix_linux_like_linux_gnu_b64_x86_64_stat64_t.
            
            Module  statfs64.
            Section statfs64.
              Record t : Set := {
                f_type : ltac:(libc.unix.linux_like.linux.gnu.b64.__fsword_t);
                f_bsize : ltac:(libc.unix.linux_like.linux.gnu.b64.__fsword_t);
                f_blocks : u64.t;
                f_bfree : u64.t;
                f_bavail : u64.t;
                f_files : u64.t;
                f_ffree : u64.t;
                f_fsid : libc.unix.linux_like.linux.fsid_t.t;
                f_namelen :
                  ltac:(libc.unix.linux_like.linux.gnu.b64.__fsword_t);
                f_frsize : ltac:(libc.unix.linux_like.linux.gnu.b64.__fsword_t);
                f_flags : ltac:(libc.unix.linux_like.linux.gnu.b64.__fsword_t);
                f_spare :
                  array ltac:(libc.unix.linux_like.linux.gnu.b64.__fsword_t);
              }.
              
              Definition Get_f_type :=
                Ref.map
                  (fun α => Some α.(f_type))
                  (fun β α => Some (α <| f_type := β |>)).
              Definition Get_f_bsize :=
                Ref.map
                  (fun α => Some α.(f_bsize))
                  (fun β α => Some (α <| f_bsize := β |>)).
              Definition Get_f_blocks :=
                Ref.map
                  (fun α => Some α.(f_blocks))
                  (fun β α => Some (α <| f_blocks := β |>)).
              Definition Get_f_bfree :=
                Ref.map
                  (fun α => Some α.(f_bfree))
                  (fun β α => Some (α <| f_bfree := β |>)).
              Definition Get_f_bavail :=
                Ref.map
                  (fun α => Some α.(f_bavail))
                  (fun β α => Some (α <| f_bavail := β |>)).
              Definition Get_f_files :=
                Ref.map
                  (fun α => Some α.(f_files))
                  (fun β α => Some (α <| f_files := β |>)).
              Definition Get_f_ffree :=
                Ref.map
                  (fun α => Some α.(f_ffree))
                  (fun β α => Some (α <| f_ffree := β |>)).
              Definition Get_f_fsid :=
                Ref.map
                  (fun α => Some α.(f_fsid))
                  (fun β α => Some (α <| f_fsid := β |>)).
              Definition Get_f_namelen :=
                Ref.map
                  (fun α => Some α.(f_namelen))
                  (fun β α => Some (α <| f_namelen := β |>)).
              Definition Get_f_frsize :=
                Ref.map
                  (fun α => Some α.(f_frsize))
                  (fun β α => Some (α <| f_frsize := β |>)).
              Definition Get_f_flags :=
                Ref.map
                  (fun α => Some α.(f_flags))
                  (fun β α => Some (α <| f_flags := β |>)).
              Definition Get_f_spare :=
                Ref.map
                  (fun α => Some α.(f_spare))
                  (fun β α => Some (α <| f_spare := β |>)).
            End statfs64.
            End statfs64.
            
            Module  Impl_core_marker_Copy_for_libc_unix_linux_like_linux_gnu_b64_x86_64_statfs64_t.
            Section Impl_core_marker_Copy_for_libc_unix_linux_like_linux_gnu_b64_x86_64_statfs64_t.
              Definition Self : Set :=
                libc.unix.linux_like.linux.gnu.b64.x86_64.statfs64.t.
              
              Global Instance ℐ : core.marker.Copy.Trait Self := {
              }.
            End Impl_core_marker_Copy_for_libc_unix_linux_like_linux_gnu_b64_x86_64_statfs64_t.
            End Impl_core_marker_Copy_for_libc_unix_linux_like_linux_gnu_b64_x86_64_statfs64_t.
            
            Module  Impl_core_clone_Clone_for_libc_unix_linux_like_linux_gnu_b64_x86_64_statfs64_t.
            Section Impl_core_clone_Clone_for_libc_unix_linux_like_linux_gnu_b64_x86_64_statfs64_t.
              Definition Self : Set :=
                libc.unix.linux_like.linux.gnu.b64.x86_64.statfs64.t.
              
              (*
                          fn clone(&self) -> $i { *self }
              *)
              Definition clone
                  (self : ref Self)
                  : M libc.unix.linux_like.linux.gnu.b64.x86_64.statfs64.t :=
                let* self := M.alloc self in
                let* α0 :
                    ref libc.unix.linux_like.linux.gnu.b64.x86_64.statfs64.t :=
                  M.read self in
                M.read (deref α0).
              
              Global Instance AssociatedFunction_clone :
                Notations.DoubleColon Self "clone" := {
                Notations.double_colon := clone;
              }.
              
              Global Instance ℐ : core.clone.Clone.Required.Trait Self := {
                core.clone.Clone.clone := clone;
                core.clone.Clone.clone_from := Datatypes.None;
              }.
            End Impl_core_clone_Clone_for_libc_unix_linux_like_linux_gnu_b64_x86_64_statfs64_t.
            End Impl_core_clone_Clone_for_libc_unix_linux_like_linux_gnu_b64_x86_64_statfs64_t.
            
            Module  statvfs64.
            Section statvfs64.
              Record t : Set := {
                f_bsize :
                  ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_ulong);
                f_frsize :
                  ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_ulong);
                f_blocks : u64.t;
                f_bfree : u64.t;
                f_bavail : u64.t;
                f_files : u64.t;
                f_ffree : u64.t;
                f_favail : u64.t;
                f_fsid :
                  ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_ulong);
                f_flag :
                  ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_ulong);
                f_namemax :
                  ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_ulong);
                __f_spare : array ltac:(libc.unix.c_int);
              }.
              
              Definition Get_f_bsize :=
                Ref.map
                  (fun α => Some α.(f_bsize))
                  (fun β α => Some (α <| f_bsize := β |>)).
              Definition Get_f_frsize :=
                Ref.map
                  (fun α => Some α.(f_frsize))
                  (fun β α => Some (α <| f_frsize := β |>)).
              Definition Get_f_blocks :=
                Ref.map
                  (fun α => Some α.(f_blocks))
                  (fun β α => Some (α <| f_blocks := β |>)).
              Definition Get_f_bfree :=
                Ref.map
                  (fun α => Some α.(f_bfree))
                  (fun β α => Some (α <| f_bfree := β |>)).
              Definition Get_f_bavail :=
                Ref.map
                  (fun α => Some α.(f_bavail))
                  (fun β α => Some (α <| f_bavail := β |>)).
              Definition Get_f_files :=
                Ref.map
                  (fun α => Some α.(f_files))
                  (fun β α => Some (α <| f_files := β |>)).
              Definition Get_f_ffree :=
                Ref.map
                  (fun α => Some α.(f_ffree))
                  (fun β α => Some (α <| f_ffree := β |>)).
              Definition Get_f_favail :=
                Ref.map
                  (fun α => Some α.(f_favail))
                  (fun β α => Some (α <| f_favail := β |>)).
              Definition Get_f_fsid :=
                Ref.map
                  (fun α => Some α.(f_fsid))
                  (fun β α => Some (α <| f_fsid := β |>)).
              Definition Get_f_flag :=
                Ref.map
                  (fun α => Some α.(f_flag))
                  (fun β α => Some (α <| f_flag := β |>)).
              Definition Get_f_namemax :=
                Ref.map
                  (fun α => Some α.(f_namemax))
                  (fun β α => Some (α <| f_namemax := β |>)).
              Definition Get___f_spare :=
                Ref.map
                  (fun α => Some α.(__f_spare))
                  (fun β α => Some (α <| __f_spare := β |>)).
            End statvfs64.
            End statvfs64.
            
            Module  Impl_core_marker_Copy_for_libc_unix_linux_like_linux_gnu_b64_x86_64_statvfs64_t.
            Section Impl_core_marker_Copy_for_libc_unix_linux_like_linux_gnu_b64_x86_64_statvfs64_t.
              Definition Self : Set :=
                libc.unix.linux_like.linux.gnu.b64.x86_64.statvfs64.t.
              
              Global Instance ℐ : core.marker.Copy.Trait Self := {
              }.
            End Impl_core_marker_Copy_for_libc_unix_linux_like_linux_gnu_b64_x86_64_statvfs64_t.
            End Impl_core_marker_Copy_for_libc_unix_linux_like_linux_gnu_b64_x86_64_statvfs64_t.
            
            Module  Impl_core_clone_Clone_for_libc_unix_linux_like_linux_gnu_b64_x86_64_statvfs64_t.
            Section Impl_core_clone_Clone_for_libc_unix_linux_like_linux_gnu_b64_x86_64_statvfs64_t.
              Definition Self : Set :=
                libc.unix.linux_like.linux.gnu.b64.x86_64.statvfs64.t.
              
              (*
                          fn clone(&self) -> $i { *self }
              *)
              Definition clone
                  (self : ref Self)
                  : M libc.unix.linux_like.linux.gnu.b64.x86_64.statvfs64.t :=
                let* self := M.alloc self in
                let* α0 :
                    ref libc.unix.linux_like.linux.gnu.b64.x86_64.statvfs64.t :=
                  M.read self in
                M.read (deref α0).
              
              Global Instance AssociatedFunction_clone :
                Notations.DoubleColon Self "clone" := {
                Notations.double_colon := clone;
              }.
              
              Global Instance ℐ : core.clone.Clone.Required.Trait Self := {
                core.clone.Clone.clone := clone;
                core.clone.Clone.clone_from := Datatypes.None;
              }.
            End Impl_core_clone_Clone_for_libc_unix_linux_like_linux_gnu_b64_x86_64_statvfs64_t.
            End Impl_core_clone_Clone_for_libc_unix_linux_like_linux_gnu_b64_x86_64_statvfs64_t.
            
            Module  pthread_attr_t.
            Section pthread_attr_t.
              Record t : Set := {
                __size : array u64.t;
              }.
              
              Definition Get___size :=
                Ref.map
                  (fun α => Some α.(__size))
                  (fun β α => Some (α <| __size := β |>)).
            End pthread_attr_t.
            End pthread_attr_t.
            
            Module  Impl_core_marker_Copy_for_libc_unix_linux_like_linux_gnu_b64_x86_64_pthread_attr_t_t.
            Section Impl_core_marker_Copy_for_libc_unix_linux_like_linux_gnu_b64_x86_64_pthread_attr_t_t.
              Definition Self : Set :=
                libc.unix.linux_like.linux.gnu.b64.x86_64.pthread_attr_t.t.
              
              Global Instance ℐ : core.marker.Copy.Trait Self := {
              }.
            End Impl_core_marker_Copy_for_libc_unix_linux_like_linux_gnu_b64_x86_64_pthread_attr_t_t.
            End Impl_core_marker_Copy_for_libc_unix_linux_like_linux_gnu_b64_x86_64_pthread_attr_t_t.
            
            Module  Impl_core_clone_Clone_for_libc_unix_linux_like_linux_gnu_b64_x86_64_pthread_attr_t_t.
            Section Impl_core_clone_Clone_for_libc_unix_linux_like_linux_gnu_b64_x86_64_pthread_attr_t_t.
              Definition Self : Set :=
                libc.unix.linux_like.linux.gnu.b64.x86_64.pthread_attr_t.t.
              
              (*
                          fn clone(&self) -> $i { *self }
              *)
              Definition clone
                  (self : ref Self)
                  :
                    M
                      libc.unix.linux_like.linux.gnu.b64.x86_64.pthread_attr_t.t :=
                let* self := M.alloc self in
                let* α0 :
                    ref
                      libc.unix.linux_like.linux.gnu.b64.x86_64.pthread_attr_t.t :=
                  M.read self in
                M.read (deref α0).
              
              Global Instance AssociatedFunction_clone :
                Notations.DoubleColon Self "clone" := {
                Notations.double_colon := clone;
              }.
              
              Global Instance ℐ : core.clone.Clone.Required.Trait Self := {
                core.clone.Clone.clone := clone;
                core.clone.Clone.clone_from := Datatypes.None;
              }.
            End Impl_core_clone_Clone_for_libc_unix_linux_like_linux_gnu_b64_x86_64_pthread_attr_t_t.
            End Impl_core_clone_Clone_for_libc_unix_linux_like_linux_gnu_b64_x86_64_pthread_attr_t_t.
            
            Module  _libc_fpxreg.
            Section _libc_fpxreg.
              Record t : Set := {
                significand : array u16.t;
                exponent : u16.t;
                __private : array u16.t;
              }.
              
              Definition Get_significand :=
                Ref.map
                  (fun α => Some α.(significand))
                  (fun β α => Some (α <| significand := β |>)).
              Definition Get_exponent :=
                Ref.map
                  (fun α => Some α.(exponent))
                  (fun β α => Some (α <| exponent := β |>)).
              Definition Get___private :=
                Ref.map
                  (fun α => Some α.(__private))
                  (fun β α => Some (α <| __private := β |>)).
            End _libc_fpxreg.
            End _libc_fpxreg.
            
            Module  Impl_core_marker_Copy_for_libc_unix_linux_like_linux_gnu_b64_x86_64__libc_fpxreg_t.
            Section Impl_core_marker_Copy_for_libc_unix_linux_like_linux_gnu_b64_x86_64__libc_fpxreg_t.
              Definition Self : Set :=
                libc.unix.linux_like.linux.gnu.b64.x86_64._libc_fpxreg.t.
              
              Global Instance ℐ : core.marker.Copy.Trait Self := {
              }.
            End Impl_core_marker_Copy_for_libc_unix_linux_like_linux_gnu_b64_x86_64__libc_fpxreg_t.
            End Impl_core_marker_Copy_for_libc_unix_linux_like_linux_gnu_b64_x86_64__libc_fpxreg_t.
            
            Module  Impl_core_clone_Clone_for_libc_unix_linux_like_linux_gnu_b64_x86_64__libc_fpxreg_t.
            Section Impl_core_clone_Clone_for_libc_unix_linux_like_linux_gnu_b64_x86_64__libc_fpxreg_t.
              Definition Self : Set :=
                libc.unix.linux_like.linux.gnu.b64.x86_64._libc_fpxreg.t.
              
              (*
                          fn clone(&self) -> $i { *self }
              *)
              Definition clone
                  (self : ref Self)
                  :
                    M
                      libc.unix.linux_like.linux.gnu.b64.x86_64._libc_fpxreg.t :=
                let* self := M.alloc self in
                let* α0 :
                    ref
                      libc.unix.linux_like.linux.gnu.b64.x86_64._libc_fpxreg.t :=
                  M.read self in
                M.read (deref α0).
              
              Global Instance AssociatedFunction_clone :
                Notations.DoubleColon Self "clone" := {
                Notations.double_colon := clone;
              }.
              
              Global Instance ℐ : core.clone.Clone.Required.Trait Self := {
                core.clone.Clone.clone := clone;
                core.clone.Clone.clone_from := Datatypes.None;
              }.
            End Impl_core_clone_Clone_for_libc_unix_linux_like_linux_gnu_b64_x86_64__libc_fpxreg_t.
            End Impl_core_clone_Clone_for_libc_unix_linux_like_linux_gnu_b64_x86_64__libc_fpxreg_t.
            
            Module  _libc_xmmreg.
            Section _libc_xmmreg.
              Record t : Set := {
                element : array u32.t;
              }.
              
              Definition Get_element :=
                Ref.map
                  (fun α => Some α.(element))
                  (fun β α => Some (α <| element := β |>)).
            End _libc_xmmreg.
            End _libc_xmmreg.
            
            Module  Impl_core_marker_Copy_for_libc_unix_linux_like_linux_gnu_b64_x86_64__libc_xmmreg_t.
            Section Impl_core_marker_Copy_for_libc_unix_linux_like_linux_gnu_b64_x86_64__libc_xmmreg_t.
              Definition Self : Set :=
                libc.unix.linux_like.linux.gnu.b64.x86_64._libc_xmmreg.t.
              
              Global Instance ℐ : core.marker.Copy.Trait Self := {
              }.
            End Impl_core_marker_Copy_for_libc_unix_linux_like_linux_gnu_b64_x86_64__libc_xmmreg_t.
            End Impl_core_marker_Copy_for_libc_unix_linux_like_linux_gnu_b64_x86_64__libc_xmmreg_t.
            
            Module  Impl_core_clone_Clone_for_libc_unix_linux_like_linux_gnu_b64_x86_64__libc_xmmreg_t.
            Section Impl_core_clone_Clone_for_libc_unix_linux_like_linux_gnu_b64_x86_64__libc_xmmreg_t.
              Definition Self : Set :=
                libc.unix.linux_like.linux.gnu.b64.x86_64._libc_xmmreg.t.
              
              (*
                          fn clone(&self) -> $i { *self }
              *)
              Definition clone
                  (self : ref Self)
                  :
                    M
                      libc.unix.linux_like.linux.gnu.b64.x86_64._libc_xmmreg.t :=
                let* self := M.alloc self in
                let* α0 :
                    ref
                      libc.unix.linux_like.linux.gnu.b64.x86_64._libc_xmmreg.t :=
                  M.read self in
                M.read (deref α0).
              
              Global Instance AssociatedFunction_clone :
                Notations.DoubleColon Self "clone" := {
                Notations.double_colon := clone;
              }.
              
              Global Instance ℐ : core.clone.Clone.Required.Trait Self := {
                core.clone.Clone.clone := clone;
                core.clone.Clone.clone_from := Datatypes.None;
              }.
            End Impl_core_clone_Clone_for_libc_unix_linux_like_linux_gnu_b64_x86_64__libc_xmmreg_t.
            End Impl_core_clone_Clone_for_libc_unix_linux_like_linux_gnu_b64_x86_64__libc_xmmreg_t.
            
            Module  _libc_fpstate.
            Section _libc_fpstate.
              Record t : Set := {
                cwd : u16.t;
                swd : u16.t;
                ftw : u16.t;
                fop : u16.t;
                rip : u64.t;
                rdp : u64.t;
                mxcsr : u32.t;
                mxcr_mask : u32.t;
                _st :
                  array
                    libc.unix.linux_like.linux.gnu.b64.x86_64._libc_fpxreg.t;
                _xmm :
                  array
                    libc.unix.linux_like.linux.gnu.b64.x86_64._libc_xmmreg.t;
                __private : array u64.t;
              }.
              
              Definition Get_cwd :=
                Ref.map
                  (fun α => Some α.(cwd))
                  (fun β α => Some (α <| cwd := β |>)).
              Definition Get_swd :=
                Ref.map
                  (fun α => Some α.(swd))
                  (fun β α => Some (α <| swd := β |>)).
              Definition Get_ftw :=
                Ref.map
                  (fun α => Some α.(ftw))
                  (fun β α => Some (α <| ftw := β |>)).
              Definition Get_fop :=
                Ref.map
                  (fun α => Some α.(fop))
                  (fun β α => Some (α <| fop := β |>)).
              Definition Get_rip :=
                Ref.map
                  (fun α => Some α.(rip))
                  (fun β α => Some (α <| rip := β |>)).
              Definition Get_rdp :=
                Ref.map
                  (fun α => Some α.(rdp))
                  (fun β α => Some (α <| rdp := β |>)).
              Definition Get_mxcsr :=
                Ref.map
                  (fun α => Some α.(mxcsr))
                  (fun β α => Some (α <| mxcsr := β |>)).
              Definition Get_mxcr_mask :=
                Ref.map
                  (fun α => Some α.(mxcr_mask))
                  (fun β α => Some (α <| mxcr_mask := β |>)).
              Definition Get__st :=
                Ref.map
                  (fun α => Some α.(_st))
                  (fun β α => Some (α <| _st := β |>)).
              Definition Get__xmm :=
                Ref.map
                  (fun α => Some α.(_xmm))
                  (fun β α => Some (α <| _xmm := β |>)).
              Definition Get___private :=
                Ref.map
                  (fun α => Some α.(__private))
                  (fun β α => Some (α <| __private := β |>)).
            End _libc_fpstate.
            End _libc_fpstate.
            
            Module  Impl_core_marker_Copy_for_libc_unix_linux_like_linux_gnu_b64_x86_64__libc_fpstate_t.
            Section Impl_core_marker_Copy_for_libc_unix_linux_like_linux_gnu_b64_x86_64__libc_fpstate_t.
              Definition Self : Set :=
                libc.unix.linux_like.linux.gnu.b64.x86_64._libc_fpstate.t.
              
              Global Instance ℐ : core.marker.Copy.Trait Self := {
              }.
            End Impl_core_marker_Copy_for_libc_unix_linux_like_linux_gnu_b64_x86_64__libc_fpstate_t.
            End Impl_core_marker_Copy_for_libc_unix_linux_like_linux_gnu_b64_x86_64__libc_fpstate_t.
            
            Module  Impl_core_clone_Clone_for_libc_unix_linux_like_linux_gnu_b64_x86_64__libc_fpstate_t.
            Section Impl_core_clone_Clone_for_libc_unix_linux_like_linux_gnu_b64_x86_64__libc_fpstate_t.
              Definition Self : Set :=
                libc.unix.linux_like.linux.gnu.b64.x86_64._libc_fpstate.t.
              
              (*
                          fn clone(&self) -> $i { *self }
              *)
              Definition clone
                  (self : ref Self)
                  :
                    M
                      libc.unix.linux_like.linux.gnu.b64.x86_64._libc_fpstate.t :=
                let* self := M.alloc self in
                let* α0 :
                    ref
                      libc.unix.linux_like.linux.gnu.b64.x86_64._libc_fpstate.t :=
                  M.read self in
                M.read (deref α0).
              
              Global Instance AssociatedFunction_clone :
                Notations.DoubleColon Self "clone" := {
                Notations.double_colon := clone;
              }.
              
              Global Instance ℐ : core.clone.Clone.Required.Trait Self := {
                core.clone.Clone.clone := clone;
                core.clone.Clone.clone_from := Datatypes.None;
              }.
            End Impl_core_clone_Clone_for_libc_unix_linux_like_linux_gnu_b64_x86_64__libc_fpstate_t.
            End Impl_core_clone_Clone_for_libc_unix_linux_like_linux_gnu_b64_x86_64__libc_fpstate_t.
            
            Module  user_regs_struct.
            Section user_regs_struct.
              Record t : Set := {
                r15 : ltac:(libc.unix.c_ulonglong);
                r14 : ltac:(libc.unix.c_ulonglong);
                r13 : ltac:(libc.unix.c_ulonglong);
                r12 : ltac:(libc.unix.c_ulonglong);
                rbp : ltac:(libc.unix.c_ulonglong);
                rbx : ltac:(libc.unix.c_ulonglong);
                r11 : ltac:(libc.unix.c_ulonglong);
                r10 : ltac:(libc.unix.c_ulonglong);
                r9 : ltac:(libc.unix.c_ulonglong);
                r8 : ltac:(libc.unix.c_ulonglong);
                rax : ltac:(libc.unix.c_ulonglong);
                rcx : ltac:(libc.unix.c_ulonglong);
                rdx : ltac:(libc.unix.c_ulonglong);
                rsi : ltac:(libc.unix.c_ulonglong);
                rdi : ltac:(libc.unix.c_ulonglong);
                orig_rax : ltac:(libc.unix.c_ulonglong);
                rip : ltac:(libc.unix.c_ulonglong);
                cs : ltac:(libc.unix.c_ulonglong);
                eflags : ltac:(libc.unix.c_ulonglong);
                rsp : ltac:(libc.unix.c_ulonglong);
                ss : ltac:(libc.unix.c_ulonglong);
                fs_base : ltac:(libc.unix.c_ulonglong);
                gs_base : ltac:(libc.unix.c_ulonglong);
                ds : ltac:(libc.unix.c_ulonglong);
                es : ltac:(libc.unix.c_ulonglong);
                fs : ltac:(libc.unix.c_ulonglong);
                gs : ltac:(libc.unix.c_ulonglong);
              }.
              
              Definition Get_r15 :=
                Ref.map
                  (fun α => Some α.(r15))
                  (fun β α => Some (α <| r15 := β |>)).
              Definition Get_r14 :=
                Ref.map
                  (fun α => Some α.(r14))
                  (fun β α => Some (α <| r14 := β |>)).
              Definition Get_r13 :=
                Ref.map
                  (fun α => Some α.(r13))
                  (fun β α => Some (α <| r13 := β |>)).
              Definition Get_r12 :=
                Ref.map
                  (fun α => Some α.(r12))
                  (fun β α => Some (α <| r12 := β |>)).
              Definition Get_rbp :=
                Ref.map
                  (fun α => Some α.(rbp))
                  (fun β α => Some (α <| rbp := β |>)).
              Definition Get_rbx :=
                Ref.map
                  (fun α => Some α.(rbx))
                  (fun β α => Some (α <| rbx := β |>)).
              Definition Get_r11 :=
                Ref.map
                  (fun α => Some α.(r11))
                  (fun β α => Some (α <| r11 := β |>)).
              Definition Get_r10 :=
                Ref.map
                  (fun α => Some α.(r10))
                  (fun β α => Some (α <| r10 := β |>)).
              Definition Get_r9 :=
                Ref.map
                  (fun α => Some α.(r9))
                  (fun β α => Some (α <| r9 := β |>)).
              Definition Get_r8 :=
                Ref.map
                  (fun α => Some α.(r8))
                  (fun β α => Some (α <| r8 := β |>)).
              Definition Get_rax :=
                Ref.map
                  (fun α => Some α.(rax))
                  (fun β α => Some (α <| rax := β |>)).
              Definition Get_rcx :=
                Ref.map
                  (fun α => Some α.(rcx))
                  (fun β α => Some (α <| rcx := β |>)).
              Definition Get_rdx :=
                Ref.map
                  (fun α => Some α.(rdx))
                  (fun β α => Some (α <| rdx := β |>)).
              Definition Get_rsi :=
                Ref.map
                  (fun α => Some α.(rsi))
                  (fun β α => Some (α <| rsi := β |>)).
              Definition Get_rdi :=
                Ref.map
                  (fun α => Some α.(rdi))
                  (fun β α => Some (α <| rdi := β |>)).
              Definition Get_orig_rax :=
                Ref.map
                  (fun α => Some α.(orig_rax))
                  (fun β α => Some (α <| orig_rax := β |>)).
              Definition Get_rip :=
                Ref.map
                  (fun α => Some α.(rip))
                  (fun β α => Some (α <| rip := β |>)).
              Definition Get_cs :=
                Ref.map
                  (fun α => Some α.(cs))
                  (fun β α => Some (α <| cs := β |>)).
              Definition Get_eflags :=
                Ref.map
                  (fun α => Some α.(eflags))
                  (fun β α => Some (α <| eflags := β |>)).
              Definition Get_rsp :=
                Ref.map
                  (fun α => Some α.(rsp))
                  (fun β α => Some (α <| rsp := β |>)).
              Definition Get_ss :=
                Ref.map
                  (fun α => Some α.(ss))
                  (fun β α => Some (α <| ss := β |>)).
              Definition Get_fs_base :=
                Ref.map
                  (fun α => Some α.(fs_base))
                  (fun β α => Some (α <| fs_base := β |>)).
              Definition Get_gs_base :=
                Ref.map
                  (fun α => Some α.(gs_base))
                  (fun β α => Some (α <| gs_base := β |>)).
              Definition Get_ds :=
                Ref.map
                  (fun α => Some α.(ds))
                  (fun β α => Some (α <| ds := β |>)).
              Definition Get_es :=
                Ref.map
                  (fun α => Some α.(es))
                  (fun β α => Some (α <| es := β |>)).
              Definition Get_fs :=
                Ref.map
                  (fun α => Some α.(fs))
                  (fun β α => Some (α <| fs := β |>)).
              Definition Get_gs :=
                Ref.map
                  (fun α => Some α.(gs))
                  (fun β α => Some (α <| gs := β |>)).
            End user_regs_struct.
            End user_regs_struct.
            
            Module  Impl_core_marker_Copy_for_libc_unix_linux_like_linux_gnu_b64_x86_64_user_regs_struct_t.
            Section Impl_core_marker_Copy_for_libc_unix_linux_like_linux_gnu_b64_x86_64_user_regs_struct_t.
              Definition Self : Set :=
                libc.unix.linux_like.linux.gnu.b64.x86_64.user_regs_struct.t.
              
              Global Instance ℐ : core.marker.Copy.Trait Self := {
              }.
            End Impl_core_marker_Copy_for_libc_unix_linux_like_linux_gnu_b64_x86_64_user_regs_struct_t.
            End Impl_core_marker_Copy_for_libc_unix_linux_like_linux_gnu_b64_x86_64_user_regs_struct_t.
            
            Module  Impl_core_clone_Clone_for_libc_unix_linux_like_linux_gnu_b64_x86_64_user_regs_struct_t.
            Section Impl_core_clone_Clone_for_libc_unix_linux_like_linux_gnu_b64_x86_64_user_regs_struct_t.
              Definition Self : Set :=
                libc.unix.linux_like.linux.gnu.b64.x86_64.user_regs_struct.t.
              
              (*
                          fn clone(&self) -> $i { *self }
              *)
              Definition clone
                  (self : ref Self)
                  :
                    M
                      libc.unix.linux_like.linux.gnu.b64.x86_64.user_regs_struct.t :=
                let* self := M.alloc self in
                let* α0 :
                    ref
                      libc.unix.linux_like.linux.gnu.b64.x86_64.user_regs_struct.t :=
                  M.read self in
                M.read (deref α0).
              
              Global Instance AssociatedFunction_clone :
                Notations.DoubleColon Self "clone" := {
                Notations.double_colon := clone;
              }.
              
              Global Instance ℐ : core.clone.Clone.Required.Trait Self := {
                core.clone.Clone.clone := clone;
                core.clone.Clone.clone_from := Datatypes.None;
              }.
            End Impl_core_clone_Clone_for_libc_unix_linux_like_linux_gnu_b64_x86_64_user_regs_struct_t.
            End Impl_core_clone_Clone_for_libc_unix_linux_like_linux_gnu_b64_x86_64_user_regs_struct_t.
            
            Module  user.
            Section user.
              Record t : Set := {
                regs :
                  libc.unix.linux_like.linux.gnu.b64.x86_64.user_regs_struct.t;
                u_fpvalid : ltac:(libc.unix.c_int);
                i387 :
                  libc.unix.linux_like.linux.gnu.b64.x86_64.user_fpregs_struct.t;
                u_tsize : ltac:(libc.unix.c_ulonglong);
                u_dsize : ltac:(libc.unix.c_ulonglong);
                u_ssize : ltac:(libc.unix.c_ulonglong);
                start_code : ltac:(libc.unix.c_ulonglong);
                start_stack : ltac:(libc.unix.c_ulonglong);
                signal : ltac:(libc.unix.c_longlong);
                __reserved : ltac:(libc.unix.c_int);
                u_ar0 :
                  mut_ref
                    libc.unix.linux_like.linux.gnu.b64.x86_64.user_regs_struct.t;
                u_fpstate :
                  mut_ref
                    libc.unix.linux_like.linux.gnu.b64.x86_64.user_fpregs_struct.t;
                magic : ltac:(libc.unix.c_ulonglong);
                u_comm :
                  array ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.c_char);
                u_debugreg : array ltac:(libc.unix.c_ulonglong);
              }.
              
              Definition Get_regs :=
                Ref.map
                  (fun α => Some α.(regs))
                  (fun β α => Some (α <| regs := β |>)).
              Definition Get_u_fpvalid :=
                Ref.map
                  (fun α => Some α.(u_fpvalid))
                  (fun β α => Some (α <| u_fpvalid := β |>)).
              Definition Get_i387 :=
                Ref.map
                  (fun α => Some α.(i387))
                  (fun β α => Some (α <| i387 := β |>)).
              Definition Get_u_tsize :=
                Ref.map
                  (fun α => Some α.(u_tsize))
                  (fun β α => Some (α <| u_tsize := β |>)).
              Definition Get_u_dsize :=
                Ref.map
                  (fun α => Some α.(u_dsize))
                  (fun β α => Some (α <| u_dsize := β |>)).
              Definition Get_u_ssize :=
                Ref.map
                  (fun α => Some α.(u_ssize))
                  (fun β α => Some (α <| u_ssize := β |>)).
              Definition Get_start_code :=
                Ref.map
                  (fun α => Some α.(start_code))
                  (fun β α => Some (α <| start_code := β |>)).
              Definition Get_start_stack :=
                Ref.map
                  (fun α => Some α.(start_stack))
                  (fun β α => Some (α <| start_stack := β |>)).
              Definition Get_signal :=
                Ref.map
                  (fun α => Some α.(signal))
                  (fun β α => Some (α <| signal := β |>)).
              Definition Get___reserved :=
                Ref.map
                  (fun α => Some α.(__reserved))
                  (fun β α => Some (α <| __reserved := β |>)).
              Definition Get_u_ar0 :=
                Ref.map
                  (fun α => Some α.(u_ar0))
                  (fun β α => Some (α <| u_ar0 := β |>)).
              Definition Get_u_fpstate :=
                Ref.map
                  (fun α => Some α.(u_fpstate))
                  (fun β α => Some (α <| u_fpstate := β |>)).
              Definition Get_magic :=
                Ref.map
                  (fun α => Some α.(magic))
                  (fun β α => Some (α <| magic := β |>)).
              Definition Get_u_comm :=
                Ref.map
                  (fun α => Some α.(u_comm))
                  (fun β α => Some (α <| u_comm := β |>)).
              Definition Get_u_debugreg :=
                Ref.map
                  (fun α => Some α.(u_debugreg))
                  (fun β α => Some (α <| u_debugreg := β |>)).
            End user.
            End user.
            
            Module  Impl_core_marker_Copy_for_libc_unix_linux_like_linux_gnu_b64_x86_64_user_t.
            Section Impl_core_marker_Copy_for_libc_unix_linux_like_linux_gnu_b64_x86_64_user_t.
              Definition Self : Set :=
                libc.unix.linux_like.linux.gnu.b64.x86_64.user.t.
              
              Global Instance ℐ : core.marker.Copy.Trait Self := {
              }.
            End Impl_core_marker_Copy_for_libc_unix_linux_like_linux_gnu_b64_x86_64_user_t.
            End Impl_core_marker_Copy_for_libc_unix_linux_like_linux_gnu_b64_x86_64_user_t.
            
            Module  Impl_core_clone_Clone_for_libc_unix_linux_like_linux_gnu_b64_x86_64_user_t.
            Section Impl_core_clone_Clone_for_libc_unix_linux_like_linux_gnu_b64_x86_64_user_t.
              Definition Self : Set :=
                libc.unix.linux_like.linux.gnu.b64.x86_64.user.t.
              
              (*
                          fn clone(&self) -> $i { *self }
              *)
              Definition clone
                  (self : ref Self)
                  : M libc.unix.linux_like.linux.gnu.b64.x86_64.user.t :=
                let* self := M.alloc self in
                let* α0 :
                    ref libc.unix.linux_like.linux.gnu.b64.x86_64.user.t :=
                  M.read self in
                M.read (deref α0).
              
              Global Instance AssociatedFunction_clone :
                Notations.DoubleColon Self "clone" := {
                Notations.double_colon := clone;
              }.
              
              Global Instance ℐ : core.clone.Clone.Required.Trait Self := {
                core.clone.Clone.clone := clone;
                core.clone.Clone.clone_from := Datatypes.None;
              }.
            End Impl_core_clone_Clone_for_libc_unix_linux_like_linux_gnu_b64_x86_64_user_t.
            End Impl_core_clone_Clone_for_libc_unix_linux_like_linux_gnu_b64_x86_64_user_t.
            
            Module  mcontext_t.
            Section mcontext_t.
              Record t : Set := {
                gregs :
                  array ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.greg_t);
                fpregs :
                  mut_ref
                    libc.unix.linux_like.linux.gnu.b64.x86_64._libc_fpstate.t;
                __private : array u64.t;
              }.
              
              Definition Get_gregs :=
                Ref.map
                  (fun α => Some α.(gregs))
                  (fun β α => Some (α <| gregs := β |>)).
              Definition Get_fpregs :=
                Ref.map
                  (fun α => Some α.(fpregs))
                  (fun β α => Some (α <| fpregs := β |>)).
              Definition Get___private :=
                Ref.map
                  (fun α => Some α.(__private))
                  (fun β α => Some (α <| __private := β |>)).
            End mcontext_t.
            End mcontext_t.
            
            Module  Impl_core_marker_Copy_for_libc_unix_linux_like_linux_gnu_b64_x86_64_mcontext_t_t.
            Section Impl_core_marker_Copy_for_libc_unix_linux_like_linux_gnu_b64_x86_64_mcontext_t_t.
              Definition Self : Set :=
                libc.unix.linux_like.linux.gnu.b64.x86_64.mcontext_t.t.
              
              Global Instance ℐ : core.marker.Copy.Trait Self := {
              }.
            End Impl_core_marker_Copy_for_libc_unix_linux_like_linux_gnu_b64_x86_64_mcontext_t_t.
            End Impl_core_marker_Copy_for_libc_unix_linux_like_linux_gnu_b64_x86_64_mcontext_t_t.
            
            Module  Impl_core_clone_Clone_for_libc_unix_linux_like_linux_gnu_b64_x86_64_mcontext_t_t.
            Section Impl_core_clone_Clone_for_libc_unix_linux_like_linux_gnu_b64_x86_64_mcontext_t_t.
              Definition Self : Set :=
                libc.unix.linux_like.linux.gnu.b64.x86_64.mcontext_t.t.
              
              (*
                          fn clone(&self) -> $i { *self }
              *)
              Definition clone
                  (self : ref Self)
                  : M libc.unix.linux_like.linux.gnu.b64.x86_64.mcontext_t.t :=
                let* self := M.alloc self in
                let* α0 :
                    ref
                      libc.unix.linux_like.linux.gnu.b64.x86_64.mcontext_t.t :=
                  M.read self in
                M.read (deref α0).
              
              Global Instance AssociatedFunction_clone :
                Notations.DoubleColon Self "clone" := {
                Notations.double_colon := clone;
              }.
              
              Global Instance ℐ : core.clone.Clone.Required.Trait Self := {
                core.clone.Clone.clone := clone;
                core.clone.Clone.clone_from := Datatypes.None;
              }.
            End Impl_core_clone_Clone_for_libc_unix_linux_like_linux_gnu_b64_x86_64_mcontext_t_t.
            End Impl_core_clone_Clone_for_libc_unix_linux_like_linux_gnu_b64_x86_64_mcontext_t_t.
            
            Module  ipc_perm.
            Section ipc_perm.
              Record t : Set := {
                __key : ltac:(libc.unix.linux_like.key_t);
                uid : ltac:(libc.unix.uid_t);
                gid : ltac:(libc.unix.gid_t);
                cuid : ltac:(libc.unix.uid_t);
                cgid : ltac:(libc.unix.gid_t);
                mode : ltac:(libc.unix.c_ushort);
                __pad1 : ltac:(libc.unix.c_ushort);
                __seq : ltac:(libc.unix.c_ushort);
                __pad2 : ltac:(libc.unix.c_ushort);
                __unused1 : u64.t;
                __unused2 : u64.t;
              }.
              
              Definition Get___key :=
                Ref.map
                  (fun α => Some α.(__key))
                  (fun β α => Some (α <| __key := β |>)).
              Definition Get_uid :=
                Ref.map
                  (fun α => Some α.(uid))
                  (fun β α => Some (α <| uid := β |>)).
              Definition Get_gid :=
                Ref.map
                  (fun α => Some α.(gid))
                  (fun β α => Some (α <| gid := β |>)).
              Definition Get_cuid :=
                Ref.map
                  (fun α => Some α.(cuid))
                  (fun β α => Some (α <| cuid := β |>)).
              Definition Get_cgid :=
                Ref.map
                  (fun α => Some α.(cgid))
                  (fun β α => Some (α <| cgid := β |>)).
              Definition Get_mode :=
                Ref.map
                  (fun α => Some α.(mode))
                  (fun β α => Some (α <| mode := β |>)).
              Definition Get___pad1 :=
                Ref.map
                  (fun α => Some α.(__pad1))
                  (fun β α => Some (α <| __pad1 := β |>)).
              Definition Get___seq :=
                Ref.map
                  (fun α => Some α.(__seq))
                  (fun β α => Some (α <| __seq := β |>)).
              Definition Get___pad2 :=
                Ref.map
                  (fun α => Some α.(__pad2))
                  (fun β α => Some (α <| __pad2 := β |>)).
              Definition Get___unused1 :=
                Ref.map
                  (fun α => Some α.(__unused1))
                  (fun β α => Some (α <| __unused1 := β |>)).
              Definition Get___unused2 :=
                Ref.map
                  (fun α => Some α.(__unused2))
                  (fun β α => Some (α <| __unused2 := β |>)).
            End ipc_perm.
            End ipc_perm.
            
            Module  Impl_core_marker_Copy_for_libc_unix_linux_like_linux_gnu_b64_x86_64_ipc_perm_t.
            Section Impl_core_marker_Copy_for_libc_unix_linux_like_linux_gnu_b64_x86_64_ipc_perm_t.
              Definition Self : Set :=
                libc.unix.linux_like.linux.gnu.b64.x86_64.ipc_perm.t.
              
              Global Instance ℐ : core.marker.Copy.Trait Self := {
              }.
            End Impl_core_marker_Copy_for_libc_unix_linux_like_linux_gnu_b64_x86_64_ipc_perm_t.
            End Impl_core_marker_Copy_for_libc_unix_linux_like_linux_gnu_b64_x86_64_ipc_perm_t.
            
            Module  Impl_core_clone_Clone_for_libc_unix_linux_like_linux_gnu_b64_x86_64_ipc_perm_t.
            Section Impl_core_clone_Clone_for_libc_unix_linux_like_linux_gnu_b64_x86_64_ipc_perm_t.
              Definition Self : Set :=
                libc.unix.linux_like.linux.gnu.b64.x86_64.ipc_perm.t.
              
              (*
                          fn clone(&self) -> $i { *self }
              *)
              Definition clone
                  (self : ref Self)
                  : M libc.unix.linux_like.linux.gnu.b64.x86_64.ipc_perm.t :=
                let* self := M.alloc self in
                let* α0 :
                    ref libc.unix.linux_like.linux.gnu.b64.x86_64.ipc_perm.t :=
                  M.read self in
                M.read (deref α0).
              
              Global Instance AssociatedFunction_clone :
                Notations.DoubleColon Self "clone" := {
                Notations.double_colon := clone;
              }.
              
              Global Instance ℐ : core.clone.Clone.Required.Trait Self := {
                core.clone.Clone.clone := clone;
                core.clone.Clone.clone_from := Datatypes.None;
              }.
            End Impl_core_clone_Clone_for_libc_unix_linux_like_linux_gnu_b64_x86_64_ipc_perm_t.
            End Impl_core_clone_Clone_for_libc_unix_linux_like_linux_gnu_b64_x86_64_ipc_perm_t.
            
            Module  shmid_ds.
            Section shmid_ds.
              Record t : Set := {
                shm_perm : libc.unix.linux_like.linux.gnu.b64.x86_64.ipc_perm.t;
                shm_segsz : ltac:(libc.unix.size_t);
                shm_atime : ltac:(libc.unix.linux_like.linux.gnu.b64.time_t);
                shm_dtime : ltac:(libc.unix.linux_like.linux.gnu.b64.time_t);
                shm_ctime : ltac:(libc.unix.linux_like.linux.gnu.b64.time_t);
                shm_cpid : ltac:(libc.unix.pid_t);
                shm_lpid : ltac:(libc.unix.pid_t);
                shm_nattch : ltac:(libc.unix.linux_like.linux.gnu.b64.shmatt_t);
                __unused4 : u64.t;
                __unused5 : u64.t;
              }.
              
              Definition Get_shm_perm :=
                Ref.map
                  (fun α => Some α.(shm_perm))
                  (fun β α => Some (α <| shm_perm := β |>)).
              Definition Get_shm_segsz :=
                Ref.map
                  (fun α => Some α.(shm_segsz))
                  (fun β α => Some (α <| shm_segsz := β |>)).
              Definition Get_shm_atime :=
                Ref.map
                  (fun α => Some α.(shm_atime))
                  (fun β α => Some (α <| shm_atime := β |>)).
              Definition Get_shm_dtime :=
                Ref.map
                  (fun α => Some α.(shm_dtime))
                  (fun β α => Some (α <| shm_dtime := β |>)).
              Definition Get_shm_ctime :=
                Ref.map
                  (fun α => Some α.(shm_ctime))
                  (fun β α => Some (α <| shm_ctime := β |>)).
              Definition Get_shm_cpid :=
                Ref.map
                  (fun α => Some α.(shm_cpid))
                  (fun β α => Some (α <| shm_cpid := β |>)).
              Definition Get_shm_lpid :=
                Ref.map
                  (fun α => Some α.(shm_lpid))
                  (fun β α => Some (α <| shm_lpid := β |>)).
              Definition Get_shm_nattch :=
                Ref.map
                  (fun α => Some α.(shm_nattch))
                  (fun β α => Some (α <| shm_nattch := β |>)).
              Definition Get___unused4 :=
                Ref.map
                  (fun α => Some α.(__unused4))
                  (fun β α => Some (α <| __unused4 := β |>)).
              Definition Get___unused5 :=
                Ref.map
                  (fun α => Some α.(__unused5))
                  (fun β α => Some (α <| __unused5 := β |>)).
            End shmid_ds.
            End shmid_ds.
            
            Module  Impl_core_marker_Copy_for_libc_unix_linux_like_linux_gnu_b64_x86_64_shmid_ds_t.
            Section Impl_core_marker_Copy_for_libc_unix_linux_like_linux_gnu_b64_x86_64_shmid_ds_t.
              Definition Self : Set :=
                libc.unix.linux_like.linux.gnu.b64.x86_64.shmid_ds.t.
              
              Global Instance ℐ : core.marker.Copy.Trait Self := {
              }.
            End Impl_core_marker_Copy_for_libc_unix_linux_like_linux_gnu_b64_x86_64_shmid_ds_t.
            End Impl_core_marker_Copy_for_libc_unix_linux_like_linux_gnu_b64_x86_64_shmid_ds_t.
            
            Module  Impl_core_clone_Clone_for_libc_unix_linux_like_linux_gnu_b64_x86_64_shmid_ds_t.
            Section Impl_core_clone_Clone_for_libc_unix_linux_like_linux_gnu_b64_x86_64_shmid_ds_t.
              Definition Self : Set :=
                libc.unix.linux_like.linux.gnu.b64.x86_64.shmid_ds.t.
              
              (*
                          fn clone(&self) -> $i { *self }
              *)
              Definition clone
                  (self : ref Self)
                  : M libc.unix.linux_like.linux.gnu.b64.x86_64.shmid_ds.t :=
                let* self := M.alloc self in
                let* α0 :
                    ref libc.unix.linux_like.linux.gnu.b64.x86_64.shmid_ds.t :=
                  M.read self in
                M.read (deref α0).
              
              Global Instance AssociatedFunction_clone :
                Notations.DoubleColon Self "clone" := {
                Notations.double_colon := clone;
              }.
              
              Global Instance ℐ : core.clone.Clone.Required.Trait Self := {
                core.clone.Clone.clone := clone;
                core.clone.Clone.clone_from := Datatypes.None;
              }.
            End Impl_core_clone_Clone_for_libc_unix_linux_like_linux_gnu_b64_x86_64_shmid_ds_t.
            End Impl_core_clone_Clone_for_libc_unix_linux_like_linux_gnu_b64_x86_64_shmid_ds_t.
            
            Module  ptrace_rseq_configuration.
            Section ptrace_rseq_configuration.
              Record t : Set := {
                rseq_abi_pointer :
                  ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.__u64);
                rseq_abi_size : ltac:(libc.unix.linux_like.linux.__u32);
                signature : ltac:(libc.unix.linux_like.linux.__u32);
                flags : ltac:(libc.unix.linux_like.linux.__u32);
                pad : ltac:(libc.unix.linux_like.linux.__u32);
              }.
              
              Definition Get_rseq_abi_pointer :=
                Ref.map
                  (fun α => Some α.(rseq_abi_pointer))
                  (fun β α => Some (α <| rseq_abi_pointer := β |>)).
              Definition Get_rseq_abi_size :=
                Ref.map
                  (fun α => Some α.(rseq_abi_size))
                  (fun β α => Some (α <| rseq_abi_size := β |>)).
              Definition Get_signature :=
                Ref.map
                  (fun α => Some α.(signature))
                  (fun β α => Some (α <| signature := β |>)).
              Definition Get_flags :=
                Ref.map
                  (fun α => Some α.(flags))
                  (fun β α => Some (α <| flags := β |>)).
              Definition Get_pad :=
                Ref.map
                  (fun α => Some α.(pad))
                  (fun β α => Some (α <| pad := β |>)).
            End ptrace_rseq_configuration.
            End ptrace_rseq_configuration.
            
            Module  Impl_core_marker_Copy_for_libc_unix_linux_like_linux_gnu_b64_x86_64_ptrace_rseq_configuration_t.
            Section Impl_core_marker_Copy_for_libc_unix_linux_like_linux_gnu_b64_x86_64_ptrace_rseq_configuration_t.
              Definition Self : Set :=
                libc.unix.linux_like.linux.gnu.b64.x86_64.ptrace_rseq_configuration.t.
              
              Global Instance ℐ : core.marker.Copy.Trait Self := {
              }.
            End Impl_core_marker_Copy_for_libc_unix_linux_like_linux_gnu_b64_x86_64_ptrace_rseq_configuration_t.
            End Impl_core_marker_Copy_for_libc_unix_linux_like_linux_gnu_b64_x86_64_ptrace_rseq_configuration_t.
            
            Module  Impl_core_clone_Clone_for_libc_unix_linux_like_linux_gnu_b64_x86_64_ptrace_rseq_configuration_t.
            Section Impl_core_clone_Clone_for_libc_unix_linux_like_linux_gnu_b64_x86_64_ptrace_rseq_configuration_t.
              Definition Self : Set :=
                libc.unix.linux_like.linux.gnu.b64.x86_64.ptrace_rseq_configuration.t.
              
              (*
                          fn clone(&self) -> $i { *self }
              *)
              Definition clone
                  (self : ref Self)
                  :
                    M
                      libc.unix.linux_like.linux.gnu.b64.x86_64.ptrace_rseq_configuration.t :=
                let* self := M.alloc self in
                let* α0 :
                    ref
                      libc.unix.linux_like.linux.gnu.b64.x86_64.ptrace_rseq_configuration.t :=
                  M.read self in
                M.read (deref α0).
              
              Global Instance AssociatedFunction_clone :
                Notations.DoubleColon Self "clone" := {
                Notations.double_colon := clone;
              }.
              
              Global Instance ℐ : core.clone.Clone.Required.Trait Self := {
                core.clone.Clone.clone := clone;
                core.clone.Clone.clone_from := Datatypes.None;
              }.
            End Impl_core_clone_Clone_for_libc_unix_linux_like_linux_gnu_b64_x86_64_ptrace_rseq_configuration_t.
            End Impl_core_clone_Clone_for_libc_unix_linux_like_linux_gnu_b64_x86_64_ptrace_rseq_configuration_t.
            
            Module  user_fpregs_struct.
            Section user_fpregs_struct.
              Record t : Set := {
                cwd : ltac:(libc.unix.c_ushort);
                swd : ltac:(libc.unix.c_ushort);
                ftw : ltac:(libc.unix.c_ushort);
                fop : ltac:(libc.unix.c_ushort);
                rip : ltac:(libc.unix.c_ulonglong);
                rdp : ltac:(libc.unix.c_ulonglong);
                mxcsr : ltac:(libc.unix.c_uint);
                mxcr_mask : ltac:(libc.unix.c_uint);
                st_space : array ltac:(libc.unix.c_uint);
                xmm_space : array ltac:(libc.unix.c_uint);
                padding : array ltac:(libc.unix.c_uint);
              }.
              
              Definition Get_cwd :=
                Ref.map
                  (fun α => Some α.(cwd))
                  (fun β α => Some (α <| cwd := β |>)).
              Definition Get_swd :=
                Ref.map
                  (fun α => Some α.(swd))
                  (fun β α => Some (α <| swd := β |>)).
              Definition Get_ftw :=
                Ref.map
                  (fun α => Some α.(ftw))
                  (fun β α => Some (α <| ftw := β |>)).
              Definition Get_fop :=
                Ref.map
                  (fun α => Some α.(fop))
                  (fun β α => Some (α <| fop := β |>)).
              Definition Get_rip :=
                Ref.map
                  (fun α => Some α.(rip))
                  (fun β α => Some (α <| rip := β |>)).
              Definition Get_rdp :=
                Ref.map
                  (fun α => Some α.(rdp))
                  (fun β α => Some (α <| rdp := β |>)).
              Definition Get_mxcsr :=
                Ref.map
                  (fun α => Some α.(mxcsr))
                  (fun β α => Some (α <| mxcsr := β |>)).
              Definition Get_mxcr_mask :=
                Ref.map
                  (fun α => Some α.(mxcr_mask))
                  (fun β α => Some (α <| mxcr_mask := β |>)).
              Definition Get_st_space :=
                Ref.map
                  (fun α => Some α.(st_space))
                  (fun β α => Some (α <| st_space := β |>)).
              Definition Get_xmm_space :=
                Ref.map
                  (fun α => Some α.(xmm_space))
                  (fun β α => Some (α <| xmm_space := β |>)).
              Definition Get_padding :=
                Ref.map
                  (fun α => Some α.(padding))
                  (fun β α => Some (α <| padding := β |>)).
            End user_fpregs_struct.
            End user_fpregs_struct.
            
            Module  Impl_core_marker_Copy_for_libc_unix_linux_like_linux_gnu_b64_x86_64_user_fpregs_struct_t.
            Section Impl_core_marker_Copy_for_libc_unix_linux_like_linux_gnu_b64_x86_64_user_fpregs_struct_t.
              Definition Self : Set :=
                libc.unix.linux_like.linux.gnu.b64.x86_64.user_fpregs_struct.t.
              
              Global Instance ℐ : core.marker.Copy.Trait Self := {
              }.
            End Impl_core_marker_Copy_for_libc_unix_linux_like_linux_gnu_b64_x86_64_user_fpregs_struct_t.
            End Impl_core_marker_Copy_for_libc_unix_linux_like_linux_gnu_b64_x86_64_user_fpregs_struct_t.
            
            Module  Impl_core_clone_Clone_for_libc_unix_linux_like_linux_gnu_b64_x86_64_user_fpregs_struct_t.
            Section Impl_core_clone_Clone_for_libc_unix_linux_like_linux_gnu_b64_x86_64_user_fpregs_struct_t.
              Definition Self : Set :=
                libc.unix.linux_like.linux.gnu.b64.x86_64.user_fpregs_struct.t.
              
              (*
                          fn clone(&self) -> $i { *self }
              *)
              Definition clone
                  (self : ref Self)
                  :
                    M
                      libc.unix.linux_like.linux.gnu.b64.x86_64.user_fpregs_struct.t :=
                let* self := M.alloc self in
                let* α0 :
                    ref
                      libc.unix.linux_like.linux.gnu.b64.x86_64.user_fpregs_struct.t :=
                  M.read self in
                M.read (deref α0).
              
              Global Instance AssociatedFunction_clone :
                Notations.DoubleColon Self "clone" := {
                Notations.double_colon := clone;
              }.
              
              Global Instance ℐ : core.clone.Clone.Required.Trait Self := {
                core.clone.Clone.clone := clone;
                core.clone.Clone.clone_from := Datatypes.None;
              }.
            End Impl_core_clone_Clone_for_libc_unix_linux_like_linux_gnu_b64_x86_64_user_fpregs_struct_t.
            End Impl_core_clone_Clone_for_libc_unix_linux_like_linux_gnu_b64_x86_64_user_fpregs_struct_t.
            
            Module  ucontext_t.
            Section ucontext_t.
              Record t : Set := {
                uc_flags :
                  ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_ulong);
                uc_link :
                  mut_ref
                    libc.unix.linux_like.linux.gnu.b64.x86_64.ucontext_t.t;
                uc_stack : libc.unix.linux_like.linux.gnu.b64.x86_64.stack_t.t;
                uc_mcontext :
                  libc.unix.linux_like.linux.gnu.b64.x86_64.mcontext_t.t;
                uc_sigmask : libc.unix.linux_like.linux.gnu.b64.sigset_t.t;
                __private : array u8.t;
              }.
              
              Definition Get_uc_flags :=
                Ref.map
                  (fun α => Some α.(uc_flags))
                  (fun β α => Some (α <| uc_flags := β |>)).
              Definition Get_uc_link :=
                Ref.map
                  (fun α => Some α.(uc_link))
                  (fun β α => Some (α <| uc_link := β |>)).
              Definition Get_uc_stack :=
                Ref.map
                  (fun α => Some α.(uc_stack))
                  (fun β α => Some (α <| uc_stack := β |>)).
              Definition Get_uc_mcontext :=
                Ref.map
                  (fun α => Some α.(uc_mcontext))
                  (fun β α => Some (α <| uc_mcontext := β |>)).
              Definition Get_uc_sigmask :=
                Ref.map
                  (fun α => Some α.(uc_sigmask))
                  (fun β α => Some (α <| uc_sigmask := β |>)).
              Definition Get___private :=
                Ref.map
                  (fun α => Some α.(__private))
                  (fun β α => Some (α <| __private := β |>)).
            End ucontext_t.
            End ucontext_t.
            
            Module  Impl_core_marker_Copy_for_libc_unix_linux_like_linux_gnu_b64_x86_64_ucontext_t_t.
            Section Impl_core_marker_Copy_for_libc_unix_linux_like_linux_gnu_b64_x86_64_ucontext_t_t.
              Definition Self : Set :=
                libc.unix.linux_like.linux.gnu.b64.x86_64.ucontext_t.t.
              
              Global Instance ℐ : core.marker.Copy.Trait Self := {
              }.
            End Impl_core_marker_Copy_for_libc_unix_linux_like_linux_gnu_b64_x86_64_ucontext_t_t.
            End Impl_core_marker_Copy_for_libc_unix_linux_like_linux_gnu_b64_x86_64_ucontext_t_t.
            
            Module  Impl_core_clone_Clone_for_libc_unix_linux_like_linux_gnu_b64_x86_64_ucontext_t_t.
            Section Impl_core_clone_Clone_for_libc_unix_linux_like_linux_gnu_b64_x86_64_ucontext_t_t.
              Definition Self : Set :=
                libc.unix.linux_like.linux.gnu.b64.x86_64.ucontext_t.t.
              
              (*
                          fn clone(&self) -> $i { *self }
              *)
              Definition clone
                  (self : ref Self)
                  : M libc.unix.linux_like.linux.gnu.b64.x86_64.ucontext_t.t :=
                let* self := M.alloc self in
                let* α0 :
                    ref
                      libc.unix.linux_like.linux.gnu.b64.x86_64.ucontext_t.t :=
                  M.read self in
                M.read (deref α0).
              
              Global Instance AssociatedFunction_clone :
                Notations.DoubleColon Self "clone" := {
                Notations.double_colon := clone;
              }.
              
              Global Instance ℐ : core.clone.Clone.Required.Trait Self := {
                core.clone.Clone.clone := clone;
                core.clone.Clone.clone_from := Datatypes.None;
              }.
            End Impl_core_clone_Clone_for_libc_unix_linux_like_linux_gnu_b64_x86_64_ucontext_t_t.
            End Impl_core_clone_Clone_for_libc_unix_linux_like_linux_gnu_b64_x86_64_ucontext_t_t.
            
            Definition POSIX_FADV_DONTNEED : M.Val ltac:(libc.unix.c_int) :=
              M.run (M.alloc ((Integer.of_Z 4) : i32.t)).
            
            Definition POSIX_FADV_NOREUSE : M.Val ltac:(libc.unix.c_int) :=
              M.run (M.alloc ((Integer.of_Z 5) : i32.t)).
            
            Definition VEOF : M.Val usize.t :=
              M.run (M.alloc ((Integer.of_Z 4) : usize.t)).
            
            Definition RTLD_DEEPBIND : M.Val ltac:(libc.unix.c_int) :=
              M.run (M.alloc ((Integer.of_Z 8) : i32.t)).
            
            Definition RTLD_GLOBAL : M.Val ltac:(libc.unix.c_int) :=
              M.run (M.alloc ((Integer.of_Z 256) : i32.t)).
            
            Definition RTLD_NOLOAD : M.Val ltac:(libc.unix.c_int) :=
              M.run (M.alloc ((Integer.of_Z 4) : i32.t)).
            
            Definition O_APPEND : M.Val ltac:(libc.unix.c_int) :=
              M.run (M.alloc ((Integer.of_Z 1024) : i32.t)).
            
            Definition O_CREAT : M.Val ltac:(libc.unix.c_int) :=
              M.run (M.alloc ((Integer.of_Z 64) : i32.t)).
            
            Definition O_EXCL : M.Val ltac:(libc.unix.c_int) :=
              M.run (M.alloc ((Integer.of_Z 128) : i32.t)).
            
            Definition O_NOCTTY : M.Val ltac:(libc.unix.c_int) :=
              M.run (M.alloc ((Integer.of_Z 256) : i32.t)).
            
            Definition O_NONBLOCK : M.Val ltac:(libc.unix.c_int) :=
              M.run (M.alloc ((Integer.of_Z 2048) : i32.t)).
            
            Definition O_SYNC : M.Val ltac:(libc.unix.c_int) :=
              M.run (M.alloc ((Integer.of_Z 1052672) : i32.t)).
            
            Definition O_RSYNC : M.Val ltac:(libc.unix.c_int) :=
              M.run (M.alloc ((Integer.of_Z 1052672) : i32.t)).
            
            Definition O_DSYNC : M.Val ltac:(libc.unix.c_int) :=
              M.run (M.alloc ((Integer.of_Z 4096) : i32.t)).
            
            Definition O_FSYNC : M.Val ltac:(libc.unix.c_int) :=
              M.run (M.alloc ((Integer.of_Z 1052672) : i32.t)).
            
            Definition O_NOATIME : M.Val ltac:(libc.unix.c_int) :=
              M.run (M.alloc ((Integer.of_Z 262144) : i32.t)).
            
            Definition O_PATH : M.Val ltac:(libc.unix.c_int) :=
              M.run (M.alloc ((Integer.of_Z 2097152) : i32.t)).
            
            Definition O_TMPFILE : M.Val ltac:(libc.unix.c_int) :=
              M.run
                (let* α0 : i32.t :=
                  M.read
                    libc.unix.linux_like.linux.gnu.b64.x86_64.O_DIRECTORY in
                M.alloc
                  (BinOp.Pure.bit_or ((Integer.of_Z 4194304) : i32.t) α0)).
            
            Definition MADV_SOFT_OFFLINE : M.Val ltac:(libc.unix.c_int) :=
              M.run (M.alloc ((Integer.of_Z 101) : i32.t)).
            
            Definition MAP_GROWSDOWN : M.Val ltac:(libc.unix.c_int) :=
              M.run (M.alloc ((Integer.of_Z 256) : i32.t)).
            
            Definition EDEADLK : M.Val ltac:(libc.unix.c_int) :=
              M.run (M.alloc ((Integer.of_Z 35) : i32.t)).
            
            Definition ENAMETOOLONG : M.Val ltac:(libc.unix.c_int) :=
              M.run (M.alloc ((Integer.of_Z 36) : i32.t)).
            
            Definition ENOLCK : M.Val ltac:(libc.unix.c_int) :=
              M.run (M.alloc ((Integer.of_Z 37) : i32.t)).
            
            Definition ENOSYS : M.Val ltac:(libc.unix.c_int) :=
              M.run (M.alloc ((Integer.of_Z 38) : i32.t)).
            
            Definition ENOTEMPTY : M.Val ltac:(libc.unix.c_int) :=
              M.run (M.alloc ((Integer.of_Z 39) : i32.t)).
            
            Definition ELOOP : M.Val ltac:(libc.unix.c_int) :=
              M.run (M.alloc ((Integer.of_Z 40) : i32.t)).
            
            Definition ENOMSG : M.Val ltac:(libc.unix.c_int) :=
              M.run (M.alloc ((Integer.of_Z 42) : i32.t)).
            
            Definition EIDRM : M.Val ltac:(libc.unix.c_int) :=
              M.run (M.alloc ((Integer.of_Z 43) : i32.t)).
            
            Definition ECHRNG : M.Val ltac:(libc.unix.c_int) :=
              M.run (M.alloc ((Integer.of_Z 44) : i32.t)).
            
            Definition EL2NSYNC : M.Val ltac:(libc.unix.c_int) :=
              M.run (M.alloc ((Integer.of_Z 45) : i32.t)).
            
            Definition EL3HLT : M.Val ltac:(libc.unix.c_int) :=
              M.run (M.alloc ((Integer.of_Z 46) : i32.t)).
            
            Definition EL3RST : M.Val ltac:(libc.unix.c_int) :=
              M.run (M.alloc ((Integer.of_Z 47) : i32.t)).
            
            Definition ELNRNG : M.Val ltac:(libc.unix.c_int) :=
              M.run (M.alloc ((Integer.of_Z 48) : i32.t)).
            
            Definition EUNATCH : M.Val ltac:(libc.unix.c_int) :=
              M.run (M.alloc ((Integer.of_Z 49) : i32.t)).
            
            Definition ENOCSI : M.Val ltac:(libc.unix.c_int) :=
              M.run (M.alloc ((Integer.of_Z 50) : i32.t)).
            
            Definition EL2HLT : M.Val ltac:(libc.unix.c_int) :=
              M.run (M.alloc ((Integer.of_Z 51) : i32.t)).
            
            Definition EBADE : M.Val ltac:(libc.unix.c_int) :=
              M.run (M.alloc ((Integer.of_Z 52) : i32.t)).
            
            Definition EBADR : M.Val ltac:(libc.unix.c_int) :=
              M.run (M.alloc ((Integer.of_Z 53) : i32.t)).
            
            Definition EXFULL : M.Val ltac:(libc.unix.c_int) :=
              M.run (M.alloc ((Integer.of_Z 54) : i32.t)).
            
            Definition ENOANO : M.Val ltac:(libc.unix.c_int) :=
              M.run (M.alloc ((Integer.of_Z 55) : i32.t)).
            
            Definition EBADRQC : M.Val ltac:(libc.unix.c_int) :=
              M.run (M.alloc ((Integer.of_Z 56) : i32.t)).
            
            Definition EBADSLT : M.Val ltac:(libc.unix.c_int) :=
              M.run (M.alloc ((Integer.of_Z 57) : i32.t)).
            
            Definition EMULTIHOP : M.Val ltac:(libc.unix.c_int) :=
              M.run (M.alloc ((Integer.of_Z 72) : i32.t)).
            
            Definition EOVERFLOW : M.Val ltac:(libc.unix.c_int) :=
              M.run (M.alloc ((Integer.of_Z 75) : i32.t)).
            
            Definition ENOTUNIQ : M.Val ltac:(libc.unix.c_int) :=
              M.run (M.alloc ((Integer.of_Z 76) : i32.t)).
            
            Definition EBADFD : M.Val ltac:(libc.unix.c_int) :=
              M.run (M.alloc ((Integer.of_Z 77) : i32.t)).
            
            Definition EBADMSG : M.Val ltac:(libc.unix.c_int) :=
              M.run (M.alloc ((Integer.of_Z 74) : i32.t)).
            
            Definition EREMCHG : M.Val ltac:(libc.unix.c_int) :=
              M.run (M.alloc ((Integer.of_Z 78) : i32.t)).
            
            Definition ELIBACC : M.Val ltac:(libc.unix.c_int) :=
              M.run (M.alloc ((Integer.of_Z 79) : i32.t)).
            
            Definition ELIBBAD : M.Val ltac:(libc.unix.c_int) :=
              M.run (M.alloc ((Integer.of_Z 80) : i32.t)).
            
            Definition ELIBSCN : M.Val ltac:(libc.unix.c_int) :=
              M.run (M.alloc ((Integer.of_Z 81) : i32.t)).
            
            Definition ELIBMAX : M.Val ltac:(libc.unix.c_int) :=
              M.run (M.alloc ((Integer.of_Z 82) : i32.t)).
            
            Definition ELIBEXEC : M.Val ltac:(libc.unix.c_int) :=
              M.run (M.alloc ((Integer.of_Z 83) : i32.t)).
            
            Definition EILSEQ : M.Val ltac:(libc.unix.c_int) :=
              M.run (M.alloc ((Integer.of_Z 84) : i32.t)).
            
            Definition ERESTART : M.Val ltac:(libc.unix.c_int) :=
              M.run (M.alloc ((Integer.of_Z 85) : i32.t)).
            
            Definition ESTRPIPE : M.Val ltac:(libc.unix.c_int) :=
              M.run (M.alloc ((Integer.of_Z 86) : i32.t)).
            
            Definition EUSERS : M.Val ltac:(libc.unix.c_int) :=
              M.run (M.alloc ((Integer.of_Z 87) : i32.t)).
            
            Definition ENOTSOCK : M.Val ltac:(libc.unix.c_int) :=
              M.run (M.alloc ((Integer.of_Z 88) : i32.t)).
            
            Definition EDESTADDRREQ : M.Val ltac:(libc.unix.c_int) :=
              M.run (M.alloc ((Integer.of_Z 89) : i32.t)).
            
            Definition EMSGSIZE : M.Val ltac:(libc.unix.c_int) :=
              M.run (M.alloc ((Integer.of_Z 90) : i32.t)).
            
            Definition EPROTOTYPE : M.Val ltac:(libc.unix.c_int) :=
              M.run (M.alloc ((Integer.of_Z 91) : i32.t)).
            
            Definition ENOPROTOOPT : M.Val ltac:(libc.unix.c_int) :=
              M.run (M.alloc ((Integer.of_Z 92) : i32.t)).
            
            Definition EPROTONOSUPPORT : M.Val ltac:(libc.unix.c_int) :=
              M.run (M.alloc ((Integer.of_Z 93) : i32.t)).
            
            Definition ESOCKTNOSUPPORT : M.Val ltac:(libc.unix.c_int) :=
              M.run (M.alloc ((Integer.of_Z 94) : i32.t)).
            
            Definition EOPNOTSUPP : M.Val ltac:(libc.unix.c_int) :=
              M.run (M.alloc ((Integer.of_Z 95) : i32.t)).
            
            Definition EPFNOSUPPORT : M.Val ltac:(libc.unix.c_int) :=
              M.run (M.alloc ((Integer.of_Z 96) : i32.t)).
            
            Definition EAFNOSUPPORT : M.Val ltac:(libc.unix.c_int) :=
              M.run (M.alloc ((Integer.of_Z 97) : i32.t)).
            
            Definition EADDRINUSE : M.Val ltac:(libc.unix.c_int) :=
              M.run (M.alloc ((Integer.of_Z 98) : i32.t)).
            
            Definition EADDRNOTAVAIL : M.Val ltac:(libc.unix.c_int) :=
              M.run (M.alloc ((Integer.of_Z 99) : i32.t)).
            
            Definition ENETDOWN : M.Val ltac:(libc.unix.c_int) :=
              M.run (M.alloc ((Integer.of_Z 100) : i32.t)).
            
            Definition ENETUNREACH : M.Val ltac:(libc.unix.c_int) :=
              M.run (M.alloc ((Integer.of_Z 101) : i32.t)).
            
            Definition ENETRESET : M.Val ltac:(libc.unix.c_int) :=
              M.run (M.alloc ((Integer.of_Z 102) : i32.t)).
            
            Definition ECONNABORTED : M.Val ltac:(libc.unix.c_int) :=
              M.run (M.alloc ((Integer.of_Z 103) : i32.t)).
            
            Definition ECONNRESET : M.Val ltac:(libc.unix.c_int) :=
              M.run (M.alloc ((Integer.of_Z 104) : i32.t)).
            
            Definition ENOBUFS : M.Val ltac:(libc.unix.c_int) :=
              M.run (M.alloc ((Integer.of_Z 105) : i32.t)).
            
            Definition EISCONN : M.Val ltac:(libc.unix.c_int) :=
              M.run (M.alloc ((Integer.of_Z 106) : i32.t)).
            
            Definition ENOTCONN : M.Val ltac:(libc.unix.c_int) :=
              M.run (M.alloc ((Integer.of_Z 107) : i32.t)).
            
            Definition ESHUTDOWN : M.Val ltac:(libc.unix.c_int) :=
              M.run (M.alloc ((Integer.of_Z 108) : i32.t)).
            
            Definition ETOOMANYREFS : M.Val ltac:(libc.unix.c_int) :=
              M.run (M.alloc ((Integer.of_Z 109) : i32.t)).
            
            Definition ETIMEDOUT : M.Val ltac:(libc.unix.c_int) :=
              M.run (M.alloc ((Integer.of_Z 110) : i32.t)).
            
            Definition ECONNREFUSED : M.Val ltac:(libc.unix.c_int) :=
              M.run (M.alloc ((Integer.of_Z 111) : i32.t)).
            
            Definition EHOSTDOWN : M.Val ltac:(libc.unix.c_int) :=
              M.run (M.alloc ((Integer.of_Z 112) : i32.t)).
            
            Definition EHOSTUNREACH : M.Val ltac:(libc.unix.c_int) :=
              M.run (M.alloc ((Integer.of_Z 113) : i32.t)).
            
            Definition EALREADY : M.Val ltac:(libc.unix.c_int) :=
              M.run (M.alloc ((Integer.of_Z 114) : i32.t)).
            
            Definition EINPROGRESS : M.Val ltac:(libc.unix.c_int) :=
              M.run (M.alloc ((Integer.of_Z 115) : i32.t)).
            
            Definition ESTALE : M.Val ltac:(libc.unix.c_int) :=
              M.run (M.alloc ((Integer.of_Z 116) : i32.t)).
            
            Definition EDQUOT : M.Val ltac:(libc.unix.c_int) :=
              M.run (M.alloc ((Integer.of_Z 122) : i32.t)).
            
            Definition ENOMEDIUM : M.Val ltac:(libc.unix.c_int) :=
              M.run (M.alloc ((Integer.of_Z 123) : i32.t)).
            
            Definition EMEDIUMTYPE : M.Val ltac:(libc.unix.c_int) :=
              M.run (M.alloc ((Integer.of_Z 124) : i32.t)).
            
            Definition ECANCELED : M.Val ltac:(libc.unix.c_int) :=
              M.run (M.alloc ((Integer.of_Z 125) : i32.t)).
            
            Definition ENOKEY : M.Val ltac:(libc.unix.c_int) :=
              M.run (M.alloc ((Integer.of_Z 126) : i32.t)).
            
            Definition EKEYEXPIRED : M.Val ltac:(libc.unix.c_int) :=
              M.run (M.alloc ((Integer.of_Z 127) : i32.t)).
            
            Definition EKEYREVOKED : M.Val ltac:(libc.unix.c_int) :=
              M.run (M.alloc ((Integer.of_Z 128) : i32.t)).
            
            Definition EKEYREJECTED : M.Val ltac:(libc.unix.c_int) :=
              M.run (M.alloc ((Integer.of_Z 129) : i32.t)).
            
            Definition EOWNERDEAD : M.Val ltac:(libc.unix.c_int) :=
              M.run (M.alloc ((Integer.of_Z 130) : i32.t)).
            
            Definition ENOTRECOVERABLE : M.Val ltac:(libc.unix.c_int) :=
              M.run (M.alloc ((Integer.of_Z 131) : i32.t)).
            
            Definition EHWPOISON : M.Val ltac:(libc.unix.c_int) :=
              M.run (M.alloc ((Integer.of_Z 133) : i32.t)).
            
            Definition ERFKILL : M.Val ltac:(libc.unix.c_int) :=
              M.run (M.alloc ((Integer.of_Z 132) : i32.t)).
            
            Definition SOCK_STREAM : M.Val ltac:(libc.unix.c_int) :=
              M.run (M.alloc ((Integer.of_Z 1) : i32.t)).
            
            Definition SOCK_DGRAM : M.Val ltac:(libc.unix.c_int) :=
              M.run (M.alloc ((Integer.of_Z 2) : i32.t)).
            
            Definition SA_ONSTACK : M.Val ltac:(libc.unix.c_int) :=
              M.run (M.alloc ((Integer.of_Z 134217728) : i32.t)).
            
            Definition SA_SIGINFO : M.Val ltac:(libc.unix.c_int) :=
              M.run (M.alloc ((Integer.of_Z 4) : i32.t)).
            
            Definition SA_NOCLDWAIT : M.Val ltac:(libc.unix.c_int) :=
              M.run (M.alloc ((Integer.of_Z 2) : i32.t)).
            
            Definition SIGTTIN : M.Val ltac:(libc.unix.c_int) :=
              M.run (M.alloc ((Integer.of_Z 21) : i32.t)).
            
            Definition SIGTTOU : M.Val ltac:(libc.unix.c_int) :=
              M.run (M.alloc ((Integer.of_Z 22) : i32.t)).
            
            Definition SIGXCPU : M.Val ltac:(libc.unix.c_int) :=
              M.run (M.alloc ((Integer.of_Z 24) : i32.t)).
            
            Definition SIGXFSZ : M.Val ltac:(libc.unix.c_int) :=
              M.run (M.alloc ((Integer.of_Z 25) : i32.t)).
            
            Definition SIGVTALRM : M.Val ltac:(libc.unix.c_int) :=
              M.run (M.alloc ((Integer.of_Z 26) : i32.t)).
            
            Definition SIGPROF : M.Val ltac:(libc.unix.c_int) :=
              M.run (M.alloc ((Integer.of_Z 27) : i32.t)).
            
            Definition SIGWINCH : M.Val ltac:(libc.unix.c_int) :=
              M.run (M.alloc ((Integer.of_Z 28) : i32.t)).
            
            Definition SIGCHLD : M.Val ltac:(libc.unix.c_int) :=
              M.run (M.alloc ((Integer.of_Z 17) : i32.t)).
            
            Definition SIGBUS : M.Val ltac:(libc.unix.c_int) :=
              M.run (M.alloc ((Integer.of_Z 7) : i32.t)).
            
            Definition SIGUSR1 : M.Val ltac:(libc.unix.c_int) :=
              M.run (M.alloc ((Integer.of_Z 10) : i32.t)).
            
            Definition SIGUSR2 : M.Val ltac:(libc.unix.c_int) :=
              M.run (M.alloc ((Integer.of_Z 12) : i32.t)).
            
            Definition SIGCONT : M.Val ltac:(libc.unix.c_int) :=
              M.run (M.alloc ((Integer.of_Z 18) : i32.t)).
            
            Definition SIGSTOP : M.Val ltac:(libc.unix.c_int) :=
              M.run (M.alloc ((Integer.of_Z 19) : i32.t)).
            
            Definition SIGTSTP : M.Val ltac:(libc.unix.c_int) :=
              M.run (M.alloc ((Integer.of_Z 20) : i32.t)).
            
            Definition SIGURG : M.Val ltac:(libc.unix.c_int) :=
              M.run (M.alloc ((Integer.of_Z 23) : i32.t)).
            
            Definition SIGIO : M.Val ltac:(libc.unix.c_int) :=
              M.run (M.alloc ((Integer.of_Z 29) : i32.t)).
            
            Definition SIGSYS : M.Val ltac:(libc.unix.c_int) :=
              M.run (M.alloc ((Integer.of_Z 31) : i32.t)).
            
            Definition SIGSTKFLT : M.Val ltac:(libc.unix.c_int) :=
              M.run (M.alloc ((Integer.of_Z 16) : i32.t)).
            
            Definition SIGUNUSED : M.Val ltac:(libc.unix.c_int) :=
              M.run (M.alloc ((Integer.of_Z 31) : i32.t)).
            
            Definition SIGPOLL : M.Val ltac:(libc.unix.c_int) :=
              M.run (M.alloc ((Integer.of_Z 29) : i32.t)).
            
            Definition SIGPWR : M.Val ltac:(libc.unix.c_int) :=
              M.run (M.alloc ((Integer.of_Z 30) : i32.t)).
            
            Definition SIG_SETMASK : M.Val ltac:(libc.unix.c_int) :=
              M.run (M.alloc ((Integer.of_Z 2) : i32.t)).
            
            Definition SIG_BLOCK : M.Val ltac:(libc.unix.c_int) :=
              M.run (M.alloc ((Integer.of_Z 0) : i32.t)).
            
            Definition SIG_UNBLOCK : M.Val ltac:(libc.unix.c_int) :=
              M.run (M.alloc ((Integer.of_Z 1) : i32.t)).
            
            Definition POLLWRNORM : M.Val ltac:(libc.unix.c_short) :=
              M.run (M.alloc ((Integer.of_Z 256) : i16.t)).
            
            Definition POLLWRBAND : M.Val ltac:(libc.unix.c_short) :=
              M.run (M.alloc ((Integer.of_Z 512) : i16.t)).
            
            Definition O_ASYNC : M.Val ltac:(libc.unix.c_int) :=
              M.run (M.alloc ((Integer.of_Z 8192) : i32.t)).
            
            Definition O_NDELAY : M.Val ltac:(libc.unix.c_int) :=
              M.run (M.alloc ((Integer.of_Z 2048) : i32.t)).
            
            Definition PTRACE_DETACH : M.Val ltac:(libc.unix.c_uint) :=
              M.run (M.alloc ((Integer.of_Z 17) : u32.t)).
            
            Definition PTRACE_GET_RSEQ_CONFIGURATION
                : M.Val ltac:(libc.unix.c_uint) :=
              M.run (M.alloc ((Integer.of_Z 16911) : u32.t)).
            
            Definition EFD_NONBLOCK : M.Val ltac:(libc.unix.c_int) :=
              M.run (M.alloc ((Integer.of_Z 2048) : i32.t)).
            
            Definition F_GETLK : M.Val ltac:(libc.unix.c_int) :=
              M.run (M.alloc ((Integer.of_Z 5) : i32.t)).
            
            Definition F_GETOWN : M.Val ltac:(libc.unix.c_int) :=
              M.run (M.alloc ((Integer.of_Z 9) : i32.t)).
            
            Definition F_SETOWN : M.Val ltac:(libc.unix.c_int) :=
              M.run (M.alloc ((Integer.of_Z 8) : i32.t)).
            
            Definition F_SETLK : M.Val ltac:(libc.unix.c_int) :=
              M.run (M.alloc ((Integer.of_Z 6) : i32.t)).
            
            Definition F_SETLKW : M.Val ltac:(libc.unix.c_int) :=
              M.run (M.alloc ((Integer.of_Z 7) : i32.t)).
            
            Definition F_OFD_GETLK : M.Val ltac:(libc.unix.c_int) :=
              M.run (M.alloc ((Integer.of_Z 36) : i32.t)).
            
            Definition F_OFD_SETLK : M.Val ltac:(libc.unix.c_int) :=
              M.run (M.alloc ((Integer.of_Z 37) : i32.t)).
            
            Definition F_OFD_SETLKW : M.Val ltac:(libc.unix.c_int) :=
              M.run (M.alloc ((Integer.of_Z 38) : i32.t)).
            
            Definition F_RDLCK : M.Val ltac:(libc.unix.c_int) :=
              M.run (M.alloc ((Integer.of_Z 0) : i32.t)).
            
            Definition F_WRLCK : M.Val ltac:(libc.unix.c_int) :=
              M.run (M.alloc ((Integer.of_Z 1) : i32.t)).
            
            Definition F_UNLCK : M.Val ltac:(libc.unix.c_int) :=
              M.run (M.alloc ((Integer.of_Z 2) : i32.t)).
            
            Definition SFD_NONBLOCK : M.Val ltac:(libc.unix.c_int) :=
              M.run (M.alloc ((Integer.of_Z 2048) : i32.t)).
            
            Definition TCSANOW : M.Val ltac:(libc.unix.c_int) :=
              M.run (M.alloc ((Integer.of_Z 0) : i32.t)).
            
            Definition TCSADRAIN : M.Val ltac:(libc.unix.c_int) :=
              M.run (M.alloc ((Integer.of_Z 1) : i32.t)).
            
            Definition TCSAFLUSH : M.Val ltac:(libc.unix.c_int) :=
              M.run (M.alloc ((Integer.of_Z 2) : i32.t)).
            
            Definition SFD_CLOEXEC : M.Val ltac:(libc.unix.c_int) :=
              M.run (M.alloc ((Integer.of_Z 524288) : i32.t)).
            
            Definition NCCS : M.Val usize.t :=
              M.run (M.alloc ((Integer.of_Z 32) : usize.t)).
            
            Definition O_TRUNC : M.Val ltac:(libc.unix.c_int) :=
              M.run (M.alloc ((Integer.of_Z 512) : i32.t)).
            
            Definition O_CLOEXEC : M.Val ltac:(libc.unix.c_int) :=
              M.run (M.alloc ((Integer.of_Z 524288) : i32.t)).
            
            Definition EBFONT : M.Val ltac:(libc.unix.c_int) :=
              M.run (M.alloc ((Integer.of_Z 59) : i32.t)).
            
            Definition ENOSTR : M.Val ltac:(libc.unix.c_int) :=
              M.run (M.alloc ((Integer.of_Z 60) : i32.t)).
            
            Definition ENODATA : M.Val ltac:(libc.unix.c_int) :=
              M.run (M.alloc ((Integer.of_Z 61) : i32.t)).
            
            Definition ETIME : M.Val ltac:(libc.unix.c_int) :=
              M.run (M.alloc ((Integer.of_Z 62) : i32.t)).
            
            Definition ENOSR : M.Val ltac:(libc.unix.c_int) :=
              M.run (M.alloc ((Integer.of_Z 63) : i32.t)).
            
            Definition ENONET : M.Val ltac:(libc.unix.c_int) :=
              M.run (M.alloc ((Integer.of_Z 64) : i32.t)).
            
            Definition ENOPKG : M.Val ltac:(libc.unix.c_int) :=
              M.run (M.alloc ((Integer.of_Z 65) : i32.t)).
            
            Definition EREMOTE : M.Val ltac:(libc.unix.c_int) :=
              M.run (M.alloc ((Integer.of_Z 66) : i32.t)).
            
            Definition ENOLINK : M.Val ltac:(libc.unix.c_int) :=
              M.run (M.alloc ((Integer.of_Z 67) : i32.t)).
            
            Definition EADV : M.Val ltac:(libc.unix.c_int) :=
              M.run (M.alloc ((Integer.of_Z 68) : i32.t)).
            
            Definition ESRMNT : M.Val ltac:(libc.unix.c_int) :=
              M.run (M.alloc ((Integer.of_Z 69) : i32.t)).
            
            Definition ECOMM : M.Val ltac:(libc.unix.c_int) :=
              M.run (M.alloc ((Integer.of_Z 70) : i32.t)).
            
            Definition EPROTO : M.Val ltac:(libc.unix.c_int) :=
              M.run (M.alloc ((Integer.of_Z 71) : i32.t)).
            
            Definition EDOTDOT : M.Val ltac:(libc.unix.c_int) :=
              M.run (M.alloc ((Integer.of_Z 73) : i32.t)).
            
            Definition SA_NODEFER : M.Val ltac:(libc.unix.c_int) :=
              M.run (M.alloc ((Integer.of_Z 1073741824) : i32.t)).
            
            Definition SA_RESETHAND : M.Val ltac:(libc.unix.c_int) :=
              M.run (M.alloc ((Integer.of_Z 2147483648) : i32.t)).
            
            Definition SA_RESTART : M.Val ltac:(libc.unix.c_int) :=
              M.run (M.alloc ((Integer.of_Z 268435456) : i32.t)).
            
            Definition SA_NOCLDSTOP : M.Val ltac:(libc.unix.c_int) :=
              M.run (M.alloc ((Integer.of_Z 1) : i32.t)).
            
            Definition EPOLL_CLOEXEC : M.Val ltac:(libc.unix.c_int) :=
              M.run (M.alloc ((Integer.of_Z 524288) : i32.t)).
            
            Definition EFD_CLOEXEC : M.Val ltac:(libc.unix.c_int) :=
              M.run (M.alloc ((Integer.of_Z 524288) : i32.t)).
            
            Definition __SIZEOF_PTHREAD_CONDATTR_T : M.Val usize.t :=
              M.run (M.alloc ((Integer.of_Z 4) : usize.t)).
            
            Definition __SIZEOF_PTHREAD_MUTEXATTR_T : M.Val usize.t :=
              M.run (M.alloc ((Integer.of_Z 4) : usize.t)).
            
            Definition __SIZEOF_PTHREAD_BARRIERATTR_T : M.Val usize.t :=
              M.run (M.alloc ((Integer.of_Z 4) : usize.t)).
            
            Definition O_DIRECT : M.Val ltac:(libc.unix.c_int) :=
              M.run (M.alloc ((Integer.of_Z 16384) : i32.t)).
            
            Definition O_DIRECTORY : M.Val ltac:(libc.unix.c_int) :=
              M.run (M.alloc ((Integer.of_Z 65536) : i32.t)).
            
            Definition O_NOFOLLOW : M.Val ltac:(libc.unix.c_int) :=
              M.run (M.alloc ((Integer.of_Z 131072) : i32.t)).
            
            Definition MAP_HUGETLB : M.Val ltac:(libc.unix.c_int) :=
              M.run (M.alloc ((Integer.of_Z 262144) : i32.t)).
            
            Definition MAP_LOCKED : M.Val ltac:(libc.unix.c_int) :=
              M.run (M.alloc ((Integer.of_Z 8192) : i32.t)).
            
            Definition MAP_NORESERVE : M.Val ltac:(libc.unix.c_int) :=
              M.run (M.alloc ((Integer.of_Z 16384) : i32.t)).
            
            Definition MAP_32BIT : M.Val ltac:(libc.unix.c_int) :=
              M.run (M.alloc ((Integer.of_Z 64) : i32.t)).
            
            Definition MAP_ANON : M.Val ltac:(libc.unix.c_int) :=
              M.run (M.alloc ((Integer.of_Z 32) : i32.t)).
            
            Definition MAP_ANONYMOUS : M.Val ltac:(libc.unix.c_int) :=
              M.run (M.alloc ((Integer.of_Z 32) : i32.t)).
            
            Definition MAP_DENYWRITE : M.Val ltac:(libc.unix.c_int) :=
              M.run (M.alloc ((Integer.of_Z 2048) : i32.t)).
            
            Definition MAP_EXECUTABLE : M.Val ltac:(libc.unix.c_int) :=
              M.run (M.alloc ((Integer.of_Z 4096) : i32.t)).
            
            Definition MAP_POPULATE : M.Val ltac:(libc.unix.c_int) :=
              M.run (M.alloc ((Integer.of_Z 32768) : i32.t)).
            
            Definition MAP_NONBLOCK : M.Val ltac:(libc.unix.c_int) :=
              M.run (M.alloc ((Integer.of_Z 65536) : i32.t)).
            
            Definition MAP_STACK : M.Val ltac:(libc.unix.c_int) :=
              M.run (M.alloc ((Integer.of_Z 131072) : i32.t)).
            
            Definition MAP_SYNC : M.Val ltac:(libc.unix.c_int) :=
              M.run (M.alloc ((Integer.of_Z 524288) : i32.t)).
            
            Definition EDEADLOCK : M.Val ltac:(libc.unix.c_int) :=
              M.run (M.alloc ((Integer.of_Z 35) : i32.t)).
            
            Definition EUCLEAN : M.Val ltac:(libc.unix.c_int) :=
              M.run (M.alloc ((Integer.of_Z 117) : i32.t)).
            
            Definition ENOTNAM : M.Val ltac:(libc.unix.c_int) :=
              M.run (M.alloc ((Integer.of_Z 118) : i32.t)).
            
            Definition ENAVAIL : M.Val ltac:(libc.unix.c_int) :=
              M.run (M.alloc ((Integer.of_Z 119) : i32.t)).
            
            Definition EISNAM : M.Val ltac:(libc.unix.c_int) :=
              M.run (M.alloc ((Integer.of_Z 120) : i32.t)).
            
            Definition EREMOTEIO : M.Val ltac:(libc.unix.c_int) :=
              M.run (M.alloc ((Integer.of_Z 121) : i32.t)).
            
            Definition PTRACE_GETFPREGS : M.Val ltac:(libc.unix.c_uint) :=
              M.run (M.alloc ((Integer.of_Z 14) : u32.t)).
            
            Definition PTRACE_SETFPREGS : M.Val ltac:(libc.unix.c_uint) :=
              M.run (M.alloc ((Integer.of_Z 15) : u32.t)).
            
            Definition PTRACE_GETFPXREGS : M.Val ltac:(libc.unix.c_uint) :=
              M.run (M.alloc ((Integer.of_Z 18) : u32.t)).
            
            Definition PTRACE_SETFPXREGS : M.Val ltac:(libc.unix.c_uint) :=
              M.run (M.alloc ((Integer.of_Z 19) : u32.t)).
            
            Definition PTRACE_GETREGS : M.Val ltac:(libc.unix.c_uint) :=
              M.run (M.alloc ((Integer.of_Z 12) : u32.t)).
            
            Definition PTRACE_SETREGS : M.Val ltac:(libc.unix.c_uint) :=
              M.run (M.alloc ((Integer.of_Z 13) : u32.t)).
            
            Definition PTRACE_PEEKSIGINFO_SHARED
                : M.Val ltac:(libc.unix.c_uint) :=
              M.run (M.alloc ((Integer.of_Z 1) : u32.t)).
            
            Definition PTRACE_SYSEMU : M.Val ltac:(libc.unix.c_uint) :=
              M.run (M.alloc ((Integer.of_Z 31) : u32.t)).
            
            Definition PTRACE_SYSEMU_SINGLESTEP
                : M.Val ltac:(libc.unix.c_uint) :=
              M.run (M.alloc ((Integer.of_Z 32) : u32.t)).
            
            Definition PR_GET_SPECULATION_CTRL : M.Val ltac:(libc.unix.c_int) :=
              M.run (M.alloc ((Integer.of_Z 52) : i32.t)).
            
            Definition PR_SET_SPECULATION_CTRL : M.Val ltac:(libc.unix.c_int) :=
              M.run (M.alloc ((Integer.of_Z 53) : i32.t)).
            
            Definition PR_SPEC_NOT_AFFECTED : M.Val ltac:(libc.unix.c_uint) :=
              M.run (M.alloc ((Integer.of_Z 0) : u32.t)).
            
            Definition PR_SPEC_PRCTL : M.Val ltac:(libc.unix.c_uint) :=
              M.run
                (let* α0 : u32.t :=
                  BinOp.Panic.shl
                    ((Integer.of_Z 1) : u32.t)
                    ((Integer.of_Z 0) : i32.t) in
                M.alloc α0).
            
            Definition PR_SPEC_ENABLE : M.Val ltac:(libc.unix.c_uint) :=
              M.run
                (let* α0 : u32.t :=
                  BinOp.Panic.shl
                    ((Integer.of_Z 1) : u32.t)
                    ((Integer.of_Z 1) : i32.t) in
                M.alloc α0).
            
            Definition PR_SPEC_DISABLE : M.Val ltac:(libc.unix.c_uint) :=
              M.run
                (let* α0 : u32.t :=
                  BinOp.Panic.shl
                    ((Integer.of_Z 1) : u32.t)
                    ((Integer.of_Z 2) : i32.t) in
                M.alloc α0).
            
            Definition PR_SPEC_FORCE_DISABLE : M.Val ltac:(libc.unix.c_uint) :=
              M.run
                (let* α0 : u32.t :=
                  BinOp.Panic.shl
                    ((Integer.of_Z 1) : u32.t)
                    ((Integer.of_Z 3) : i32.t) in
                M.alloc α0).
            
            Definition PR_SPEC_DISABLE_NOEXEC : M.Val ltac:(libc.unix.c_uint) :=
              M.run
                (let* α0 : u32.t :=
                  BinOp.Panic.shl
                    ((Integer.of_Z 1) : u32.t)
                    ((Integer.of_Z 4) : i32.t) in
                M.alloc α0).
            
            Definition PR_SPEC_STORE_BYPASS : M.Val ltac:(libc.unix.c_int) :=
              M.run (M.alloc ((Integer.of_Z 0) : i32.t)).
            
            Definition PR_SPEC_INDIRECT_BRANCH : M.Val ltac:(libc.unix.c_int) :=
              M.run (M.alloc ((Integer.of_Z 1) : i32.t)).
            
            Definition MCL_CURRENT : M.Val ltac:(libc.unix.c_int) :=
              M.run (M.alloc ((Integer.of_Z 1) : i32.t)).
            
            Definition MCL_FUTURE : M.Val ltac:(libc.unix.c_int) :=
              M.run (M.alloc ((Integer.of_Z 2) : i32.t)).
            
            Definition MCL_ONFAULT : M.Val ltac:(libc.unix.c_int) :=
              M.run (M.alloc ((Integer.of_Z 4) : i32.t)).
            
            Definition SIGSTKSZ : M.Val ltac:(libc.unix.size_t) :=
              M.run (M.alloc ((Integer.of_Z 8192) : usize.t)).
            
            Definition MINSIGSTKSZ : M.Val ltac:(libc.unix.size_t) :=
              M.run (M.alloc ((Integer.of_Z 2048) : usize.t)).
            
            Definition CBAUD : M.Val ltac:(libc.unix.linux_like.tcflag_t) :=
              M.run (M.alloc ((Integer.of_Z 4111) : u32.t)).
            
            Definition TAB1 : M.Val ltac:(libc.unix.linux_like.tcflag_t) :=
              M.run (M.alloc ((Integer.of_Z 2048) : u32.t)).
            
            Definition TAB2 : M.Val ltac:(libc.unix.linux_like.tcflag_t) :=
              M.run (M.alloc ((Integer.of_Z 4096) : u32.t)).
            
            Definition TAB3 : M.Val ltac:(libc.unix.linux_like.tcflag_t) :=
              M.run (M.alloc ((Integer.of_Z 6144) : u32.t)).
            
            Definition CR1 : M.Val ltac:(libc.unix.linux_like.tcflag_t) :=
              M.run (M.alloc ((Integer.of_Z 512) : u32.t)).
            
            Definition CR2 : M.Val ltac:(libc.unix.linux_like.tcflag_t) :=
              M.run (M.alloc ((Integer.of_Z 1024) : u32.t)).
            
            Definition CR3 : M.Val ltac:(libc.unix.linux_like.tcflag_t) :=
              M.run (M.alloc ((Integer.of_Z 1536) : u32.t)).
            
            Definition FF1 : M.Val ltac:(libc.unix.linux_like.tcflag_t) :=
              M.run (M.alloc ((Integer.of_Z 32768) : u32.t)).
            
            Definition BS1 : M.Val ltac:(libc.unix.linux_like.tcflag_t) :=
              M.run (M.alloc ((Integer.of_Z 8192) : u32.t)).
            
            Definition VT1 : M.Val ltac:(libc.unix.linux_like.tcflag_t) :=
              M.run (M.alloc ((Integer.of_Z 16384) : u32.t)).
            
            Definition VWERASE : M.Val usize.t :=
              M.run (M.alloc ((Integer.of_Z 14) : usize.t)).
            
            Definition VREPRINT : M.Val usize.t :=
              M.run (M.alloc ((Integer.of_Z 12) : usize.t)).
            
            Definition VSUSP : M.Val usize.t :=
              M.run (M.alloc ((Integer.of_Z 10) : usize.t)).
            
            Definition VSTART : M.Val usize.t :=
              M.run (M.alloc ((Integer.of_Z 8) : usize.t)).
            
            Definition VSTOP : M.Val usize.t :=
              M.run (M.alloc ((Integer.of_Z 9) : usize.t)).
            
            Definition VDISCARD : M.Val usize.t :=
              M.run (M.alloc ((Integer.of_Z 13) : usize.t)).
            
            Definition VTIME : M.Val usize.t :=
              M.run (M.alloc ((Integer.of_Z 5) : usize.t)).
            
            Definition IXON : M.Val ltac:(libc.unix.linux_like.tcflag_t) :=
              M.run (M.alloc ((Integer.of_Z 1024) : u32.t)).
            
            Definition IXOFF : M.Val ltac:(libc.unix.linux_like.tcflag_t) :=
              M.run (M.alloc ((Integer.of_Z 4096) : u32.t)).
            
            Definition ONLCR : M.Val ltac:(libc.unix.linux_like.tcflag_t) :=
              M.run (M.alloc ((Integer.of_Z 4) : u32.t)).
            
            Definition CSIZE : M.Val ltac:(libc.unix.linux_like.tcflag_t) :=
              M.run (M.alloc ((Integer.of_Z 48) : u32.t)).
            
            Definition CS6 : M.Val ltac:(libc.unix.linux_like.tcflag_t) :=
              M.run (M.alloc ((Integer.of_Z 16) : u32.t)).
            
            Definition CS7 : M.Val ltac:(libc.unix.linux_like.tcflag_t) :=
              M.run (M.alloc ((Integer.of_Z 32) : u32.t)).
            
            Definition CS8 : M.Val ltac:(libc.unix.linux_like.tcflag_t) :=
              M.run (M.alloc ((Integer.of_Z 48) : u32.t)).
            
            Definition CSTOPB : M.Val ltac:(libc.unix.linux_like.tcflag_t) :=
              M.run (M.alloc ((Integer.of_Z 64) : u32.t)).
            
            Definition CREAD : M.Val ltac:(libc.unix.linux_like.tcflag_t) :=
              M.run (M.alloc ((Integer.of_Z 128) : u32.t)).
            
            Definition PARENB : M.Val ltac:(libc.unix.linux_like.tcflag_t) :=
              M.run (M.alloc ((Integer.of_Z 256) : u32.t)).
            
            Definition PARODD : M.Val ltac:(libc.unix.linux_like.tcflag_t) :=
              M.run (M.alloc ((Integer.of_Z 512) : u32.t)).
            
            Definition HUPCL : M.Val ltac:(libc.unix.linux_like.tcflag_t) :=
              M.run (M.alloc ((Integer.of_Z 1024) : u32.t)).
            
            Definition CLOCAL : M.Val ltac:(libc.unix.linux_like.tcflag_t) :=
              M.run (M.alloc ((Integer.of_Z 2048) : u32.t)).
            
            Definition ECHOKE : M.Val ltac:(libc.unix.linux_like.tcflag_t) :=
              M.run (M.alloc ((Integer.of_Z 2048) : u32.t)).
            
            Definition ECHOE : M.Val ltac:(libc.unix.linux_like.tcflag_t) :=
              M.run (M.alloc ((Integer.of_Z 16) : u32.t)).
            
            Definition ECHOK : M.Val ltac:(libc.unix.linux_like.tcflag_t) :=
              M.run (M.alloc ((Integer.of_Z 32) : u32.t)).
            
            Definition ECHONL : M.Val ltac:(libc.unix.linux_like.tcflag_t) :=
              M.run (M.alloc ((Integer.of_Z 64) : u32.t)).
            
            Definition ECHOPRT : M.Val ltac:(libc.unix.linux_like.tcflag_t) :=
              M.run (M.alloc ((Integer.of_Z 1024) : u32.t)).
            
            Definition ECHOCTL : M.Val ltac:(libc.unix.linux_like.tcflag_t) :=
              M.run (M.alloc ((Integer.of_Z 512) : u32.t)).
            
            Definition ISIG : M.Val ltac:(libc.unix.linux_like.tcflag_t) :=
              M.run (M.alloc ((Integer.of_Z 1) : u32.t)).
            
            Definition ICANON : M.Val ltac:(libc.unix.linux_like.tcflag_t) :=
              M.run (M.alloc ((Integer.of_Z 2) : u32.t)).
            
            Definition PENDIN : M.Val ltac:(libc.unix.linux_like.tcflag_t) :=
              M.run (M.alloc ((Integer.of_Z 16384) : u32.t)).
            
            Definition NOFLSH : M.Val ltac:(libc.unix.linux_like.tcflag_t) :=
              M.run (M.alloc ((Integer.of_Z 128) : u32.t)).
            
            Definition CIBAUD : M.Val ltac:(libc.unix.linux_like.tcflag_t) :=
              M.run (M.alloc ((Integer.of_Z 269418496) : u32.t)).
            
            Definition CBAUDEX : M.Val ltac:(libc.unix.linux_like.tcflag_t) :=
              M.run (M.alloc ((Integer.of_Z 4096) : u32.t)).
            
            Definition VSWTC : M.Val usize.t :=
              M.run (M.alloc ((Integer.of_Z 7) : usize.t)).
            
            Definition OLCUC : M.Val ltac:(libc.unix.linux_like.tcflag_t) :=
              M.run (M.alloc ((Integer.of_Z 2) : u32.t)).
            
            Definition NLDLY : M.Val ltac:(libc.unix.linux_like.tcflag_t) :=
              M.run (M.alloc ((Integer.of_Z 256) : u32.t)).
            
            Definition CRDLY : M.Val ltac:(libc.unix.linux_like.tcflag_t) :=
              M.run (M.alloc ((Integer.of_Z 1536) : u32.t)).
            
            Definition TABDLY : M.Val ltac:(libc.unix.linux_like.tcflag_t) :=
              M.run (M.alloc ((Integer.of_Z 6144) : u32.t)).
            
            Definition BSDLY : M.Val ltac:(libc.unix.linux_like.tcflag_t) :=
              M.run (M.alloc ((Integer.of_Z 8192) : u32.t)).
            
            Definition FFDLY : M.Val ltac:(libc.unix.linux_like.tcflag_t) :=
              M.run (M.alloc ((Integer.of_Z 32768) : u32.t)).
            
            Definition VTDLY : M.Val ltac:(libc.unix.linux_like.tcflag_t) :=
              M.run (M.alloc ((Integer.of_Z 16384) : u32.t)).
            
            Definition XTABS : M.Val ltac:(libc.unix.linux_like.tcflag_t) :=
              M.run (M.alloc ((Integer.of_Z 6144) : u32.t)).
            
            Definition B0 : M.Val ltac:(libc.unix.linux_like.speed_t) :=
              M.run (M.alloc ((Integer.of_Z 0) : u32.t)).
            
            Definition B50 : M.Val ltac:(libc.unix.linux_like.speed_t) :=
              M.run (M.alloc ((Integer.of_Z 1) : u32.t)).
            
            Definition B75 : M.Val ltac:(libc.unix.linux_like.speed_t) :=
              M.run (M.alloc ((Integer.of_Z 2) : u32.t)).
            
            Definition B110 : M.Val ltac:(libc.unix.linux_like.speed_t) :=
              M.run (M.alloc ((Integer.of_Z 3) : u32.t)).
            
            Definition B134 : M.Val ltac:(libc.unix.linux_like.speed_t) :=
              M.run (M.alloc ((Integer.of_Z 4) : u32.t)).
            
            Definition B150 : M.Val ltac:(libc.unix.linux_like.speed_t) :=
              M.run (M.alloc ((Integer.of_Z 5) : u32.t)).
            
            Definition B200 : M.Val ltac:(libc.unix.linux_like.speed_t) :=
              M.run (M.alloc ((Integer.of_Z 6) : u32.t)).
            
            Definition B300 : M.Val ltac:(libc.unix.linux_like.speed_t) :=
              M.run (M.alloc ((Integer.of_Z 7) : u32.t)).
            
            Definition B600 : M.Val ltac:(libc.unix.linux_like.speed_t) :=
              M.run (M.alloc ((Integer.of_Z 8) : u32.t)).
            
            Definition B1200 : M.Val ltac:(libc.unix.linux_like.speed_t) :=
              M.run (M.alloc ((Integer.of_Z 9) : u32.t)).
            
            Definition B1800 : M.Val ltac:(libc.unix.linux_like.speed_t) :=
              M.run (M.alloc ((Integer.of_Z 10) : u32.t)).
            
            Definition B2400 : M.Val ltac:(libc.unix.linux_like.speed_t) :=
              M.run (M.alloc ((Integer.of_Z 11) : u32.t)).
            
            Definition B4800 : M.Val ltac:(libc.unix.linux_like.speed_t) :=
              M.run (M.alloc ((Integer.of_Z 12) : u32.t)).
            
            Definition B9600 : M.Val ltac:(libc.unix.linux_like.speed_t) :=
              M.run (M.alloc ((Integer.of_Z 13) : u32.t)).
            
            Definition B19200 : M.Val ltac:(libc.unix.linux_like.speed_t) :=
              M.run (M.alloc ((Integer.of_Z 14) : u32.t)).
            
            Definition B38400 : M.Val ltac:(libc.unix.linux_like.speed_t) :=
              M.run (M.alloc ((Integer.of_Z 15) : u32.t)).
            
            Definition EXTA : M.Val ltac:(libc.unix.linux_like.speed_t) :=
              M.run (M.pure libc.unix.linux_like.linux.gnu.b64.x86_64.B19200).
            
            Definition EXTB : M.Val ltac:(libc.unix.linux_like.speed_t) :=
              M.run (M.pure libc.unix.linux_like.linux.gnu.b64.x86_64.B38400).
            
            Definition B57600 : M.Val ltac:(libc.unix.linux_like.speed_t) :=
              M.run (M.alloc ((Integer.of_Z 4097) : u32.t)).
            
            Definition B115200 : M.Val ltac:(libc.unix.linux_like.speed_t) :=
              M.run (M.alloc ((Integer.of_Z 4098) : u32.t)).
            
            Definition B230400 : M.Val ltac:(libc.unix.linux_like.speed_t) :=
              M.run (M.alloc ((Integer.of_Z 4099) : u32.t)).
            
            Definition B460800 : M.Val ltac:(libc.unix.linux_like.speed_t) :=
              M.run (M.alloc ((Integer.of_Z 4100) : u32.t)).
            
            Definition B500000 : M.Val ltac:(libc.unix.linux_like.speed_t) :=
              M.run (M.alloc ((Integer.of_Z 4101) : u32.t)).
            
            Definition B576000 : M.Val ltac:(libc.unix.linux_like.speed_t) :=
              M.run (M.alloc ((Integer.of_Z 4102) : u32.t)).
            
            Definition B921600 : M.Val ltac:(libc.unix.linux_like.speed_t) :=
              M.run (M.alloc ((Integer.of_Z 4103) : u32.t)).
            
            Definition B1000000 : M.Val ltac:(libc.unix.linux_like.speed_t) :=
              M.run (M.alloc ((Integer.of_Z 4104) : u32.t)).
            
            Definition B1152000 : M.Val ltac:(libc.unix.linux_like.speed_t) :=
              M.run (M.alloc ((Integer.of_Z 4105) : u32.t)).
            
            Definition B1500000 : M.Val ltac:(libc.unix.linux_like.speed_t) :=
              M.run (M.alloc ((Integer.of_Z 4106) : u32.t)).
            
            Definition B2000000 : M.Val ltac:(libc.unix.linux_like.speed_t) :=
              M.run (M.alloc ((Integer.of_Z 4107) : u32.t)).
            
            Definition B2500000 : M.Val ltac:(libc.unix.linux_like.speed_t) :=
              M.run (M.alloc ((Integer.of_Z 4108) : u32.t)).
            
            Definition B3000000 : M.Val ltac:(libc.unix.linux_like.speed_t) :=
              M.run (M.alloc ((Integer.of_Z 4109) : u32.t)).
            
            Definition B3500000 : M.Val ltac:(libc.unix.linux_like.speed_t) :=
              M.run (M.alloc ((Integer.of_Z 4110) : u32.t)).
            
            Definition B4000000 : M.Val ltac:(libc.unix.linux_like.speed_t) :=
              M.run (M.alloc ((Integer.of_Z 4111) : u32.t)).
            
            Definition VEOL : M.Val usize.t :=
              M.run (M.alloc ((Integer.of_Z 11) : usize.t)).
            
            Definition VEOL2 : M.Val usize.t :=
              M.run (M.alloc ((Integer.of_Z 16) : usize.t)).
            
            Definition VMIN : M.Val usize.t :=
              M.run (M.alloc ((Integer.of_Z 6) : usize.t)).
            
            Definition IEXTEN : M.Val ltac:(libc.unix.linux_like.tcflag_t) :=
              M.run (M.alloc ((Integer.of_Z 32768) : u32.t)).
            
            Definition TOSTOP : M.Val ltac:(libc.unix.linux_like.tcflag_t) :=
              M.run (M.alloc ((Integer.of_Z 256) : u32.t)).
            
            Definition FLUSHO : M.Val ltac:(libc.unix.linux_like.tcflag_t) :=
              M.run (M.alloc ((Integer.of_Z 4096) : u32.t)).
            
            Definition EXTPROC : M.Val ltac:(libc.unix.linux_like.tcflag_t) :=
              M.run (M.alloc ((Integer.of_Z 65536) : u32.t)).
            
            Definition R15 : M.Val ltac:(libc.unix.c_int) :=
              M.run (M.alloc ((Integer.of_Z 0) : i32.t)).
            
            Definition R14 : M.Val ltac:(libc.unix.c_int) :=
              M.run (M.alloc ((Integer.of_Z 1) : i32.t)).
            
            Definition R13 : M.Val ltac:(libc.unix.c_int) :=
              M.run (M.alloc ((Integer.of_Z 2) : i32.t)).
            
            Definition R12 : M.Val ltac:(libc.unix.c_int) :=
              M.run (M.alloc ((Integer.of_Z 3) : i32.t)).
            
            Definition RBP : M.Val ltac:(libc.unix.c_int) :=
              M.run (M.alloc ((Integer.of_Z 4) : i32.t)).
            
            Definition RBX : M.Val ltac:(libc.unix.c_int) :=
              M.run (M.alloc ((Integer.of_Z 5) : i32.t)).
            
            Definition R11 : M.Val ltac:(libc.unix.c_int) :=
              M.run (M.alloc ((Integer.of_Z 6) : i32.t)).
            
            Definition R10 : M.Val ltac:(libc.unix.c_int) :=
              M.run (M.alloc ((Integer.of_Z 7) : i32.t)).
            
            Definition R9 : M.Val ltac:(libc.unix.c_int) :=
              M.run (M.alloc ((Integer.of_Z 8) : i32.t)).
            
            Definition R8 : M.Val ltac:(libc.unix.c_int) :=
              M.run (M.alloc ((Integer.of_Z 9) : i32.t)).
            
            Definition RAX : M.Val ltac:(libc.unix.c_int) :=
              M.run (M.alloc ((Integer.of_Z 10) : i32.t)).
            
            Definition RCX : M.Val ltac:(libc.unix.c_int) :=
              M.run (M.alloc ((Integer.of_Z 11) : i32.t)).
            
            Definition RDX : M.Val ltac:(libc.unix.c_int) :=
              M.run (M.alloc ((Integer.of_Z 12) : i32.t)).
            
            Definition RSI : M.Val ltac:(libc.unix.c_int) :=
              M.run (M.alloc ((Integer.of_Z 13) : i32.t)).
            
            Definition RDI : M.Val ltac:(libc.unix.c_int) :=
              M.run (M.alloc ((Integer.of_Z 14) : i32.t)).
            
            Definition ORIG_RAX : M.Val ltac:(libc.unix.c_int) :=
              M.run (M.alloc ((Integer.of_Z 15) : i32.t)).
            
            Definition RIP : M.Val ltac:(libc.unix.c_int) :=
              M.run (M.alloc ((Integer.of_Z 16) : i32.t)).
            
            Definition CS : M.Val ltac:(libc.unix.c_int) :=
              M.run (M.alloc ((Integer.of_Z 17) : i32.t)).
            
            Definition EFLAGS : M.Val ltac:(libc.unix.c_int) :=
              M.run (M.alloc ((Integer.of_Z 18) : i32.t)).
            
            Definition RSP : M.Val ltac:(libc.unix.c_int) :=
              M.run (M.alloc ((Integer.of_Z 19) : i32.t)).
            
            Definition SS : M.Val ltac:(libc.unix.c_int) :=
              M.run (M.alloc ((Integer.of_Z 20) : i32.t)).
            
            Definition FS_BASE : M.Val ltac:(libc.unix.c_int) :=
              M.run (M.alloc ((Integer.of_Z 21) : i32.t)).
            
            Definition GS_BASE : M.Val ltac:(libc.unix.c_int) :=
              M.run (M.alloc ((Integer.of_Z 22) : i32.t)).
            
            Definition DS : M.Val ltac:(libc.unix.c_int) :=
              M.run (M.alloc ((Integer.of_Z 23) : i32.t)).
            
            Definition ES : M.Val ltac:(libc.unix.c_int) :=
              M.run (M.alloc ((Integer.of_Z 24) : i32.t)).
            
            Definition FS : M.Val ltac:(libc.unix.c_int) :=
              M.run (M.alloc ((Integer.of_Z 25) : i32.t)).
            
            Definition GS : M.Val ltac:(libc.unix.c_int) :=
              M.run (M.alloc ((Integer.of_Z 26) : i32.t)).
            
            Definition REG_R8 : M.Val ltac:(libc.unix.c_int) :=
              M.run (M.alloc ((Integer.of_Z 0) : i32.t)).
            
            Definition REG_R9 : M.Val ltac:(libc.unix.c_int) :=
              M.run (M.alloc ((Integer.of_Z 1) : i32.t)).
            
            Definition REG_R10 : M.Val ltac:(libc.unix.c_int) :=
              M.run (M.alloc ((Integer.of_Z 2) : i32.t)).
            
            Definition REG_R11 : M.Val ltac:(libc.unix.c_int) :=
              M.run (M.alloc ((Integer.of_Z 3) : i32.t)).
            
            Definition REG_R12 : M.Val ltac:(libc.unix.c_int) :=
              M.run (M.alloc ((Integer.of_Z 4) : i32.t)).
            
            Definition REG_R13 : M.Val ltac:(libc.unix.c_int) :=
              M.run (M.alloc ((Integer.of_Z 5) : i32.t)).
            
            Definition REG_R14 : M.Val ltac:(libc.unix.c_int) :=
              M.run (M.alloc ((Integer.of_Z 6) : i32.t)).
            
            Definition REG_R15 : M.Val ltac:(libc.unix.c_int) :=
              M.run (M.alloc ((Integer.of_Z 7) : i32.t)).
            
            Definition REG_RDI : M.Val ltac:(libc.unix.c_int) :=
              M.run (M.alloc ((Integer.of_Z 8) : i32.t)).
            
            Definition REG_RSI : M.Val ltac:(libc.unix.c_int) :=
              M.run (M.alloc ((Integer.of_Z 9) : i32.t)).
            
            Definition REG_RBP : M.Val ltac:(libc.unix.c_int) :=
              M.run (M.alloc ((Integer.of_Z 10) : i32.t)).
            
            Definition REG_RBX : M.Val ltac:(libc.unix.c_int) :=
              M.run (M.alloc ((Integer.of_Z 11) : i32.t)).
            
            Definition REG_RDX : M.Val ltac:(libc.unix.c_int) :=
              M.run (M.alloc ((Integer.of_Z 12) : i32.t)).
            
            Definition REG_RAX : M.Val ltac:(libc.unix.c_int) :=
              M.run (M.alloc ((Integer.of_Z 13) : i32.t)).
            
            Definition REG_RCX : M.Val ltac:(libc.unix.c_int) :=
              M.run (M.alloc ((Integer.of_Z 14) : i32.t)).
            
            Definition REG_RSP : M.Val ltac:(libc.unix.c_int) :=
              M.run (M.alloc ((Integer.of_Z 15) : i32.t)).
            
            Definition REG_RIP : M.Val ltac:(libc.unix.c_int) :=
              M.run (M.alloc ((Integer.of_Z 16) : i32.t)).
            
            Definition REG_EFL : M.Val ltac:(libc.unix.c_int) :=
              M.run (M.alloc ((Integer.of_Z 17) : i32.t)).
            
            Definition REG_CSGSFS : M.Val ltac:(libc.unix.c_int) :=
              M.run (M.alloc ((Integer.of_Z 18) : i32.t)).
            
            Definition REG_ERR : M.Val ltac:(libc.unix.c_int) :=
              M.run (M.alloc ((Integer.of_Z 19) : i32.t)).
            
            Definition REG_TRAPNO : M.Val ltac:(libc.unix.c_int) :=
              M.run (M.alloc ((Integer.of_Z 20) : i32.t)).
            
            Definition REG_OLDMASK : M.Val ltac:(libc.unix.c_int) :=
              M.run (M.alloc ((Integer.of_Z 21) : i32.t)).
            
            Definition REG_CR2 : M.Val ltac:(libc.unix.c_int) :=
              M.run (M.alloc ((Integer.of_Z 22) : i32.t)).
            
            Error ForeignMod.
            
            Module not_x32.
              Ltac c_long := exact i64.t.
              
              Ltac c_ulong := exact u64.t.
              
              Module  statvfs.
              Section statvfs.
                Record t : Set := {
                  f_bsize :
                    ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_ulong);
                  f_frsize :
                    ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_ulong);
                  f_blocks :
                    ltac:(libc.unix.linux_like.linux.gnu.b64.fsblkcnt_t);
                  f_bfree :
                    ltac:(libc.unix.linux_like.linux.gnu.b64.fsblkcnt_t);
                  f_bavail :
                    ltac:(libc.unix.linux_like.linux.gnu.b64.fsblkcnt_t);
                  f_files :
                    ltac:(libc.unix.linux_like.linux.gnu.b64.fsfilcnt_t);
                  f_ffree :
                    ltac:(libc.unix.linux_like.linux.gnu.b64.fsfilcnt_t);
                  f_favail :
                    ltac:(libc.unix.linux_like.linux.gnu.b64.fsfilcnt_t);
                  f_fsid :
                    ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_ulong);
                  f_flag :
                    ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_ulong);
                  f_namemax :
                    ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_ulong);
                  __f_spare : array ltac:(libc.unix.c_int);
                }.
                
                Definition Get_f_bsize :=
                  Ref.map
                    (fun α => Some α.(f_bsize))
                    (fun β α => Some (α <| f_bsize := β |>)).
                Definition Get_f_frsize :=
                  Ref.map
                    (fun α => Some α.(f_frsize))
                    (fun β α => Some (α <| f_frsize := β |>)).
                Definition Get_f_blocks :=
                  Ref.map
                    (fun α => Some α.(f_blocks))
                    (fun β α => Some (α <| f_blocks := β |>)).
                Definition Get_f_bfree :=
                  Ref.map
                    (fun α => Some α.(f_bfree))
                    (fun β α => Some (α <| f_bfree := β |>)).
                Definition Get_f_bavail :=
                  Ref.map
                    (fun α => Some α.(f_bavail))
                    (fun β α => Some (α <| f_bavail := β |>)).
                Definition Get_f_files :=
                  Ref.map
                    (fun α => Some α.(f_files))
                    (fun β α => Some (α <| f_files := β |>)).
                Definition Get_f_ffree :=
                  Ref.map
                    (fun α => Some α.(f_ffree))
                    (fun β α => Some (α <| f_ffree := β |>)).
                Definition Get_f_favail :=
                  Ref.map
                    (fun α => Some α.(f_favail))
                    (fun β α => Some (α <| f_favail := β |>)).
                Definition Get_f_fsid :=
                  Ref.map
                    (fun α => Some α.(f_fsid))
                    (fun β α => Some (α <| f_fsid := β |>)).
                Definition Get_f_flag :=
                  Ref.map
                    (fun α => Some α.(f_flag))
                    (fun β α => Some (α <| f_flag := β |>)).
                Definition Get_f_namemax :=
                  Ref.map
                    (fun α => Some α.(f_namemax))
                    (fun β α => Some (α <| f_namemax := β |>)).
                Definition Get___f_spare :=
                  Ref.map
                    (fun α => Some α.(__f_spare))
                    (fun β α => Some (α <| __f_spare := β |>)).
              End statvfs.
              End statvfs.
              
              Module  Impl_core_marker_Copy_for_libc_unix_linux_like_linux_gnu_b64_x86_64_not_x32_statvfs_t.
              Section Impl_core_marker_Copy_for_libc_unix_linux_like_linux_gnu_b64_x86_64_not_x32_statvfs_t.
                Definition Self : Set :=
                  libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.statvfs.t.
                
                Global Instance ℐ : core.marker.Copy.Trait Self := {
                }.
              End Impl_core_marker_Copy_for_libc_unix_linux_like_linux_gnu_b64_x86_64_not_x32_statvfs_t.
              End Impl_core_marker_Copy_for_libc_unix_linux_like_linux_gnu_b64_x86_64_not_x32_statvfs_t.
              
              Module  Impl_core_clone_Clone_for_libc_unix_linux_like_linux_gnu_b64_x86_64_not_x32_statvfs_t.
              Section Impl_core_clone_Clone_for_libc_unix_linux_like_linux_gnu_b64_x86_64_not_x32_statvfs_t.
                Definition Self : Set :=
                  libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.statvfs.t.
                
                (*
                            fn clone(&self) -> $i { *self }
                *)
                Definition clone
                    (self : ref Self)
                    :
                      M
                        libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.statvfs.t :=
                  let* self := M.alloc self in
                  let* α0 :
                      ref
                        libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.statvfs.t :=
                    M.read self in
                  M.read (deref α0).
                
                Global Instance AssociatedFunction_clone :
                  Notations.DoubleColon Self "clone" := {
                  Notations.double_colon := clone;
                }.
                
                Global Instance ℐ : core.clone.Clone.Required.Trait Self := {
                  core.clone.Clone.clone := clone;
                  core.clone.Clone.clone_from := Datatypes.None;
                }.
              End Impl_core_clone_Clone_for_libc_unix_linux_like_linux_gnu_b64_x86_64_not_x32_statvfs_t.
              End Impl_core_clone_Clone_for_libc_unix_linux_like_linux_gnu_b64_x86_64_not_x32_statvfs_t.
              
              Definition __SIZEOF_PTHREAD_MUTEX_T : M.Val usize.t :=
                M.run (M.pure "thir failed to compile: Any { .. }").
              
              Definition __SIZEOF_PTHREAD_RWLOCK_T : M.Val usize.t :=
                M.run (M.pure "thir failed to compile: Any { .. }").
              
              Definition __SIZEOF_PTHREAD_BARRIER_T : M.Val usize.t :=
                M.run (M.alloc ((Integer.of_Z 32) : usize.t)).
              
              Definition PTHREAD_RECURSIVE_MUTEX_INITIALIZER_NP
                  : M.Val libc.unix.linux_like.linux.pthread_mutex_t.t :=
                M.run
                  (M.alloc
                    {|
                      libc.unix.linux_like.linux.pthread_mutex_t.size :=
                        [
                          (Integer.of_Z 0) : u8.t;
                          (Integer.of_Z 0) : u8.t;
                          (Integer.of_Z 0) : u8.t;
                          (Integer.of_Z 0) : u8.t;
                          (Integer.of_Z 0) : u8.t;
                          (Integer.of_Z 0) : u8.t;
                          (Integer.of_Z 0) : u8.t;
                          (Integer.of_Z 0) : u8.t;
                          (Integer.of_Z 0) : u8.t;
                          (Integer.of_Z 0) : u8.t;
                          (Integer.of_Z 0) : u8.t;
                          (Integer.of_Z 0) : u8.t;
                          (Integer.of_Z 0) : u8.t;
                          (Integer.of_Z 0) : u8.t;
                          (Integer.of_Z 0) : u8.t;
                          (Integer.of_Z 0) : u8.t;
                          (Integer.of_Z 1) : u8.t;
                          (Integer.of_Z 0) : u8.t;
                          (Integer.of_Z 0) : u8.t;
                          (Integer.of_Z 0) : u8.t;
                          (Integer.of_Z 0) : u8.t;
                          (Integer.of_Z 0) : u8.t;
                          (Integer.of_Z 0) : u8.t;
                          (Integer.of_Z 0) : u8.t;
                          (Integer.of_Z 0) : u8.t;
                          (Integer.of_Z 0) : u8.t;
                          (Integer.of_Z 0) : u8.t;
                          (Integer.of_Z 0) : u8.t;
                          (Integer.of_Z 0) : u8.t;
                          (Integer.of_Z 0) : u8.t;
                          (Integer.of_Z 0) : u8.t;
                          (Integer.of_Z 0) : u8.t;
                          (Integer.of_Z 0) : u8.t;
                          (Integer.of_Z 0) : u8.t;
                          (Integer.of_Z 0) : u8.t;
                          (Integer.of_Z 0) : u8.t;
                          (Integer.of_Z 0) : u8.t;
                          (Integer.of_Z 0) : u8.t;
                          (Integer.of_Z 0) : u8.t;
                          (Integer.of_Z 0) : u8.t
                        ];
                    |}).
              
              Definition PTHREAD_ERRORCHECK_MUTEX_INITIALIZER_NP
                  : M.Val libc.unix.linux_like.linux.pthread_mutex_t.t :=
                M.run
                  (M.alloc
                    {|
                      libc.unix.linux_like.linux.pthread_mutex_t.size :=
                        [
                          (Integer.of_Z 0) : u8.t;
                          (Integer.of_Z 0) : u8.t;
                          (Integer.of_Z 0) : u8.t;
                          (Integer.of_Z 0) : u8.t;
                          (Integer.of_Z 0) : u8.t;
                          (Integer.of_Z 0) : u8.t;
                          (Integer.of_Z 0) : u8.t;
                          (Integer.of_Z 0) : u8.t;
                          (Integer.of_Z 0) : u8.t;
                          (Integer.of_Z 0) : u8.t;
                          (Integer.of_Z 0) : u8.t;
                          (Integer.of_Z 0) : u8.t;
                          (Integer.of_Z 0) : u8.t;
                          (Integer.of_Z 0) : u8.t;
                          (Integer.of_Z 0) : u8.t;
                          (Integer.of_Z 0) : u8.t;
                          (Integer.of_Z 2) : u8.t;
                          (Integer.of_Z 0) : u8.t;
                          (Integer.of_Z 0) : u8.t;
                          (Integer.of_Z 0) : u8.t;
                          (Integer.of_Z 0) : u8.t;
                          (Integer.of_Z 0) : u8.t;
                          (Integer.of_Z 0) : u8.t;
                          (Integer.of_Z 0) : u8.t;
                          (Integer.of_Z 0) : u8.t;
                          (Integer.of_Z 0) : u8.t;
                          (Integer.of_Z 0) : u8.t;
                          (Integer.of_Z 0) : u8.t;
                          (Integer.of_Z 0) : u8.t;
                          (Integer.of_Z 0) : u8.t;
                          (Integer.of_Z 0) : u8.t;
                          (Integer.of_Z 0) : u8.t;
                          (Integer.of_Z 0) : u8.t;
                          (Integer.of_Z 0) : u8.t;
                          (Integer.of_Z 0) : u8.t;
                          (Integer.of_Z 0) : u8.t;
                          (Integer.of_Z 0) : u8.t;
                          (Integer.of_Z 0) : u8.t;
                          (Integer.of_Z 0) : u8.t;
                          (Integer.of_Z 0) : u8.t
                        ];
                    |}).
              
              Definition PTHREAD_ADAPTIVE_MUTEX_INITIALIZER_NP
                  : M.Val libc.unix.linux_like.linux.pthread_mutex_t.t :=
                M.run
                  (M.alloc
                    {|
                      libc.unix.linux_like.linux.pthread_mutex_t.size :=
                        [
                          (Integer.of_Z 0) : u8.t;
                          (Integer.of_Z 0) : u8.t;
                          (Integer.of_Z 0) : u8.t;
                          (Integer.of_Z 0) : u8.t;
                          (Integer.of_Z 0) : u8.t;
                          (Integer.of_Z 0) : u8.t;
                          (Integer.of_Z 0) : u8.t;
                          (Integer.of_Z 0) : u8.t;
                          (Integer.of_Z 0) : u8.t;
                          (Integer.of_Z 0) : u8.t;
                          (Integer.of_Z 0) : u8.t;
                          (Integer.of_Z 0) : u8.t;
                          (Integer.of_Z 0) : u8.t;
                          (Integer.of_Z 0) : u8.t;
                          (Integer.of_Z 0) : u8.t;
                          (Integer.of_Z 0) : u8.t;
                          (Integer.of_Z 3) : u8.t;
                          (Integer.of_Z 0) : u8.t;
                          (Integer.of_Z 0) : u8.t;
                          (Integer.of_Z 0) : u8.t;
                          (Integer.of_Z 0) : u8.t;
                          (Integer.of_Z 0) : u8.t;
                          (Integer.of_Z 0) : u8.t;
                          (Integer.of_Z 0) : u8.t;
                          (Integer.of_Z 0) : u8.t;
                          (Integer.of_Z 0) : u8.t;
                          (Integer.of_Z 0) : u8.t;
                          (Integer.of_Z 0) : u8.t;
                          (Integer.of_Z 0) : u8.t;
                          (Integer.of_Z 0) : u8.t;
                          (Integer.of_Z 0) : u8.t;
                          (Integer.of_Z 0) : u8.t;
                          (Integer.of_Z 0) : u8.t;
                          (Integer.of_Z 0) : u8.t;
                          (Integer.of_Z 0) : u8.t;
                          (Integer.of_Z 0) : u8.t;
                          (Integer.of_Z 0) : u8.t;
                          (Integer.of_Z 0) : u8.t;
                          (Integer.of_Z 0) : u8.t;
                          (Integer.of_Z 0) : u8.t
                        ];
                    |}).
              
              Definition SYS_read
                  :
                    M.Val
                      ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_long) :=
                M.run (M.alloc ((Integer.of_Z 0) : i64.t)).
              
              Definition SYS_write
                  :
                    M.Val
                      ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_long) :=
                M.run (M.alloc ((Integer.of_Z 1) : i64.t)).
              
              Definition SYS_open
                  :
                    M.Val
                      ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_long) :=
                M.run (M.alloc ((Integer.of_Z 2) : i64.t)).
              
              Definition SYS_close
                  :
                    M.Val
                      ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_long) :=
                M.run (M.alloc ((Integer.of_Z 3) : i64.t)).
              
              Definition SYS_stat
                  :
                    M.Val
                      ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_long) :=
                M.run (M.alloc ((Integer.of_Z 4) : i64.t)).
              
              Definition SYS_fstat
                  :
                    M.Val
                      ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_long) :=
                M.run (M.alloc ((Integer.of_Z 5) : i64.t)).
              
              Definition SYS_lstat
                  :
                    M.Val
                      ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_long) :=
                M.run (M.alloc ((Integer.of_Z 6) : i64.t)).
              
              Definition SYS_poll
                  :
                    M.Val
                      ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_long) :=
                M.run (M.alloc ((Integer.of_Z 7) : i64.t)).
              
              Definition SYS_lseek
                  :
                    M.Val
                      ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_long) :=
                M.run (M.alloc ((Integer.of_Z 8) : i64.t)).
              
              Definition SYS_mmap
                  :
                    M.Val
                      ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_long) :=
                M.run (M.alloc ((Integer.of_Z 9) : i64.t)).
              
              Definition SYS_mprotect
                  :
                    M.Val
                      ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_long) :=
                M.run (M.alloc ((Integer.of_Z 10) : i64.t)).
              
              Definition SYS_munmap
                  :
                    M.Val
                      ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_long) :=
                M.run (M.alloc ((Integer.of_Z 11) : i64.t)).
              
              Definition SYS_brk
                  :
                    M.Val
                      ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_long) :=
                M.run (M.alloc ((Integer.of_Z 12) : i64.t)).
              
              Definition SYS_rt_sigaction
                  :
                    M.Val
                      ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_long) :=
                M.run (M.alloc ((Integer.of_Z 13) : i64.t)).
              
              Definition SYS_rt_sigprocmask
                  :
                    M.Val
                      ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_long) :=
                M.run (M.alloc ((Integer.of_Z 14) : i64.t)).
              
              Definition SYS_rt_sigreturn
                  :
                    M.Val
                      ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_long) :=
                M.run (M.alloc ((Integer.of_Z 15) : i64.t)).
              
              Definition SYS_ioctl
                  :
                    M.Val
                      ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_long) :=
                M.run (M.alloc ((Integer.of_Z 16) : i64.t)).
              
              Definition SYS_pread64
                  :
                    M.Val
                      ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_long) :=
                M.run (M.alloc ((Integer.of_Z 17) : i64.t)).
              
              Definition SYS_pwrite64
                  :
                    M.Val
                      ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_long) :=
                M.run (M.alloc ((Integer.of_Z 18) : i64.t)).
              
              Definition SYS_readv
                  :
                    M.Val
                      ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_long) :=
                M.run (M.alloc ((Integer.of_Z 19) : i64.t)).
              
              Definition SYS_writev
                  :
                    M.Val
                      ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_long) :=
                M.run (M.alloc ((Integer.of_Z 20) : i64.t)).
              
              Definition SYS_access
                  :
                    M.Val
                      ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_long) :=
                M.run (M.alloc ((Integer.of_Z 21) : i64.t)).
              
              Definition SYS_pipe
                  :
                    M.Val
                      ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_long) :=
                M.run (M.alloc ((Integer.of_Z 22) : i64.t)).
              
              Definition SYS_select
                  :
                    M.Val
                      ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_long) :=
                M.run (M.alloc ((Integer.of_Z 23) : i64.t)).
              
              Definition SYS_sched_yield
                  :
                    M.Val
                      ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_long) :=
                M.run (M.alloc ((Integer.of_Z 24) : i64.t)).
              
              Definition SYS_mremap
                  :
                    M.Val
                      ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_long) :=
                M.run (M.alloc ((Integer.of_Z 25) : i64.t)).
              
              Definition SYS_msync
                  :
                    M.Val
                      ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_long) :=
                M.run (M.alloc ((Integer.of_Z 26) : i64.t)).
              
              Definition SYS_mincore
                  :
                    M.Val
                      ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_long) :=
                M.run (M.alloc ((Integer.of_Z 27) : i64.t)).
              
              Definition SYS_madvise
                  :
                    M.Val
                      ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_long) :=
                M.run (M.alloc ((Integer.of_Z 28) : i64.t)).
              
              Definition SYS_shmget
                  :
                    M.Val
                      ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_long) :=
                M.run (M.alloc ((Integer.of_Z 29) : i64.t)).
              
              Definition SYS_shmat
                  :
                    M.Val
                      ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_long) :=
                M.run (M.alloc ((Integer.of_Z 30) : i64.t)).
              
              Definition SYS_shmctl
                  :
                    M.Val
                      ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_long) :=
                M.run (M.alloc ((Integer.of_Z 31) : i64.t)).
              
              Definition SYS_dup
                  :
                    M.Val
                      ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_long) :=
                M.run (M.alloc ((Integer.of_Z 32) : i64.t)).
              
              Definition SYS_dup2
                  :
                    M.Val
                      ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_long) :=
                M.run (M.alloc ((Integer.of_Z 33) : i64.t)).
              
              Definition SYS_pause
                  :
                    M.Val
                      ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_long) :=
                M.run (M.alloc ((Integer.of_Z 34) : i64.t)).
              
              Definition SYS_nanosleep
                  :
                    M.Val
                      ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_long) :=
                M.run (M.alloc ((Integer.of_Z 35) : i64.t)).
              
              Definition SYS_getitimer
                  :
                    M.Val
                      ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_long) :=
                M.run (M.alloc ((Integer.of_Z 36) : i64.t)).
              
              Definition SYS_alarm
                  :
                    M.Val
                      ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_long) :=
                M.run (M.alloc ((Integer.of_Z 37) : i64.t)).
              
              Definition SYS_setitimer
                  :
                    M.Val
                      ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_long) :=
                M.run (M.alloc ((Integer.of_Z 38) : i64.t)).
              
              Definition SYS_getpid
                  :
                    M.Val
                      ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_long) :=
                M.run (M.alloc ((Integer.of_Z 39) : i64.t)).
              
              Definition SYS_sendfile
                  :
                    M.Val
                      ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_long) :=
                M.run (M.alloc ((Integer.of_Z 40) : i64.t)).
              
              Definition SYS_socket
                  :
                    M.Val
                      ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_long) :=
                M.run (M.alloc ((Integer.of_Z 41) : i64.t)).
              
              Definition SYS_connect
                  :
                    M.Val
                      ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_long) :=
                M.run (M.alloc ((Integer.of_Z 42) : i64.t)).
              
              Definition SYS_accept
                  :
                    M.Val
                      ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_long) :=
                M.run (M.alloc ((Integer.of_Z 43) : i64.t)).
              
              Definition SYS_sendto
                  :
                    M.Val
                      ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_long) :=
                M.run (M.alloc ((Integer.of_Z 44) : i64.t)).
              
              Definition SYS_recvfrom
                  :
                    M.Val
                      ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_long) :=
                M.run (M.alloc ((Integer.of_Z 45) : i64.t)).
              
              Definition SYS_sendmsg
                  :
                    M.Val
                      ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_long) :=
                M.run (M.alloc ((Integer.of_Z 46) : i64.t)).
              
              Definition SYS_recvmsg
                  :
                    M.Val
                      ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_long) :=
                M.run (M.alloc ((Integer.of_Z 47) : i64.t)).
              
              Definition SYS_shutdown
                  :
                    M.Val
                      ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_long) :=
                M.run (M.alloc ((Integer.of_Z 48) : i64.t)).
              
              Definition SYS_bind
                  :
                    M.Val
                      ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_long) :=
                M.run (M.alloc ((Integer.of_Z 49) : i64.t)).
              
              Definition SYS_listen
                  :
                    M.Val
                      ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_long) :=
                M.run (M.alloc ((Integer.of_Z 50) : i64.t)).
              
              Definition SYS_getsockname
                  :
                    M.Val
                      ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_long) :=
                M.run (M.alloc ((Integer.of_Z 51) : i64.t)).
              
              Definition SYS_getpeername
                  :
                    M.Val
                      ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_long) :=
                M.run (M.alloc ((Integer.of_Z 52) : i64.t)).
              
              Definition SYS_socketpair
                  :
                    M.Val
                      ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_long) :=
                M.run (M.alloc ((Integer.of_Z 53) : i64.t)).
              
              Definition SYS_setsockopt
                  :
                    M.Val
                      ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_long) :=
                M.run (M.alloc ((Integer.of_Z 54) : i64.t)).
              
              Definition SYS_getsockopt
                  :
                    M.Val
                      ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_long) :=
                M.run (M.alloc ((Integer.of_Z 55) : i64.t)).
              
              Definition SYS_clone
                  :
                    M.Val
                      ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_long) :=
                M.run (M.alloc ((Integer.of_Z 56) : i64.t)).
              
              Definition SYS_fork
                  :
                    M.Val
                      ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_long) :=
                M.run (M.alloc ((Integer.of_Z 57) : i64.t)).
              
              Definition SYS_vfork
                  :
                    M.Val
                      ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_long) :=
                M.run (M.alloc ((Integer.of_Z 58) : i64.t)).
              
              Definition SYS_execve
                  :
                    M.Val
                      ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_long) :=
                M.run (M.alloc ((Integer.of_Z 59) : i64.t)).
              
              Definition SYS_exit
                  :
                    M.Val
                      ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_long) :=
                M.run (M.alloc ((Integer.of_Z 60) : i64.t)).
              
              Definition SYS_wait4
                  :
                    M.Val
                      ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_long) :=
                M.run (M.alloc ((Integer.of_Z 61) : i64.t)).
              
              Definition SYS_kill
                  :
                    M.Val
                      ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_long) :=
                M.run (M.alloc ((Integer.of_Z 62) : i64.t)).
              
              Definition SYS_uname
                  :
                    M.Val
                      ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_long) :=
                M.run (M.alloc ((Integer.of_Z 63) : i64.t)).
              
              Definition SYS_semget
                  :
                    M.Val
                      ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_long) :=
                M.run (M.alloc ((Integer.of_Z 64) : i64.t)).
              
              Definition SYS_semop
                  :
                    M.Val
                      ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_long) :=
                M.run (M.alloc ((Integer.of_Z 65) : i64.t)).
              
              Definition SYS_semctl
                  :
                    M.Val
                      ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_long) :=
                M.run (M.alloc ((Integer.of_Z 66) : i64.t)).
              
              Definition SYS_shmdt
                  :
                    M.Val
                      ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_long) :=
                M.run (M.alloc ((Integer.of_Z 67) : i64.t)).
              
              Definition SYS_msgget
                  :
                    M.Val
                      ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_long) :=
                M.run (M.alloc ((Integer.of_Z 68) : i64.t)).
              
              Definition SYS_msgsnd
                  :
                    M.Val
                      ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_long) :=
                M.run (M.alloc ((Integer.of_Z 69) : i64.t)).
              
              Definition SYS_msgrcv
                  :
                    M.Val
                      ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_long) :=
                M.run (M.alloc ((Integer.of_Z 70) : i64.t)).
              
              Definition SYS_msgctl
                  :
                    M.Val
                      ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_long) :=
                M.run (M.alloc ((Integer.of_Z 71) : i64.t)).
              
              Definition SYS_fcntl
                  :
                    M.Val
                      ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_long) :=
                M.run (M.alloc ((Integer.of_Z 72) : i64.t)).
              
              Definition SYS_flock
                  :
                    M.Val
                      ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_long) :=
                M.run (M.alloc ((Integer.of_Z 73) : i64.t)).
              
              Definition SYS_fsync
                  :
                    M.Val
                      ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_long) :=
                M.run (M.alloc ((Integer.of_Z 74) : i64.t)).
              
              Definition SYS_fdatasync
                  :
                    M.Val
                      ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_long) :=
                M.run (M.alloc ((Integer.of_Z 75) : i64.t)).
              
              Definition SYS_truncate
                  :
                    M.Val
                      ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_long) :=
                M.run (M.alloc ((Integer.of_Z 76) : i64.t)).
              
              Definition SYS_ftruncate
                  :
                    M.Val
                      ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_long) :=
                M.run (M.alloc ((Integer.of_Z 77) : i64.t)).
              
              Definition SYS_getdents
                  :
                    M.Val
                      ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_long) :=
                M.run (M.alloc ((Integer.of_Z 78) : i64.t)).
              
              Definition SYS_getcwd
                  :
                    M.Val
                      ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_long) :=
                M.run (M.alloc ((Integer.of_Z 79) : i64.t)).
              
              Definition SYS_chdir
                  :
                    M.Val
                      ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_long) :=
                M.run (M.alloc ((Integer.of_Z 80) : i64.t)).
              
              Definition SYS_fchdir
                  :
                    M.Val
                      ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_long) :=
                M.run (M.alloc ((Integer.of_Z 81) : i64.t)).
              
              Definition SYS_rename
                  :
                    M.Val
                      ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_long) :=
                M.run (M.alloc ((Integer.of_Z 82) : i64.t)).
              
              Definition SYS_mkdir
                  :
                    M.Val
                      ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_long) :=
                M.run (M.alloc ((Integer.of_Z 83) : i64.t)).
              
              Definition SYS_rmdir
                  :
                    M.Val
                      ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_long) :=
                M.run (M.alloc ((Integer.of_Z 84) : i64.t)).
              
              Definition SYS_creat
                  :
                    M.Val
                      ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_long) :=
                M.run (M.alloc ((Integer.of_Z 85) : i64.t)).
              
              Definition SYS_link
                  :
                    M.Val
                      ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_long) :=
                M.run (M.alloc ((Integer.of_Z 86) : i64.t)).
              
              Definition SYS_unlink
                  :
                    M.Val
                      ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_long) :=
                M.run (M.alloc ((Integer.of_Z 87) : i64.t)).
              
              Definition SYS_symlink
                  :
                    M.Val
                      ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_long) :=
                M.run (M.alloc ((Integer.of_Z 88) : i64.t)).
              
              Definition SYS_readlink
                  :
                    M.Val
                      ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_long) :=
                M.run (M.alloc ((Integer.of_Z 89) : i64.t)).
              
              Definition SYS_chmod
                  :
                    M.Val
                      ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_long) :=
                M.run (M.alloc ((Integer.of_Z 90) : i64.t)).
              
              Definition SYS_fchmod
                  :
                    M.Val
                      ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_long) :=
                M.run (M.alloc ((Integer.of_Z 91) : i64.t)).
              
              Definition SYS_chown
                  :
                    M.Val
                      ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_long) :=
                M.run (M.alloc ((Integer.of_Z 92) : i64.t)).
              
              Definition SYS_fchown
                  :
                    M.Val
                      ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_long) :=
                M.run (M.alloc ((Integer.of_Z 93) : i64.t)).
              
              Definition SYS_lchown
                  :
                    M.Val
                      ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_long) :=
                M.run (M.alloc ((Integer.of_Z 94) : i64.t)).
              
              Definition SYS_umask
                  :
                    M.Val
                      ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_long) :=
                M.run (M.alloc ((Integer.of_Z 95) : i64.t)).
              
              Definition SYS_gettimeofday
                  :
                    M.Val
                      ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_long) :=
                M.run (M.alloc ((Integer.of_Z 96) : i64.t)).
              
              Definition SYS_getrlimit
                  :
                    M.Val
                      ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_long) :=
                M.run (M.alloc ((Integer.of_Z 97) : i64.t)).
              
              Definition SYS_getrusage
                  :
                    M.Val
                      ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_long) :=
                M.run (M.alloc ((Integer.of_Z 98) : i64.t)).
              
              Definition SYS_sysinfo
                  :
                    M.Val
                      ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_long) :=
                M.run (M.alloc ((Integer.of_Z 99) : i64.t)).
              
              Definition SYS_times
                  :
                    M.Val
                      ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_long) :=
                M.run (M.alloc ((Integer.of_Z 100) : i64.t)).
              
              Definition SYS_ptrace
                  :
                    M.Val
                      ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_long) :=
                M.run (M.alloc ((Integer.of_Z 101) : i64.t)).
              
              Definition SYS_getuid
                  :
                    M.Val
                      ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_long) :=
                M.run (M.alloc ((Integer.of_Z 102) : i64.t)).
              
              Definition SYS_syslog
                  :
                    M.Val
                      ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_long) :=
                M.run (M.alloc ((Integer.of_Z 103) : i64.t)).
              
              Definition SYS_getgid
                  :
                    M.Val
                      ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_long) :=
                M.run (M.alloc ((Integer.of_Z 104) : i64.t)).
              
              Definition SYS_setuid
                  :
                    M.Val
                      ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_long) :=
                M.run (M.alloc ((Integer.of_Z 105) : i64.t)).
              
              Definition SYS_setgid
                  :
                    M.Val
                      ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_long) :=
                M.run (M.alloc ((Integer.of_Z 106) : i64.t)).
              
              Definition SYS_geteuid
                  :
                    M.Val
                      ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_long) :=
                M.run (M.alloc ((Integer.of_Z 107) : i64.t)).
              
              Definition SYS_getegid
                  :
                    M.Val
                      ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_long) :=
                M.run (M.alloc ((Integer.of_Z 108) : i64.t)).
              
              Definition SYS_setpgid
                  :
                    M.Val
                      ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_long) :=
                M.run (M.alloc ((Integer.of_Z 109) : i64.t)).
              
              Definition SYS_getppid
                  :
                    M.Val
                      ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_long) :=
                M.run (M.alloc ((Integer.of_Z 110) : i64.t)).
              
              Definition SYS_getpgrp
                  :
                    M.Val
                      ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_long) :=
                M.run (M.alloc ((Integer.of_Z 111) : i64.t)).
              
              Definition SYS_setsid
                  :
                    M.Val
                      ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_long) :=
                M.run (M.alloc ((Integer.of_Z 112) : i64.t)).
              
              Definition SYS_setreuid
                  :
                    M.Val
                      ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_long) :=
                M.run (M.alloc ((Integer.of_Z 113) : i64.t)).
              
              Definition SYS_setregid
                  :
                    M.Val
                      ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_long) :=
                M.run (M.alloc ((Integer.of_Z 114) : i64.t)).
              
              Definition SYS_getgroups
                  :
                    M.Val
                      ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_long) :=
                M.run (M.alloc ((Integer.of_Z 115) : i64.t)).
              
              Definition SYS_setgroups
                  :
                    M.Val
                      ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_long) :=
                M.run (M.alloc ((Integer.of_Z 116) : i64.t)).
              
              Definition SYS_setresuid
                  :
                    M.Val
                      ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_long) :=
                M.run (M.alloc ((Integer.of_Z 117) : i64.t)).
              
              Definition SYS_getresuid
                  :
                    M.Val
                      ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_long) :=
                M.run (M.alloc ((Integer.of_Z 118) : i64.t)).
              
              Definition SYS_setresgid
                  :
                    M.Val
                      ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_long) :=
                M.run (M.alloc ((Integer.of_Z 119) : i64.t)).
              
              Definition SYS_getresgid
                  :
                    M.Val
                      ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_long) :=
                M.run (M.alloc ((Integer.of_Z 120) : i64.t)).
              
              Definition SYS_getpgid
                  :
                    M.Val
                      ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_long) :=
                M.run (M.alloc ((Integer.of_Z 121) : i64.t)).
              
              Definition SYS_setfsuid
                  :
                    M.Val
                      ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_long) :=
                M.run (M.alloc ((Integer.of_Z 122) : i64.t)).
              
              Definition SYS_setfsgid
                  :
                    M.Val
                      ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_long) :=
                M.run (M.alloc ((Integer.of_Z 123) : i64.t)).
              
              Definition SYS_getsid
                  :
                    M.Val
                      ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_long) :=
                M.run (M.alloc ((Integer.of_Z 124) : i64.t)).
              
              Definition SYS_capget
                  :
                    M.Val
                      ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_long) :=
                M.run (M.alloc ((Integer.of_Z 125) : i64.t)).
              
              Definition SYS_capset
                  :
                    M.Val
                      ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_long) :=
                M.run (M.alloc ((Integer.of_Z 126) : i64.t)).
              
              Definition SYS_rt_sigpending
                  :
                    M.Val
                      ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_long) :=
                M.run (M.alloc ((Integer.of_Z 127) : i64.t)).
              
              Definition SYS_rt_sigtimedwait
                  :
                    M.Val
                      ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_long) :=
                M.run (M.alloc ((Integer.of_Z 128) : i64.t)).
              
              Definition SYS_rt_sigqueueinfo
                  :
                    M.Val
                      ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_long) :=
                M.run (M.alloc ((Integer.of_Z 129) : i64.t)).
              
              Definition SYS_rt_sigsuspend
                  :
                    M.Val
                      ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_long) :=
                M.run (M.alloc ((Integer.of_Z 130) : i64.t)).
              
              Definition SYS_sigaltstack
                  :
                    M.Val
                      ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_long) :=
                M.run (M.alloc ((Integer.of_Z 131) : i64.t)).
              
              Definition SYS_utime
                  :
                    M.Val
                      ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_long) :=
                M.run (M.alloc ((Integer.of_Z 132) : i64.t)).
              
              Definition SYS_mknod
                  :
                    M.Val
                      ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_long) :=
                M.run (M.alloc ((Integer.of_Z 133) : i64.t)).
              
              Definition SYS_uselib
                  :
                    M.Val
                      ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_long) :=
                M.run (M.alloc ((Integer.of_Z 134) : i64.t)).
              
              Definition SYS_personality
                  :
                    M.Val
                      ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_long) :=
                M.run (M.alloc ((Integer.of_Z 135) : i64.t)).
              
              Definition SYS_ustat
                  :
                    M.Val
                      ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_long) :=
                M.run (M.alloc ((Integer.of_Z 136) : i64.t)).
              
              Definition SYS_statfs
                  :
                    M.Val
                      ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_long) :=
                M.run (M.alloc ((Integer.of_Z 137) : i64.t)).
              
              Definition SYS_fstatfs
                  :
                    M.Val
                      ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_long) :=
                M.run (M.alloc ((Integer.of_Z 138) : i64.t)).
              
              Definition SYS_sysfs
                  :
                    M.Val
                      ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_long) :=
                M.run (M.alloc ((Integer.of_Z 139) : i64.t)).
              
              Definition SYS_getpriority
                  :
                    M.Val
                      ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_long) :=
                M.run (M.alloc ((Integer.of_Z 140) : i64.t)).
              
              Definition SYS_setpriority
                  :
                    M.Val
                      ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_long) :=
                M.run (M.alloc ((Integer.of_Z 141) : i64.t)).
              
              Definition SYS_sched_setparam
                  :
                    M.Val
                      ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_long) :=
                M.run (M.alloc ((Integer.of_Z 142) : i64.t)).
              
              Definition SYS_sched_getparam
                  :
                    M.Val
                      ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_long) :=
                M.run (M.alloc ((Integer.of_Z 143) : i64.t)).
              
              Definition SYS_sched_setscheduler
                  :
                    M.Val
                      ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_long) :=
                M.run (M.alloc ((Integer.of_Z 144) : i64.t)).
              
              Definition SYS_sched_getscheduler
                  :
                    M.Val
                      ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_long) :=
                M.run (M.alloc ((Integer.of_Z 145) : i64.t)).
              
              Definition SYS_sched_get_priority_max
                  :
                    M.Val
                      ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_long) :=
                M.run (M.alloc ((Integer.of_Z 146) : i64.t)).
              
              Definition SYS_sched_get_priority_min
                  :
                    M.Val
                      ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_long) :=
                M.run (M.alloc ((Integer.of_Z 147) : i64.t)).
              
              Definition SYS_sched_rr_get_interval
                  :
                    M.Val
                      ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_long) :=
                M.run (M.alloc ((Integer.of_Z 148) : i64.t)).
              
              Definition SYS_mlock
                  :
                    M.Val
                      ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_long) :=
                M.run (M.alloc ((Integer.of_Z 149) : i64.t)).
              
              Definition SYS_munlock
                  :
                    M.Val
                      ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_long) :=
                M.run (M.alloc ((Integer.of_Z 150) : i64.t)).
              
              Definition SYS_mlockall
                  :
                    M.Val
                      ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_long) :=
                M.run (M.alloc ((Integer.of_Z 151) : i64.t)).
              
              Definition SYS_munlockall
                  :
                    M.Val
                      ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_long) :=
                M.run (M.alloc ((Integer.of_Z 152) : i64.t)).
              
              Definition SYS_vhangup
                  :
                    M.Val
                      ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_long) :=
                M.run (M.alloc ((Integer.of_Z 153) : i64.t)).
              
              Definition SYS_modify_ldt
                  :
                    M.Val
                      ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_long) :=
                M.run (M.alloc ((Integer.of_Z 154) : i64.t)).
              
              Definition SYS_pivot_root
                  :
                    M.Val
                      ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_long) :=
                M.run (M.alloc ((Integer.of_Z 155) : i64.t)).
              
              Definition SYS__sysctl
                  :
                    M.Val
                      ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_long) :=
                M.run (M.alloc ((Integer.of_Z 156) : i64.t)).
              
              Definition SYS_prctl
                  :
                    M.Val
                      ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_long) :=
                M.run (M.alloc ((Integer.of_Z 157) : i64.t)).
              
              Definition SYS_arch_prctl
                  :
                    M.Val
                      ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_long) :=
                M.run (M.alloc ((Integer.of_Z 158) : i64.t)).
              
              Definition SYS_adjtimex
                  :
                    M.Val
                      ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_long) :=
                M.run (M.alloc ((Integer.of_Z 159) : i64.t)).
              
              Definition SYS_setrlimit
                  :
                    M.Val
                      ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_long) :=
                M.run (M.alloc ((Integer.of_Z 160) : i64.t)).
              
              Definition SYS_chroot
                  :
                    M.Val
                      ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_long) :=
                M.run (M.alloc ((Integer.of_Z 161) : i64.t)).
              
              Definition SYS_sync
                  :
                    M.Val
                      ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_long) :=
                M.run (M.alloc ((Integer.of_Z 162) : i64.t)).
              
              Definition SYS_acct
                  :
                    M.Val
                      ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_long) :=
                M.run (M.alloc ((Integer.of_Z 163) : i64.t)).
              
              Definition SYS_settimeofday
                  :
                    M.Val
                      ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_long) :=
                M.run (M.alloc ((Integer.of_Z 164) : i64.t)).
              
              Definition SYS_mount
                  :
                    M.Val
                      ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_long) :=
                M.run (M.alloc ((Integer.of_Z 165) : i64.t)).
              
              Definition SYS_umount2
                  :
                    M.Val
                      ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_long) :=
                M.run (M.alloc ((Integer.of_Z 166) : i64.t)).
              
              Definition SYS_swapon
                  :
                    M.Val
                      ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_long) :=
                M.run (M.alloc ((Integer.of_Z 167) : i64.t)).
              
              Definition SYS_swapoff
                  :
                    M.Val
                      ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_long) :=
                M.run (M.alloc ((Integer.of_Z 168) : i64.t)).
              
              Definition SYS_reboot
                  :
                    M.Val
                      ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_long) :=
                M.run (M.alloc ((Integer.of_Z 169) : i64.t)).
              
              Definition SYS_sethostname
                  :
                    M.Val
                      ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_long) :=
                M.run (M.alloc ((Integer.of_Z 170) : i64.t)).
              
              Definition SYS_setdomainname
                  :
                    M.Val
                      ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_long) :=
                M.run (M.alloc ((Integer.of_Z 171) : i64.t)).
              
              Definition SYS_iopl
                  :
                    M.Val
                      ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_long) :=
                M.run (M.alloc ((Integer.of_Z 172) : i64.t)).
              
              Definition SYS_ioperm
                  :
                    M.Val
                      ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_long) :=
                M.run (M.alloc ((Integer.of_Z 173) : i64.t)).
              
              Definition SYS_create_module
                  :
                    M.Val
                      ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_long) :=
                M.run (M.alloc ((Integer.of_Z 174) : i64.t)).
              
              Definition SYS_init_module
                  :
                    M.Val
                      ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_long) :=
                M.run (M.alloc ((Integer.of_Z 175) : i64.t)).
              
              Definition SYS_delete_module
                  :
                    M.Val
                      ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_long) :=
                M.run (M.alloc ((Integer.of_Z 176) : i64.t)).
              
              Definition SYS_get_kernel_syms
                  :
                    M.Val
                      ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_long) :=
                M.run (M.alloc ((Integer.of_Z 177) : i64.t)).
              
              Definition SYS_query_module
                  :
                    M.Val
                      ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_long) :=
                M.run (M.alloc ((Integer.of_Z 178) : i64.t)).
              
              Definition SYS_quotactl
                  :
                    M.Val
                      ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_long) :=
                M.run (M.alloc ((Integer.of_Z 179) : i64.t)).
              
              Definition SYS_nfsservctl
                  :
                    M.Val
                      ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_long) :=
                M.run (M.alloc ((Integer.of_Z 180) : i64.t)).
              
              Definition SYS_getpmsg
                  :
                    M.Val
                      ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_long) :=
                M.run (M.alloc ((Integer.of_Z 181) : i64.t)).
              
              Definition SYS_putpmsg
                  :
                    M.Val
                      ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_long) :=
                M.run (M.alloc ((Integer.of_Z 182) : i64.t)).
              
              Definition SYS_afs_syscall
                  :
                    M.Val
                      ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_long) :=
                M.run (M.alloc ((Integer.of_Z 183) : i64.t)).
              
              Definition SYS_tuxcall
                  :
                    M.Val
                      ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_long) :=
                M.run (M.alloc ((Integer.of_Z 184) : i64.t)).
              
              Definition SYS_security
                  :
                    M.Val
                      ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_long) :=
                M.run (M.alloc ((Integer.of_Z 185) : i64.t)).
              
              Definition SYS_gettid
                  :
                    M.Val
                      ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_long) :=
                M.run (M.alloc ((Integer.of_Z 186) : i64.t)).
              
              Definition SYS_readahead
                  :
                    M.Val
                      ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_long) :=
                M.run (M.alloc ((Integer.of_Z 187) : i64.t)).
              
              Definition SYS_setxattr
                  :
                    M.Val
                      ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_long) :=
                M.run (M.alloc ((Integer.of_Z 188) : i64.t)).
              
              Definition SYS_lsetxattr
                  :
                    M.Val
                      ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_long) :=
                M.run (M.alloc ((Integer.of_Z 189) : i64.t)).
              
              Definition SYS_fsetxattr
                  :
                    M.Val
                      ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_long) :=
                M.run (M.alloc ((Integer.of_Z 190) : i64.t)).
              
              Definition SYS_getxattr
                  :
                    M.Val
                      ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_long) :=
                M.run (M.alloc ((Integer.of_Z 191) : i64.t)).
              
              Definition SYS_lgetxattr
                  :
                    M.Val
                      ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_long) :=
                M.run (M.alloc ((Integer.of_Z 192) : i64.t)).
              
              Definition SYS_fgetxattr
                  :
                    M.Val
                      ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_long) :=
                M.run (M.alloc ((Integer.of_Z 193) : i64.t)).
              
              Definition SYS_listxattr
                  :
                    M.Val
                      ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_long) :=
                M.run (M.alloc ((Integer.of_Z 194) : i64.t)).
              
              Definition SYS_llistxattr
                  :
                    M.Val
                      ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_long) :=
                M.run (M.alloc ((Integer.of_Z 195) : i64.t)).
              
              Definition SYS_flistxattr
                  :
                    M.Val
                      ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_long) :=
                M.run (M.alloc ((Integer.of_Z 196) : i64.t)).
              
              Definition SYS_removexattr
                  :
                    M.Val
                      ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_long) :=
                M.run (M.alloc ((Integer.of_Z 197) : i64.t)).
              
              Definition SYS_lremovexattr
                  :
                    M.Val
                      ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_long) :=
                M.run (M.alloc ((Integer.of_Z 198) : i64.t)).
              
              Definition SYS_fremovexattr
                  :
                    M.Val
                      ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_long) :=
                M.run (M.alloc ((Integer.of_Z 199) : i64.t)).
              
              Definition SYS_tkill
                  :
                    M.Val
                      ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_long) :=
                M.run (M.alloc ((Integer.of_Z 200) : i64.t)).
              
              Definition SYS_time
                  :
                    M.Val
                      ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_long) :=
                M.run (M.alloc ((Integer.of_Z 201) : i64.t)).
              
              Definition SYS_futex
                  :
                    M.Val
                      ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_long) :=
                M.run (M.alloc ((Integer.of_Z 202) : i64.t)).
              
              Definition SYS_sched_setaffinity
                  :
                    M.Val
                      ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_long) :=
                M.run (M.alloc ((Integer.of_Z 203) : i64.t)).
              
              Definition SYS_sched_getaffinity
                  :
                    M.Val
                      ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_long) :=
                M.run (M.alloc ((Integer.of_Z 204) : i64.t)).
              
              Definition SYS_set_thread_area
                  :
                    M.Val
                      ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_long) :=
                M.run (M.alloc ((Integer.of_Z 205) : i64.t)).
              
              Definition SYS_io_setup
                  :
                    M.Val
                      ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_long) :=
                M.run (M.alloc ((Integer.of_Z 206) : i64.t)).
              
              Definition SYS_io_destroy
                  :
                    M.Val
                      ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_long) :=
                M.run (M.alloc ((Integer.of_Z 207) : i64.t)).
              
              Definition SYS_io_getevents
                  :
                    M.Val
                      ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_long) :=
                M.run (M.alloc ((Integer.of_Z 208) : i64.t)).
              
              Definition SYS_io_submit
                  :
                    M.Val
                      ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_long) :=
                M.run (M.alloc ((Integer.of_Z 209) : i64.t)).
              
              Definition SYS_io_cancel
                  :
                    M.Val
                      ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_long) :=
                M.run (M.alloc ((Integer.of_Z 210) : i64.t)).
              
              Definition SYS_get_thread_area
                  :
                    M.Val
                      ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_long) :=
                M.run (M.alloc ((Integer.of_Z 211) : i64.t)).
              
              Definition SYS_lookup_dcookie
                  :
                    M.Val
                      ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_long) :=
                M.run (M.alloc ((Integer.of_Z 212) : i64.t)).
              
              Definition SYS_epoll_create
                  :
                    M.Val
                      ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_long) :=
                M.run (M.alloc ((Integer.of_Z 213) : i64.t)).
              
              Definition SYS_epoll_ctl_old
                  :
                    M.Val
                      ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_long) :=
                M.run (M.alloc ((Integer.of_Z 214) : i64.t)).
              
              Definition SYS_epoll_wait_old
                  :
                    M.Val
                      ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_long) :=
                M.run (M.alloc ((Integer.of_Z 215) : i64.t)).
              
              Definition SYS_remap_file_pages
                  :
                    M.Val
                      ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_long) :=
                M.run (M.alloc ((Integer.of_Z 216) : i64.t)).
              
              Definition SYS_getdents64
                  :
                    M.Val
                      ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_long) :=
                M.run (M.alloc ((Integer.of_Z 217) : i64.t)).
              
              Definition SYS_set_tid_address
                  :
                    M.Val
                      ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_long) :=
                M.run (M.alloc ((Integer.of_Z 218) : i64.t)).
              
              Definition SYS_restart_syscall
                  :
                    M.Val
                      ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_long) :=
                M.run (M.alloc ((Integer.of_Z 219) : i64.t)).
              
              Definition SYS_semtimedop
                  :
                    M.Val
                      ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_long) :=
                M.run (M.alloc ((Integer.of_Z 220) : i64.t)).
              
              Definition SYS_fadvise64
                  :
                    M.Val
                      ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_long) :=
                M.run (M.alloc ((Integer.of_Z 221) : i64.t)).
              
              Definition SYS_timer_create
                  :
                    M.Val
                      ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_long) :=
                M.run (M.alloc ((Integer.of_Z 222) : i64.t)).
              
              Definition SYS_timer_settime
                  :
                    M.Val
                      ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_long) :=
                M.run (M.alloc ((Integer.of_Z 223) : i64.t)).
              
              Definition SYS_timer_gettime
                  :
                    M.Val
                      ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_long) :=
                M.run (M.alloc ((Integer.of_Z 224) : i64.t)).
              
              Definition SYS_timer_getoverrun
                  :
                    M.Val
                      ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_long) :=
                M.run (M.alloc ((Integer.of_Z 225) : i64.t)).
              
              Definition SYS_timer_delete
                  :
                    M.Val
                      ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_long) :=
                M.run (M.alloc ((Integer.of_Z 226) : i64.t)).
              
              Definition SYS_clock_settime
                  :
                    M.Val
                      ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_long) :=
                M.run (M.alloc ((Integer.of_Z 227) : i64.t)).
              
              Definition SYS_clock_gettime
                  :
                    M.Val
                      ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_long) :=
                M.run (M.alloc ((Integer.of_Z 228) : i64.t)).
              
              Definition SYS_clock_getres
                  :
                    M.Val
                      ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_long) :=
                M.run (M.alloc ((Integer.of_Z 229) : i64.t)).
              
              Definition SYS_clock_nanosleep
                  :
                    M.Val
                      ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_long) :=
                M.run (M.alloc ((Integer.of_Z 230) : i64.t)).
              
              Definition SYS_exit_group
                  :
                    M.Val
                      ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_long) :=
                M.run (M.alloc ((Integer.of_Z 231) : i64.t)).
              
              Definition SYS_epoll_wait
                  :
                    M.Val
                      ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_long) :=
                M.run (M.alloc ((Integer.of_Z 232) : i64.t)).
              
              Definition SYS_epoll_ctl
                  :
                    M.Val
                      ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_long) :=
                M.run (M.alloc ((Integer.of_Z 233) : i64.t)).
              
              Definition SYS_tgkill
                  :
                    M.Val
                      ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_long) :=
                M.run (M.alloc ((Integer.of_Z 234) : i64.t)).
              
              Definition SYS_utimes
                  :
                    M.Val
                      ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_long) :=
                M.run (M.alloc ((Integer.of_Z 235) : i64.t)).
              
              Definition SYS_vserver
                  :
                    M.Val
                      ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_long) :=
                M.run (M.alloc ((Integer.of_Z 236) : i64.t)).
              
              Definition SYS_mbind
                  :
                    M.Val
                      ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_long) :=
                M.run (M.alloc ((Integer.of_Z 237) : i64.t)).
              
              Definition SYS_set_mempolicy
                  :
                    M.Val
                      ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_long) :=
                M.run (M.alloc ((Integer.of_Z 238) : i64.t)).
              
              Definition SYS_get_mempolicy
                  :
                    M.Val
                      ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_long) :=
                M.run (M.alloc ((Integer.of_Z 239) : i64.t)).
              
              Definition SYS_mq_open
                  :
                    M.Val
                      ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_long) :=
                M.run (M.alloc ((Integer.of_Z 240) : i64.t)).
              
              Definition SYS_mq_unlink
                  :
                    M.Val
                      ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_long) :=
                M.run (M.alloc ((Integer.of_Z 241) : i64.t)).
              
              Definition SYS_mq_timedsend
                  :
                    M.Val
                      ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_long) :=
                M.run (M.alloc ((Integer.of_Z 242) : i64.t)).
              
              Definition SYS_mq_timedreceive
                  :
                    M.Val
                      ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_long) :=
                M.run (M.alloc ((Integer.of_Z 243) : i64.t)).
              
              Definition SYS_mq_notify
                  :
                    M.Val
                      ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_long) :=
                M.run (M.alloc ((Integer.of_Z 244) : i64.t)).
              
              Definition SYS_mq_getsetattr
                  :
                    M.Val
                      ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_long) :=
                M.run (M.alloc ((Integer.of_Z 245) : i64.t)).
              
              Definition SYS_kexec_load
                  :
                    M.Val
                      ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_long) :=
                M.run (M.alloc ((Integer.of_Z 246) : i64.t)).
              
              Definition SYS_waitid
                  :
                    M.Val
                      ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_long) :=
                M.run (M.alloc ((Integer.of_Z 247) : i64.t)).
              
              Definition SYS_add_key
                  :
                    M.Val
                      ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_long) :=
                M.run (M.alloc ((Integer.of_Z 248) : i64.t)).
              
              Definition SYS_request_key
                  :
                    M.Val
                      ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_long) :=
                M.run (M.alloc ((Integer.of_Z 249) : i64.t)).
              
              Definition SYS_keyctl
                  :
                    M.Val
                      ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_long) :=
                M.run (M.alloc ((Integer.of_Z 250) : i64.t)).
              
              Definition SYS_ioprio_set
                  :
                    M.Val
                      ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_long) :=
                M.run (M.alloc ((Integer.of_Z 251) : i64.t)).
              
              Definition SYS_ioprio_get
                  :
                    M.Val
                      ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_long) :=
                M.run (M.alloc ((Integer.of_Z 252) : i64.t)).
              
              Definition SYS_inotify_init
                  :
                    M.Val
                      ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_long) :=
                M.run (M.alloc ((Integer.of_Z 253) : i64.t)).
              
              Definition SYS_inotify_add_watch
                  :
                    M.Val
                      ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_long) :=
                M.run (M.alloc ((Integer.of_Z 254) : i64.t)).
              
              Definition SYS_inotify_rm_watch
                  :
                    M.Val
                      ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_long) :=
                M.run (M.alloc ((Integer.of_Z 255) : i64.t)).
              
              Definition SYS_migrate_pages
                  :
                    M.Val
                      ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_long) :=
                M.run (M.alloc ((Integer.of_Z 256) : i64.t)).
              
              Definition SYS_openat
                  :
                    M.Val
                      ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_long) :=
                M.run (M.alloc ((Integer.of_Z 257) : i64.t)).
              
              Definition SYS_mkdirat
                  :
                    M.Val
                      ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_long) :=
                M.run (M.alloc ((Integer.of_Z 258) : i64.t)).
              
              Definition SYS_mknodat
                  :
                    M.Val
                      ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_long) :=
                M.run (M.alloc ((Integer.of_Z 259) : i64.t)).
              
              Definition SYS_fchownat
                  :
                    M.Val
                      ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_long) :=
                M.run (M.alloc ((Integer.of_Z 260) : i64.t)).
              
              Definition SYS_futimesat
                  :
                    M.Val
                      ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_long) :=
                M.run (M.alloc ((Integer.of_Z 261) : i64.t)).
              
              Definition SYS_newfstatat
                  :
                    M.Val
                      ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_long) :=
                M.run (M.alloc ((Integer.of_Z 262) : i64.t)).
              
              Definition SYS_unlinkat
                  :
                    M.Val
                      ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_long) :=
                M.run (M.alloc ((Integer.of_Z 263) : i64.t)).
              
              Definition SYS_renameat
                  :
                    M.Val
                      ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_long) :=
                M.run (M.alloc ((Integer.of_Z 264) : i64.t)).
              
              Definition SYS_linkat
                  :
                    M.Val
                      ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_long) :=
                M.run (M.alloc ((Integer.of_Z 265) : i64.t)).
              
              Definition SYS_symlinkat
                  :
                    M.Val
                      ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_long) :=
                M.run (M.alloc ((Integer.of_Z 266) : i64.t)).
              
              Definition SYS_readlinkat
                  :
                    M.Val
                      ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_long) :=
                M.run (M.alloc ((Integer.of_Z 267) : i64.t)).
              
              Definition SYS_fchmodat
                  :
                    M.Val
                      ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_long) :=
                M.run (M.alloc ((Integer.of_Z 268) : i64.t)).
              
              Definition SYS_faccessat
                  :
                    M.Val
                      ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_long) :=
                M.run (M.alloc ((Integer.of_Z 269) : i64.t)).
              
              Definition SYS_pselect6
                  :
                    M.Val
                      ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_long) :=
                M.run (M.alloc ((Integer.of_Z 270) : i64.t)).
              
              Definition SYS_ppoll
                  :
                    M.Val
                      ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_long) :=
                M.run (M.alloc ((Integer.of_Z 271) : i64.t)).
              
              Definition SYS_unshare
                  :
                    M.Val
                      ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_long) :=
                M.run (M.alloc ((Integer.of_Z 272) : i64.t)).
              
              Definition SYS_set_robust_list
                  :
                    M.Val
                      ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_long) :=
                M.run (M.alloc ((Integer.of_Z 273) : i64.t)).
              
              Definition SYS_get_robust_list
                  :
                    M.Val
                      ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_long) :=
                M.run (M.alloc ((Integer.of_Z 274) : i64.t)).
              
              Definition SYS_splice
                  :
                    M.Val
                      ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_long) :=
                M.run (M.alloc ((Integer.of_Z 275) : i64.t)).
              
              Definition SYS_tee
                  :
                    M.Val
                      ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_long) :=
                M.run (M.alloc ((Integer.of_Z 276) : i64.t)).
              
              Definition SYS_sync_file_range
                  :
                    M.Val
                      ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_long) :=
                M.run (M.alloc ((Integer.of_Z 277) : i64.t)).
              
              Definition SYS_vmsplice
                  :
                    M.Val
                      ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_long) :=
                M.run (M.alloc ((Integer.of_Z 278) : i64.t)).
              
              Definition SYS_move_pages
                  :
                    M.Val
                      ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_long) :=
                M.run (M.alloc ((Integer.of_Z 279) : i64.t)).
              
              Definition SYS_utimensat
                  :
                    M.Val
                      ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_long) :=
                M.run (M.alloc ((Integer.of_Z 280) : i64.t)).
              
              Definition SYS_epoll_pwait
                  :
                    M.Val
                      ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_long) :=
                M.run (M.alloc ((Integer.of_Z 281) : i64.t)).
              
              Definition SYS_signalfd
                  :
                    M.Val
                      ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_long) :=
                M.run (M.alloc ((Integer.of_Z 282) : i64.t)).
              
              Definition SYS_timerfd_create
                  :
                    M.Val
                      ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_long) :=
                M.run (M.alloc ((Integer.of_Z 283) : i64.t)).
              
              Definition SYS_eventfd
                  :
                    M.Val
                      ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_long) :=
                M.run (M.alloc ((Integer.of_Z 284) : i64.t)).
              
              Definition SYS_fallocate
                  :
                    M.Val
                      ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_long) :=
                M.run (M.alloc ((Integer.of_Z 285) : i64.t)).
              
              Definition SYS_timerfd_settime
                  :
                    M.Val
                      ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_long) :=
                M.run (M.alloc ((Integer.of_Z 286) : i64.t)).
              
              Definition SYS_timerfd_gettime
                  :
                    M.Val
                      ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_long) :=
                M.run (M.alloc ((Integer.of_Z 287) : i64.t)).
              
              Definition SYS_accept4
                  :
                    M.Val
                      ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_long) :=
                M.run (M.alloc ((Integer.of_Z 288) : i64.t)).
              
              Definition SYS_signalfd4
                  :
                    M.Val
                      ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_long) :=
                M.run (M.alloc ((Integer.of_Z 289) : i64.t)).
              
              Definition SYS_eventfd2
                  :
                    M.Val
                      ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_long) :=
                M.run (M.alloc ((Integer.of_Z 290) : i64.t)).
              
              Definition SYS_epoll_create1
                  :
                    M.Val
                      ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_long) :=
                M.run (M.alloc ((Integer.of_Z 291) : i64.t)).
              
              Definition SYS_dup3
                  :
                    M.Val
                      ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_long) :=
                M.run (M.alloc ((Integer.of_Z 292) : i64.t)).
              
              Definition SYS_pipe2
                  :
                    M.Val
                      ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_long) :=
                M.run (M.alloc ((Integer.of_Z 293) : i64.t)).
              
              Definition SYS_inotify_init1
                  :
                    M.Val
                      ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_long) :=
                M.run (M.alloc ((Integer.of_Z 294) : i64.t)).
              
              Definition SYS_preadv
                  :
                    M.Val
                      ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_long) :=
                M.run (M.alloc ((Integer.of_Z 295) : i64.t)).
              
              Definition SYS_pwritev
                  :
                    M.Val
                      ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_long) :=
                M.run (M.alloc ((Integer.of_Z 296) : i64.t)).
              
              Definition SYS_rt_tgsigqueueinfo
                  :
                    M.Val
                      ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_long) :=
                M.run (M.alloc ((Integer.of_Z 297) : i64.t)).
              
              Definition SYS_perf_event_open
                  :
                    M.Val
                      ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_long) :=
                M.run (M.alloc ((Integer.of_Z 298) : i64.t)).
              
              Definition SYS_recvmmsg
                  :
                    M.Val
                      ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_long) :=
                M.run (M.alloc ((Integer.of_Z 299) : i64.t)).
              
              Definition SYS_fanotify_init
                  :
                    M.Val
                      ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_long) :=
                M.run (M.alloc ((Integer.of_Z 300) : i64.t)).
              
              Definition SYS_fanotify_mark
                  :
                    M.Val
                      ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_long) :=
                M.run (M.alloc ((Integer.of_Z 301) : i64.t)).
              
              Definition SYS_prlimit64
                  :
                    M.Val
                      ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_long) :=
                M.run (M.alloc ((Integer.of_Z 302) : i64.t)).
              
              Definition SYS_name_to_handle_at
                  :
                    M.Val
                      ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_long) :=
                M.run (M.alloc ((Integer.of_Z 303) : i64.t)).
              
              Definition SYS_open_by_handle_at
                  :
                    M.Val
                      ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_long) :=
                M.run (M.alloc ((Integer.of_Z 304) : i64.t)).
              
              Definition SYS_clock_adjtime
                  :
                    M.Val
                      ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_long) :=
                M.run (M.alloc ((Integer.of_Z 305) : i64.t)).
              
              Definition SYS_syncfs
                  :
                    M.Val
                      ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_long) :=
                M.run (M.alloc ((Integer.of_Z 306) : i64.t)).
              
              Definition SYS_sendmmsg
                  :
                    M.Val
                      ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_long) :=
                M.run (M.alloc ((Integer.of_Z 307) : i64.t)).
              
              Definition SYS_setns
                  :
                    M.Val
                      ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_long) :=
                M.run (M.alloc ((Integer.of_Z 308) : i64.t)).
              
              Definition SYS_getcpu
                  :
                    M.Val
                      ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_long) :=
                M.run (M.alloc ((Integer.of_Z 309) : i64.t)).
              
              Definition SYS_process_vm_readv
                  :
                    M.Val
                      ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_long) :=
                M.run (M.alloc ((Integer.of_Z 310) : i64.t)).
              
              Definition SYS_process_vm_writev
                  :
                    M.Val
                      ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_long) :=
                M.run (M.alloc ((Integer.of_Z 311) : i64.t)).
              
              Definition SYS_kcmp
                  :
                    M.Val
                      ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_long) :=
                M.run (M.alloc ((Integer.of_Z 312) : i64.t)).
              
              Definition SYS_finit_module
                  :
                    M.Val
                      ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_long) :=
                M.run (M.alloc ((Integer.of_Z 313) : i64.t)).
              
              Definition SYS_sched_setattr
                  :
                    M.Val
                      ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_long) :=
                M.run (M.alloc ((Integer.of_Z 314) : i64.t)).
              
              Definition SYS_sched_getattr
                  :
                    M.Val
                      ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_long) :=
                M.run (M.alloc ((Integer.of_Z 315) : i64.t)).
              
              Definition SYS_renameat2
                  :
                    M.Val
                      ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_long) :=
                M.run (M.alloc ((Integer.of_Z 316) : i64.t)).
              
              Definition SYS_seccomp
                  :
                    M.Val
                      ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_long) :=
                M.run (M.alloc ((Integer.of_Z 317) : i64.t)).
              
              Definition SYS_getrandom
                  :
                    M.Val
                      ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_long) :=
                M.run (M.alloc ((Integer.of_Z 318) : i64.t)).
              
              Definition SYS_memfd_create
                  :
                    M.Val
                      ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_long) :=
                M.run (M.alloc ((Integer.of_Z 319) : i64.t)).
              
              Definition SYS_kexec_file_load
                  :
                    M.Val
                      ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_long) :=
                M.run (M.alloc ((Integer.of_Z 320) : i64.t)).
              
              Definition SYS_bpf
                  :
                    M.Val
                      ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_long) :=
                M.run (M.alloc ((Integer.of_Z 321) : i64.t)).
              
              Definition SYS_execveat
                  :
                    M.Val
                      ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_long) :=
                M.run (M.alloc ((Integer.of_Z 322) : i64.t)).
              
              Definition SYS_userfaultfd
                  :
                    M.Val
                      ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_long) :=
                M.run (M.alloc ((Integer.of_Z 323) : i64.t)).
              
              Definition SYS_membarrier
                  :
                    M.Val
                      ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_long) :=
                M.run (M.alloc ((Integer.of_Z 324) : i64.t)).
              
              Definition SYS_mlock2
                  :
                    M.Val
                      ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_long) :=
                M.run (M.alloc ((Integer.of_Z 325) : i64.t)).
              
              Definition SYS_copy_file_range
                  :
                    M.Val
                      ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_long) :=
                M.run (M.alloc ((Integer.of_Z 326) : i64.t)).
              
              Definition SYS_preadv2
                  :
                    M.Val
                      ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_long) :=
                M.run (M.alloc ((Integer.of_Z 327) : i64.t)).
              
              Definition SYS_pwritev2
                  :
                    M.Val
                      ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_long) :=
                M.run (M.alloc ((Integer.of_Z 328) : i64.t)).
              
              Definition SYS_pkey_mprotect
                  :
                    M.Val
                      ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_long) :=
                M.run (M.alloc ((Integer.of_Z 329) : i64.t)).
              
              Definition SYS_pkey_alloc
                  :
                    M.Val
                      ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_long) :=
                M.run (M.alloc ((Integer.of_Z 330) : i64.t)).
              
              Definition SYS_pkey_free
                  :
                    M.Val
                      ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_long) :=
                M.run (M.alloc ((Integer.of_Z 331) : i64.t)).
              
              Definition SYS_statx
                  :
                    M.Val
                      ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_long) :=
                M.run (M.alloc ((Integer.of_Z 332) : i64.t)).
              
              Definition SYS_rseq
                  :
                    M.Val
                      ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_long) :=
                M.run (M.alloc ((Integer.of_Z 334) : i64.t)).
              
              Definition SYS_pidfd_send_signal
                  :
                    M.Val
                      ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_long) :=
                M.run (M.alloc ((Integer.of_Z 424) : i64.t)).
              
              Definition SYS_io_uring_setup
                  :
                    M.Val
                      ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_long) :=
                M.run (M.alloc ((Integer.of_Z 425) : i64.t)).
              
              Definition SYS_io_uring_enter
                  :
                    M.Val
                      ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_long) :=
                M.run (M.alloc ((Integer.of_Z 426) : i64.t)).
              
              Definition SYS_io_uring_register
                  :
                    M.Val
                      ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_long) :=
                M.run (M.alloc ((Integer.of_Z 427) : i64.t)).
              
              Definition SYS_open_tree
                  :
                    M.Val
                      ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_long) :=
                M.run (M.alloc ((Integer.of_Z 428) : i64.t)).
              
              Definition SYS_move_mount
                  :
                    M.Val
                      ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_long) :=
                M.run (M.alloc ((Integer.of_Z 429) : i64.t)).
              
              Definition SYS_fsopen
                  :
                    M.Val
                      ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_long) :=
                M.run (M.alloc ((Integer.of_Z 430) : i64.t)).
              
              Definition SYS_fsconfig
                  :
                    M.Val
                      ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_long) :=
                M.run (M.alloc ((Integer.of_Z 431) : i64.t)).
              
              Definition SYS_fsmount
                  :
                    M.Val
                      ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_long) :=
                M.run (M.alloc ((Integer.of_Z 432) : i64.t)).
              
              Definition SYS_fspick
                  :
                    M.Val
                      ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_long) :=
                M.run (M.alloc ((Integer.of_Z 433) : i64.t)).
              
              Definition SYS_pidfd_open
                  :
                    M.Val
                      ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_long) :=
                M.run (M.alloc ((Integer.of_Z 434) : i64.t)).
              
              Definition SYS_clone3
                  :
                    M.Val
                      ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_long) :=
                M.run (M.alloc ((Integer.of_Z 435) : i64.t)).
              
              Definition SYS_close_range
                  :
                    M.Val
                      ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_long) :=
                M.run (M.alloc ((Integer.of_Z 436) : i64.t)).
              
              Definition SYS_openat2
                  :
                    M.Val
                      ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_long) :=
                M.run (M.alloc ((Integer.of_Z 437) : i64.t)).
              
              Definition SYS_pidfd_getfd
                  :
                    M.Val
                      ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_long) :=
                M.run (M.alloc ((Integer.of_Z 438) : i64.t)).
              
              Definition SYS_faccessat2
                  :
                    M.Val
                      ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_long) :=
                M.run (M.alloc ((Integer.of_Z 439) : i64.t)).
              
              Definition SYS_process_madvise
                  :
                    M.Val
                      ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_long) :=
                M.run (M.alloc ((Integer.of_Z 440) : i64.t)).
              
              Definition SYS_epoll_pwait2
                  :
                    M.Val
                      ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_long) :=
                M.run (M.alloc ((Integer.of_Z 441) : i64.t)).
              
              Definition SYS_mount_setattr
                  :
                    M.Val
                      ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_long) :=
                M.run (M.alloc ((Integer.of_Z 442) : i64.t)).
              
              Definition SYS_quotactl_fd
                  :
                    M.Val
                      ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_long) :=
                M.run (M.alloc ((Integer.of_Z 443) : i64.t)).
              
              Definition SYS_landlock_create_ruleset
                  :
                    M.Val
                      ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_long) :=
                M.run (M.alloc ((Integer.of_Z 444) : i64.t)).
              
              Definition SYS_landlock_add_rule
                  :
                    M.Val
                      ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_long) :=
                M.run (M.alloc ((Integer.of_Z 445) : i64.t)).
              
              Definition SYS_landlock_restrict_self
                  :
                    M.Val
                      ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_long) :=
                M.run (M.alloc ((Integer.of_Z 446) : i64.t)).
              
              Definition SYS_memfd_secret
                  :
                    M.Val
                      ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_long) :=
                M.run (M.alloc ((Integer.of_Z 447) : i64.t)).
              
              Definition SYS_process_mrelease
                  :
                    M.Val
                      ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_long) :=
                M.run (M.alloc ((Integer.of_Z 448) : i64.t)).
              
              Definition SYS_futex_waitv
                  :
                    M.Val
                      ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_long) :=
                M.run (M.alloc ((Integer.of_Z 449) : i64.t)).
              
              Definition SYS_set_mempolicy_home_node
                  :
                    M.Val
                      ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_long) :=
                M.run (M.alloc ((Integer.of_Z 450) : i64.t)).
              
              Definition SYS_fchmodat2
                  :
                    M.Val
                      ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_long) :=
                M.run (M.alloc ((Integer.of_Z 452) : i64.t)).
              
              Error ForeignMod.
            End not_x32.
            
            Module align.
              Module  max_align_t.
              Section max_align_t.
                Record t : Set := {
                  priv_ : array f64.t;
                }.
                
                Definition Get_priv_ :=
                  Ref.map
                    (fun α => Some α.(priv_))
                    (fun β α => Some (α <| priv_ := β |>)).
              End max_align_t.
              End max_align_t.
              
              Module  Impl_core_marker_Copy_for_libc_unix_linux_like_linux_gnu_b64_x86_64_align_max_align_t_t.
              Section Impl_core_marker_Copy_for_libc_unix_linux_like_linux_gnu_b64_x86_64_align_max_align_t_t.
                Definition Self : Set :=
                  libc.unix.linux_like.linux.gnu.b64.x86_64.align.max_align_t.t.
                
                Global Instance ℐ : core.marker.Copy.Trait Self := {
                }.
              End Impl_core_marker_Copy_for_libc_unix_linux_like_linux_gnu_b64_x86_64_align_max_align_t_t.
              End Impl_core_marker_Copy_for_libc_unix_linux_like_linux_gnu_b64_x86_64_align_max_align_t_t.
              
              Module  Impl_core_clone_Clone_for_libc_unix_linux_like_linux_gnu_b64_x86_64_align_max_align_t_t.
              Section Impl_core_clone_Clone_for_libc_unix_linux_like_linux_gnu_b64_x86_64_align_max_align_t_t.
                Definition Self : Set :=
                  libc.unix.linux_like.linux.gnu.b64.x86_64.align.max_align_t.t.
                
                (*
                            fn clone(&self) -> $i { *self }
                *)
                Definition clone
                    (self : ref Self)
                    :
                      M
                        libc.unix.linux_like.linux.gnu.b64.x86_64.align.max_align_t.t :=
                  let* self := M.alloc self in
                  let* α0 :
                      ref
                        libc.unix.linux_like.linux.gnu.b64.x86_64.align.max_align_t.t :=
                    M.read self in
                  M.read (deref α0).
                
                Global Instance AssociatedFunction_clone :
                  Notations.DoubleColon Self "clone" := {
                  Notations.double_colon := clone;
                }.
                
                Global Instance ℐ : core.clone.Clone.Required.Trait Self := {
                  core.clone.Clone.clone := clone;
                  core.clone.Clone.clone_from := Datatypes.None;
                }.
              End Impl_core_clone_Clone_for_libc_unix_linux_like_linux_gnu_b64_x86_64_align_max_align_t_t.
              End Impl_core_clone_Clone_for_libc_unix_linux_like_linux_gnu_b64_x86_64_align_max_align_t_t.
              
              Module  clone_args.
              Section clone_args.
                Record t : Set := {
                  flags : ltac:(libc.unix.c_ulonglong);
                  pidfd : ltac:(libc.unix.c_ulonglong);
                  child_tid : ltac:(libc.unix.c_ulonglong);
                  parent_tid : ltac:(libc.unix.c_ulonglong);
                  exit_signal : ltac:(libc.unix.c_ulonglong);
                  stack : ltac:(libc.unix.c_ulonglong);
                  stack_size : ltac:(libc.unix.c_ulonglong);
                  tls : ltac:(libc.unix.c_ulonglong);
                  set_tid : ltac:(libc.unix.c_ulonglong);
                  set_tid_size : ltac:(libc.unix.c_ulonglong);
                  cgroup : ltac:(libc.unix.c_ulonglong);
                }.
                
                Definition Get_flags :=
                  Ref.map
                    (fun α => Some α.(flags))
                    (fun β α => Some (α <| flags := β |>)).
                Definition Get_pidfd :=
                  Ref.map
                    (fun α => Some α.(pidfd))
                    (fun β α => Some (α <| pidfd := β |>)).
                Definition Get_child_tid :=
                  Ref.map
                    (fun α => Some α.(child_tid))
                    (fun β α => Some (α <| child_tid := β |>)).
                Definition Get_parent_tid :=
                  Ref.map
                    (fun α => Some α.(parent_tid))
                    (fun β α => Some (α <| parent_tid := β |>)).
                Definition Get_exit_signal :=
                  Ref.map
                    (fun α => Some α.(exit_signal))
                    (fun β α => Some (α <| exit_signal := β |>)).
                Definition Get_stack :=
                  Ref.map
                    (fun α => Some α.(stack))
                    (fun β α => Some (α <| stack := β |>)).
                Definition Get_stack_size :=
                  Ref.map
                    (fun α => Some α.(stack_size))
                    (fun β α => Some (α <| stack_size := β |>)).
                Definition Get_tls :=
                  Ref.map
                    (fun α => Some α.(tls))
                    (fun β α => Some (α <| tls := β |>)).
                Definition Get_set_tid :=
                  Ref.map
                    (fun α => Some α.(set_tid))
                    (fun β α => Some (α <| set_tid := β |>)).
                Definition Get_set_tid_size :=
                  Ref.map
                    (fun α => Some α.(set_tid_size))
                    (fun β α => Some (α <| set_tid_size := β |>)).
                Definition Get_cgroup :=
                  Ref.map
                    (fun α => Some α.(cgroup))
                    (fun β α => Some (α <| cgroup := β |>)).
              End clone_args.
              End clone_args.
              
              Module  Impl_core_marker_Copy_for_libc_unix_linux_like_linux_gnu_b64_x86_64_align_clone_args_t.
              Section Impl_core_marker_Copy_for_libc_unix_linux_like_linux_gnu_b64_x86_64_align_clone_args_t.
                Definition Self : Set :=
                  libc.unix.linux_like.linux.gnu.b64.x86_64.align.clone_args.t.
                
                Global Instance ℐ : core.marker.Copy.Trait Self := {
                }.
              End Impl_core_marker_Copy_for_libc_unix_linux_like_linux_gnu_b64_x86_64_align_clone_args_t.
              End Impl_core_marker_Copy_for_libc_unix_linux_like_linux_gnu_b64_x86_64_align_clone_args_t.
              
              Module  Impl_core_clone_Clone_for_libc_unix_linux_like_linux_gnu_b64_x86_64_align_clone_args_t.
              Section Impl_core_clone_Clone_for_libc_unix_linux_like_linux_gnu_b64_x86_64_align_clone_args_t.
                Definition Self : Set :=
                  libc.unix.linux_like.linux.gnu.b64.x86_64.align.clone_args.t.
                
                (*
                            fn clone(&self) -> $i { *self }
                *)
                Definition clone
                    (self : ref Self)
                    :
                      M
                        libc.unix.linux_like.linux.gnu.b64.x86_64.align.clone_args.t :=
                  let* self := M.alloc self in
                  let* α0 :
                      ref
                        libc.unix.linux_like.linux.gnu.b64.x86_64.align.clone_args.t :=
                    M.read self in
                  M.read (deref α0).
                
                Global Instance AssociatedFunction_clone :
                  Notations.DoubleColon Self "clone" := {
                  Notations.double_colon := clone;
                }.
                
                Global Instance ℐ : core.clone.Clone.Required.Trait Self := {
                  core.clone.Clone.clone := clone;
                  core.clone.Clone.clone_from := Datatypes.None;
                }.
              End Impl_core_clone_Clone_for_libc_unix_linux_like_linux_gnu_b64_x86_64_align_clone_args_t.
              End Impl_core_clone_Clone_for_libc_unix_linux_like_linux_gnu_b64_x86_64_align_clone_args_t.
            End align.
          End x86_64.
        End b64.
        
        Module align.
          Module  sem_t.
          Section sem_t.
            Record t : Set := {
              __size :
                array ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.c_char);
            }.
            
            Definition Get___size :=
              Ref.map
                (fun α => Some α.(__size))
                (fun β α => Some (α <| __size := β |>)).
          End sem_t.
          End sem_t.
          
          Module  Impl_core_marker_Copy_for_libc_unix_linux_like_linux_gnu_align_sem_t_t.
          Section Impl_core_marker_Copy_for_libc_unix_linux_like_linux_gnu_align_sem_t_t.
            Definition Self : Set :=
              libc.unix.linux_like.linux.gnu.align.sem_t.t.
            
            Global Instance ℐ : core.marker.Copy.Trait Self := {
            }.
          End Impl_core_marker_Copy_for_libc_unix_linux_like_linux_gnu_align_sem_t_t.
          End Impl_core_marker_Copy_for_libc_unix_linux_like_linux_gnu_align_sem_t_t.
          
          Module  Impl_core_clone_Clone_for_libc_unix_linux_like_linux_gnu_align_sem_t_t.
          Section Impl_core_clone_Clone_for_libc_unix_linux_like_linux_gnu_align_sem_t_t.
            Definition Self : Set :=
              libc.unix.linux_like.linux.gnu.align.sem_t.t.
            
            (*
                        fn clone(&self) -> $i { *self }
            *)
            Definition clone
                (self : ref Self)
                : M libc.unix.linux_like.linux.gnu.align.sem_t.t :=
              let* self := M.alloc self in
              let* α0 : ref libc.unix.linux_like.linux.gnu.align.sem_t.t :=
                M.read self in
              M.read (deref α0).
            
            Global Instance AssociatedFunction_clone :
              Notations.DoubleColon Self "clone" := {
              Notations.double_colon := clone;
            }.
            
            Global Instance ℐ : core.clone.Clone.Required.Trait Self := {
              core.clone.Clone.clone := clone;
              core.clone.Clone.clone_from := Datatypes.None;
            }.
          End Impl_core_clone_Clone_for_libc_unix_linux_like_linux_gnu_align_sem_t_t.
          End Impl_core_clone_Clone_for_libc_unix_linux_like_linux_gnu_align_sem_t_t.
        End align.
      End gnu.
      
      Module arch.
        Module generic.
          Module  termios2.
          Section termios2.
            Record t : Set := {
              c_iflag : ltac:(libc.unix.linux_like.tcflag_t);
              c_oflag : ltac:(libc.unix.linux_like.tcflag_t);
              c_cflag : ltac:(libc.unix.linux_like.tcflag_t);
              c_lflag : ltac:(libc.unix.linux_like.tcflag_t);
              c_line : ltac:(libc.unix.cc_t);
              c_cc : array ltac:(libc.unix.cc_t);
              c_ispeed : ltac:(libc.unix.linux_like.speed_t);
              c_ospeed : ltac:(libc.unix.linux_like.speed_t);
            }.
            
            Definition Get_c_iflag :=
              Ref.map
                (fun α => Some α.(c_iflag))
                (fun β α => Some (α <| c_iflag := β |>)).
            Definition Get_c_oflag :=
              Ref.map
                (fun α => Some α.(c_oflag))
                (fun β α => Some (α <| c_oflag := β |>)).
            Definition Get_c_cflag :=
              Ref.map
                (fun α => Some α.(c_cflag))
                (fun β α => Some (α <| c_cflag := β |>)).
            Definition Get_c_lflag :=
              Ref.map
                (fun α => Some α.(c_lflag))
                (fun β α => Some (α <| c_lflag := β |>)).
            Definition Get_c_line :=
              Ref.map
                (fun α => Some α.(c_line))
                (fun β α => Some (α <| c_line := β |>)).
            Definition Get_c_cc :=
              Ref.map
                (fun α => Some α.(c_cc))
                (fun β α => Some (α <| c_cc := β |>)).
            Definition Get_c_ispeed :=
              Ref.map
                (fun α => Some α.(c_ispeed))
                (fun β α => Some (α <| c_ispeed := β |>)).
            Definition Get_c_ospeed :=
              Ref.map
                (fun α => Some α.(c_ospeed))
                (fun β α => Some (α <| c_ospeed := β |>)).
          End termios2.
          End termios2.
          
          Module  Impl_core_marker_Copy_for_libc_unix_linux_like_linux_arch_generic_termios2_t.
          Section Impl_core_marker_Copy_for_libc_unix_linux_like_linux_arch_generic_termios2_t.
            Definition Self : Set :=
              libc.unix.linux_like.linux.arch.generic.termios2.t.
            
            Global Instance ℐ : core.marker.Copy.Trait Self := {
            }.
          End Impl_core_marker_Copy_for_libc_unix_linux_like_linux_arch_generic_termios2_t.
          End Impl_core_marker_Copy_for_libc_unix_linux_like_linux_arch_generic_termios2_t.
          
          Module  Impl_core_clone_Clone_for_libc_unix_linux_like_linux_arch_generic_termios2_t.
          Section Impl_core_clone_Clone_for_libc_unix_linux_like_linux_arch_generic_termios2_t.
            Definition Self : Set :=
              libc.unix.linux_like.linux.arch.generic.termios2.t.
            
            (*
                        fn clone(&self) -> $i { *self }
            *)
            Definition clone
                (self : ref Self)
                : M libc.unix.linux_like.linux.arch.generic.termios2.t :=
              let* self := M.alloc self in
              let* α0 :
                  ref libc.unix.linux_like.linux.arch.generic.termios2.t :=
                M.read self in
              M.read (deref α0).
            
            Global Instance AssociatedFunction_clone :
              Notations.DoubleColon Self "clone" := {
              Notations.double_colon := clone;
            }.
            
            Global Instance ℐ : core.clone.Clone.Required.Trait Self := {
              core.clone.Clone.clone := clone;
              core.clone.Clone.clone_from := Datatypes.None;
            }.
          End Impl_core_clone_Clone_for_libc_unix_linux_like_linux_arch_generic_termios2_t.
          End Impl_core_clone_Clone_for_libc_unix_linux_like_linux_arch_generic_termios2_t.
          
          Definition SOL_SOCKET : M.Val ltac:(libc.unix.c_int) :=
            M.run (M.alloc ((Integer.of_Z 1) : i32.t)).
          
          Definition SO_REUSEADDR : M.Val ltac:(libc.unix.c_int) :=
            M.run (M.alloc ((Integer.of_Z 2) : i32.t)).
          
          Definition SO_TYPE : M.Val ltac:(libc.unix.c_int) :=
            M.run (M.alloc ((Integer.of_Z 3) : i32.t)).
          
          Definition SO_ERROR : M.Val ltac:(libc.unix.c_int) :=
            M.run (M.alloc ((Integer.of_Z 4) : i32.t)).
          
          Definition SO_DONTROUTE : M.Val ltac:(libc.unix.c_int) :=
            M.run (M.alloc ((Integer.of_Z 5) : i32.t)).
          
          Definition SO_BROADCAST : M.Val ltac:(libc.unix.c_int) :=
            M.run (M.alloc ((Integer.of_Z 6) : i32.t)).
          
          Definition SO_SNDBUF : M.Val ltac:(libc.unix.c_int) :=
            M.run (M.alloc ((Integer.of_Z 7) : i32.t)).
          
          Definition SO_RCVBUF : M.Val ltac:(libc.unix.c_int) :=
            M.run (M.alloc ((Integer.of_Z 8) : i32.t)).
          
          Definition SO_KEEPALIVE : M.Val ltac:(libc.unix.c_int) :=
            M.run (M.alloc ((Integer.of_Z 9) : i32.t)).
          
          Definition SO_OOBINLINE : M.Val ltac:(libc.unix.c_int) :=
            M.run (M.alloc ((Integer.of_Z 10) : i32.t)).
          
          Definition SO_NO_CHECK : M.Val ltac:(libc.unix.c_int) :=
            M.run (M.alloc ((Integer.of_Z 11) : i32.t)).
          
          Definition SO_PRIORITY : M.Val ltac:(libc.unix.c_int) :=
            M.run (M.alloc ((Integer.of_Z 12) : i32.t)).
          
          Definition SO_LINGER : M.Val ltac:(libc.unix.c_int) :=
            M.run (M.alloc ((Integer.of_Z 13) : i32.t)).
          
          Definition SO_BSDCOMPAT : M.Val ltac:(libc.unix.c_int) :=
            M.run (M.alloc ((Integer.of_Z 14) : i32.t)).
          
          Definition SO_REUSEPORT : M.Val ltac:(libc.unix.c_int) :=
            M.run (M.alloc ((Integer.of_Z 15) : i32.t)).
          
          Definition SO_PASSCRED : M.Val ltac:(libc.unix.c_int) :=
            M.run (M.alloc ((Integer.of_Z 16) : i32.t)).
          
          Definition SO_PEERCRED : M.Val ltac:(libc.unix.c_int) :=
            M.run (M.alloc ((Integer.of_Z 17) : i32.t)).
          
          Definition SO_RCVLOWAT : M.Val ltac:(libc.unix.c_int) :=
            M.run (M.alloc ((Integer.of_Z 18) : i32.t)).
          
          Definition SO_SNDLOWAT : M.Val ltac:(libc.unix.c_int) :=
            M.run (M.alloc ((Integer.of_Z 19) : i32.t)).
          
          Definition SO_RCVTIMEO : M.Val ltac:(libc.unix.c_int) :=
            M.run (M.alloc ((Integer.of_Z 20) : i32.t)).
          
          Definition SO_SNDTIMEO : M.Val ltac:(libc.unix.c_int) :=
            M.run (M.alloc ((Integer.of_Z 21) : i32.t)).
          
          Definition SO_SECURITY_AUTHENTICATION
              : M.Val ltac:(libc.unix.c_int) :=
            M.run (M.alloc ((Integer.of_Z 22) : i32.t)).
          
          Definition SO_SECURITY_ENCRYPTION_TRANSPORT
              : M.Val ltac:(libc.unix.c_int) :=
            M.run (M.alloc ((Integer.of_Z 23) : i32.t)).
          
          Definition SO_SECURITY_ENCRYPTION_NETWORK
              : M.Val ltac:(libc.unix.c_int) :=
            M.run (M.alloc ((Integer.of_Z 24) : i32.t)).
          
          Definition SO_BINDTODEVICE : M.Val ltac:(libc.unix.c_int) :=
            M.run (M.alloc ((Integer.of_Z 25) : i32.t)).
          
          Definition SO_ATTACH_FILTER : M.Val ltac:(libc.unix.c_int) :=
            M.run (M.alloc ((Integer.of_Z 26) : i32.t)).
          
          Definition SO_DETACH_FILTER : M.Val ltac:(libc.unix.c_int) :=
            M.run (M.alloc ((Integer.of_Z 27) : i32.t)).
          
          Definition SO_GET_FILTER : M.Val ltac:(libc.unix.c_int) :=
            M.run
              (M.pure libc.unix.linux_like.linux.arch.generic.SO_ATTACH_FILTER).
          
          Definition SO_PEERNAME : M.Val ltac:(libc.unix.c_int) :=
            M.run (M.alloc ((Integer.of_Z 28) : i32.t)).
          
          Definition SO_TIMESTAMP : M.Val ltac:(libc.unix.c_int) :=
            M.run (M.alloc ((Integer.of_Z 29) : i32.t)).
          
          Definition SO_ACCEPTCONN : M.Val ltac:(libc.unix.c_int) :=
            M.run (M.alloc ((Integer.of_Z 30) : i32.t)).
          
          Definition SO_PEERSEC : M.Val ltac:(libc.unix.c_int) :=
            M.run (M.alloc ((Integer.of_Z 31) : i32.t)).
          
          Definition SO_SNDBUFFORCE : M.Val ltac:(libc.unix.c_int) :=
            M.run (M.alloc ((Integer.of_Z 32) : i32.t)).
          
          Definition SO_RCVBUFFORCE : M.Val ltac:(libc.unix.c_int) :=
            M.run (M.alloc ((Integer.of_Z 33) : i32.t)).
          
          Definition SO_PASSSEC : M.Val ltac:(libc.unix.c_int) :=
            M.run (M.alloc ((Integer.of_Z 34) : i32.t)).
          
          Definition SO_TIMESTAMPNS : M.Val ltac:(libc.unix.c_int) :=
            M.run (M.alloc ((Integer.of_Z 35) : i32.t)).
          
          Definition SO_MARK : M.Val ltac:(libc.unix.c_int) :=
            M.run (M.alloc ((Integer.of_Z 36) : i32.t)).
          
          Definition SO_TIMESTAMPING : M.Val ltac:(libc.unix.c_int) :=
            M.run (M.alloc ((Integer.of_Z 37) : i32.t)).
          
          Definition SO_PROTOCOL : M.Val ltac:(libc.unix.c_int) :=
            M.run (M.alloc ((Integer.of_Z 38) : i32.t)).
          
          Definition SO_DOMAIN : M.Val ltac:(libc.unix.c_int) :=
            M.run (M.alloc ((Integer.of_Z 39) : i32.t)).
          
          Definition SO_RXQ_OVFL : M.Val ltac:(libc.unix.c_int) :=
            M.run (M.alloc ((Integer.of_Z 40) : i32.t)).
          
          Definition SO_WIFI_STATUS : M.Val ltac:(libc.unix.c_int) :=
            M.run (M.alloc ((Integer.of_Z 41) : i32.t)).
          
          Definition SCM_WIFI_STATUS : M.Val ltac:(libc.unix.c_int) :=
            M.run
              (M.pure libc.unix.linux_like.linux.arch.generic.SO_WIFI_STATUS).
          
          Definition SO_PEEK_OFF : M.Val ltac:(libc.unix.c_int) :=
            M.run (M.alloc ((Integer.of_Z 42) : i32.t)).
          
          Definition SO_NOFCS : M.Val ltac:(libc.unix.c_int) :=
            M.run (M.alloc ((Integer.of_Z 43) : i32.t)).
          
          Definition SO_LOCK_FILTER : M.Val ltac:(libc.unix.c_int) :=
            M.run (M.alloc ((Integer.of_Z 44) : i32.t)).
          
          Definition SO_SELECT_ERR_QUEUE : M.Val ltac:(libc.unix.c_int) :=
            M.run (M.alloc ((Integer.of_Z 45) : i32.t)).
          
          Definition SO_BUSY_POLL : M.Val ltac:(libc.unix.c_int) :=
            M.run (M.alloc ((Integer.of_Z 46) : i32.t)).
          
          Definition SO_MAX_PACING_RATE : M.Val ltac:(libc.unix.c_int) :=
            M.run (M.alloc ((Integer.of_Z 47) : i32.t)).
          
          Definition SO_BPF_EXTENSIONS : M.Val ltac:(libc.unix.c_int) :=
            M.run (M.alloc ((Integer.of_Z 48) : i32.t)).
          
          Definition SO_INCOMING_CPU : M.Val ltac:(libc.unix.c_int) :=
            M.run (M.alloc ((Integer.of_Z 49) : i32.t)).
          
          Definition SO_ATTACH_BPF : M.Val ltac:(libc.unix.c_int) :=
            M.run (M.alloc ((Integer.of_Z 50) : i32.t)).
          
          Definition SO_DETACH_BPF : M.Val ltac:(libc.unix.c_int) :=
            M.run
              (M.pure libc.unix.linux_like.linux.arch.generic.SO_DETACH_FILTER).
          
          Definition SO_ATTACH_REUSEPORT_CBPF : M.Val ltac:(libc.unix.c_int) :=
            M.run (M.alloc ((Integer.of_Z 51) : i32.t)).
          
          Definition SO_ATTACH_REUSEPORT_EBPF : M.Val ltac:(libc.unix.c_int) :=
            M.run (M.alloc ((Integer.of_Z 52) : i32.t)).
          
          Definition SO_CNX_ADVICE : M.Val ltac:(libc.unix.c_int) :=
            M.run (M.alloc ((Integer.of_Z 53) : i32.t)).
          
          Definition SCM_TIMESTAMPING_OPT_STATS
              : M.Val ltac:(libc.unix.c_int) :=
            M.run (M.alloc ((Integer.of_Z 54) : i32.t)).
          
          Definition SO_MEMINFO : M.Val ltac:(libc.unix.c_int) :=
            M.run (M.alloc ((Integer.of_Z 55) : i32.t)).
          
          Definition SO_INCOMING_NAPI_ID : M.Val ltac:(libc.unix.c_int) :=
            M.run (M.alloc ((Integer.of_Z 56) : i32.t)).
          
          Definition SO_COOKIE : M.Val ltac:(libc.unix.c_int) :=
            M.run (M.alloc ((Integer.of_Z 57) : i32.t)).
          
          Definition SCM_TIMESTAMPING_PKTINFO : M.Val ltac:(libc.unix.c_int) :=
            M.run (M.alloc ((Integer.of_Z 58) : i32.t)).
          
          Definition SO_PEERGROUPS : M.Val ltac:(libc.unix.c_int) :=
            M.run (M.alloc ((Integer.of_Z 59) : i32.t)).
          
          Definition SO_ZEROCOPY : M.Val ltac:(libc.unix.c_int) :=
            M.run (M.alloc ((Integer.of_Z 60) : i32.t)).
          
          Definition SO_TXTIME : M.Val ltac:(libc.unix.c_int) :=
            M.run (M.alloc ((Integer.of_Z 61) : i32.t)).
          
          Definition SCM_TXTIME : M.Val ltac:(libc.unix.c_int) :=
            M.run (M.pure libc.unix.linux_like.linux.arch.generic.SO_TXTIME).
          
          Definition SO_BINDTOIFINDEX : M.Val ltac:(libc.unix.c_int) :=
            M.run (M.alloc ((Integer.of_Z 62) : i32.t)).
          
          Definition SO_TIMESTAMP_NEW : M.Val ltac:(libc.unix.c_int) :=
            M.run (M.alloc ((Integer.of_Z 63) : i32.t)).
          
          Definition SO_TIMESTAMPNS_NEW : M.Val ltac:(libc.unix.c_int) :=
            M.run (M.alloc ((Integer.of_Z 64) : i32.t)).
          
          Definition SO_TIMESTAMPING_NEW : M.Val ltac:(libc.unix.c_int) :=
            M.run (M.alloc ((Integer.of_Z 65) : i32.t)).
          
          Definition SO_RCVTIMEO_NEW : M.Val ltac:(libc.unix.c_int) :=
            M.run (M.alloc ((Integer.of_Z 66) : i32.t)).
          
          Definition SO_SNDTIMEO_NEW : M.Val ltac:(libc.unix.c_int) :=
            M.run (M.alloc ((Integer.of_Z 67) : i32.t)).
          
          Definition SO_DETACH_REUSEPORT_BPF : M.Val ltac:(libc.unix.c_int) :=
            M.run (M.alloc ((Integer.of_Z 68) : i32.t)).
          
          Definition FICLONE
              :
                M.Val
                  ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_ulong) :=
            M.run (M.alloc ((Integer.of_Z 1074041865) : u64.t)).
          
          Definition FICLONERANGE
              :
                M.Val
                  ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.not_x32.c_ulong) :=
            M.run (M.alloc ((Integer.of_Z 1075876877) : u64.t)).
          
          Definition SCM_TIMESTAMPNS : M.Val ltac:(libc.unix.c_int) :=
            M.run
              (M.pure libc.unix.linux_like.linux.arch.generic.SO_TIMESTAMPNS).
          
          Definition SCM_TIMESTAMPING : M.Val ltac:(libc.unix.c_int) :=
            M.run
              (M.pure libc.unix.linux_like.linux.arch.generic.SO_TIMESTAMPING).
          
          Definition TCGETS
              : M.Val ltac:(libc.unix.linux_like.linux.gnu.Ioctl) :=
            M.run (M.alloc ((Integer.of_Z 21505) : u64.t)).
          
          Definition TCSETS
              : M.Val ltac:(libc.unix.linux_like.linux.gnu.Ioctl) :=
            M.run (M.alloc ((Integer.of_Z 21506) : u64.t)).
          
          Definition TCSETSW
              : M.Val ltac:(libc.unix.linux_like.linux.gnu.Ioctl) :=
            M.run (M.alloc ((Integer.of_Z 21507) : u64.t)).
          
          Definition TCSETSF
              : M.Val ltac:(libc.unix.linux_like.linux.gnu.Ioctl) :=
            M.run (M.alloc ((Integer.of_Z 21508) : u64.t)).
          
          Definition TCGETA
              : M.Val ltac:(libc.unix.linux_like.linux.gnu.Ioctl) :=
            M.run (M.alloc ((Integer.of_Z 21509) : u64.t)).
          
          Definition TCSETA
              : M.Val ltac:(libc.unix.linux_like.linux.gnu.Ioctl) :=
            M.run (M.alloc ((Integer.of_Z 21510) : u64.t)).
          
          Definition TCSETAW
              : M.Val ltac:(libc.unix.linux_like.linux.gnu.Ioctl) :=
            M.run (M.alloc ((Integer.of_Z 21511) : u64.t)).
          
          Definition TCSETAF
              : M.Val ltac:(libc.unix.linux_like.linux.gnu.Ioctl) :=
            M.run (M.alloc ((Integer.of_Z 21512) : u64.t)).
          
          Definition TCSBRK
              : M.Val ltac:(libc.unix.linux_like.linux.gnu.Ioctl) :=
            M.run (M.alloc ((Integer.of_Z 21513) : u64.t)).
          
          Definition TCXONC
              : M.Val ltac:(libc.unix.linux_like.linux.gnu.Ioctl) :=
            M.run (M.alloc ((Integer.of_Z 21514) : u64.t)).
          
          Definition TCFLSH
              : M.Val ltac:(libc.unix.linux_like.linux.gnu.Ioctl) :=
            M.run (M.alloc ((Integer.of_Z 21515) : u64.t)).
          
          Definition TIOCEXCL
              : M.Val ltac:(libc.unix.linux_like.linux.gnu.Ioctl) :=
            M.run (M.alloc ((Integer.of_Z 21516) : u64.t)).
          
          Definition TIOCNXCL
              : M.Val ltac:(libc.unix.linux_like.linux.gnu.Ioctl) :=
            M.run (M.alloc ((Integer.of_Z 21517) : u64.t)).
          
          Definition TIOCSCTTY
              : M.Val ltac:(libc.unix.linux_like.linux.gnu.Ioctl) :=
            M.run (M.alloc ((Integer.of_Z 21518) : u64.t)).
          
          Definition TIOCGPGRP
              : M.Val ltac:(libc.unix.linux_like.linux.gnu.Ioctl) :=
            M.run (M.alloc ((Integer.of_Z 21519) : u64.t)).
          
          Definition TIOCSPGRP
              : M.Val ltac:(libc.unix.linux_like.linux.gnu.Ioctl) :=
            M.run (M.alloc ((Integer.of_Z 21520) : u64.t)).
          
          Definition TIOCOUTQ
              : M.Val ltac:(libc.unix.linux_like.linux.gnu.Ioctl) :=
            M.run (M.alloc ((Integer.of_Z 21521) : u64.t)).
          
          Definition TIOCSTI
              : M.Val ltac:(libc.unix.linux_like.linux.gnu.Ioctl) :=
            M.run (M.alloc ((Integer.of_Z 21522) : u64.t)).
          
          Definition TIOCGWINSZ
              : M.Val ltac:(libc.unix.linux_like.linux.gnu.Ioctl) :=
            M.run (M.alloc ((Integer.of_Z 21523) : u64.t)).
          
          Definition TIOCSWINSZ
              : M.Val ltac:(libc.unix.linux_like.linux.gnu.Ioctl) :=
            M.run (M.alloc ((Integer.of_Z 21524) : u64.t)).
          
          Definition TIOCMGET
              : M.Val ltac:(libc.unix.linux_like.linux.gnu.Ioctl) :=
            M.run (M.alloc ((Integer.of_Z 21525) : u64.t)).
          
          Definition TIOCMBIS
              : M.Val ltac:(libc.unix.linux_like.linux.gnu.Ioctl) :=
            M.run (M.alloc ((Integer.of_Z 21526) : u64.t)).
          
          Definition TIOCMBIC
              : M.Val ltac:(libc.unix.linux_like.linux.gnu.Ioctl) :=
            M.run (M.alloc ((Integer.of_Z 21527) : u64.t)).
          
          Definition TIOCMSET
              : M.Val ltac:(libc.unix.linux_like.linux.gnu.Ioctl) :=
            M.run (M.alloc ((Integer.of_Z 21528) : u64.t)).
          
          Definition TIOCGSOFTCAR
              : M.Val ltac:(libc.unix.linux_like.linux.gnu.Ioctl) :=
            M.run (M.alloc ((Integer.of_Z 21529) : u64.t)).
          
          Definition TIOCSSOFTCAR
              : M.Val ltac:(libc.unix.linux_like.linux.gnu.Ioctl) :=
            M.run (M.alloc ((Integer.of_Z 21530) : u64.t)).
          
          Definition FIONREAD
              : M.Val ltac:(libc.unix.linux_like.linux.gnu.Ioctl) :=
            M.run (M.alloc ((Integer.of_Z 21531) : u64.t)).
          
          Definition TIOCINQ
              : M.Val ltac:(libc.unix.linux_like.linux.gnu.Ioctl) :=
            M.run (M.pure libc.unix.linux_like.linux.arch.generic.FIONREAD).
          
          Definition TIOCLINUX
              : M.Val ltac:(libc.unix.linux_like.linux.gnu.Ioctl) :=
            M.run (M.alloc ((Integer.of_Z 21532) : u64.t)).
          
          Definition TIOCCONS
              : M.Val ltac:(libc.unix.linux_like.linux.gnu.Ioctl) :=
            M.run (M.alloc ((Integer.of_Z 21533) : u64.t)).
          
          Definition TIOCGSERIAL
              : M.Val ltac:(libc.unix.linux_like.linux.gnu.Ioctl) :=
            M.run (M.alloc ((Integer.of_Z 21534) : u64.t)).
          
          Definition TIOCSSERIAL
              : M.Val ltac:(libc.unix.linux_like.linux.gnu.Ioctl) :=
            M.run (M.alloc ((Integer.of_Z 21535) : u64.t)).
          
          Definition TIOCPKT
              : M.Val ltac:(libc.unix.linux_like.linux.gnu.Ioctl) :=
            M.run (M.alloc ((Integer.of_Z 21536) : u64.t)).
          
          Definition FIONBIO
              : M.Val ltac:(libc.unix.linux_like.linux.gnu.Ioctl) :=
            M.run (M.alloc ((Integer.of_Z 21537) : u64.t)).
          
          Definition TIOCNOTTY
              : M.Val ltac:(libc.unix.linux_like.linux.gnu.Ioctl) :=
            M.run (M.alloc ((Integer.of_Z 21538) : u64.t)).
          
          Definition TIOCSETD
              : M.Val ltac:(libc.unix.linux_like.linux.gnu.Ioctl) :=
            M.run (M.alloc ((Integer.of_Z 21539) : u64.t)).
          
          Definition TIOCGETD
              : M.Val ltac:(libc.unix.linux_like.linux.gnu.Ioctl) :=
            M.run (M.alloc ((Integer.of_Z 21540) : u64.t)).
          
          Definition TCSBRKP
              : M.Val ltac:(libc.unix.linux_like.linux.gnu.Ioctl) :=
            M.run (M.alloc ((Integer.of_Z 21541) : u64.t)).
          
          Definition TIOCSBRK
              : M.Val ltac:(libc.unix.linux_like.linux.gnu.Ioctl) :=
            M.run (M.alloc ((Integer.of_Z 21543) : u64.t)).
          
          Definition TIOCCBRK
              : M.Val ltac:(libc.unix.linux_like.linux.gnu.Ioctl) :=
            M.run (M.alloc ((Integer.of_Z 21544) : u64.t)).
          
          Definition TIOCGSID
              : M.Val ltac:(libc.unix.linux_like.linux.gnu.Ioctl) :=
            M.run (M.alloc ((Integer.of_Z 21545) : u64.t)).
          
          Definition TCGETS2
              : M.Val ltac:(libc.unix.linux_like.linux.gnu.Ioctl) :=
            M.run (M.alloc ((Integer.of_Z 2150388778) : u64.t)).
          
          Definition TCSETS2
              : M.Val ltac:(libc.unix.linux_like.linux.gnu.Ioctl) :=
            M.run (M.alloc ((Integer.of_Z 1076646955) : u64.t)).
          
          Definition TCSETSW2
              : M.Val ltac:(libc.unix.linux_like.linux.gnu.Ioctl) :=
            M.run (M.alloc ((Integer.of_Z 1076646956) : u64.t)).
          
          Definition TCSETSF2
              : M.Val ltac:(libc.unix.linux_like.linux.gnu.Ioctl) :=
            M.run (M.alloc ((Integer.of_Z 1076646957) : u64.t)).
          
          Definition TIOCGRS485
              : M.Val ltac:(libc.unix.linux_like.linux.gnu.Ioctl) :=
            M.run (M.alloc ((Integer.of_Z 21550) : u64.t)).
          
          Definition TIOCSRS485
              : M.Val ltac:(libc.unix.linux_like.linux.gnu.Ioctl) :=
            M.run (M.alloc ((Integer.of_Z 21551) : u64.t)).
          
          Definition TIOCGPTN
              : M.Val ltac:(libc.unix.linux_like.linux.gnu.Ioctl) :=
            M.run (M.alloc ((Integer.of_Z 2147767344) : u64.t)).
          
          Definition TIOCSPTLCK
              : M.Val ltac:(libc.unix.linux_like.linux.gnu.Ioctl) :=
            M.run (M.alloc ((Integer.of_Z 1074025521) : u64.t)).
          
          Definition TIOCGDEV
              : M.Val ltac:(libc.unix.linux_like.linux.gnu.Ioctl) :=
            M.run (M.alloc ((Integer.of_Z 2147767346) : u64.t)).
          
          Definition TCGETX
              : M.Val ltac:(libc.unix.linux_like.linux.gnu.Ioctl) :=
            M.run (M.alloc ((Integer.of_Z 21554) : u64.t)).
          
          Definition TCSETX
              : M.Val ltac:(libc.unix.linux_like.linux.gnu.Ioctl) :=
            M.run (M.alloc ((Integer.of_Z 21555) : u64.t)).
          
          Definition TCSETXF
              : M.Val ltac:(libc.unix.linux_like.linux.gnu.Ioctl) :=
            M.run (M.alloc ((Integer.of_Z 21556) : u64.t)).
          
          Definition TCSETXW
              : M.Val ltac:(libc.unix.linux_like.linux.gnu.Ioctl) :=
            M.run (M.alloc ((Integer.of_Z 21557) : u64.t)).
          
          Definition TIOCSIG
              : M.Val ltac:(libc.unix.linux_like.linux.gnu.Ioctl) :=
            M.run (M.alloc ((Integer.of_Z 1074025526) : u64.t)).
          
          Definition TIOCVHANGUP
              : M.Val ltac:(libc.unix.linux_like.linux.gnu.Ioctl) :=
            M.run (M.alloc ((Integer.of_Z 21559) : u64.t)).
          
          Definition TIOCGPKT
              : M.Val ltac:(libc.unix.linux_like.linux.gnu.Ioctl) :=
            M.run (M.alloc ((Integer.of_Z 2147767352) : u64.t)).
          
          Definition TIOCGPTLCK
              : M.Val ltac:(libc.unix.linux_like.linux.gnu.Ioctl) :=
            M.run (M.alloc ((Integer.of_Z 2147767353) : u64.t)).
          
          Definition TIOCGEXCL
              : M.Val ltac:(libc.unix.linux_like.linux.gnu.Ioctl) :=
            M.run (M.alloc ((Integer.of_Z 2147767360) : u64.t)).
          
          Definition TIOCGPTPEER
              : M.Val ltac:(libc.unix.linux_like.linux.gnu.Ioctl) :=
            M.run (M.alloc ((Integer.of_Z 21569) : u64.t)).
          
          Definition FIONCLEX
              : M.Val ltac:(libc.unix.linux_like.linux.gnu.Ioctl) :=
            M.run (M.alloc ((Integer.of_Z 21584) : u64.t)).
          
          Definition FIOCLEX
              : M.Val ltac:(libc.unix.linux_like.linux.gnu.Ioctl) :=
            M.run (M.alloc ((Integer.of_Z 21585) : u64.t)).
          
          Definition FIOASYNC
              : M.Val ltac:(libc.unix.linux_like.linux.gnu.Ioctl) :=
            M.run (M.alloc ((Integer.of_Z 21586) : u64.t)).
          
          Definition TIOCSERCONFIG
              : M.Val ltac:(libc.unix.linux_like.linux.gnu.Ioctl) :=
            M.run (M.alloc ((Integer.of_Z 21587) : u64.t)).
          
          Definition TIOCSERGWILD
              : M.Val ltac:(libc.unix.linux_like.linux.gnu.Ioctl) :=
            M.run (M.alloc ((Integer.of_Z 21588) : u64.t)).
          
          Definition TIOCSERSWILD
              : M.Val ltac:(libc.unix.linux_like.linux.gnu.Ioctl) :=
            M.run (M.alloc ((Integer.of_Z 21589) : u64.t)).
          
          Definition TIOCGLCKTRMIOS
              : M.Val ltac:(libc.unix.linux_like.linux.gnu.Ioctl) :=
            M.run (M.alloc ((Integer.of_Z 21590) : u64.t)).
          
          Definition TIOCSLCKTRMIOS
              : M.Val ltac:(libc.unix.linux_like.linux.gnu.Ioctl) :=
            M.run (M.alloc ((Integer.of_Z 21591) : u64.t)).
          
          Definition TIOCSERGSTRUCT
              : M.Val ltac:(libc.unix.linux_like.linux.gnu.Ioctl) :=
            M.run (M.alloc ((Integer.of_Z 21592) : u64.t)).
          
          Definition TIOCSERGETLSR
              : M.Val ltac:(libc.unix.linux_like.linux.gnu.Ioctl) :=
            M.run (M.alloc ((Integer.of_Z 21593) : u64.t)).
          
          Definition TIOCSERGETMULTI
              : M.Val ltac:(libc.unix.linux_like.linux.gnu.Ioctl) :=
            M.run (M.alloc ((Integer.of_Z 21594) : u64.t)).
          
          Definition TIOCSERSETMULTI
              : M.Val ltac:(libc.unix.linux_like.linux.gnu.Ioctl) :=
            M.run (M.alloc ((Integer.of_Z 21595) : u64.t)).
          
          Definition TIOCMIWAIT
              : M.Val ltac:(libc.unix.linux_like.linux.gnu.Ioctl) :=
            M.run (M.alloc ((Integer.of_Z 21596) : u64.t)).
          
          Definition TIOCGICOUNT
              : M.Val ltac:(libc.unix.linux_like.linux.gnu.Ioctl) :=
            M.run (M.alloc ((Integer.of_Z 21597) : u64.t)).
          
          Definition BLKIOMIN
              : M.Val ltac:(libc.unix.linux_like.linux.gnu.Ioctl) :=
            M.run (M.alloc ((Integer.of_Z 4728) : u64.t)).
          
          Definition BLKIOOPT
              : M.Val ltac:(libc.unix.linux_like.linux.gnu.Ioctl) :=
            M.run (M.alloc ((Integer.of_Z 4729) : u64.t)).
          
          Definition BLKSSZGET
              : M.Val ltac:(libc.unix.linux_like.linux.gnu.Ioctl) :=
            M.run (M.alloc ((Integer.of_Z 4712) : u64.t)).
          
          Definition BLKPBSZGET
              : M.Val ltac:(libc.unix.linux_like.linux.gnu.Ioctl) :=
            M.run (M.alloc ((Integer.of_Z 4731) : u64.t)).
          
          Definition FS_IOC_GETFLAGS
              : M.Val ltac:(libc.unix.linux_like.linux.gnu.Ioctl) :=
            M.run (M.alloc ((Integer.of_Z 2148034049) : u64.t)).
          
          Definition FS_IOC_SETFLAGS
              : M.Val ltac:(libc.unix.linux_like.linux.gnu.Ioctl) :=
            M.run (M.alloc ((Integer.of_Z 1074292226) : u64.t)).
          
          Definition FS_IOC_GETVERSION
              : M.Val ltac:(libc.unix.linux_like.linux.gnu.Ioctl) :=
            M.run (M.alloc ((Integer.of_Z 2148038145) : u64.t)).
          
          Definition FS_IOC_SETVERSION
              : M.Val ltac:(libc.unix.linux_like.linux.gnu.Ioctl) :=
            M.run (M.alloc ((Integer.of_Z 1074296322) : u64.t)).
          
          Definition FS_IOC32_GETFLAGS
              : M.Val ltac:(libc.unix.linux_like.linux.gnu.Ioctl) :=
            M.run (M.alloc ((Integer.of_Z 2147771905) : u64.t)).
          
          Definition FS_IOC32_SETFLAGS
              : M.Val ltac:(libc.unix.linux_like.linux.gnu.Ioctl) :=
            M.run (M.alloc ((Integer.of_Z 1074030082) : u64.t)).
          
          Definition FS_IOC32_GETVERSION
              : M.Val ltac:(libc.unix.linux_like.linux.gnu.Ioctl) :=
            M.run (M.alloc ((Integer.of_Z 2147776001) : u64.t)).
          
          Definition FS_IOC32_SETVERSION
              : M.Val ltac:(libc.unix.linux_like.linux.gnu.Ioctl) :=
            M.run (M.alloc ((Integer.of_Z 1074034178) : u64.t)).
          
          Definition FIOQSIZE
              : M.Val ltac:(libc.unix.linux_like.linux.gnu.Ioctl) :=
            M.run (M.alloc ((Integer.of_Z 21600) : u64.t)).
          
          Definition TIOCM_LE : M.Val ltac:(libc.unix.c_int) :=
            M.run (M.alloc ((Integer.of_Z 1) : i32.t)).
          
          Definition TIOCM_DTR : M.Val ltac:(libc.unix.c_int) :=
            M.run (M.alloc ((Integer.of_Z 2) : i32.t)).
          
          Definition TIOCM_RTS : M.Val ltac:(libc.unix.c_int) :=
            M.run (M.alloc ((Integer.of_Z 4) : i32.t)).
          
          Definition TIOCM_ST : M.Val ltac:(libc.unix.c_int) :=
            M.run (M.alloc ((Integer.of_Z 8) : i32.t)).
          
          Definition TIOCM_SR : M.Val ltac:(libc.unix.c_int) :=
            M.run (M.alloc ((Integer.of_Z 16) : i32.t)).
          
          Definition TIOCM_CTS : M.Val ltac:(libc.unix.c_int) :=
            M.run (M.alloc ((Integer.of_Z 32) : i32.t)).
          
          Definition TIOCM_CAR : M.Val ltac:(libc.unix.c_int) :=
            M.run (M.alloc ((Integer.of_Z 64) : i32.t)).
          
          Definition TIOCM_CD : M.Val ltac:(libc.unix.c_int) :=
            M.run (M.pure libc.unix.linux_like.linux.arch.generic.TIOCM_CAR).
          
          Definition TIOCM_RNG : M.Val ltac:(libc.unix.c_int) :=
            M.run (M.alloc ((Integer.of_Z 128) : i32.t)).
          
          Definition TIOCM_RI : M.Val ltac:(libc.unix.c_int) :=
            M.run (M.pure libc.unix.linux_like.linux.arch.generic.TIOCM_RNG).
          
          Definition TIOCM_DSR : M.Val ltac:(libc.unix.c_int) :=
            M.run (M.alloc ((Integer.of_Z 256) : i32.t)).
          
          Definition BOTHER : M.Val ltac:(libc.unix.linux_like.speed_t) :=
            M.run (M.alloc ((Integer.of_Z 4096) : u32.t)).
          
          Definition IBSHIFT : M.Val ltac:(libc.unix.linux_like.tcflag_t) :=
            M.run (M.alloc ((Integer.of_Z 16) : u32.t)).
          
          Definition RLIMIT_CPU
              :
                M.Val
                  ltac:(libc.unix.linux_like.linux.gnu.__rlimit_resource_t) :=
            M.run (M.alloc ((Integer.of_Z 0) : u32.t)).
          
          Definition RLIMIT_FSIZE
              :
                M.Val
                  ltac:(libc.unix.linux_like.linux.gnu.__rlimit_resource_t) :=
            M.run (M.alloc ((Integer.of_Z 1) : u32.t)).
          
          Definition RLIMIT_DATA
              :
                M.Val
                  ltac:(libc.unix.linux_like.linux.gnu.__rlimit_resource_t) :=
            M.run (M.alloc ((Integer.of_Z 2) : u32.t)).
          
          Definition RLIMIT_STACK
              :
                M.Val
                  ltac:(libc.unix.linux_like.linux.gnu.__rlimit_resource_t) :=
            M.run (M.alloc ((Integer.of_Z 3) : u32.t)).
          
          Definition RLIMIT_CORE
              :
                M.Val
                  ltac:(libc.unix.linux_like.linux.gnu.__rlimit_resource_t) :=
            M.run (M.alloc ((Integer.of_Z 4) : u32.t)).
          
          Definition RLIMIT_RSS
              :
                M.Val
                  ltac:(libc.unix.linux_like.linux.gnu.__rlimit_resource_t) :=
            M.run (M.alloc ((Integer.of_Z 5) : u32.t)).
          
          Definition RLIMIT_NPROC
              :
                M.Val
                  ltac:(libc.unix.linux_like.linux.gnu.__rlimit_resource_t) :=
            M.run (M.alloc ((Integer.of_Z 6) : u32.t)).
          
          Definition RLIMIT_NOFILE
              :
                M.Val
                  ltac:(libc.unix.linux_like.linux.gnu.__rlimit_resource_t) :=
            M.run (M.alloc ((Integer.of_Z 7) : u32.t)).
          
          Definition RLIMIT_MEMLOCK
              :
                M.Val
                  ltac:(libc.unix.linux_like.linux.gnu.__rlimit_resource_t) :=
            M.run (M.alloc ((Integer.of_Z 8) : u32.t)).
          
          Definition RLIMIT_AS
              :
                M.Val
                  ltac:(libc.unix.linux_like.linux.gnu.__rlimit_resource_t) :=
            M.run (M.alloc ((Integer.of_Z 9) : u32.t)).
          
          Definition RLIMIT_LOCKS
              :
                M.Val
                  ltac:(libc.unix.linux_like.linux.gnu.__rlimit_resource_t) :=
            M.run (M.alloc ((Integer.of_Z 10) : u32.t)).
          
          Definition RLIMIT_SIGPENDING
              :
                M.Val
                  ltac:(libc.unix.linux_like.linux.gnu.__rlimit_resource_t) :=
            M.run (M.alloc ((Integer.of_Z 11) : u32.t)).
          
          Definition RLIMIT_MSGQUEUE
              :
                M.Val
                  ltac:(libc.unix.linux_like.linux.gnu.__rlimit_resource_t) :=
            M.run (M.alloc ((Integer.of_Z 12) : u32.t)).
          
          Definition RLIMIT_NICE
              :
                M.Val
                  ltac:(libc.unix.linux_like.linux.gnu.__rlimit_resource_t) :=
            M.run (M.alloc ((Integer.of_Z 13) : u32.t)).
          
          Definition RLIMIT_RTPRIO
              :
                M.Val
                  ltac:(libc.unix.linux_like.linux.gnu.__rlimit_resource_t) :=
            M.run (M.alloc ((Integer.of_Z 14) : u32.t)).
          
          Definition RLIMIT_RTTIME
              :
                M.Val
                  ltac:(libc.unix.linux_like.linux.gnu.__rlimit_resource_t) :=
            M.run (M.alloc ((Integer.of_Z 15) : u32.t)).
          
          Definition RLIMIT_NLIMITS
              :
                M.Val
                  ltac:(libc.unix.linux_like.linux.gnu.__rlimit_resource_t) :=
            M.run (M.pure libc.unix.linux_like.linux.arch.generic.RLIM_NLIMITS).
          
          Definition RLIM_NLIMITS
              :
                M.Val
                  ltac:(libc.unix.linux_like.linux.gnu.__rlimit_resource_t) :=
            M.run (M.alloc ((Integer.of_Z 16) : u32.t)).
          
          Definition RLIM_INFINITY
              : M.Val ltac:(libc.unix.linux_like.linux.gnu.b64.rlim_t) :=
            M.run (M.alloc (UnOp.not ((Integer.of_Z 0) : u64.t))).
        End generic.
      End arch.
      
      Module align.
        
      End align.
      
      Module  pthread_mutexattr_t.
      Section pthread_mutexattr_t.
        Record t : Set := {
          size : array u8.t;
        }.
        
        Definition Get_size :=
          Ref.map
            (fun α => Some α.(size))
            (fun β α => Some (α <| size := β |>)).
      End pthread_mutexattr_t.
      End pthread_mutexattr_t.
      
      Module  Impl_core_marker_Copy_for_libc_unix_linux_like_linux_pthread_mutexattr_t_t.
      Section Impl_core_marker_Copy_for_libc_unix_linux_like_linux_pthread_mutexattr_t_t.
        Definition Self : Set :=
          libc.unix.linux_like.linux.pthread_mutexattr_t.t.
        
        Global Instance ℐ : core.marker.Copy.Trait Self := {
        }.
      End Impl_core_marker_Copy_for_libc_unix_linux_like_linux_pthread_mutexattr_t_t.
      End Impl_core_marker_Copy_for_libc_unix_linux_like_linux_pthread_mutexattr_t_t.
      
      Module  Impl_core_clone_Clone_for_libc_unix_linux_like_linux_pthread_mutexattr_t_t.
      Section Impl_core_clone_Clone_for_libc_unix_linux_like_linux_pthread_mutexattr_t_t.
        Definition Self : Set :=
          libc.unix.linux_like.linux.pthread_mutexattr_t.t.
        
        (*
                    fn clone(&self) -> $i { *self }
        *)
        Definition clone
            (self : ref Self)
            : M libc.unix.linux_like.linux.pthread_mutexattr_t.t :=
          let* self := M.alloc self in
          let* α0 : ref libc.unix.linux_like.linux.pthread_mutexattr_t.t :=
            M.read self in
          M.read (deref α0).
        
        Global Instance AssociatedFunction_clone :
          Notations.DoubleColon Self "clone" := {
          Notations.double_colon := clone;
        }.
        
        Global Instance ℐ : core.clone.Clone.Required.Trait Self := {
          core.clone.Clone.clone := clone;
          core.clone.Clone.clone_from := Datatypes.None;
        }.
      End Impl_core_clone_Clone_for_libc_unix_linux_like_linux_pthread_mutexattr_t_t.
      End Impl_core_clone_Clone_for_libc_unix_linux_like_linux_pthread_mutexattr_t_t.
      
      Module  pthread_rwlockattr_t.
      Section pthread_rwlockattr_t.
        Record t : Set := {
          size : array u8.t;
        }.
        
        Definition Get_size :=
          Ref.map
            (fun α => Some α.(size))
            (fun β α => Some (α <| size := β |>)).
      End pthread_rwlockattr_t.
      End pthread_rwlockattr_t.
      
      Module  Impl_core_marker_Copy_for_libc_unix_linux_like_linux_pthread_rwlockattr_t_t.
      Section Impl_core_marker_Copy_for_libc_unix_linux_like_linux_pthread_rwlockattr_t_t.
        Definition Self : Set :=
          libc.unix.linux_like.linux.pthread_rwlockattr_t.t.
        
        Global Instance ℐ : core.marker.Copy.Trait Self := {
        }.
      End Impl_core_marker_Copy_for_libc_unix_linux_like_linux_pthread_rwlockattr_t_t.
      End Impl_core_marker_Copy_for_libc_unix_linux_like_linux_pthread_rwlockattr_t_t.
      
      Module  Impl_core_clone_Clone_for_libc_unix_linux_like_linux_pthread_rwlockattr_t_t.
      Section Impl_core_clone_Clone_for_libc_unix_linux_like_linux_pthread_rwlockattr_t_t.
        Definition Self : Set :=
          libc.unix.linux_like.linux.pthread_rwlockattr_t.t.
        
        (*
                    fn clone(&self) -> $i { *self }
        *)
        Definition clone
            (self : ref Self)
            : M libc.unix.linux_like.linux.pthread_rwlockattr_t.t :=
          let* self := M.alloc self in
          let* α0 : ref libc.unix.linux_like.linux.pthread_rwlockattr_t.t :=
            M.read self in
          M.read (deref α0).
        
        Global Instance AssociatedFunction_clone :
          Notations.DoubleColon Self "clone" := {
          Notations.double_colon := clone;
        }.
        
        Global Instance ℐ : core.clone.Clone.Required.Trait Self := {
          core.clone.Clone.clone := clone;
          core.clone.Clone.clone_from := Datatypes.None;
        }.
      End Impl_core_clone_Clone_for_libc_unix_linux_like_linux_pthread_rwlockattr_t_t.
      End Impl_core_clone_Clone_for_libc_unix_linux_like_linux_pthread_rwlockattr_t_t.
      
      Module  pthread_condattr_t.
      Section pthread_condattr_t.
        Record t : Set := {
          size : array u8.t;
        }.
        
        Definition Get_size :=
          Ref.map
            (fun α => Some α.(size))
            (fun β α => Some (α <| size := β |>)).
      End pthread_condattr_t.
      End pthread_condattr_t.
      
      Module  Impl_core_marker_Copy_for_libc_unix_linux_like_linux_pthread_condattr_t_t.
      Section Impl_core_marker_Copy_for_libc_unix_linux_like_linux_pthread_condattr_t_t.
        Definition Self : Set :=
          libc.unix.linux_like.linux.pthread_condattr_t.t.
        
        Global Instance ℐ : core.marker.Copy.Trait Self := {
        }.
      End Impl_core_marker_Copy_for_libc_unix_linux_like_linux_pthread_condattr_t_t.
      End Impl_core_marker_Copy_for_libc_unix_linux_like_linux_pthread_condattr_t_t.
      
      Module  Impl_core_clone_Clone_for_libc_unix_linux_like_linux_pthread_condattr_t_t.
      Section Impl_core_clone_Clone_for_libc_unix_linux_like_linux_pthread_condattr_t_t.
        Definition Self : Set :=
          libc.unix.linux_like.linux.pthread_condattr_t.t.
        
        (*
                    fn clone(&self) -> $i { *self }
        *)
        Definition clone
            (self : ref Self)
            : M libc.unix.linux_like.linux.pthread_condattr_t.t :=
          let* self := M.alloc self in
          let* α0 : ref libc.unix.linux_like.linux.pthread_condattr_t.t :=
            M.read self in
          M.read (deref α0).
        
        Global Instance AssociatedFunction_clone :
          Notations.DoubleColon Self "clone" := {
          Notations.double_colon := clone;
        }.
        
        Global Instance ℐ : core.clone.Clone.Required.Trait Self := {
          core.clone.Clone.clone := clone;
          core.clone.Clone.clone_from := Datatypes.None;
        }.
      End Impl_core_clone_Clone_for_libc_unix_linux_like_linux_pthread_condattr_t_t.
      End Impl_core_clone_Clone_for_libc_unix_linux_like_linux_pthread_condattr_t_t.
      
      Module  pthread_barrierattr_t.
      Section pthread_barrierattr_t.
        Record t : Set := {
          size : array u8.t;
        }.
        
        Definition Get_size :=
          Ref.map
            (fun α => Some α.(size))
            (fun β α => Some (α <| size := β |>)).
      End pthread_barrierattr_t.
      End pthread_barrierattr_t.
      
      Module  Impl_core_marker_Copy_for_libc_unix_linux_like_linux_pthread_barrierattr_t_t.
      Section Impl_core_marker_Copy_for_libc_unix_linux_like_linux_pthread_barrierattr_t_t.
        Definition Self : Set :=
          libc.unix.linux_like.linux.pthread_barrierattr_t.t.
        
        Global Instance ℐ : core.marker.Copy.Trait Self := {
        }.
      End Impl_core_marker_Copy_for_libc_unix_linux_like_linux_pthread_barrierattr_t_t.
      End Impl_core_marker_Copy_for_libc_unix_linux_like_linux_pthread_barrierattr_t_t.
      
      Module  Impl_core_clone_Clone_for_libc_unix_linux_like_linux_pthread_barrierattr_t_t.
      Section Impl_core_clone_Clone_for_libc_unix_linux_like_linux_pthread_barrierattr_t_t.
        Definition Self : Set :=
          libc.unix.linux_like.linux.pthread_barrierattr_t.t.
        
        (*
                    fn clone(&self) -> $i { *self }
        *)
        Definition clone
            (self : ref Self)
            : M libc.unix.linux_like.linux.pthread_barrierattr_t.t :=
          let* self := M.alloc self in
          let* α0 : ref libc.unix.linux_like.linux.pthread_barrierattr_t.t :=
            M.read self in
          M.read (deref α0).
        
        Global Instance AssociatedFunction_clone :
          Notations.DoubleColon Self "clone" := {
          Notations.double_colon := clone;
        }.
        
        Global Instance ℐ : core.clone.Clone.Required.Trait Self := {
          core.clone.Clone.clone := clone;
          core.clone.Clone.clone_from := Datatypes.None;
        }.
      End Impl_core_clone_Clone_for_libc_unix_linux_like_linux_pthread_barrierattr_t_t.
      End Impl_core_clone_Clone_for_libc_unix_linux_like_linux_pthread_barrierattr_t_t.
      
      Module  fanotify_event_metadata.
      Section fanotify_event_metadata.
        Record t : Set := {
          event_len : ltac:(libc.unix.linux_like.linux.__u32);
          vers : ltac:(libc.unix.linux_like.linux.__u8);
          reserved : ltac:(libc.unix.linux_like.linux.__u8);
          metadata_len : ltac:(libc.unix.linux_like.linux.__u16);
          mask : ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.__u64);
          fd : ltac:(libc.unix.c_int);
          pid : ltac:(libc.unix.c_int);
        }.
        
        Definition Get_event_len :=
          Ref.map
            (fun α => Some α.(event_len))
            (fun β α => Some (α <| event_len := β |>)).
        Definition Get_vers :=
          Ref.map
            (fun α => Some α.(vers))
            (fun β α => Some (α <| vers := β |>)).
        Definition Get_reserved :=
          Ref.map
            (fun α => Some α.(reserved))
            (fun β α => Some (α <| reserved := β |>)).
        Definition Get_metadata_len :=
          Ref.map
            (fun α => Some α.(metadata_len))
            (fun β α => Some (α <| metadata_len := β |>)).
        Definition Get_mask :=
          Ref.map
            (fun α => Some α.(mask))
            (fun β α => Some (α <| mask := β |>)).
        Definition Get_fd :=
          Ref.map (fun α => Some α.(fd)) (fun β α => Some (α <| fd := β |>)).
        Definition Get_pid :=
          Ref.map (fun α => Some α.(pid)) (fun β α => Some (α <| pid := β |>)).
      End fanotify_event_metadata.
      End fanotify_event_metadata.
      
      Module  Impl_core_marker_Copy_for_libc_unix_linux_like_linux_fanotify_event_metadata_t.
      Section Impl_core_marker_Copy_for_libc_unix_linux_like_linux_fanotify_event_metadata_t.
        Definition Self : Set :=
          libc.unix.linux_like.linux.fanotify_event_metadata.t.
        
        Global Instance ℐ : core.marker.Copy.Trait Self := {
        }.
      End Impl_core_marker_Copy_for_libc_unix_linux_like_linux_fanotify_event_metadata_t.
      End Impl_core_marker_Copy_for_libc_unix_linux_like_linux_fanotify_event_metadata_t.
      
      Module  Impl_core_clone_Clone_for_libc_unix_linux_like_linux_fanotify_event_metadata_t.
      Section Impl_core_clone_Clone_for_libc_unix_linux_like_linux_fanotify_event_metadata_t.
        Definition Self : Set :=
          libc.unix.linux_like.linux.fanotify_event_metadata.t.
        
        (*
                    fn clone(&self) -> $i { *self }
        *)
        Definition clone
            (self : ref Self)
            : M libc.unix.linux_like.linux.fanotify_event_metadata.t :=
          let* self := M.alloc self in
          let* α0 : ref libc.unix.linux_like.linux.fanotify_event_metadata.t :=
            M.read self in
          M.read (deref α0).
        
        Global Instance AssociatedFunction_clone :
          Notations.DoubleColon Self "clone" := {
          Notations.double_colon := clone;
        }.
        
        Global Instance ℐ : core.clone.Clone.Required.Trait Self := {
          core.clone.Clone.clone := clone;
          core.clone.Clone.clone_from := Datatypes.None;
        }.
      End Impl_core_clone_Clone_for_libc_unix_linux_like_linux_fanotify_event_metadata_t.
      End Impl_core_clone_Clone_for_libc_unix_linux_like_linux_fanotify_event_metadata_t.
      
      Module  pthread_cond_t.
      Section pthread_cond_t.
        Record t : Set := {
          size : array u8.t;
        }.
        
        Definition Get_size :=
          Ref.map
            (fun α => Some α.(size))
            (fun β α => Some (α <| size := β |>)).
      End pthread_cond_t.
      End pthread_cond_t.
      
      Module  Impl_core_marker_Copy_for_libc_unix_linux_like_linux_pthread_cond_t_t.
      Section Impl_core_marker_Copy_for_libc_unix_linux_like_linux_pthread_cond_t_t.
        Definition Self : Set := libc.unix.linux_like.linux.pthread_cond_t.t.
        
        Global Instance ℐ : core.marker.Copy.Trait Self := {
        }.
      End Impl_core_marker_Copy_for_libc_unix_linux_like_linux_pthread_cond_t_t.
      End Impl_core_marker_Copy_for_libc_unix_linux_like_linux_pthread_cond_t_t.
      
      Module  Impl_core_clone_Clone_for_libc_unix_linux_like_linux_pthread_cond_t_t.
      Section Impl_core_clone_Clone_for_libc_unix_linux_like_linux_pthread_cond_t_t.
        Definition Self : Set := libc.unix.linux_like.linux.pthread_cond_t.t.
        
        (*
                    fn clone(&self) -> $i { *self }
        *)
        Definition clone
            (self : ref Self)
            : M libc.unix.linux_like.linux.pthread_cond_t.t :=
          let* self := M.alloc self in
          let* α0 : ref libc.unix.linux_like.linux.pthread_cond_t.t :=
            M.read self in
          M.read (deref α0).
        
        Global Instance AssociatedFunction_clone :
          Notations.DoubleColon Self "clone" := {
          Notations.double_colon := clone;
        }.
        
        Global Instance ℐ : core.clone.Clone.Required.Trait Self := {
          core.clone.Clone.clone := clone;
          core.clone.Clone.clone_from := Datatypes.None;
        }.
      End Impl_core_clone_Clone_for_libc_unix_linux_like_linux_pthread_cond_t_t.
      End Impl_core_clone_Clone_for_libc_unix_linux_like_linux_pthread_cond_t_t.
      
      Module  pthread_mutex_t.
      Section pthread_mutex_t.
        Record t : Set := {
          size : array u8.t;
        }.
        
        Definition Get_size :=
          Ref.map
            (fun α => Some α.(size))
            (fun β α => Some (α <| size := β |>)).
      End pthread_mutex_t.
      End pthread_mutex_t.
      
      Module  Impl_core_marker_Copy_for_libc_unix_linux_like_linux_pthread_mutex_t_t.
      Section Impl_core_marker_Copy_for_libc_unix_linux_like_linux_pthread_mutex_t_t.
        Definition Self : Set := libc.unix.linux_like.linux.pthread_mutex_t.t.
        
        Global Instance ℐ : core.marker.Copy.Trait Self := {
        }.
      End Impl_core_marker_Copy_for_libc_unix_linux_like_linux_pthread_mutex_t_t.
      End Impl_core_marker_Copy_for_libc_unix_linux_like_linux_pthread_mutex_t_t.
      
      Module  Impl_core_clone_Clone_for_libc_unix_linux_like_linux_pthread_mutex_t_t.
      Section Impl_core_clone_Clone_for_libc_unix_linux_like_linux_pthread_mutex_t_t.
        Definition Self : Set := libc.unix.linux_like.linux.pthread_mutex_t.t.
        
        (*
                    fn clone(&self) -> $i { *self }
        *)
        Definition clone
            (self : ref Self)
            : M libc.unix.linux_like.linux.pthread_mutex_t.t :=
          let* self := M.alloc self in
          let* α0 : ref libc.unix.linux_like.linux.pthread_mutex_t.t :=
            M.read self in
          M.read (deref α0).
        
        Global Instance AssociatedFunction_clone :
          Notations.DoubleColon Self "clone" := {
          Notations.double_colon := clone;
        }.
        
        Global Instance ℐ : core.clone.Clone.Required.Trait Self := {
          core.clone.Clone.clone := clone;
          core.clone.Clone.clone_from := Datatypes.None;
        }.
      End Impl_core_clone_Clone_for_libc_unix_linux_like_linux_pthread_mutex_t_t.
      End Impl_core_clone_Clone_for_libc_unix_linux_like_linux_pthread_mutex_t_t.
      
      Module  pthread_rwlock_t.
      Section pthread_rwlock_t.
        Record t : Set := {
          size : array u8.t;
        }.
        
        Definition Get_size :=
          Ref.map
            (fun α => Some α.(size))
            (fun β α => Some (α <| size := β |>)).
      End pthread_rwlock_t.
      End pthread_rwlock_t.
      
      Module  Impl_core_marker_Copy_for_libc_unix_linux_like_linux_pthread_rwlock_t_t.
      Section Impl_core_marker_Copy_for_libc_unix_linux_like_linux_pthread_rwlock_t_t.
        Definition Self : Set := libc.unix.linux_like.linux.pthread_rwlock_t.t.
        
        Global Instance ℐ : core.marker.Copy.Trait Self := {
        }.
      End Impl_core_marker_Copy_for_libc_unix_linux_like_linux_pthread_rwlock_t_t.
      End Impl_core_marker_Copy_for_libc_unix_linux_like_linux_pthread_rwlock_t_t.
      
      Module  Impl_core_clone_Clone_for_libc_unix_linux_like_linux_pthread_rwlock_t_t.
      Section Impl_core_clone_Clone_for_libc_unix_linux_like_linux_pthread_rwlock_t_t.
        Definition Self : Set := libc.unix.linux_like.linux.pthread_rwlock_t.t.
        
        (*
                    fn clone(&self) -> $i { *self }
        *)
        Definition clone
            (self : ref Self)
            : M libc.unix.linux_like.linux.pthread_rwlock_t.t :=
          let* self := M.alloc self in
          let* α0 : ref libc.unix.linux_like.linux.pthread_rwlock_t.t :=
            M.read self in
          M.read (deref α0).
        
        Global Instance AssociatedFunction_clone :
          Notations.DoubleColon Self "clone" := {
          Notations.double_colon := clone;
        }.
        
        Global Instance ℐ : core.clone.Clone.Required.Trait Self := {
          core.clone.Clone.clone := clone;
          core.clone.Clone.clone_from := Datatypes.None;
        }.
      End Impl_core_clone_Clone_for_libc_unix_linux_like_linux_pthread_rwlock_t_t.
      End Impl_core_clone_Clone_for_libc_unix_linux_like_linux_pthread_rwlock_t_t.
      
      Module  pthread_barrier_t.
      Section pthread_barrier_t.
        Record t : Set := {
          size : array u8.t;
        }.
        
        Definition Get_size :=
          Ref.map
            (fun α => Some α.(size))
            (fun β α => Some (α <| size := β |>)).
      End pthread_barrier_t.
      End pthread_barrier_t.
      
      Module  Impl_core_marker_Copy_for_libc_unix_linux_like_linux_pthread_barrier_t_t.
      Section Impl_core_marker_Copy_for_libc_unix_linux_like_linux_pthread_barrier_t_t.
        Definition Self : Set := libc.unix.linux_like.linux.pthread_barrier_t.t.
        
        Global Instance ℐ : core.marker.Copy.Trait Self := {
        }.
      End Impl_core_marker_Copy_for_libc_unix_linux_like_linux_pthread_barrier_t_t.
      End Impl_core_marker_Copy_for_libc_unix_linux_like_linux_pthread_barrier_t_t.
      
      Module  Impl_core_clone_Clone_for_libc_unix_linux_like_linux_pthread_barrier_t_t.
      Section Impl_core_clone_Clone_for_libc_unix_linux_like_linux_pthread_barrier_t_t.
        Definition Self : Set := libc.unix.linux_like.linux.pthread_barrier_t.t.
        
        (*
                    fn clone(&self) -> $i { *self }
        *)
        Definition clone
            (self : ref Self)
            : M libc.unix.linux_like.linux.pthread_barrier_t.t :=
          let* self := M.alloc self in
          let* α0 : ref libc.unix.linux_like.linux.pthread_barrier_t.t :=
            M.read self in
          M.read (deref α0).
        
        Global Instance AssociatedFunction_clone :
          Notations.DoubleColon Self "clone" := {
          Notations.double_colon := clone;
        }.
        
        Global Instance ℐ : core.clone.Clone.Required.Trait Self := {
          core.clone.Clone.clone := clone;
          core.clone.Clone.clone_from := Datatypes.None;
        }.
      End Impl_core_clone_Clone_for_libc_unix_linux_like_linux_pthread_barrier_t_t.
      End Impl_core_clone_Clone_for_libc_unix_linux_like_linux_pthread_barrier_t_t.
      
      Module  can_frame.
      Section can_frame.
        Record t : Set := {
          can_id : ltac:(libc.unix.linux_like.linux.canid_t);
          can_dlc : u8.t;
          __pad : u8.t;
          __res0 : u8.t;
          __res1 : u8.t;
          data : array u8.t;
        }.
        
        Definition Get_can_id :=
          Ref.map
            (fun α => Some α.(can_id))
            (fun β α => Some (α <| can_id := β |>)).
        Definition Get_can_dlc :=
          Ref.map
            (fun α => Some α.(can_dlc))
            (fun β α => Some (α <| can_dlc := β |>)).
        Definition Get___pad :=
          Ref.map
            (fun α => Some α.(__pad))
            (fun β α => Some (α <| __pad := β |>)).
        Definition Get___res0 :=
          Ref.map
            (fun α => Some α.(__res0))
            (fun β α => Some (α <| __res0 := β |>)).
        Definition Get___res1 :=
          Ref.map
            (fun α => Some α.(__res1))
            (fun β α => Some (α <| __res1 := β |>)).
        Definition Get_data :=
          Ref.map
            (fun α => Some α.(data))
            (fun β α => Some (α <| data := β |>)).
      End can_frame.
      End can_frame.
      
      Module  Impl_core_marker_Copy_for_libc_unix_linux_like_linux_can_frame_t.
      Section Impl_core_marker_Copy_for_libc_unix_linux_like_linux_can_frame_t.
        Definition Self : Set := libc.unix.linux_like.linux.can_frame.t.
        
        Global Instance ℐ : core.marker.Copy.Trait Self := {
        }.
      End Impl_core_marker_Copy_for_libc_unix_linux_like_linux_can_frame_t.
      End Impl_core_marker_Copy_for_libc_unix_linux_like_linux_can_frame_t.
      
      Module  Impl_core_clone_Clone_for_libc_unix_linux_like_linux_can_frame_t.
      Section Impl_core_clone_Clone_for_libc_unix_linux_like_linux_can_frame_t.
        Definition Self : Set := libc.unix.linux_like.linux.can_frame.t.
        
        (*
                    fn clone(&self) -> $i { *self }
        *)
        Definition clone
            (self : ref Self)
            : M libc.unix.linux_like.linux.can_frame.t :=
          let* self := M.alloc self in
          let* α0 : ref libc.unix.linux_like.linux.can_frame.t := M.read self in
          M.read (deref α0).
        
        Global Instance AssociatedFunction_clone :
          Notations.DoubleColon Self "clone" := {
          Notations.double_colon := clone;
        }.
        
        Global Instance ℐ : core.clone.Clone.Required.Trait Self := {
          core.clone.Clone.clone := clone;
          core.clone.Clone.clone_from := Datatypes.None;
        }.
      End Impl_core_clone_Clone_for_libc_unix_linux_like_linux_can_frame_t.
      End Impl_core_clone_Clone_for_libc_unix_linux_like_linux_can_frame_t.
      
      Module  canfd_frame.
      Section canfd_frame.
        Record t : Set := {
          can_id : ltac:(libc.unix.linux_like.linux.canid_t);
          len : u8.t;
          flags : u8.t;
          __res0 : u8.t;
          __res1 : u8.t;
          data : array u8.t;
        }.
        
        Definition Get_can_id :=
          Ref.map
            (fun α => Some α.(can_id))
            (fun β α => Some (α <| can_id := β |>)).
        Definition Get_len :=
          Ref.map (fun α => Some α.(len)) (fun β α => Some (α <| len := β |>)).
        Definition Get_flags :=
          Ref.map
            (fun α => Some α.(flags))
            (fun β α => Some (α <| flags := β |>)).
        Definition Get___res0 :=
          Ref.map
            (fun α => Some α.(__res0))
            (fun β α => Some (α <| __res0 := β |>)).
        Definition Get___res1 :=
          Ref.map
            (fun α => Some α.(__res1))
            (fun β α => Some (α <| __res1 := β |>)).
        Definition Get_data :=
          Ref.map
            (fun α => Some α.(data))
            (fun β α => Some (α <| data := β |>)).
      End canfd_frame.
      End canfd_frame.
      
      Module  Impl_core_marker_Copy_for_libc_unix_linux_like_linux_canfd_frame_t.
      Section Impl_core_marker_Copy_for_libc_unix_linux_like_linux_canfd_frame_t.
        Definition Self : Set := libc.unix.linux_like.linux.canfd_frame.t.
        
        Global Instance ℐ : core.marker.Copy.Trait Self := {
        }.
      End Impl_core_marker_Copy_for_libc_unix_linux_like_linux_canfd_frame_t.
      End Impl_core_marker_Copy_for_libc_unix_linux_like_linux_canfd_frame_t.
      
      Module  Impl_core_clone_Clone_for_libc_unix_linux_like_linux_canfd_frame_t.
      Section Impl_core_clone_Clone_for_libc_unix_linux_like_linux_canfd_frame_t.
        Definition Self : Set := libc.unix.linux_like.linux.canfd_frame.t.
        
        (*
                    fn clone(&self) -> $i { *self }
        *)
        Definition clone
            (self : ref Self)
            : M libc.unix.linux_like.linux.canfd_frame.t :=
          let* self := M.alloc self in
          let* α0 : ref libc.unix.linux_like.linux.canfd_frame.t :=
            M.read self in
          M.read (deref α0).
        
        Global Instance AssociatedFunction_clone :
          Notations.DoubleColon Self "clone" := {
          Notations.double_colon := clone;
        }.
        
        Global Instance ℐ : core.clone.Clone.Required.Trait Self := {
          core.clone.Clone.clone := clone;
          core.clone.Clone.clone_from := Datatypes.None;
        }.
      End Impl_core_clone_Clone_for_libc_unix_linux_like_linux_canfd_frame_t.
      End Impl_core_clone_Clone_for_libc_unix_linux_like_linux_canfd_frame_t.
      
      Module  canxl_frame.
      Section canxl_frame.
        Record t : Set := {
          prio : ltac:(libc.unix.linux_like.linux.canid_t);
          flags : u8.t;
          sdt : u8.t;
          len : u16.t;
          af : u32.t;
          data : array u8.t;
        }.
        
        Definition Get_prio :=
          Ref.map
            (fun α => Some α.(prio))
            (fun β α => Some (α <| prio := β |>)).
        Definition Get_flags :=
          Ref.map
            (fun α => Some α.(flags))
            (fun β α => Some (α <| flags := β |>)).
        Definition Get_sdt :=
          Ref.map (fun α => Some α.(sdt)) (fun β α => Some (α <| sdt := β |>)).
        Definition Get_len :=
          Ref.map (fun α => Some α.(len)) (fun β α => Some (α <| len := β |>)).
        Definition Get_af :=
          Ref.map (fun α => Some α.(af)) (fun β α => Some (α <| af := β |>)).
        Definition Get_data :=
          Ref.map
            (fun α => Some α.(data))
            (fun β α => Some (α <| data := β |>)).
      End canxl_frame.
      End canxl_frame.
      
      Module  Impl_core_marker_Copy_for_libc_unix_linux_like_linux_canxl_frame_t.
      Section Impl_core_marker_Copy_for_libc_unix_linux_like_linux_canxl_frame_t.
        Definition Self : Set := libc.unix.linux_like.linux.canxl_frame.t.
        
        Global Instance ℐ : core.marker.Copy.Trait Self := {
        }.
      End Impl_core_marker_Copy_for_libc_unix_linux_like_linux_canxl_frame_t.
      End Impl_core_marker_Copy_for_libc_unix_linux_like_linux_canxl_frame_t.
      
      Module  Impl_core_clone_Clone_for_libc_unix_linux_like_linux_canxl_frame_t.
      Section Impl_core_clone_Clone_for_libc_unix_linux_like_linux_canxl_frame_t.
        Definition Self : Set := libc.unix.linux_like.linux.canxl_frame.t.
        
        (*
                    fn clone(&self) -> $i { *self }
        *)
        Definition clone
            (self : ref Self)
            : M libc.unix.linux_like.linux.canxl_frame.t :=
          let* self := M.alloc self in
          let* α0 : ref libc.unix.linux_like.linux.canxl_frame.t :=
            M.read self in
          M.read (deref α0).
        
        Global Instance AssociatedFunction_clone :
          Notations.DoubleColon Self "clone" := {
          Notations.double_colon := clone;
        }.
        
        Global Instance ℐ : core.clone.Clone.Required.Trait Self := {
          core.clone.Clone.clone := clone;
          core.clone.Clone.clone_from := Datatypes.None;
        }.
      End Impl_core_clone_Clone_for_libc_unix_linux_like_linux_canxl_frame_t.
      End Impl_core_clone_Clone_for_libc_unix_linux_like_linux_canxl_frame_t.
      
      Module non_exhaustive.
        Module  open_how.
        Section open_how.
          Record t : Set := {
            flags : ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.__u64);
            mode : ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.__u64);
            resolve : ltac:(libc.unix.linux_like.linux.gnu.b64.x86_64.__u64);
          }.
          
          Definition Get_flags :=
            Ref.map
              (fun α => Some α.(flags))
              (fun β α => Some (α <| flags := β |>)).
          Definition Get_mode :=
            Ref.map
              (fun α => Some α.(mode))
              (fun β α => Some (α <| mode := β |>)).
          Definition Get_resolve :=
            Ref.map
              (fun α => Some α.(resolve))
              (fun β α => Some (α <| resolve := β |>)).
        End open_how.
        End open_how.
        
        Module  Impl_core_marker_Copy_for_libc_unix_linux_like_linux_non_exhaustive_open_how_t.
        Section Impl_core_marker_Copy_for_libc_unix_linux_like_linux_non_exhaustive_open_how_t.
          Definition Self : Set :=
            libc.unix.linux_like.linux.non_exhaustive.open_how.t.
          
          Global Instance ℐ : core.marker.Copy.Trait Self := {
          }.
        End Impl_core_marker_Copy_for_libc_unix_linux_like_linux_non_exhaustive_open_how_t.
        End Impl_core_marker_Copy_for_libc_unix_linux_like_linux_non_exhaustive_open_how_t.
        
        Module  Impl_core_clone_Clone_for_libc_unix_linux_like_linux_non_exhaustive_open_how_t.
        Section Impl_core_clone_Clone_for_libc_unix_linux_like_linux_non_exhaustive_open_how_t.
          Definition Self : Set :=
            libc.unix.linux_like.linux.non_exhaustive.open_how.t.
          
          (*
                      fn clone(&self) -> $i { *self }
          *)
          Definition clone
              (self : ref Self)
              : M libc.unix.linux_like.linux.non_exhaustive.open_how.t :=
            let* self := M.alloc self in
            let* α0 :
                ref libc.unix.linux_like.linux.non_exhaustive.open_how.t :=
              M.read self in
            M.read (deref α0).
          
          Global Instance AssociatedFunction_clone :
            Notations.DoubleColon Self "clone" := {
            Notations.double_colon := clone;
          }.
          
          Global Instance ℐ : core.clone.Clone.Required.Trait Self := {
            core.clone.Clone.clone := clone;
            core.clone.Clone.clone_from := Datatypes.None;
          }.
        End Impl_core_clone_Clone_for_libc_unix_linux_like_linux_non_exhaustive_open_how_t.
        End Impl_core_clone_Clone_for_libc_unix_linux_like_linux_non_exhaustive_open_how_t.
      End non_exhaustive.
    End linux.
  End linux_like.
  
  Module align.
    Module  in6_addr.
    Section in6_addr.
      Record t : Set := {
        s6_addr : array u8.t;
      }.
      
      Definition Get_s6_addr :=
        Ref.map
          (fun α => Some α.(s6_addr))
          (fun β α => Some (α <| s6_addr := β |>)).
    End in6_addr.
    End in6_addr.
    
    Module  Impl_core_marker_Copy_for_libc_unix_align_in6_addr_t.
    Section Impl_core_marker_Copy_for_libc_unix_align_in6_addr_t.
      Definition Self : Set := libc.unix.align.in6_addr.t.
      
      Global Instance ℐ : core.marker.Copy.Trait Self := {
      }.
    End Impl_core_marker_Copy_for_libc_unix_align_in6_addr_t.
    End Impl_core_marker_Copy_for_libc_unix_align_in6_addr_t.
    
    Module  Impl_core_clone_Clone_for_libc_unix_align_in6_addr_t.
    Section Impl_core_clone_Clone_for_libc_unix_align_in6_addr_t.
      Definition Self : Set := libc.unix.align.in6_addr.t.
      
      (*
                  fn clone(&self) -> $i { *self }
      *)
      Definition clone (self : ref Self) : M libc.unix.align.in6_addr.t :=
        let* self := M.alloc self in
        let* α0 : ref libc.unix.align.in6_addr.t := M.read self in
        M.read (deref α0).
      
      Global Instance AssociatedFunction_clone :
        Notations.DoubleColon Self "clone" := {
        Notations.double_colon := clone;
      }.
      
      Global Instance ℐ : core.clone.Clone.Required.Trait Self := {
        core.clone.Clone.clone := clone;
        core.clone.Clone.clone_from := Datatypes.None;
      }.
    End Impl_core_clone_Clone_for_libc_unix_align_in6_addr_t.
    End Impl_core_clone_Clone_for_libc_unix_align_in6_addr_t.
  End align.
End unix.
